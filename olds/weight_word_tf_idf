#!/usr/bin/perl
use strict;
use warnings;
use diagnostics;
use utf8;
use Data::Dumper;
binmode(STDOUT, ":utf8");

###############
# READ first line of ./logs/tf_table.md, assign to array file_name_aref 
# READ and throw away second line 
# DECLARE hash word_weight_for_hh 
# FOR file_name_aref[j]
#   READ belowing one line and assign to array doc_freq_arr 
#   GET word from doc_freq_arr[0] 
#   CALCULATE document frequency for that word by using doc_freq_arr[1..$#file_name_aref]. 
#   CALCULATE log part. 
#   GET term freq for that doc by doc_freq_arr[j]. (word frequency) 
#  	CALCULATE 'weight' for that word 
#  	ASSIGN to word_weight_for_hh with key for word, value for 'weight' 
#  	WRITE into [each doc dir]
###############

my $path_tf_table = './logs/tf_table.md';

my ($file_name_aref, $tf_line_aoaref) = &read_tf_table();
my $doc_freq_for_href = &get_doc_freq();
#for my $j (0..$#$tf_line_aoaref) {
#			print "@{$tf_line_aoaref->[$j]}\n";
#}
my $log_part_for_href = &get_log_part();
my $tf_idf_for_href = &get_tf_idf();

sub write_tf_idf_file {
	my ($tf_idf_href, $path_destin) = @_;
	open my $fh_destin, '>:encoding(UTF-8)', $path_destin or die "Cannot open $path_destin: $!";
#	while (my ($key, $value) = each %$tf_idf_href) {
#		print $fh_destin "$key : $value\n";
#	}
	print $fh_destin "term | tf-idf score\n";
	print $fh_destin "--- | ---\n";
	for my $key (sort { $tf_idf_href->{$b} <=> $tf_idf_href->{$a} } keys %$tf_idf_href) {
		print $fh_destin "$key | $tf_idf_href->{$key}\n";
	}
	close $fh_destin;
}

sub get_tf_idf {

	for my $i (0..$#$file_name_aref) {
		my %tf_idf;
		my $path_dest = "./logs/$file_name_aref->[$i]/tf_idf_weight.md";
	
		for my $j (0..$#$tf_line_aoaref) {
			my $term_freq = $tf_line_aoaref->[$j]->[$i+1];
#			print "@{$tf_line_aoaref->[$j]}\n";
			$tf_idf{$tf_line_aoaref->[$j]->[0]} = $term_freq * $log_part_for_href->{$tf_line_aoaref->[$j]->[0]};
		}
		&write_tf_idf_file(\%tf_idf, $path_dest);
	}

}

sub get_log_part {
	my %log_part_for;
	while (my ($key, $value) =  each %$doc_freq_for_href) {
		my $log_part_value = ( log ( scalar @$file_name_aref / $value ) ) / log 10;
		$log_part_for{$key} = $log_part_value;
	}
 
	return \%log_part_for;
}

sub get_doc_freq {

	my %doc_freq_for;

	for my $j (0..$#$tf_line_aoaref) {
		my $word = shift @{$tf_line_aoaref->[$j]};
		my @word_freqs_ar = @{$tf_line_aoaref->[$j]};
#	print "$word :: @word_freqs_ar\n";
		my $doc_freq = 0;
		for my $num_doc (@word_freqs_ar) {
			$doc_freq++ if ($num_doc != 0);
		}
#print "$word :doc_freq: $doc_freq\n";
		$doc_freq_for{$word} = $doc_freq;
		unshift @{$tf_line_aoaref->[$j]}, $word;
	}

	return \%doc_freq_for;
}


sub read_tf_table {
### read every line of tf_table.md
	open my $fh_tf_table, '<:encoding(UTF-8)', $path_tf_table or die "Cannot open $path_tf_table: $!";
	my @tf_table_line_ar = <$fh_tf_table>;
	chomp @tf_table_line_ar;
	close $fh_tf_table;

	my (@file_name_ar, @third_to_last_aoa);
### assign first line to '$file_name_ar' and throw away second line
	@file_name_ar = split / \| /, shift @tf_table_line_ar; # take first line and assign to 'file_name_ar'
	shift @file_name_ar;
	shift @tf_table_line_ar; # throw away second line

### assign third to last line's references to 'aoa'
	while ( my $line = shift @tf_table_line_ar ) {
		my @word_and_nums_ar = split / \| /, $line;
		push @third_to_last_aoa, \@word_and_nums_ar;
	}

	return (\@file_name_ar, \@third_to_last_aoa);
}

