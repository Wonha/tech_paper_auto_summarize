#!/usr/bin/perl
use warnings;
use strict;
use diagnostics;
use utf8;
use MeCab;
binmode(STDERR, ":utf8");
binmode(STDOUT, ":utf8");
#####
# GET list of directory that include zero sized rel_study
# REPEAT with each zero sized rel_study file
	# SEPERATE document into paragraph
	# CALCULATE how many sentences each paragraph include.
	# MECAB each paragraph
	# GET rel score by keyword matching
	# PRINT the highes scored paragraph into input zero sized rel_study file.
#####


### 1. traverse log dir to find dir includes zero sized rel_study file
my $z_rel_dir_aref = &traverse();
for my $z_rel_dir (@$z_rel_dir_aref) {

	print "$z_rel_dir\n";
### 2. read origin doc from disk and seperate to paragraph (seperator: '\n{2,}')
	my $path_z_rel_origin = $z_rel_dir."/origin";
	my $origin_parag_aref = &read_list_paragraph (\$path_z_rel_origin);

### 3. calc how many sentence each paragraph has
	my $nums_sent_aref = &count_sent_in_parag ($origin_parag_aref);

### 4. execute mecab to get surface word's term frequency per each paragraph
	my $term_freq_for_parag_aohref = &get_surface_term_freq ($origin_parag_aref);

### 5. evaluate each pargraph's score by keyword matching to check whether appropriate for rel_study or not.
	my $score_parag_aref = &get_parag_score_by_rel_keyword_matching ($origin_parag_aref, $term_freq_for_parag_aohref);

### 6. devide the score by number of sentences in the paragraph
#	&devide_by_nums_sent ($score_parag_aref);

### 7. get the highest scored paragraph index
	my $highest_score_parag_idx = 0;
	for my $idx (1..$#$origin_parag_aref) {
		if ( $score_parag_aref->[$idx] > $score_parag_aref->[$highest_score_parag_idx] ) {
			$highest_score_parag_idx = $idx;
		}
	}

### 8. write contents of the highest scored paragraph to cur zero sized rel_file. 
	my $path_write = $z_rel_dir.'/related_study'; 
	open my $fh, '>:encoding(UTF-8)', $path_write or die "Can't open $path_write: $!";
	print $fh $origin_parag_aref->[$highest_score_parag_idx-2]."\n\n";
	print $fh $origin_parag_aref->[$highest_score_parag_idx-1]."\n\n";
	print $fh $origin_parag_aref->[$highest_score_parag_idx];
	print $fh "\nscore of this paragraph is $score_parag_aref->[$highest_score_parag_idx]\n"; 
	close $fh;

}

### print to STDOUT for debug
#for my $idx (0..$#$origin_parag_aref) {
#print "$origin_parag_aref->[$idx]\n";
#print "********** num of sent in thin parag : $nums_sent_aref->[$idx]\n"; 
#printf "********** score of this parag: %d\n", $score_parag_aref->[$idx];
#for (keys $term_freq_for_parag_aohref->[$idx]) {
#printf "%s: %d\n", $_, $term_freq_for_parag_aohref->[$idx]->{$_};
#}
#print "^^^^^^^^^^$origin_parag_aref->[$highest_score_parag_idx]\n";
#print "**********\n";
#}

### take no parameters, return array reference whose elem is path of dir including zero sized rel_study file.
sub traverse {
	my @zero_rel_dir_a;

	my $path_log = './logs';
	opendir my $dh_log, $path_log || die "Cannot open $path_log: $!";

	for my $log_entry (readdir $dh_log) {
		next if $log_entry eq '.' or $log_entry eq '..';
		$path_log = './logs/'.$log_entry;
		opendir my $dh_log_entry, $path_log || die "Cannnot open $path_log: $!";

		for my $file (readdir $dh_log_entry) {
			next if $file eq '.' or $file eq '..';
			next if $file ne 'related_study'; 
			my $pth_rel = $path_log."/".$file;
			next if !(-z $pth_rel); # filter non-zero sized related_study file
			($pth_rel) = $pth_rel =~ /(.*)\/.*/;
			push @zero_rel_dir_a, $pth_rel;
		}
		close $dh_log_entry;
	}
	close $dh_log;

	return \@zero_rel_dir_a;
}

### take var reference for file path. return array reference that elem is token(paragraph).
sub read_list_paragraph {
	my ($path_ref) = @_;
	open my $fh, '<:encoding(UTF-8)', $$path_ref or die "Cannot open $$path_ref: $!";
	my $contents = join '', <$fh>;
	close $fh;
	my @paragraphs = split /(?:\n){2,}/, $contents;
	return \@paragraphs;
}

### take array reference of paragraphs. return array refernce of sentences numbers included in each paragraph
sub count_sent_in_parag {
	my ($parags) = @_;

	my @nums_dots;
	for my $parag (@$parags) {
		my @tmps = $parag =~ /(．|。)/ug;
		my $num_dots = @tmps;
#		print "$parag\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!$num_dots\n";
		push @nums_dots, $num_dots; 
	}
	return \@nums_dots;
}

### take array reference of paragraphs. return array of hash reference where the hash indicates each surface frequency in paragraph.
sub get_surface_term_freq {
	my ($origin_parag_aref) = @_;

	my $model = new MeCab::Model( '' );
	my $c = $model->createTagger();
	my @term_freq_for_parag_aoh; # array of ananomous hash where the hash indicates term frequency for 'surface word'. each index of array is parags in cur doc.
	my $term_freq_for_parag_aohref = \@term_freq_for_parag_aoh;
	for my $idx (0..$#$origin_parag_aref) {
		for (my $m = $c->parseToNode($origin_parag_aref->[$idx]); $m; $m = $m->{next}) {
			$term_freq_for_parag_aohref->[$idx]->{$m->{surface}}++;
		}
	}
	return $term_freq_for_parag_aohref;
}

### take array reference of paragraphs, and term freq for paragraph aohref.
sub get_parag_score_by_rel_keyword_matching {
	my ($origin_parag_aref, $term_freq_for_parag_aohref) = @_;

	my $rel_regex = qr/
		cite|提案|比較|
		研究|方法|手法|
		我々|本(?:研究|手法|論文)|本稿|
		これ(?:まで|ら)の(?:研究|手法|方法)|
		しかし|一方|ただ|
		違い|異なる|異なり|
		(?:で|て)(?:は)?ない|いない|できない
		/ux;
	my @score_parag_a;
	for my $idx (0..$#$origin_parag_aref) {
		$score_parag_a[$idx] = 0;
		for my $key (keys %{$term_freq_for_parag_aohref->[$idx]}) {
			if ($key =~ $rel_regex) {
				$score_parag_a[$idx] += (1 * $term_freq_for_parag_aohref->[$idx]->{$key});
			}
		}
	}
	return \@score_parag_a;
}

#sub devide_by_nums_sent {
#for my $idx (0..$#$origin_parag_aref) {
#{
#no warnings;
#$nums_sent_aref->[$idx]++;
#$score_parag_aref->[$idx] /= $nums_sent_aref->[$idx];
#}
#}
#}
