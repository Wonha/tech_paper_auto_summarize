機能表現およびその用法\label{sec:fe}

\subsection{用例データベース}

森田ら\cite{Morita89aj}は，機能表現の中でも特に「単なる語の連接では
なく，表現形式全体として，個々の構成要素のプラス以上の独自の意味が生じて
いる」表現を{\bfseries 複合辞}と呼び，個々の構成要素の意味から構成的に表
現形式全体の意味を説明できるような表現とは区別している．現代語複合辞用例
集\cite{NLRI01aj-nlp}（以下，{\bfseries 複合辞用例集}と呼ぶ）は，主要な125
種類の複合辞について，用例を集成し，説明を加えたものである．

\begin{table}[t]
\setlength{\tabcolsep}{4pt}
  \caption{判定ラベル体系}
  \label{tbl:判定ラベル体系}
  \newcommand{\exlabel}[1]{}
\input{07t01.txt}
\end{table}

日本語複合辞用例データベース\cite{日本語複合辞用例データベースの作成と分
析}（以下，{\bfseries 用例データベース}と呼ぶ）は，機能表現の機械処理を研
究するための基礎データを提供することを目的として設計・編纂されたデータベー
スである．用例データベースは，複合辞用例集に収録されている125種類の複合
辞および，その異形（合計337種類の機能表現）を対象として，機能表現候補と一
致する表記のリストと，個々の機能表現候補に対して最大50個の用例を収録して
いる．また，用例は，毎日新聞1995年から収集されている．
そして，各機能表現候補が文中において果たしている働きを，
\tabref{tbl:判定ラベル体系}および次節に示す6種類の判定ラベルのうちから人手で判定
し，付与している．





\subsection{判定ラベル体系}
\label{subsec:label}

判定ラベルとは，機能表現候補が文中でどのような働きをしているかを表すラベ
ルであり，用例データベースでは\tabref{tbl:判定ラベル体系}の通り，6種類の
ラベルが設定されている．以下，個々の判定ラベルについて説明する．

用例データベースでは，IPA品詞体系（THiMCO97）の
形態素解析用辞書\cite{ipadic-2.6.1}に登録されている語から，「助詞・格助
詞・連語」として登録されている語を取り除いた残りの語を，語としている．
そして，ある機能表現候補が，1個以上の語，複合辞または慣用表現からなる列
である場合，その候補は判定単位として適切であるが，それ以外の場合は，その
候補は判定単位として不適切であるとして，判定ラベルBを付与している．
例えば，\tabref{tbl:判定ラベル体系}中の\strref{ex:A43-2000:B}に含まれる
機能表現候補「にかけて」は，「心配する」という意味の慣用表現「気にかける」
の一部が活用した形であり，先に述べた条件を満たしていない．したがって，
\strref{ex:A43-2000:B}には，判定ラベルB が付与される．

判定ラベルYは，機能表現候補の読みが，判定対象となっている機能表現の読み
と一致していないことを表す．例えば，「AうえでB」という形で，「Aした後でB」
という出来事の継起関係を表す機能表現「うえで」の用例として\tabref{tbl:判
定ラベル体系}中の\strref{ex:A12-1000:Y}を判定する場合を考える．この場合，
機能表現候補の読み「じょうで」と，判定対象となっている機能表現の読み「う
えで」が一致していないので．判定ラベルYを付与する．

判定ラベルCは，機能表現候補に内容的に働いている語が含まれていることを表
す．例えば，\tabref{tbl:判定ラベル体系}中の\strref{ex:A56-1000:C}の機能
表現候補に含まれる動詞「とる」は本来の意味で内容的に働いているので，判定
ラベルとしてCを付与する．

判定ラベルF, A, Mは，機能表現候補が機能的に働いているとき，その機能を区別
するためのラベルである．判定ラベルFは，機能表現候補が複合辞用例集で説明
されている用法で働いていることを表し，判定ラベルAは，機能表現候補が接続
詞的に働いていることを表す．判定ラベルMは，これら以外の機能的な働きをし
ていることを表す．
例として，機能表現候補「ところで」の用例として\tabref{tbl:判定ラベル体系}中の
\strref{ex:A22-1000:F}$\sim$（\ref{ex:A22-1000:M}）を判定する場合を考え
る．\strref{ex:A22-1000:F}では，複合辞用例集で説明されて
いる通りに逆接の働きをしているので，判定ラベルFを付与する．
\strref{ex:A22-1000:A}では，文頭で接続詞的に働いているの
で，判定ラベルAを付与する．\strref{ex:A22-1000:M}では，
形式名詞「ところ」を含めて機能的に働いているので，判定ラベルMを付与する．
本論文では，判定ラベルF, A, Mが付与される機能表現候補を検出対象とする．







機能表現検出\label{sec:chunker}

\subsection{SVMを用いたチャンキングによる機能表現検出}
\label{sec:chunking_using_svm}

\subsubsection{Support Vector Machines}
サポートベクトルマシンは，素性空間を超平面で分割することによりデータを2 
つのクラスに分類する二値分類器である\cite{SVM,tinysvm}．2つのクラスを正
例，負例とすると，学習データにおける正例と負例の間隔（マージン）を最大にす
る超平面を求め，それを用いて分類を行う．すなわち，以下の識別関数$f(x)$の
値によってクラスを判別することと等価である．
{\allowdisplaybreaks
\begin{align}
  \label{eq:svm1}
  f({\bf x}) & =  sgn \left( \sum^{l}_{i=1} \alpha_i y_i K({\bf x}_i,{\bf x}) + b \right)\\[0.5ex]
  b & =  -\frac{\max_{i,y_i=-1}b_i + \min_{i,y_i=1}b_i}{2}\nonumber\\[0.5ex]
  b_i & =  \sum^l_{j=1} \alpha_j y_j K({\bf x}_j,{\bf x}_i) \nonumber
\end{align}
}
ここで${\bf x}$は識別したい事例の文脈（素性の集合），${\bf x}_{i}$と
$y_i(i=1,...,l, y_i\in\{1,-1\})$は学習データの文脈とクラスである．また，
関数$sgn(x)$は，$x \geq 0$のときに1，$x < 0$のときに$-1$となる二値関数で
ある．各$\alpha_i$は，式(\ref{eq:svm5})と式(\ref{eq:svm6})の制約のもとで
式(\ref{eq:svm4})の$L(\mbox{\boldmath $\alpha$})$を最大にするものである．
\begin{align}
  L(\mbox{\boldmath $\alpha$}) & = \sum^l_{i=1} \alpha_i - \frac{1}{2} \sum^l_{i,j=1} \alpha_i \alpha_j y_i y_j K({\bf x_i},{\bf x_j})
  \label{eq:svm4}\\
  & 0 \leq \alpha_i \leq C \, \, (i=1,...,l)
  \label{eq:svm5}\\
  & \sum^l_{i=1} \alpha_i y_i = 0 
  \label{eq:svm6}
\end{align}
関数$K$はカーネル関数と呼ばれ，様々なものが提案されているが，本論文では
次式で定義される多項式カーネルを用いる．
\begin{equation}
  \label{eq:svm3}
  K({\bf x},{\bf y})  = ({\bf x}\cdot{\bf y} + 1)^d
\end{equation}
ここで，$C,d$は実験的に設定される定数である．

予備実験を行い，次数$d$の値として$1,\ 2,\ 3$の3通りを検討した．$d=2,3$とした
場合はF値に大きな差はなかったが，$d=1$とするとF値がかなり悪化した
\footnote{評価尺度（F値）については\ref{subsec:評価尺度}節を参照．}．ただし，
$d=3$とした場合は，$d=2$とした場合に比べて，学習時間がかなり増加したため，
本論文では，次数$d$の値として2を用いる．また，予備実験において，マージン
$C$の値として$1,0.1,0.01,0.001,0.0001$の5通りを検討したところ，F値に大き
な差が見られなかったため，本論文ではマージン$C$の値として1を用いる．


\subsubsection{チャンクタグの表現法}

本論文では，検出対象とする機
能表現全てに共通のチャンクタグを，形態素を単位として付与するという手順で，
機能表現検出を行う．チャンクタグは，そのチャンクタグが付与された形態素が，
検出対象とする機能表現のいずれかに含まれるか否かを表し，チャンクの範囲を
示す要素とチャンクの用法を示す要素という2つの要素からなる．以下，本論文
で用いたチャンクタグについて詳細を述べる．

チャンクの範囲を示す要素の表現法としては，以下で示すようなIOB2フォーマッ
ト\cite{Sang00a}が広く利用されている．本論文でも，このIOB2フォーマットを
使用する．
\begin{center}
  \begin{tabular}{cl}
    \textbf{I} & チャンクに含まれる形態素（先頭以外） \\
    \textbf{O} & チャンクに含まれない形態素 \\
    \textbf{B} & チャンクの先頭の形態素 \\
  \end{tabular}
\end{center}

ただし，本論文ではIOB2フォーマットを，さらに\tabref{tbl:chunktag}のよう
に機能表現候補の用法によって細分化したものを使用する．
この表において，機能的用法とは，用例データベースで設定されている判定ラベル
のうち，ラベルF, A, Mのいずれかが付与されたものを表し，内容的用法とは，判定
ラベルのうち，ラベルC, Y, Bのいずれかが付与されたものを表している．
本論文では，2つの用法のうち，機能的用法を検出する機能表現検出器を作成す
る．

\begin{table}[t]
 \caption{チャンクタグ}
 \label{tbl:chunktag}
\input{07t02.txt}
\end{table}


SVMは二値分類器であるため，そのままでは，2クラスの分類しか扱えない．本論
文のようにクラス数が3以上の場合には，複数の二値分類器を組み合わせて拡張
する必要がある．本論文では，拡張手法としては，広く利用されているペアワイ
ズ法を用いる．ペアワイズ法とは，$N$個のクラスに属するデータを分類する時，
異なる2つのクラスのあらゆる組み合わせに対する二値分類器を作り，得られた
$N(N-1)/2$個の二値分類器の多数決により，クラスを決定する方法である．

\subsubsection{素性}
\label{subsec:feature}

学習$\cdot$解析に用いる素性について説明する．文頭から$i$番目の形態素
$m_{i}$に対して与えられる素性$F_{i}$は，形態素素性$MF(m_{i})$，チャンク
素性$CF(i)$，チャンク文脈素性$OF(i)$の3つ組として，次式によって定義され
る．
\begin{equation}
  F_{i} = \langle MF(m_{i}), CF(i), OF(i) \rangle
\end{equation}
形態素素性$MF(m_{i})$は，形態素解析器によって形態素$m_{i}$に付与される情
報である．
本論文では，IPA品詞体系（THiMCO97）の形態素解析用辞書\cite{ipadic-2.6.1}
に基づいて動作する形態素解析器ChaSenによる形態素解析結果を入力としている
ため，以下の10種類の情報（表層形，品詞，品詞細分類$1\sim 3$，活用型，活
用形，原形，読み，発音）を形態素素性として用いた．

チャンク素性$CF(i)$とチャンク文脈素性$OF(i)$は，$i$番目の位置に出現して
いる機能表現候補に基づいて定まる素性である．今，下図のような形態素列
$m_j\ldots m_i \ldots m_k$からなる機能表現候補$E$が存在したとする．
\begin{center}
  \begin{tabular}[tb]{ccccc}
    $m_{j-2}$ & $m_{j-1}$ &\fbox{$m_j\ldots m_i \ldots m_k$} & $m_{k+1}$ & $m_{k+2}$\\
    & & 機能表現候補$E$ & & 
  \end{tabular}
\end{center}
チャンク素性$CF(i)$は，$i$番目の位置に出現している機能表現候補$E$を構成
している形態素の数（機能表現候補の長さ）と，機能表現候補中における形態素
$m_{i}$の相対的位置の情報の2つ組である．チャンク文脈素性$OF(i)$は，$i$番
目の位置に出現している機能表現候補の直前2形態素および直後2形態素の形態素
素性とチャンク素性の組である．すなわち，$i$番目の位置に対する$CF(i)$およ
び$OF(i)$は次式で表される．
\begin{align*}
CF(i) &= \langle k-j+1 ,\;\; i-j+1 \rangle\\
OF(i) &= \langle ~MF(m_{j-2}), CF(m_{j-2}), MF(m_{j-1}), CF(m_{j-1}), \\
& ~~MF(m_{k+1}), CF(m_{k+1}), MF(m_{k+2}), CF(m_{k+2}) ~\rangle
\end{align*}

機能表現検出においては，1つ
の文中に，複数の機能表現候補が部分的に重複して現れる場合を考慮する必要が
ある．ここでは，そのような場合のチャンク素性とチャンク文脈素性の付与方法
について考える．
複数の機能表現候補が部分的に重複して現れている場合，それらの候補全てに基
づいてチャンク素性とチャンク文脈素性を付与するという方法と，それらの候補
から何らかの基準を用いて1つの候補を選択し，選択された候補に基づいてチャ
ンク素性とチャンク文脈素性を付与するという方法が考えられる．
前者の方法で付与された素性を参照して機械学習を行うには，重複する可能性が
ある機能表現の全ての組み合わせに対して十分な量の学習事例が必要であるが，
そのような学習事例を準備することは現実的ではない．
そのため，本論文では，後者の方法を採り，次の優先順序に従って選ばれた1つ
の機能表現候補に基づいて，チャンク素性とチャンク文脈素性を付与することに
する．
\begin{description}
 \item[1] 先頭の形態素が，最も左側の機能表現候補を用いる．
 \item[2] 1を満たす候補が複数存在する場合は，その中で最も形態素数が多い
	    候補を用いる．
\end{description}
例えば，\strref{ex:nakutehaikemasen}には，「なくてはいけません」および
「てはいけません」という2つの機能表現候補が，部分的に重複して現れている．
\begin{example}
  \item 慎重にし\kern0pt\OriUnderline{なく}\kern0pt\OriUnderline{\OriUnderline{てはいけません}}．
	\label{ex:nakutehaikemasen}
\end{example}
この場合，「なくてはいけません」という機能表現候補が，「てはいけません」
という機能表現候補に比べて，より左の形態素から始まっているので，「なくて
はいけません」という機能表現候補に基づいて，チャンク素性とチャンク文脈素
性を付与する．
また，\strref{ex:toiumonono}には，「という」および「というものの」という
2つの機能表現候補が，部分的に重複して現れている．
\begin{example}
  \item それが試合\kern0pt\OriUnderline{\OriUnderline{という}}\kern0pt\OriUnderline{ものの}{\kern0pt}難しさだ．
	\label{ex:toiumonono}
\end{example}
この場合，2つの機能表現候補の先頭の形態素は同一であるため，より形態素数
が多い候補「というものの」に基づいて，チャンク素性とチャンク文脈素性を付
与する．

$i$番目の形態素に対するチャンクタグを$c_{i}$とすると，チャンクタグ
$c_{i}$の学習・解析を行う場合に用いる素性として，$i$番目の形態素および前
後2形態素に付与された素性$F_{i-2},F_{i-1},F_{i},F_{i+1},F_{i+2}$と，直前
2形態素に付与されたチャンクタグ$c_{i-2},c_{i-1}$を用いる
(\figref{yamcha})．解析時には，解析によって得られたチャンクタグを，直前2 
形態素に付与されたチャンクタグとして順に利用して，解析を行う．前後3形態
素の素性と直前3形態素のチャンクタグを用いて学習・解析を行う予備実験も行っ
たが，前後2形態素の素性と直前2形態素のチャンクタグを用いた場合に比べて，
殆んど性能が変わらなかったため，前後2形態素の素性と直前2形態素のチャンク
タグを用いる．

\begin{figure}[t]
\begin{center}
\includegraphics{14-5ia7f1.eps}
\end{center}
 \caption{YamChaの学習・解析}
 \label{yamcha}
\end{figure}


\subsection{実験と考察}
\label{subsec:実験と考察}

本論文で提案する機能表現検出器に対して，学習および解析を行い，各ベースラ
インと性能を比較した．

\subsubsection{データセット}
\label{subsec:dataset}

文を単位として学習を行うには，文中に現れる全ての機能表現候補に対して判定
ラベルが付与されたデータが必要である．本論文では，判別が必要な111表現の
なかでも，新聞記事においても，機能的用法と内容的用法の両方が一定の割合で
出現する59表現を対象とする．そして，こ
れらの59表現に対する用例として用例データベースに収録されている2583例文に
ついて，これらの例文に含まれている全ての機能表現候補に判定ラベルを付与し
た．さらに，この例文の内，京都テキストコーパスに含まれる文と重複する154
文を除いた．本論文では，この2429文（各表現について20用例以上収録）を機能表
現検出器の訓練データとして使用する．

ただし，用例データベースでは，機能表現候補の先頭と末尾が形態素境界と一致
しない候補にも判定ラベルが付与されているが，本論文では，形態素解析結果に
基づいて機能表現を検出する立場をとるため，そのような機能表現候補に対する
判定ラベルは取り除くことにする．
具体的には，以下のような処理を行った．最初に，用例データベースに収録され
ている用例を，IPA品詞体系の形態素解析用辞書に基づいて動作する形態素解析
器ChaSenを用いて形態素解析した．次に，形態素解析結果中に，形態素解析用辞
書に「助詞・格助詞・連語」や「接続詞」として登録されており，かつ実験の対
象である59表現となる複合語が含まれ
ていた場合は，その複合語を，構成要素である形態素の列に置き換えた．このよ
うにして得られた形態素解析結果と機能表現候補を照合し，先頭と末尾が形態素
境界と一致しなかった判定ラベルを取り除いた．

また，機能表現検出器の評価データとしては，京都テキストコーパスに収録され
ている文を対象とし，その文に含まれている
全ての機能表現候補に対して，判定ラベルを付与したものを使用した．

\begin{table}[t]
 \caption{データセットの各統計量}
 \label{tbl:dataset}
\input{07t03.txt}
\end{table}


訓練・評価データに含まれる各用法の数と，全形態素数を\tabref{tbl:dataset}
に示す．1つの例文に，複数の機能表現候補が出現する場合があるため，機能表
現候補の総数は，例文の総数よりも多くなっている．
また，評価データ（京都テキストコーパス）における機能表現候補の分布は，
\tabref{tbl:kyoto_FE_freq1}の通りである．

\tabref{tbl:kyoto_FE_freq1}には，京都テキストコーパスにおける機能表現の分
布以外に，機能表現の用例データベースにおける分類，その分類に基づいた
係り受け解析の学習の際に使用する品詞体系の情報が示されている．
機能表現の分類には，接続詞相当の働きをするもの（接続詞型），
助詞相当の働きをするもの（助詞型），助動詞相当の働きをするもの（助
動詞型）の3種類存在する．さらに，助詞型の機能表現は，接続助詞相当
のもの（接続辞類），格助詞相当のもの（連用辞類），連体助詞相当のもの（連
体辞類）に細分類することができる．
係り受け解析の学習の際に使用する品詞体系は，上で述べた機能表現の分類に
基づいて作成されている．

また，\tabref{tbl:kyoto_FE_freq1}には，「といっても」，「とはいえ」など，
接続詞型と助詞型の二つの分類に重複して登場している表現がある．これは，
「といっても」などの機能表現候補は，接続詞型，助詞型のどちらの機能表現に
もなりうるからである．

\begin{table}[p]
  \caption{京都テキストコーパスにおける機能表現候補の出現頻度}
\vspace{-2pt}
  \label{tbl:kyoto_FE_freq1}
\input{07t04.txt}
\end{table}





\subsubsection{評価尺度}
\label{subsec:評価尺度}

実験を評価する際の尺度には，以下の式で表される精度，再現率，F値，および
判別率を用いた．
{\allowdisplaybreaks
\begin{align*}
  \mbox{精度} &= \frac{\mbox{検出に成功したチャンク数}}{\mbox{解析によって検出されたチャンク数}} \\[1zw]
  \mbox{再現率} &= \frac{\mbox{検出に成功したチャンク数}}{\mbox{評価データに存在するチャンク数}} \\[1zw]
  \mbox{Ｆ値} &= \frac{2 \times \mbox{精度} \times \mbox{再現率}}{\mbox{精度} + \mbox{再現率}}  \\[1zw]
  \mbox{判別率} &= \frac{\mbox{正解した判定ラベル数}}{\mbox{全判定ラベル数}} 
\end{align*}
}

\subsubsection{既存の解析系に対する評価基準}
\label{subsec:既存の解析系}

既存の解析系(JUMAN/KNPおよびChaSen/CaboCha)は，形態素解析および構文解析
段階で処理が必要となる機能表現を，部分的に処理の対象としている．しかし，
明示的に機能表現を取り扱うという立場は取っていないため，機能表現のチャン
キングというタスクに対する既存の解析系の性能を評価するには，その出力をど
のように解釈するかを定めておく必要がある．

形態素解析器JUMANと構文解析器KNPの組み合わせでは，機能表現は以下のように
処理される．最初に，接続詞として形態素解析用辞書に登録されている機能表現
は，形態素解析時に検出される．次に，構文解析時に，解析規則に記述された特
定の形態素列が現れると，直前の文節の一部としてまとめたり，直前の文節から
の係り受けのみを受けるように制約を加えて，機能表現である可能性を考慮した
解析を行う．
一方，IPA品詞体系（THiMCO97）の形態素解析用辞書\cite{ipadic-2.6.1}を用い
た形態素解析器ChaSenと，京都テキストコーパス\cite{Kurohashi97bj}から
機械学習したモデルを用いた構文解析器CaboChaの組合わせでは，機能表
現は以下のように処理される．最初に，形態素解析用辞書に「助詞・格助詞・連
語」や「接続詞」として登録されている機能表現は，形態素解析時に検出される．
また，「ざるを得ない」などの表現は直前の文節の一部としてまとめられ，機能
的な表現として解析される．

既存の解析系でも，一部の機能表現については，機能的な働きをしていることを
考慮した解析が行われているが，その対応状況は不十分である．
判定ラベルF, A, Mのいずれかが付与されている用例の内，少なくとも1つの用例が，
機能的に働いている可能性を考慮して解析され，かつ，判定ラベルC, Y, Bのいず
れかが付与された用例の内，少なくとも1つの用例が，機能的に働いている可能
性を考慮せずに解析されている場合，その機能表現は，用法が正しく区別される
可能性があるとする．
用例データベースに50用例が収録されている表現で，かつ，機能的な意味で用い
られている場合と，それ以外の意味で用いられている場合の両方が適度な割合で
出現する表現は，59種類ある\footnote{
  ここでの機能表現の種類数には，
  \cite{Tsuchiya07aj}における記述とは差異があるが，これは，
  本論文においては，
  「機能的な意味で用いられている場合と，
   それ以外の意味で用いられている場合の両方が適度な割合で出現する」
   という条件の認定方法の改訂を行ったためである．
}．その内，
JUMAN/KNPによって用法が正しく区別される可能性がある表現は，23種類である．
一方，ChaSen/CaboChaによって用法が正しく区別される可能性がある表現は21種
類である．
また，用例データベースに収録されている337表現全体では，新聞上の実際の用
法の割合に関係なく識別が必要と思われる表現は，111種類である．その内，
JUMAN/KNPによって用法が正しく区別される可能性がある表現は43種類，
ChaSen/CaboChaによって用法が正しく区別される可能性がある表現は40種類であ
る．




\subsubsection{評価結果}

本論文で提案する機能表現検出器と，各ベースラインの検出性能を
\tabref{tab:kekka_gaiyou}に示す．
\tabref{tab:kekka_gaiyou}において，「頻度最大の判定ラベル」とは，全ての
候補部分に対して頻度最大の判定ラベル（機能的用法）を付与した場合の検出性能で
ある．「人手作成の規則による検出器」は，
\cite{形態素情報を用いた日本語機能表現の検出}による検出性能である．

\begin{table}[b]
  \caption{各検出器の検出性能(\%)}
  \label{tab:kekka_gaiyou}
\input{07t05.txt}
\end{table}


\tabref{tab:kekka_gaiyou}中の「CRFを用いた検出器」は，Conditional Random
Fileds (CRF)\cite{CRF}によって学習・解析を行った場合の検出性能である．CRF 
とは，系列ラベリング問題のために設計された識別モデルであり，正しい系列ラ
ベリングを他の全ラベリング候補と弁別するような学習を行う．
本論文では，CRFによる学習・解析用ツールとして
CRF++\footnote{\url{http://chasen.org/~taku/software/CRF++/}}を利用した．
素性としては，前後2形態素の形態素素性，チャンク素性，チャンク文脈素性と，
直前2形態素のチャンクタグを用いた．学習時には，事前分布としてGaussian
Priorを用いて事後確率を最大化することにより，パラメータを正則化した\cite{TKudo04b}．
その際のハイパーパラメータとしては，1, 2, 3, 4, 5の5通りの値について予備実験を
行い，最も良い性能を示した1を採用した．

\tabref{tab:kekka_gaiyou}中の「SVM を用いた検出器」は，本論文の提案する 
SVM によるチャンキング手法による検出性能である．表より，提案手法は，学習・
解析に用いた素性に関わらず，ベースラインおよび人手作成の規則による検出よ
りも，高いF値を示した．また，提案手法は，CRFを用いた検出器よりも，高いF 
値を示した．

\tabref{tab:kekka_gaiyou}を見ると，「JUMAN/KNP」，「ChaSen/CaboCha」が他の手法
に比べて著しく性能が悪いのがわかる．
これは，\ref{subsec:既存の解析系}節で述べたように，「JUMAN/KNP」，
「ChaSen/CaboCha」が取り扱っている機能表現が，本実験の対象である59表現の
内，23表現，21表現となっているのが，一つの原因である．
もう一つの原因は，評価対象の大部分を占める「という」という表現に対する再
現率が，両解析系において，著しく低いということである．

学習・解析に用いた素性の違いによる性能の違いを検討すると，形態素素性のみ
を用いた場合よりも形態素素性とチャンク素性を併用した場合の方が，形態素素
性とチャンク素性を併用した場合よりも形態素素性，チャンク素性，チャンク文脈
素性すべてを使用した場合の方が検出性能がすぐれていることから，チャンク素
性とチャンク文脈素性は，機能表現を検出するための素性として適当であったと
いえる．

全ての素性を用いて学習と解析を行った機能表現検出器において，評価用データ
において10用例以上存在し，他の表現と比較して極端に検出性能が悪く，F値が
70に達しなかった表現は，「にあたり」の1表現である．
例えば，\strref{ex:niatari-F}に含まれる「にあたり」は，「（新規参入という） 
時が来たのに当面して」という機能的な意味で用いられている．それに対して，
\strref{ex:niatari-C}および\strref{ex:niatari-C2}に含まれる「にあたり」
は，内容的に用いられている．
\begin{example}
  \item 新規参入\underline{にあたり}，潜在的なニーズを掘り起こそうと，転勤族
	を主な対象にした．\label{ex:niatari-F} 
  \item お神酒の瓶が女性\underline{にあたり}，けがをする事故があった．
	\label{ex:niatari-C} 
  \item 米国の最先端の科学者が知恵を結集して原爆の開発\underline{にあたり}，
	一九四五年八月に広島・長崎に原爆が投下された．
	\label{ex:niatari-C2} 
\end{example}
しかし，SVMを用いた検出器は，\strref{ex:niatari-F}と
\strref{ex:niatari-C}の用法を内容的用法として，また，
\strref{ex:niatari-C2}の用法を機能的用法として検出してしまい，用法を
正しく判定できたのは\strref{ex:niatari-C}のみであった．
仮に，\strref{ex:niatari-F}と\strref{ex:niatari-C}を区別することだけが必
要ならば，直前がサ変名詞であることが有効な素性として働く可能性があるが，
\strref{ex:niatari-C2}は，そのような素性だけではうまく判定できない．
このように，提案手法によっては適切に検出できない表現もごく少数ながら存在
するが，他の表現については，\tabref{tab:kekka_gaiyou}に示したように適切
に検出することができた．


機能表現を考慮した係り受け解析器
\label{sec:係り受け解析}

\subsection{SVMを用いた統計的係り受け解析}
\label{subsec:CaboCha}
本論文では，SVMを用いた統計的係り受け解析手法\cite{TKudo02aj}を
利用して係り受け解析を行っている．
工藤らの手法は，入力文$B$に対する，条件付き確率$P(D\!\mid\!B$)を最大にする係り受け
パターン列$D$を求める従来の手法と異なり，チャンキングを段階的に適用すること
によって係り受け解析を実現している．ここで，入力文$B$とは，あらかじ
め文節にまとめられ，属性付けされた文節列${b_1,b_2,...,b_m}$を表しており，
係り受けパターン列$D$とは，${Dep(1),Dep(2),...,Dep(m-1)}$を表している．た
だし，$Dep(i)$は，文節$b_i$の係り先文節番号を示す．
実際には，以下のようなアルゴリズムによって，段階的にチャンキングを行っている．
\begin{enumerate}
 \item 入力文節すべてに対し，係り受けが未定であることを示すOタグを付与する．
 \item 文末の文節を除くOタグが付与された文節に対し，直後の文節に係るか
       否かを判定．
       係る場合はDタグを付与．文末から2番目の文節には無条件にDタグを付与．
 \item Oタグの直後にあるすべてのDタグおよびその文節を削除する．
 \item 残った文節が一つ（文末の文節）の場合は終了，それ以外は2．に戻る．
\end{enumerate}
このアルゴリズムによる解析例を\figref{fig:example_dep}に示す．


\begin{figure}[b]
\begin{center}
\includegraphics{14-5ia7f2.eps}
\end{center}
 \caption{係り受け解析の流れ}
 \label{fig:example_dep}
\end{figure}



\figref{fig:example_dep}では，入力として「彼は彼女の温かい真心に感動し
た．」という文を文節単位に区切ったものが与えられている．そして，それぞれ
の文節に対して，係り受けが未定であることを示すOタグが付与される．その後，Oタ
グが付与されている文節に対し，直後の文節に係るか否かを判定する
（文末から2番目の文節は無条件にDタグを付与）．
すると，「温かい」，「真心に」という文節
が直後の文節に係ると推定されるので，Dタグが付与される．その後，Oタグの直
後にあるすべてのDタグおよびその文節を削除するので，「温かい」という文節
を削除する．この文節を削除できる理由としては，
削除される文節は，非交差条件を考慮すると，
他の文節から修飾されることはなく，
それ自身の係り先もすでに同定されているため，
係り受け候補として考慮する必要がなくなるためである．以上の作業を，
入力が「感動した．」という文節のみになるまで続けると，「彼は」が「感動した．」
に，「彼女の」が「真心に」に，「温かい」が「真心に」に，「真心に」が「感
動した．」に係ると判定することができる．
このアルゴリズムにおける係り受け関係の同定には，SVMを用いている．この場
合，従来手法では，訓練データ中の全ての2文節の候補を学習事例として抽出し
ていた．しかし，このような抽出方法では，学習データを不必要に多くして
しまい，学習の効率が悪い．それに対して，工藤らの手法では，学習も解析時と
同じアルゴリズムを採用している．つまり，学習で使われる文節のセットは，上
のアルゴリズムにおいて隣り合う文節のみであるので，負例が不必要に増えるの
を防ぐことができる．

SVMの学習・解析に使用する素性は，\tabref{tbl:feature}に示す通りである．


\begin{table}[b]
\setlength{\tabcolsep}{4pt}
    \caption{係り受けの学習・解析に使う素性}
    \label{tbl:feature}
\input{07t06.txt}
\end{table}


\begin{figure}[b]
\begin{center}
\includegraphics{14-5ia7f3.eps}
\end{center}
 \caption{係り受け解析例}
 \label{fig:feature_for_cabocha}
\end{figure}


静的素性とは，文節の作成時に決定される素性を示しており，動的素性と
は，係り関係そのものを素性としたものである．また，主辞とは文節内で品詞が
特殊，助詞，接尾辞となるものを除き，文末に一番近い形態素を
指し，語形とは文節内で品詞が特殊となるものを除き，文末に一番近い形態素の
ことを指す．


具体的に\figref{fig:feature_for_cabocha}の文において，「して」という文節
と「参加した」という文節の係り受け関係の学習・解析に使われる素性について
見てみる．
まず，係り元，係り先の文節である「して」と「参加した」の主辞，
語形の情報と，各文節における括弧の有無，句読点の有無，文節の位置（文頭，
文末）が素性として使用される．次に文節間の素性として，文節の距離，文節の
間に存在する全ての助詞の見出し，文節間の括弧の有無，文節間の句読点の有無
が使用される．「して」と「参加した」の間には，「運動会に」という文節が存
在している．よって，文節の距離としては，「2以上5以下」（素性として1，2以
上5以下，6以上の3通りの素性を選択）が使用される．文節の間に存在する全ての
助詞の見出しとしては，「運動会に」に含まれる「に」が使用される．括弧の有
無は，「運動会に」には括弧が含まれていないので「0」，句読点の有無も，句
読点が含まれていないので「0」が使用される．
動的素性としては，係り先文節「参加した」に係る文節「運動会に」の語形見出し
「に」と，係り元文節「して」に係る文節「保護者と」の語形見出し「と」と，
係り先文節「参加した」が係る文節「私は，」の主辞品詞「名詞」が使用される．
以上の素性の一覧を\tabref{tbl:feature_for_cabocha}に示す．

\begin{table}[b]
  \caption{係り受けの学習・解析に使う素性の例}
  \label{tbl:feature_for_cabocha}
\input{07t07.txt}
\end{table}


\subsection{機能表現を考慮した係り受け解析}
\label{subsec:機能表現を考慮した学習}

次に，本論文で提案する，機能表現を考慮した係り受け解析の流れを
\figref{fig:flow1}に示す．
まず，ChaSenによって形態素解析を行う．次に，形態素解析結果に対して，
機能表現検出器を用いて，機能表現検出を行う．その際，検出された機能表現
は，構成している形態素列を連結し，一つの形態素として出力される．最後に，
その出力結果に対して，機能表現を考慮した係り受け解析器を用いて，係り受け
解析を行う．

\begin{figure}[b]
\begin{center}
\includegraphics{14-5ia7f4.eps}
\end{center}
 \caption{機能表現を考慮した係り受け解析}
 \label{fig:flow1}
\end{figure}


機能表現を考慮した係り受け解析器の学習において，形態素を連結して作られた
機能表現に対して，新たに品詞名を付与する必要がある．
用例データベースによると，機能表現は，接続詞相当の働きをするもの（接続詞
型）と助詞相当の働きをするもの（助詞型），助動詞相当の働きをするもの（助
動詞型）に分類することができる．さらに，助詞型の機能表現は，接続助詞相当
のもの（接続辞類），格助詞相当のもの（連用辞類），連体助詞相当のもの（連
体辞類）に細分類することができる．
そこで，本論文では，\tabref{tbl:kyoto_FE_freq1}のような品詞体系を採用した．
そして，現代語複合辞用例集~\cite{NLRI01aj-nlp}に掲載されている
各機能表現と品詞分類との対応に基づいて，機能表現への品詞の付与を行った．
特に，接続詞型になる可能性のある機能表現については，
文頭に出現した場合は接続詞型とし，文頭以外の場合は助詞型とした．

本論文では，SVMを用いた統計的係り受け解析手法の学習・解析ツールとして
CaboChaを利用して，機能表現を考慮した係り受け解析器を実現している．
その際に，CaboChaの係り受け解析における訓練データを，
機能表現を考慮したものに変換している．機能表現を考慮した係り受け解析の訓練デー
タを作成するために必要な情報は二つある．一つは，
既存の係り受け情報付与済みコーパスから得られる係り受け関係の情報である．
もう一つは，対象文における機能表現の情報である．
この二つの情報を用いて\figref{fig:学習の流れ}の流れで，訓練デー
タを作成し，学習を行っている．

\begin{figure}[t]
\begin{center}
\includegraphics{14-5ia7f5.eps}
\end{center}
 \caption{機能表現を考慮した係り受け解析器の学習の流れ}
 \label{fig:学習の流れ}
\end{figure}


\figref{fig:学習の流れ}の訓練データ作成モジュールでは，末尾の文節から順
に以下の手順に従って処理を行っている．
\begin{description}
 \label{アルゴリズム}
 \item[1.] 機能表現を構成している形態素列を連結する．
 \item[2.] 連結する形態素列が複数の文節にまたがっている場合，文節の連結
	    も行う．連結後の文節の係り先は，連結文節中の末尾の文節の係り
	    先を採用する．
 \item[3a.] 助詞・助動詞型の機能表現の場合で，
	    連結した文節の先頭形態素が，機能表現の場合は，直前の文節に連結す
	    る．連結後の文節の係り先は，連結文節中の末尾の文節の係り先を
	    採用する．
 \item[3b.] 接続詞型の機能表現の場合で，一文節が機能表現のみで構成され
	    ない場合は，
	    機能表現のみで一文節を構成するように文節を分解する．
 \item[4.] 文節の連結，分解に伴う文節ID，係り先の変化を反映させる．
\end{description}
\figref{fig:訓練データ作成の流れ}に，
機能表現を考慮した係り受け解析の訓練データ作成の例を示す．
\figref{fig:訓練データ作成の流れ}中には，「にあたり」という機能表現が存在している．
よって，まず格助詞「に」と動詞「あたる」の連用形「あたり」の連結を行う．
それに伴い，「年頭に」という文節と「あたり」という文節の連結を行う．連結
された「年頭にあたり」という文節の係り先は，「あたり」の係り先を採用する．
次に，「年頭にあたり」以降の文節の文節IDと，「年頭にあたり」以降の文節に
係る文節の係り先文節IDに対して変更を加える．
このような作業をすることによって，機能表現を考慮していない係り受け解析の
訓練データを，機能表現を考慮したものに変換していく．

\begin{figure}[t]
\begin{center}
\includegraphics{14-5ia7f6.eps}
\end{center}
 \caption{機能表現を考慮した係り受け解析の訓練データ作成の例}
 \label{fig:訓練データ作成の流れ}
\end{figure}

機能表現を考慮しない係り受け解析の学習(\figref{fig:feature_for_cabocha1})と
機能表現を考慮した係り受け解析の学習(\figref{fig:feature_for_cabocha2})
の間では，学習に使用する素性が異なる．
以下では，\figref{fig:feature_for_cabocha1}における「して」という文節，
および，\figref{fig:feature_for_cabocha2}における「保護者として」という
文節と，「参加した」という文節の間の係り受け関係に注目する．
まず，\figref{fig:feature_for_cabocha2}においては，文節の区切りが機能表
現を考慮したものになっている．それによって，注目する係り受け関係の係り元
文節が，\figref{fig:feature_for_cabocha1}では「して」という文節なのに対し，
\figref{fig:feature_for_cabocha2}では「保護者として」となる．
この違いによって，\tabref{tbl:feature_change_for_cabocha}に示すように，
実際に学習・解析に使用する素性の間にも差違が生じる．
具体的には，係り元の文節が「して」から「保護者として」と変化することによっ
て，係り元の主辞が「し」から「保護」に，係り元の語形が「て」から「として」
に変化している．また，係り元の文節に係る文節も「保護者と」から「甥
の」に変化している．
このように学習・解析に使用する素性を機能表現を考慮したものにすることによっ
て，機能表現を考慮した係り受け解析が実現される．


\begin{figure}[t]
\begin{center}
\includegraphics{14-5ia7f7.eps}
\end{center}
 \caption{係り受け解析例（機能表現考慮せず）}
 \label{fig:feature_for_cabocha1}
\end{figure}
\begin{figure}[t]
\begin{center}
\includegraphics{14-5ia7f8.eps}
\end{center}
 \caption{係り受け解析例（機能表現考慮）}
 \label{fig:feature_for_cabocha2}
\end{figure}



\begin{table}[t]
  \caption{係り受けの学習・解析に使う素性の変化}
  \label{tbl:feature_change_for_cabocha}
\input{07t08.txt}
\end{table}



\subsection{実験と考察}
\label{subsec:係り受け解析の実験}
本論文で提案する係り受け解析器に対して，学習および解析を行い，各ベースラ
インと性能比較をした．
この際，対象とする表現は，機能表現検出器が対象としていた59表現である．
実験で使われた機能表現検出器は，\ref{subsec:実験と考察}節の実験の訓練デー
タで訓練を行ったものである．この際，素性は，形態素素性，チャンク素性，チャ
ンク文脈素性を使用した．

\subsubsection{データセット}
\label{subsec:cabocha_dataset}

係り受け解析器の訓練データとしては，
京都テキストコーパス~\cite{Kurohashi97bj}を利用する．
ここで，オリジナルの京都テキストコーパスには，機能表現の情報は付与されて
いないので，まず，京都テキストコーパス38,400文に存在する全ての機能表現に
対して，判定ラベルを付与した．
これらのデータセットに含まれる各用法の数と，全文数を\tabref{tbl:cabocha_dataset}
に示す．


\begin{table}[t]
  \caption{係り受け解析器用データセットの各統計量}
  \label{tbl:cabocha_dataset}
\input{07t09.txt}
\end{table}



\subsubsection{評価尺度}

実験結果を評価する際の尺度には，以下の式で表される係り先精度，
係り元精度を用いた．
\begin{align*}
  \mbox{係り先精度} &= 
\frac{\mbox{係り先を正しく同定できた文節数}}{\mbox{機能表現候補を含む文節数}} \\[1zw]
  \mbox{係り元精度} &= 
\frac{\mbox{係り元を正しく同定できた文節数}}{\mbox{機能表現候補を含む文節数}} 
\end{align*}

\subsubsection{評価結果および考察}



\begin{table}[b]
  \caption{係り受け解析の評価結果(\%)}
  \label{tbl:cabocha_result}
\input{07t10.txt}
\end{table}


機能表現を考慮した係り受け解析器と各ベースラインの
精度を\tabref{tbl:cabocha_result}に示す．
評価においては，京都テキストコーパスを訓練・評価データとする10分割交差検
定を行った．
\tabref{tbl:cabocha_result}中の「CaboCha（機能表現抜き）」は，IPAdic辞書に連語
として登録されている機能表現の内，評価対象の機能表現にあたるものを機能表
現を構成している形態素に分解し，CaboChaの訓練を再度行ったものである．
それらの機能表現は，59表現中「ところが」，「にあたって」，「にあたり」，「にかけて」，
「に従い」，「につき」，「につけ」，「にとり」，「にかけ」，「として」，
「をめぐる」，「という」，「といった」の13表現である．
「CaboCha（オリジナル）」は，上記の連語に対して構成形態素への分解を行わず，
CaboChaの訓練を再度行ったものである．
また，機能表現を考慮した係り受け解析では，
機能表現判定ラベルとして，
\ref{sec:chunker}~節で述べた検出器により出力された結果を用いた場合，
および，人手で付与した正解判定ラベルを用いた場合の二通りを評価した．

\tabref{tbl:cabocha_result}を見ると，提案手法は，係り先精度については，
ベースラインとの差を見ることができなかったが，係り元精度については，ベー
スラインと比べ統計的に有意な改善（有意水準5\%）が見られた
\footnote{
  提案手法（検出器出力使用）の係り元精度
  $0.740(=\frac{5251}{7096})$および
  ベースライン（CaboCha（機能表現抜き）の係り元精度
  $0.725(=\frac{5148}{7100})$の母比率の差の検定による．
}．
よって，機能表現検出や，機能表現を考慮することが，係り元の推定に特に効果
的であることがわかった．


\begin{figure}[b]
\begin{center}
\includegraphics{14-5ia7f9a.eps}\\
 (a) ベースラインによる失敗例\\[.2cm] 
\includegraphics{14-5ia7f9b.eps}\\
 (b) 提案手法による成功例
\end{center}
 \caption{係り元同定の改善例（助詞型—連用辞類）}
 \label{depended_sample}
\end{figure}
\begin{figure}[b]
\begin{center}
\includegraphics{14-5ia7f10a.eps}\\
 (a) ベースラインによる失敗例\\[.2cm] 
\includegraphics{14-5ia7f10b.eps}\\
 (b) 提案手法による成功例
\end{center}
 \caption{係り先同定の改善例（助動詞型）}
 \label{depend_sample}
\end{figure}


係り元の推定が改善された\underline{事例}においては，
\underline{機能表現}を構成している形態素列を独立に扱うのではなく，一つの機能表現として検
出していることが効果的に働いていると考えられる．
例えば，「として」の場合，構成要素である形態素列を独立に扱うと，
\figref{depended_sample} (a)の例文において，「チェチェン進行を」
という文節が動詞を含む文節に係りやすいという特徴をもっているので，誤って
「して」という文節に係ってしまう．それに対して，「として」を機能表現とし
て扱った場合，\figref{depended_sample} (b)のように，「チェチェン進行を」
の係り先を正しく推定することができる．

また，係り元の推定が改悪された
\underline{事例}においては，機能表現の検出ミスが改
悪の主な原因であった．

一方，係り先の推定が改善された
\underline{事例}
においては，
\underline{機能表現}
を構成している形態素列
を独立した形態素として扱うのではなく，一つの機能表現として検出しているこ
とが効果的に働いていると考えられる．
例えば，「として」の場合，構成要素である形態素列を独立に扱うと．
\figref{depend_sample} (a)のように構成要素の一つである動詞「する」の連用
形「し」が，最も近くの動詞と並立に係ると誤判定されることがある．それに対して，
「として」を機能表現として扱った場合，\figref{depend_sample} (b)のように
係り先を正しく判定できる．


逆に，機能表現を考慮した係り受け解析によって，
係り先の推定精度があまり改善されない原因としては，
内容的用法と機能的用法とで，係り先の特徴が変化する表現がほとんど
ないということが挙げられる．
例えば，『「絶対に勝つ」という自信満々な人もいた．』
という文章において，「という」は内容的に働いており，その係り先は「人も」
という文節である．また，『トップという名にこだわる人もいる．』とい
う文章において，「という」は機能的に働いており，その係り先は「名に」とい
う文節である．この様に，「という」は内容的用法であっても機能的用法であっ
ても，名詞を含む文節に係る特徴がある．

機能表現候補が内容的用法・機能的用法のいずれであるかということは，
上で述べた通り，係り先の推定精度の改善にはあまり寄与しない．
しかし，機能表現の係り先は，機能表現の品詞分類に依存する傾向がある．
例えば，連用辞類の「として」は，動詞を含む文節に係るという特徴を
もっているが，連体辞類の「という」は，動詞を含む文節には係らず，
名詞を含む文節に係るという特徴を持っている．
提案手法では，機能表現の品詞分類を行っており，機能表現の品詞を，
相当する既存の品詞の細分類として扱うことによって，この問題を解決している．
それに対して，CaboCha（オリジナル）では，全ての機能表現に対して，「助詞—格助詞—連語」と
いう品詞を与え，機能表現の品詞分類を全く行っていない．このことが原因で，
CaboCha（オリジナル）の係り先精度が，CaboCha（機能表現抜き）の係り先精度を
下回っていると考えられる．






