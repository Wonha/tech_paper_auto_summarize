森田ら[CITE]は，機能表現の中でも特に「単なる語の連接ではなく，表現形式全体として，個々の構成要素のプラス以上の独自の意味が生じている」表現を複合辞と呼び，個々の構成要素の意味から構成的に表現形式全体の意味を説明できるような表現とは区別している．
現代語複合辞用例集[CITE]（以下，複合辞用例集と呼ぶ）は，主要な125種類の複合辞について，用例を集成し，説明を加えたものである．
日本語複合辞用例データベース[CITE]（以下，用例データベースと呼ぶ）は，機能表現の機械処理を研究するための基礎データを提供することを目的として設計・編纂されたデータベースである．
用例データベースは，複合辞用例集に収録されている125種類の複合辞および，その異形（合計337種類の機能表現）を対象として，機能表現候補と一致する表記のリストと，個々の機能表現候補に対して最大50個の用例を収録している．
また，用例は，毎日新聞1995年から収集されている．
そして，各機能表現候補が文中において果たしている働きを，\tabref{tbl:判定ラベル体系}および次節に示す6種類の判定ラベルのうちから人手で判定し，付与している．
判定ラベルとは，機能表現候補が文中でどのような働きをしているかを表すラベルであり，用例データベースでは\tabref{tbl:判定ラベル体系}の通り，6種類のラベルが設定されている．
以下，個々の判定ラベルについて説明する．
用例データベースでは，IPA品詞体系（THiMCO97）の形態素解析用辞書[CITE]に登録されている語から，「助詞・格助詞・連語」として登録されている語を取り除いた残りの語を，語としている．
そして，ある機能表現候補が，1個以上の語，複合辞または慣用表現からなる列である場合，その候補は判定単位として適切であるが，それ以外の場合は，その候補は判定単位として不適切であるとして，判定ラベルBを付与している．
例えば，\tabref{tbl:判定ラベル体系}中の\strref{ex:A43-2000:B}に含まれる機能表現候補「にかけて」は，「心配する」という意味の慣用表現「気にかける」の一部が活用した形であり，先に述べた条件を満たしていない．
したがって，\strref{ex:A43-2000:B}には，判定ラベルBが付与される．
判定ラベルYは，機能表現候補の読みが，判定対象となっている機能表現の読みと一致していないことを表す．
例えば，「AうえでB」という形で，「Aした後でB」という出来事の継起関係を表す機能表現「うえで」の用例として\tabref{tbl:判定ラベル体系}中の\strref{ex:A12-1000:Y}を判定する場合を考える．
この場合，機能表現候補の読み「じょうで」と，判定対象となっている機能表現の読み「うえで」が一致していないので．
判定ラベルYを付与する．
判定ラベルCは，機能表現候補に内容的に働いている語が含まれていることを表す．
例えば，\tabref{tbl:判定ラベル体系}中の\strref{ex:A56-1000:C}の機能表現候補に含まれる動詞「とる」は本来の意味で内容的に働いているので，判定ラベルとしてCを付与する．
判定ラベルF, A, Mは，機能表現候補が機能的に働いているとき，その機能を区別するためのラベルである．
判定ラベルFは，機能表現候補が複合辞用例集で説明されている用法で働いていることを表し，判定ラベルAは，機能表現候補が接続詞的に働いていることを表す．
判定ラベルMは，これら以外の機能的な働きをしていることを表す．
例として，機能表現候補「ところで」の用例として\tabref{tbl:判定ラベル体系}中の\strref{ex:A22-1000:F}[MATH]（[REF_ex:A22-1000:M]）を判定する場合を考える．
\strref{ex:A22-1000:F}では，複合辞用例集で説明されている通りに逆接の働きをしているので，判定ラベルFを付与する．
\strref{ex:A22-1000:A}では，文頭で接続詞的に働いているので，判定ラベルAを付与する．
\strref{ex:A22-1000:M}では，形式名詞「ところ」を含めて機能的に働いているので，判定ラベルMを付与する．
本論文では，判定ラベルF, A, Mが付与される機能表現候補を検出対象とする．
サポートベクトルマシンは，素性空間を超平面で分割することによりデータを2つのクラスに分類する二値分類器である[CITE]．
2つのクラスを正例，負例とすると，学習データにおける正例と負例の間隔（マージン）を最大にする超平面を求め，それを用いて分類を行う．
すなわち，以下の識別関数[MATH]の値によってクラスを判別することと等価である．
f(x) & = sgn \left( \sum^{l}_{i=1} \alpha_i y_i K(x_i,x) + b \right)
[0.5ex] b & = -\frac_{i,y_i=-1}b_i + \min_{i,y_i=1}b_i{2}\nonumber
[0.5ex] b_i & = \sum^l_{j=1} \alpha_j y_j K(x_j,x_i) \nonumber
ここで[MATH]は識別したい事例の文脈（素性の集合），[MATH]と[MATH]は学習データの文脈とクラスである．
また，関数[MATH]は，[MATH]のときに1，[MATH]のときに[MATH]となる二値関数である．
各[MATH]は，式([REF_eq:svm5])と式([REF_eq:svm6])の制約のもとで式([REF_eq:svm4])の[MATH]\alpha[MATH]を最大にするものである．
L(\boldmath[MATH]) & = \sum^l_{i=1} \alpha_i - \frac{1}{2} \sum^l_{i,j=1} \alpha_i \alpha_j y_i y_j K(x_i,x_j)
& 0 \leq\alpha_i \leq C   (i=1,.
..
,l)
& \sum^l_{i=1} \alpha_i y_i = 0
関数[MATH]はカーネル関数と呼ばれ，様々なものが提案されているが，本論文では次式で定義される多項式カーネルを用いる．
ここで，[MATH]は実験的に設定される定数である．
予備実験を行い，次数[MATH]の値として[MATH]の3通りを検討した．
[MATH]とした場合はF値に大きな差はなかったが，[MATH]とするとF値がかなり悪化した．
ただし，[MATH]とした場合は，[MATH]とした場合に比べて，学習時間がかなり増加したため，本論文では，次数[MATH]の値として2を用いる．
また，予備実験において，マージン[MATH]の値として[MATH]の5通りを検討したところ，F値に大きな差が見られなかったため，本論文ではマージン[MATH]の値として1を用いる．
本論文では，検出対象とする機能表現全てに共通のチャンクタグを，形態素を単位として付与するという手順で，機能表現検出を行う．
チャンクタグは，そのチャンクタグが付与された形態素が，検出対象とする機能表現のいずれかに含まれるか否かを表し，チャンクの範囲を示す要素とチャンクの用法を示す要素という2つの要素からなる．
以下，本論文で用いたチャンクタグについて詳細を述べる．
チャンクの範囲を示す要素の表現法としては，以下で示すようなIOB2フォーマット[CITE]が広く利用されている．
本論文でも，このIOB2フォーマットを使用する．
ただし，本論文ではIOB2フォーマットを，さらに\tabref{tbl:chunktag}のように機能表現候補の用法によって細分化したものを使用する．
この表において，機能的用法とは，用例データベースで設定されている判定ラベルのうち，ラベルF, A, Mのいずれかが付与されたものを表し，内容的用法とは，判定ラベルのうち，ラベルC, Y, Bのいずれかが付与されたものを表している．
本論文では，2つの用法のうち，機能的用法を検出する機能表現検出器を作成する．
SVMは二値分類器であるため，そのままでは，2クラスの分類しか扱えない．
本論文のようにクラス数が3以上の場合には，複数の二値分類器を組み合わせて拡張する必要がある．
本論文では，拡張手法としては，広く利用されているペアワイズ法を用いる．
ペアワイズ法とは，[MATH]個のクラスに属するデータを分類する時，異なる2つのクラスのあらゆる組み合わせに対する二値分類器を作り，得られた[MATH]個の二値分類器の多数決により，クラスを決定する方法である．
学習[MATH]解析に用いる素性について説明する．
文頭から[MATH]番目の形態素[MATH]に対して与えられる素性[MATH]は，形態素素性[MATH]，チャンク素性[MATH]，チャンク文脈素性[MATH]の3つ組として，次式によって定義される．
形態素素性[MATH]は，形態素解析器によって形態素[MATH]に付与される情報である．
本論文では，IPA品詞体系（THiMCO97）の形態素解析用辞書[CITE]に基づいて動作する形態素解析器ChaSenによる形態素解析結果を入力としているため，以下の10種類の情報（表層形，品詞，品詞細分類[MATH]，活用型，活用形，原形，読み，発音）を形態素素性として用いた．
チャンク素性[MATH]とチャンク文脈素性[MATH]は，[MATH]番目の位置に出現している機能表現候補に基づいて定まる素性である．
今，下図のような形態素列[MATH]からなる機能表現候補[MATH]が存在したとする．
チャンク素性[MATH]は，[MATH]番目の位置に出現している機能表現候補[MATH]を構成している形態素の数（機能表現候補の長さ）と，機能表現候補中における形態素[MATH]の相対的位置の情報の2つ組である．
チャンク文脈素性[MATH]は，[MATH]番目の位置に出現している機能表現候補の直前2形態素および直後2形態素の形態素素性とチャンク素性の組である．
すなわち，[MATH]番目の位置に対する[MATH]および[MATH]は次式で表される．
CF(i) &= \langle k-j+1 ,\;\; i-j+1 \rangle
OF(i) &= \langle MF(m_{j-2}), CF(m_{j-2}), MF(m_{j-1}), CF(m_{j-1}),
&   MF(m_{k+1}), CF(m_{k+1}), MF(m_{k+2}), CF(m_{k+2})  \rangle
機能表現検出においては，1つの文中に，複数の機能表現候補が部分的に重複して現れる場合を考慮する必要がある．
ここでは，そのような場合のチャンク素性とチャンク文脈素性の付与方法について考える．
複数の機能表現候補が部分的に重複して現れている場合，それらの候補全てに基づいてチャンク素性とチャンク文脈素性を付与するという方法と，それらの候補から何らかの基準を用いて1つの候補を選択し，選択された候補に基づいてチャンク素性とチャンク文脈素性を付与するという方法が考えられる．
前者の方法で付与された素性を参照して機械学習を行うには，重複する可能性がある機能表現の全ての組み合わせに対して十分な量の学習事例が必要であるが，そのような学習事例を準備することは現実的ではない．
そのため，本論文では，後者の方法を採り，次の優先順序に従って選ばれた1つの機能表現候補に基づいて，チャンク素性とチャンク文脈素性を付与することにする．
先頭の形態素が，最も左側の機能表現候補を用いる．
1を満たす候補が複数存在する場合は，その中で最も形態素数が多い候補を用いる．
例えば，\strref{ex:nakutehaikemasen}には，「なくてはいけません」および「てはいけません」という2つの機能表現候補が，部分的に重複して現れている．
慎重にし\kern0pt\OriUnderline{なく}\kern0pt\OriUnderline{てはいけません}．
この場合，「なくてはいけません」という機能表現候補が，「てはいけません」という機能表現候補に比べて，より左の形態素から始まっているので，「なくてはいけません」という機能表現候補に基づいて，チャンク素性とチャンク文脈素性を付与する．
また，\strref{ex:toiumonono}には，「という」および「というものの」という2つの機能表現候補が，部分的に重複して現れている．
それが試合\kern0pt\OriUnderline{という}\kern0pt\OriUnderline{ものの}難しさだ．
この場合，2つの機能表現候補の先頭の形態素は同一であるため，より形態素数が多い候補「というものの」に基づいて，チャンク素性とチャンク文脈素性を付与する．
[MATH]番目の形態素に対するチャンクタグを[MATH]とすると，チャンクタグ[MATH]の学習・解析を行う場合に用いる素性として，[MATH]番目の形態素および前後2形態素に付与された素性[MATH]と，直前2形態素に付与されたチャンクタグ[MATH]を用いる(\figref{yamcha})．
解析時には，解析によって得られたチャンクタグを，直前2形態素に付与されたチャンクタグとして順に利用して，解析を行う．
前後3形態素の素性と直前3形態素のチャンクタグを用いて学習・解析を行う予備実験も行ったが，前後2形態素の素性と直前2形態素のチャンクタグを用いた場合に比べて，殆んど性能が変わらなかったため，前後2形態素の素性と直前2形態素のチャンクタグを用いる．
本論文で提案する機能表現検出器に対して，学習および解析を行い，各ベースラインと性能を比較した．
文を単位として学習を行うには，文中に現れる全ての機能表現候補に対して判定ラベルが付与されたデータが必要である．
本論文では，判別が必要な111表現のなかでも，新聞記事においても，機能的用法と内容的用法の両方が一定の割合で出現する59表現を対象とする．
そして，これらの59表現に対する用例として用例データベースに収録されている2583例文について，これらの例文に含まれている全ての機能表現候補に判定ラベルを付与した．
さらに，この例文の内，京都テキストコーパスに含まれる文と重複する154文を除いた．
本論文では，この2429文（各表現について20用例以上収録）を機能表現検出器の訓練データとして使用する．
ただし，用例データベースでは，機能表現候補の先頭と末尾が形態素境界と一致しない候補にも判定ラベルが付与されているが，本論文では，形態素解析結果に基づいて機能表現を検出する立場をとるため，そのような機能表現候補に対する判定ラベルは取り除くことにする．
具体的には，以下のような処理を行った．
最初に，用例データベースに収録されている用例を，IPA品詞体系の形態素解析用辞書に基づいて動作する形態素解析器ChaSenを用いて形態素解析した．
次に，形態素解析結果中に，形態素解析用辞書に「助詞・格助詞・連語」や「接続詞」として登録されており，かつ実験の対象である59表現となる複合語が含まれていた場合は，その複合語を，構成要素である形態素の列に置き換えた．
このようにして得られた形態素解析結果と機能表現候補を照合し，先頭と末尾が形態素境界と一致しなかった判定ラベルを取り除いた．
また，機能表現検出器の評価データとしては，京都テキストコーパスに収録されている文を対象とし，その文に含まれている全ての機能表現候補に対して，判定ラベルを付与したものを使用した．
訓練・評価データに含まれる各用法の数と，全形態素数を\tabref{tbl:dataset}に示す．
1つの例文に，複数の機能表現候補が出現する場合があるため，機能表現候補の総数は，例文の総数よりも多くなっている．
また，評価データ（京都テキストコーパス）における機能表現候補の分布は，\tabref{tbl:kyoto_FE_freq1}の通りである．
\tabref{tbl:kyoto_FE_freq1}には，京都テキストコーパスにおける機能表現の分布以外に，機能表現の用例データベースにおける分類，その分類に基づいた係り受け解析の学習の際に使用する品詞体系の情報が示されている．
機能表現の分類には，接続詞相当の働きをするもの（接続詞型），助詞相当の働きをするもの（助詞型），助動詞相当の働きをするもの（助動詞型）の3種類存在する．
さらに，助詞型の機能表現は，接続助詞相当のもの（接続辞類），格助詞相当のもの（連用辞類），連体助詞相当のもの（連体辞類）に細分類することができる．
係り受け解析の学習の際に使用する品詞体系は，上で述べた機能表現の分類に基づいて作成されている．
また，\tabref{tbl:kyoto_FE_freq1}には，「といっても」，「とはいえ」など，接続詞型と助詞型の二つの分類に重複して登場している表現がある．
これは，「といっても」などの機能表現候補は，接続詞型，助詞型のどちらの機能表現にもなりうるからである．
実験を評価する際の尺度には，以下の式で表される精度，再現率，F値，および判別率を用いた．
精度&= \frac{検出に成功したチャンク数}{解析によって検出されたチャンク数}
[1zw]再現率&= \frac{検出に成功したチャンク数}{評価データに存在するチャンク数}
[1zw]Ｆ値&= \frac{2 \times精度\times再現率}{精度+再現率}
[1zw]判別率&= \frac{正解した判定ラベル数}{全判定ラベル数}
既存の解析系(JUMAN/KNPおよびChaSen/CaboCha)は，形態素解析および構文解析段階で処理が必要となる機能表現を，部分的に処理の対象としている．
しかし，明示的に機能表現を取り扱うという立場は取っていないため，機能表現のチャンキングというタスクに対する既存の解析系の性能を評価するには，その出力をどのように解釈するかを定めておく必要がある．
形態素解析器JUMANと構文解析器KNPの組み合わせでは，機能表現は以下のように処理される．
最初に，接続詞として形態素解析用辞書に登録されている機能表現は，形態素解析時に検出される．
次に，構文解析時に，解析規則に記述された特定の形態素列が現れると，直前の文節の一部としてまとめたり，直前の文節からの係り受けのみを受けるように制約を加えて，機能表現である可能性を考慮した解析を行う．
一方，IPA品詞体系（THiMCO97）の形態素解析用辞書[CITE]を用いた形態素解析器ChaSenと，京都テキストコーパス[CITE]から機械学習したモデルを用いた構文解析器CaboChaの組合わせでは，機能表現は以下のように処理される．
最初に，形態素解析用辞書に「助詞・格助詞・連語」や「接続詞」として登録されている機能表現は，形態素解析時に検出される．
また，「ざるを得ない」などの表現は直前の文節の一部としてまとめられ，機能的な表現として解析される．
既存の解析系でも，一部の機能表現については，機能的な働きをしていることを考慮した解析が行われているが，その対応状況は不十分である．
判定ラベルF, A, Mのいずれかが付与されている用例の内，少なくとも1つの用例が，機能的に働いている可能性を考慮して解析され，かつ，判定ラベルC, Y, Bのいずれかが付与された用例の内，少なくとも1つの用例が，機能的に働いている可能性を考慮せずに解析されている場合，その機能表現は，用法が正しく区別される可能性があるとする．
用例データベースに50用例が収録されている表現で，かつ，機能的な意味で用いられている場合と，それ以外の意味で用いられている場合の両方が適度な割合で出現する表現は，59種類ある．
その内，JUMAN/KNPによって用法が正しく区別される可能性がある表現は，23種類である．
一方，ChaSen/CaboChaによって用法が正しく区別される可能性がある表現は21種類である．
また，用例データベースに収録されている337表現全体では，新聞上の実際の用法の割合に関係なく識別が必要と思われる表現は，111種類である．
その内，JUMAN/KNPによって用法が正しく区別される可能性がある表現は43種類，ChaSen/CaboChaによって用法が正しく区別される可能性がある表現は40種類である．
本論文で提案する機能表現検出器と，各ベースラインの検出性能を\tabref{tab:kekka_gaiyou}に示す．
\tabref{tab:kekka_gaiyou}において，「頻度最大の判定ラベル」とは，全ての候補部分に対して頻度最大の判定ラベル（機能的用法）を付与した場合の検出性能である．
「人手作成の規則による検出器」は，[CITE]による検出性能である．
\tabref{tab:kekka_gaiyou}中の「CRFを用いた検出器」は，Conditional Random Fileds (CRF)[CITE]によって学習・解析を行った場合の検出性能である．
CRFとは，系列ラベリング問題のために設計された識別モデルであり，正しい系列ラベリングを他の全ラベリング候補と弁別するような学習を行う．
本論文では，CRFによる学習・解析用ツールとしてCRF++を利用した．
素性としては，前後2形態素の形態素素性，チャンク素性，チャンク文脈素性と，直前2形態素のチャンクタグを用いた．
学習時には，事前分布としてGaussian Priorを用いて事後確率を最大化することにより，パラメータを正則化した[CITE]．
その際のハイパーパラメータとしては，1, 2, 3, 4, 5の5通りの値について予備実験を行い，最も良い性能を示した1を採用した．
\tabref{tab:kekka_gaiyou}中の「SVMを用いた検出器」は，本論文の提案するSVMによるチャンキング手法による検出性能である．
表より，提案手法は，学習・解析に用いた素性に関わらず，ベースラインおよび人手作成の規則による検出よりも，高いF値を示した．
また，提案手法は，CRFを用いた検出器よりも，高いF値を示した．
\tabref{tab:kekka_gaiyou}を見ると，「JUMAN/KNP」，「ChaSen/CaboCha」が他の手法に比べて著しく性能が悪いのがわかる．
これは，[REF_subsec:既存の解析系]節で述べたように，「JUMAN/KNP」，「ChaSen/CaboCha」が取り扱っている機能表現が，本実験の対象である59表現の内，23表現，21表現となっているのが，一つの原因である．
もう一つの原因は，評価対象の大部分を占める「という」という表現に対する再現率が，両解析系において，著しく低いということである．
学習・解析に用いた素性の違いによる性能の違いを検討すると，形態素素性のみを用いた場合よりも形態素素性とチャンク素性を併用した場合の方が，形態素素性とチャンク素性を併用した場合よりも形態素素性，チャンク素性，チャンク文脈素性すべてを使用した場合の方が検出性能がすぐれていることから，チャンク素性とチャンク文脈素性は，機能表現を検出するための素性として適当であったといえる．
全ての素性を用いて学習と解析を行った機能表現検出器において，評価用データにおいて10用例以上存在し，他の表現と比較して極端に検出性能が悪く，F値が70に達しなかった表現は，「にあたり」の1表現である．
例えば，\strref{ex:niatari-F}に含まれる「にあたり」は，「（新規参入という）時が来たのに当面して」という機能的な意味で用いられている．
それに対して，\strref{ex:niatari-C}および\strref{ex:niatari-C2}に含まれる「にあたり」は，内容的に用いられている．
新規参入にあたり，潜在的なニーズを掘り起こそうと，転勤族を主な対象にした．
お神酒の瓶が女性にあたり，けがをする事故があった．
米国の最先端の科学者が知恵を結集して原爆の開発にあたり，一九四五年八月に広島・長崎に原爆が投下された．
しかし，SVMを用いた検出器は，\strref{ex:niatari-F}と\strref{ex:niatari-C}の用法を内容的用法として，また，\strref{ex:niatari-C2}の用法を機能的用法として検出してしまい，用法を正しく判定できたのは\strref{ex:niatari-C}のみであった．
仮に，\strref{ex:niatari-F}と\strref{ex:niatari-C}を区別することだけが必要ならば，直前がサ変名詞であることが有効な素性として働く可能性があるが，\strref{ex:niatari-C2}は，そのような素性だけではうまく判定できない．
このように，提案手法によっては適切に検出できない表現もごく少数ながら存在するが，他の表現については，\tabref{tab:kekka_gaiyou}に示したように適切に検出することができた．
本論文では，SVMを用いた統計的係り受け解析手法[CITE]を利用して係り受け解析を行っている．
工藤らの手法は，入力文[MATH]に対する，条件付き確率[MATH])を最大にする係り受けパターン列[MATH]を求める従来の手法と異なり，チャンキングを段階的に適用することによって係り受け解析を実現している．
ここで，入力文[MATH]とは，あらかじめ文節にまとめられ，属性付けされた文節列[MATH]を表しており，係り受けパターン列[MATH]とは，[MATH]を表している．
ただし，[MATH]は，文節[MATH]の係り先文節番号を示す．
実際には，以下のようなアルゴリズムによって，段階的にチャンキングを行っている．
入力文節すべてに対し，係り受けが未定であることを示すOタグを付与する．
文末の文節を除くOタグが付与された文節に対し，直後の文節に係るか否かを判定．
係る場合はDタグを付与．
文末から2番目の文節には無条件にDタグを付与．
Oタグの直後にあるすべてのDタグおよびその文節を削除する．
残った文節が一つ（文末の文節）の場合は終了，それ以外は2．
に戻る．
このアルゴリズムによる解析例を\figref{fig:example_dep}に示す．
\figref{fig:example_dep}では，入力として「彼は彼女の温かい真心に感動した．
」という文を文節単位に区切ったものが与えられている．
そして，それぞれの文節に対して，係り受けが未定であることを示すOタグが付与される．
その後，Oタグが付与されている文節に対し，直後の文節に係るか否かを判定する（文末から2番目の文節は無条件にDタグを付与）．
すると，「温かい」，「真心に」という文節が直後の文節に係ると推定されるので，Dタグが付与される．
その後，Oタグの直後にあるすべてのDタグおよびその文節を削除するので，「温かい」という文節を削除する．
この文節を削除できる理由としては，削除される文節は，非交差条件を考慮すると，他の文節から修飾されることはなく，それ自身の係り先もすでに同定されているため，係り受け候補として考慮する必要がなくなるためである．
以上の作業を，入力が「感動した．
」という文節のみになるまで続けると，「彼は」が「感動した．
」に，「彼女の」が「真心に」に，「温かい」が「真心に」に，「真心に」が「感動した．
」に係ると判定することができる．
このアルゴリズムにおける係り受け関係の同定には，SVMを用いている．
この場合，従来手法では，訓練データ中の全ての2文節の候補を学習事例として抽出していた．
しかし，このような抽出方法では，学習データを不必要に多くしてしまい，学習の効率が悪い．
それに対して，工藤らの手法では，学習も解析時と同じアルゴリズムを採用している．
つまり，学習で使われる文節のセットは，上のアルゴリズムにおいて隣り合う文節のみであるので，負例が不必要に増えるのを防ぐことができる．
SVMの学習・解析に使用する素性は，\tabref{tbl:feature}に示す通りである．
静的素性とは，文節の作成時に決定される素性を示しており，動的素性とは，係り関係そのものを素性としたものである．
また，主辞とは文節内で品詞が特殊，助詞，接尾辞となるものを除き，文末に一番近い形態素を指し，語形とは文節内で品詞が特殊となるものを除き，文末に一番近い形態素のことを指す．
具体的に\figref{fig:feature_for_cabocha}の文において，「して」という文節と「参加した」という文節の係り受け関係の学習・解析に使われる素性について見てみる．
まず，係り元，係り先の文節である「して」と「参加した」の主辞，語形の情報と，各文節における括弧の有無，句読点の有無，文節の位置（文頭，文末）が素性として使用される．
次に文節間の素性として，文節の距離，文節の間に存在する全ての助詞の見出し，文節間の括弧の有無，文節間の句読点の有無が使用される．
「して」と「参加した」の間には，「運動会に」という文節が存在している．
よって，文節の距離としては，「2以上5以下」（素性として1，2以上5以下，6以上の3通りの素性を選択）が使用される．
文節の間に存在する全ての助詞の見出しとしては，「運動会に」に含まれる「に」が使用される．
括弧の有無は，「運動会に」には括弧が含まれていないので「0」，句読点の有無も，句読点が含まれていないので「0」が使用される．
動的素性としては，係り先文節「参加した」に係る文節「運動会に」の語形見出し「に」と，係り元文節「して」に係る文節「保護者と」の語形見出し「と」と，係り先文節「参加した」が係る文節「私は，」の主辞品詞「名詞」が使用される．
以上の素性の一覧を\tabref{tbl:feature_for_cabocha}に示す．
次に，本論文で提案する，機能表現を考慮した係り受け解析の流れを\figref{fig:flow1}に示す．
まず，ChaSenによって形態素解析を行う．
次に，形態素解析結果に対して，機能表現検出器を用いて，機能表現検出を行う．
その際，検出された機能表現は，構成している形態素列を連結し，一つの形態素として出力される．
最後に，その出力結果に対して，機能表現を考慮した係り受け解析器を用いて，係り受け解析を行う．
機能表現を考慮した係り受け解析器の学習において，形態素を連結して作られた機能表現に対して，新たに品詞名を付与する必要がある．
用例データベースによると，機能表現は，接続詞相当の働きをするもの（接続詞型）と助詞相当の働きをするもの（助詞型），助動詞相当の働きをするもの（助動詞型）に分類することができる．
さらに，助詞型の機能表現は，接続助詞相当のもの（接続辞類），格助詞相当のもの（連用辞類），連体助詞相当のもの（連体辞類）に細分類することができる．
そこで，本論文では，\tabref{tbl:kyoto_FE_freq1}のような品詞体系を採用した．
そして，現代語複合辞用例集[CITE]に掲載されている各機能表現と品詞分類との対応に基づいて，機能表現への品詞の付与を行った．
特に，接続詞型になる可能性のある機能表現については，文頭に出現した場合は接続詞型とし，文頭以外の場合は助詞型とした．
本論文では，SVMを用いた統計的係り受け解析手法の学習・解析ツールとしてCaboChaを利用して，機能表現を考慮した係り受け解析器を実現している．
その際に，CaboChaの係り受け解析における訓練データを，機能表現を考慮したものに変換している．
機能表現を考慮した係り受け解析の訓練データを作成するために必要な情報は二つある．
一つは，既存の係り受け情報付与済みコーパスから得られる係り受け関係の情報である．
もう一つは，対象文における機能表現の情報である．
この二つの情報を用いて\figref{fig:学習の流れ}の流れで，訓練データを作成し，学習を行っている．
\figref{fig:学習の流れ}の訓練データ作成モジュールでは，末尾の文節から順に以下の手順に従って処理を行っている．
機能表現を構成している形態素列を連結する．
連結する形態素列が複数の文節にまたがっている場合，文節の連結も行う．
連結後の文節の係り先は，連結文節中の末尾の文節の係り先を採用する．
助詞・助動詞型の機能表現の場合で，連結した文節の先頭形態素が，機能表現の場合は，直前の文節に連結する．
連結後の文節の係り先は，連結文節中の末尾の文節の係り先を採用する．
接続詞型の機能表現の場合で，一文節が機能表現のみで構成されない場合は，機能表現のみで一文節を構成するように文節を分解する．
文節の連結，分解に伴う文節ID，係り先の変化を反映させる．
\figref{fig:訓練データ作成の流れ}に，機能表現を考慮した係り受け解析の訓練データ作成の例を示す．
\figref{fig:訓練データ作成の流れ}中には，「にあたり」という機能表現が存在している．
よって，まず格助詞「に」と動詞「あたる」の連用形「あたり」の連結を行う．
それに伴い，「年頭に」という文節と「あたり」という文節の連結を行う．
連結された「年頭にあたり」という文節の係り先は，「あたり」の係り先を採用する．
次に，「年頭にあたり」以降の文節の文節IDと，「年頭にあたり」以降の文節に係る文節の係り先文節IDに対して変更を加える．
このような作業をすることによって，機能表現を考慮していない係り受け解析の訓練データを，機能表現を考慮したものに変換していく．
機能表現を考慮しない係り受け解析の学習(\figref{fig:feature_for_cabocha1})と機能表現を考慮した係り受け解析の学習(\figref{fig:feature_for_cabocha2})の間では，学習に使用する素性が異なる．
以下では，\figref{fig:feature_for_cabocha1}における「して」という文節，および，\figref{fig:feature_for_cabocha2}における「保護者として」という文節と，「参加した」という文節の間の係り受け関係に注目する．
まず，\figref{fig:feature_for_cabocha2}においては，文節の区切りが機能表現を考慮したものになっている．
それによって，注目する係り受け関係の係り元文節が，\figref{fig:feature_for_cabocha1}では「して」という文節なのに対し，\figref{fig:feature_for_cabocha2}では「保護者として」となる．
この違いによって，\tabref{tbl:feature_change_for_cabocha}に示すように，実際に学習・解析に使用する素性の間にも差違が生じる．
具体的には，係り元の文節が「して」から「保護者として」と変化することによって，係り元の主辞が「し」から「保護」に，係り元の語形が「て」から「として」に変化している．
また，係り元の文節に係る文節も「保護者と」から「甥の」に変化している．
このように学習・解析に使用する素性を機能表現を考慮したものにすることによって，機能表現を考慮した係り受け解析が実現される．
本論文で提案する係り受け解析器に対して，学習および解析を行い，各ベースラインと性能比較をした．
この際，対象とする表現は，機能表現検出器が対象としていた59表現である．
実験で使われた機能表現検出器は，[REF_subsec:実験と考察]節の実験の訓練データで訓練を行ったものである．
この際，素性は，形態素素性，チャンク素性，チャンク文脈素性を使用した．
係り受け解析器の訓練データとしては，京都テキストコーパス[CITE]を利用する．
ここで，オリジナルの京都テキストコーパスには，機能表現の情報は付与されていないので，まず，京都テキストコーパス38,400文に存在する全ての機能表現に対して，判定ラベルを付与した．
これらのデータセットに含まれる各用法の数と，全文数を\tabref{tbl:cabocha_dataset}に示す．
実験結果を評価する際の尺度には，以下の式で表される係り先精度，係り元精度を用いた．
係り先精度&= \frac{係り先を正しく同定できた文節数}{機能表現候補を含む文節数}
[1zw]係り元精度&= \frac{係り元を正しく同定できた文節数}{機能表現候補を含む文節数}
機能表現を考慮した係り受け解析器と各ベースラインの精度を\tabref{tbl:cabocha_result}に示す．
評価においては，京都テキストコーパスを訓練・評価データとする10分割交差検定を行った．
\tabref{tbl:cabocha_result}中の「CaboCha（機能表現抜き）」は，IPAdic辞書に連語として登録されている機能表現の内，評価対象の機能表現にあたるものを機能表現を構成している形態素に分解し，CaboChaの訓練を再度行ったものである．
それらの機能表現は，59表現中「ところが」，「にあたって」，「にあたり」，「にかけて」，「に従い」，「につき」，「につけ」，「にとり」，「にかけ」，「として」，「をめぐる」，「という」，「といった」の13表現である．
「CaboCha（オリジナル）」は，上記の連語に対して構成形態素への分解を行わず，CaboChaの訓練を再度行ったものである．
また，機能表現を考慮した係り受け解析では，機能表現判定ラベルとして，[REF_sec:chunker]節で述べた検出器により出力された結果を用いた場合，および，人手で付与した正解判定ラベルを用いた場合の二通りを評価した．
\tabref{tbl:cabocha_result}を見ると，提案手法は，係り先精度については，ベースラインとの差を見ることができなかったが，係り元精度については，ベースラインと比べ統計的に有意な改善（有意水準5%）が見られた．
よって，機能表現検出や，機能表現を考慮することが，係り元の推定に特に効果的であることがわかった．
係り元の推定が改善された事例においては，機能表現を構成している形態素列を独立に扱うのではなく，一つの機能表現として検出していることが効果的に働いていると考えられる．
例えば，「として」の場合，構成要素である形態素列を独立に扱うと，\figref{depended_sample} (a)の例文において，「チェチェン進行を」という文節が動詞を含む文節に係りやすいという特徴をもっているので，誤って「して」という文節に係ってしまう．
それに対して，「として」を機能表現として扱った場合，\figref{depended_sample} (b)のように，「チェチェン進行を」の係り先を正しく推定することができる．
また，係り元の推定が改悪された事例においては，機能表現の検出ミスが改悪の主な原因であった．
一方，係り先の推定が改善された事例においては，機能表現を構成している形態素列を独立した形態素として扱うのではなく，一つの機能表現として検出していることが効果的に働いていると考えられる．
例えば，「として」の場合，構成要素である形態素列を独立に扱うと．
\figref{depend_sample} (a)のように構成要素の一つである動詞「する」の連用形「し」が，最も近くの動詞と並立に係ると誤判定されることがある．
それに対して，「として」を機能表現として扱った場合，\figref{depend_sample} (b)のように係り先を正しく判定できる．
逆に，機能表現を考慮した係り受け解析によって，係り先の推定精度があまり改善されない原因としては，内容的用法と機能的用法とで，係り先の特徴が変化する表現がほとんどないということが挙げられる．
例えば，『「絶対に勝つ」という自信満々な人もいた．
』という文章において，「という」は内容的に働いており，その係り先は「人も」という文節である．
また，『トップという名にこだわる人もいる．
』という文章において，「という」は機能的に働いており，その係り先は「名に」という文節である．
この様に，「という」は内容的用法であっても機能的用法であっても，名詞を含む文節に係る特徴がある．
機能表現候補が内容的用法・機能的用法のいずれであるかということは，上で述べた通り，係り先の推定精度の改善にはあまり寄与しない．
しかし，機能表現の係り先は，機能表現の品詞分類に依存する傾向がある．
例えば，連用辞類の「として」は，動詞を含む文節に係るという特徴をもっているが，連体辞類の「という」は，動詞を含む文節には係らず，名詞を含む文節に係るという特徴を持っている．
提案手法では，機能表現の品詞分類を行っており，機能表現の品詞を，相当する既存の品詞の細分類として扱うことによって，この問題を解決している．
それに対して，CaboCha（オリジナル）では，全ての機能表現に対して，「助詞—格助詞—連語」という品詞を与え，機能表現の品詞分類を全く行っていない．
このことが原因で，CaboCha（オリジナル）の係り先精度が，CaboCha（機能表現抜き）の係り先精度を下回っていると考えられる．
