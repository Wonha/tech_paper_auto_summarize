関連研究

多言語{\text}を入力する際に必要なキー入力は，以下のように分類できる．
この章では，関連研究をこの分類に沿って述べる．
\begin{enumerate} 
\item 本文の文字列に対応する入力
\item {\tes}に対する操作
\item {\tes}を切り替えるための操作
\end{enumerate} 

(1)は，本文の文字列に対応する入力である．
例えば，本文が``多言語''であれば，日本語のローマ字入力では，``tagengo''がこれに当たる．
1つの言語に対応するIMEは，入力方式やキーボード配列の違いによって，複数存在する場合もある
\footnote{文献によっては，1つの言語に1つのIMEを対応付け，
入力方式やキーボード配列の違いを別の名称で呼ぶ場合もあるが，本論文では，
入力方式やキーボード配列が違えば，IMEも異なるものとする．}．
例えば，日本語には前述のローマ字入力の他に「かな入力」もある．
日本語のかな入力のIMEでは，``多言語''に対応する(1)のキー列は``q:@yb@''であり，ローマ字入力の場合とは異なっている．
日本語に限らず，英語でも，QwertyやDvorakといったキーボード配列の違いによって，複数の{\tes}がある．

ただし，本論文は，入力方式やキーボード配列の違いについて論じることが目的ではないので，
以後，各言語について標準的と思われる入力方式やキーボード配列を1つに定め，
「日本語のIME」のように呼ぶものとする．

(2)の操作は，仮名漢字変換ソフトウェアに対する変換候補選択などの操作に相当する．
例えば，上記の``多言語''の例であれば，(1)だけでは，``多言語''のほかに``他言語''という選択肢も存在する．
このとき，両者から``多言語''を選び出すための入力が，(2)である．
予測入力を行う場合の，キー入力から候補を予測した変換候補を選択する操作も，
(2)に相当する．

(1)と(2)は，単言語で構成される文書を入力する際にも必要となるので，
ユーザーインターフェースや自然言語処理の分野で詳細な研究がなされており，\cite{entry}にまとめられている．

(3)の操作は，{\tes}を切り替える操作である．本論文では，以後この操作を「IME切り替え操作」と呼ぶ．
例えば，英語と日本語を切り替える際の``Alt+半角''などのキー操作が(3)に相当する．
IME切り替え操作は，主に，多言語{\text}の入力時に言語を切り替える際に発生する．

\secref{sec:introduction}で述べたように，このIME切り替え操作を，キー列からユーザーが入力している
言語を判別することで，自動化するのが本論文の主旨である．



(3)の操作量を直接扱った既存研究は少ない．
著者らが調査した範囲では，論文が公開されているものとしては，\cite{pinyininput}が該当するのみである．
この論文では，
ピンイン\footnote{ローマ字による中国語の発音表記のこと．中国語入力では，ピンインを入力して漢字に変換する
ピンイン漢字変換が一般的である．}と英語が混じったキー列を正しく変換するタスクが述べられている．
しかし，この機能はあくまで中国語入力の一環として述べられているにすぎず，
本論文で扱うように，言語の種類や数を変更することは考慮されていない．

論文の形でなく，フリーソフトウェアでは，{\em PUNTO switcher}\footnote{http://punto.ru/}
というロシア語圏のソフトウェアが，ロシア語と英語の間の切り替えの目的で
2001年より開発されている．当該ウェブサイトの情報によれば，このソフトウェアは150万件のダウンロードがあり，
一定の成功を収めていると思われる．
また，{\em Keyboard Ninja}\footnote{http://www.intelife.net/ninja/}というソフトウェアも作成されている．
Keyboard Ninjaは，ロシア語，英語，フランス語，ドイツ語，イタリア語，スペイン語，ウクライナ語の間での
切り替えを行うソフトウェアである．
これらのソフトウェアの用いているアルゴリズムや性能評価については，著者らの知る範囲では公開されていない．

一方，本研究は，{\text}の言語判別問題としてとらえることも可能である．
この{\text}の言語判別問題は，次のように分類することが可能である．

\begin{enumerate}
\item ある単言語の{\text}が与えられ，その{\text}の言語を判別する問題
\item 多言語の{\text}が与えられ，その中の部分が何語であるかを判別する問題
\end{enumerate}

(1)の問題については，OCRを多言語に対応させることを
主な目的とした，\cite{cavnar}の研究が基礎的である．
この論文では，ニュースグループへの投稿文書という長いテキストを対象に，
文字ベースのN-gramの頻度を用いて文書の言語を判別している．
また，\cite{sibun}では，やはりECIコーパスという長いテキストを対象に，
KL情報量を用いて文書の言語を判別している．
どちらの論文でも，言語によって判別精度に差があることと，
平均して90\%を超える高い精度が達成できることを報告している．

一方，本研究との関連がより深いものは，(2)の問題である．(2)は，(1)を拡張した問題になっているうえ，
多くの場合(1)より短い部分から言語を判別しなければならないため，(1)より難しい．
以下，代表的な(2)に関する研究を2つ挙げる．

\cite{indian}は，小さいサンプルを対象とした言語判別問題に機械学習を用い，高い判別精度で解けることを報告している．しかし，この研究は，一般の文書からのサンプルを対象に2言語の間の判別を行うことを目的とし，インドで使用されている言語や文字に特化した素性を用いて判別精度の向上を報告するものである．本研究は，入力中のキー列を対象に3言語以上の間の判別も扱い，言語の種類に特に制限は設けていない点で，目的も手法も異なる．


\cite{alex2005}は，ドイツ語中に混在する英語を判別する方法について論じている．
この論文では，{\text}中に混在する他の言語を発見するタスクを，
{\em foreign inclusion detection} (FID)と呼び，
音声合成 (Text to speech) の分野で研究されてきたことを紹介している\cite{tts2003}, \cite{tts2005}．
近年Alexは，FIDを構文解析の前処理として使用することで，構文解析の精度が向上させられることを示している\cite{alex2007}.
このFIDのように，他の処理の前処理として言語判別を使用する場合は，高い精度が求められるため，
対象言語について大規模なコーパスが入手可能であることが前提となる．
一方，本論文の目的では，対象言語の大規模なコーパスが手に入るとは限らないため，
FIDの手法をそのまま適用することは困難である．

以上の関連研究を踏まえて，次の\secref{sec:premodel}で，設計方針を立てる．


