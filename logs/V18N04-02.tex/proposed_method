日本語係り受け解析 \label{sec:2}

日本語の係り受け解析器は京大コーパス由来のものが多い．コーパスの基準により，係り受け関係は文節単位に付与され，係り受け関係は交差することがほとんどなく(projective)，常に主辞が右にくる性質を持つ(strictly head-final)．また文節を単位とした場合，動詞は格フレームを持つがその格要素は頻繁に省略される(productive usage of empty category)，主辞に対する従属要素間の語順は比較的自由である(presence of scrambling)といった特性がある．このような特性により，他言語と比して係り受け解析手法を単純化することができる．

オープンソースの日本語係り受け解析器が2つある．1つは京都大学で開発された KNP であり，入力として規則に基づく形態素解析器 JUMAN の出力を用いる．KNP は同表記異義語の曖昧性解消・文節まとめあげ・並列構造解析・係り受け解析・格解析を行うことができ，文節まとめあげは規則に基づき，以降の処理は規則と生成モデルの混合手法に基づく．
もう1つは工藤拓氏による CaboCha で，条件付確率場に基づく形態素解析器 MeCab の出力を用いる．CaboCha は文節まとめあげ・係り受け解析を行うことができ，それぞれ条件付確率場・サポートベクトルマシンといった識別モデルに基づく．

日本語の係り受け解析手法は決定的な状態遷移アルゴリズムに基づくものが多く提案されている．長さ $N$ の文に対し，時間計算量 $O(N^2)$の Cascaded Chunking 法~\cite{Kudo02}・$O(N)$の Shift Reduce 法~\cite{Sassano04}・$O(N^2)$の Tournament 法~\cite{Iwatate08}などが提案されている．

他言語では様々な係り受け解析手法が提案されており\cite{CoNLL06,CoNLL07}，グラフに基づく方法\cite{Eisner00,McDonald05,Carreras07,Koo10}が決定的な状態遷移アルゴリズム\cite{Nivre03,Nivre04}とともに高精度を達成している．2手法が得意とする言語現象が異なるため，両者の組み合わせ手法\cite{Nivre08}が提案されている．
しかしながら，日本語の係り受け解析において，グラフに基づく手法が高精度を達成されたという報告はない．


日本語ガーデンパス文 \label{sec:3}


ガーデンパス文とは，途中まで文字列を読んで一旦理解されやすい解釈が誤っており，最後まで読んで初めて正しい解釈ができるような構造を持つ文のことをいう．

本稿では係り受け構造同定を誤りやすい文として，Tokimoto \cite{Tokimoto04}の実験で用いられた埋め込み構造に基づく日本語ガーデンパス文を用いる．利用する例文は以下の形式の6文節からなる：

\begin{center}
\begin{tabular}{p{2cm}p{2cm}p{2cm}p{2cm}p{2cm}p{2cm}} 
$NP_{1}^{NOM}$ & $NP_{2}^{ACC}$ & $V_{3}^{PAST}$ & $NP_{4}^{DAT}$ & $X_{5}$ & $V_{6}^{PAST}$ \\
\end{tabular}
\end{center}

下添え字は文節の順番を表す便宜上の数字である．
$NP$は格助詞を持つ名詞句を表し，$NP^{NOM}$ はガ格を持つ名詞句・ $NP^{ACC}$ はヲ格を持つ名詞句・$NP^{DAT}$ はニ格を持つ名詞句を表す．$V^{PAST}$ はタ形の動詞を表す．

5番目の文節$X$に何が割り当てられるかによって異なる3種類の係り受け構造を持つ．
1つ目はガ格を持つ名詞句 $NP_{5}^{NOM}$ を割り当てたもので Control (CTRL)文と呼ぶ．
2つ目はヲ格を持つ名詞句 $NP_{5}^{ACC}$ を割り当てたもので Early Boundary (EB)文と呼ぶ．
3つ目はそれ以外の句を割り当てたもので Late Boundary (LB)文と呼ぶ．
3種類の係り受け構造を図\ref{fig:examplesentences}に示す．

CTRL文の場合，並列構造などの例外を除いて1つの動詞が2つ以上のガ格を持たないため，最初の $NP_{1}^{NOM}$が$V_{3}^{PAST}$のガ格，$NP_{5}^{NOM}$が$V_{6}^{PAST}$のガ格となる．非交差条件と常に主辞が右に来る制約により $NP_{2}^{ACC}$が$V_{3}^{PAST}$ に，$NP_{4}^{DAT}$が$V_{6}^{PAST}$ に係る．尚，$V_{3}^{PAST}$が$NP_{4}^{DAT}$に連体節外の関係\cite{Teramura1981}で係る．

EB文の場合，並列構造などの例外を除いて1つの動詞が2つ以上のヲ格を持たないため，最初の $NP_{2}^{ACC}$が$V_{3}^{PAST}$ のヲ格，$NP_{5}^{ACC}$が$V_{6}^{PAST}$のヲ格となる．準備した文は全て $NP_{4}^{DAT}$が$V_{3}^{PAST} $を連体節内の関係で受け，意味的には $V_{3}^{PAST}$ のガ格に相当する．このため $NP_{1}^{NOM}$が$V_{6}^{PAST}$ のガ格になる．

LB文の場合，準備した文は全て $NP_{4}^{DAT}$が $V_{3}^{PAST}$ を連体節内の関係で受け，意味的には$V_{3}^{PAST}$のヲ格に相当する．このため$NP_{2}^{ACC}$が$V_{6}^{PAST}$のヲ格になる．非交差条件と常に主辞が右に来る制約により $NP_{1}^{NOM}$が$V_{6}^{PAST}$に係る．



ゲーム： shWiiFit Reduce Dependency Parsing \label{sec:4}

本節では人間の係り受け解析判定を調査するために開発したゲーム ``shWiiFit Reduce Dependency Parsing'' について説明する．図\ref{fig:swfrdp}にゲーム画面を示す．

ゲームはNivre らの shift reduce 法\cite{Nivre03,Nivre04}の日本語対応版である Sassano のアルゴリズムを元にしている(Algorithm \ref{alg:sr})．4種類のアクション ``default reduce''・``default shift''・``REDUCE''・``SHIFT''のうち ``REDUCE''・``SHIFT'' を人間が判断する．文節数$N$の1文を，高々$2N$回のアクションを決定することにより係り受け解析ができる．以下アルゴリズムについて詳しく説明する：

\begin{algorithm}[tb]
\caption{Shift reduce法に基づく日本語係り受け解析 \label{alg:sr}} \small
\begin{algorithmic}
\STATE $\langle S, Q, A \rangle = \langle nil, W, \phi \rangle$ \% Initialization
\REPEAT
\IF{$S != nil$ and $|Q| == 1$} 
\STATE $\langle s|S, q, A \rangle \Rightarrow \langle S, q, A \cup \langle s,q \rangle \rangle$   \% ``default reduce''
\ELSIF{$S == nil$ and $|Q| > 1$}
\STATE $\langle nil, q|Q, A \rangle \Rightarrow \langle q, Q, A \rangle$ \% ``default shift''
\ELSE
\IF{$s$ and $q$ has a dependency relation} 
\STATE $\langle s|S, q|Q, A \rangle \Rightarrow \langle S, q|Q, A \cup \langle s,q \rangle \rangle$  \% ``REDUCE''
\ELSE
\STATE $\langle s|S, q|Q, A \rangle \Rightarrow \langle q|s|S, Q, A \rangle$  \% ``SHIFT''
\ENDIF
\ENDIF
\UNTIL{$S == nil$ \AND $|Q| == 1$}
\RETURN $A$
\end{algorithmic}
\end{algorithm}

スタック $S$・キュー $Q$・解析済み係り受け関係を格納する $A$ の 3 つ組を定義する．それぞれ，空スタック$nil$・入力文節列$W$・空集合$\phi$で初期化する．
係り受け解析はこの3つ組の状態遷移により進められる．状態遷移は以下の条件分岐により行う：
\begin{itemize}
\item ``default reduce''： スタック$S$ が空ではなくかつキュー$Q$が単一文節 $q$ のみの場合，システムが自動的に$S$ の先頭要素 $s$が $q$ に係る関係を解析済み係り受け関係集合 $A$ に追加し $S$ から $s$ を pop する．
\item ``default shift''： $S$ が空でありかつ$Q$が複数文節からなる場合，システムが自動的に$Q$ の先頭要素 $q$をpopし，$S$に $q$ を push する．
\item ``REDUCE''： 人間が$S$ の先頭要素 $s$ と$Q$の先頭要素$q$の間の係り受け関係を判断し係り受け関係がある場合，$S$ の先頭要素 $s$が $q$ に係る関係を$A$に追加し $S$ から $s$ を pop する．
\item ``SHIFT''： 人間が$S$ の先頭要素 $s$ と$Q$の先頭要素$q$の間の係り受け関係を判断し係り受け関係がない場合，$Q$ の先頭要素 $q$をpopし，$S$に $q$ を push する．
\end{itemize}
以下，アクションをどのようにプレーヤーが入力するかを説明する．
ゲームのプレーヤーには 図\ref{fig:swfrdp}のようなスクリーンが提示される．
解析すべき文がスクリーンの上部に示される．
ゲーム開始時には顔アイコンがスクリーン下部中央に示される．
その左上にあるトレイがスタック$S$に相当し，右上にあるトレイがキュー$Q$に相当する．左トレイ$S$には何も載っていない状態で，右トレイ$Q$には文の先頭3文節が載っている状態で初期化される．ゲームの間左トレイ$S$・右トレイ$Q$ともに画面中央を先頭として高々3文節がプレーヤーに提示される．
プレーヤーは Nintendo バランス Wii ボード上に乗り，体重移動により顔アイコンを移動させ左右の壁に移動させることにより注目する2文節間の係り受け関係の有無を入力する．もし左トレイ$S$の先頭要素$s$と右トレイ$Q$の先頭要素$q$が係り受け関係にある場合，プレーヤーは右方向に体重移動することにより顔アイコンを画面下部右の ``REDUCE''という壁に移動させる．係り受け関係にない場合，左方向に体重移動することにより顔アイコンを画面下部左の ``SHIFT''という壁に移動させる．壁に顔アイコンが触れた時点で入力と見なされ，ゲームは 820--860~msec. のアニメーションとともに，対応するアクションを実行する．この間プレーヤーが体重を左右に加重していない状態であれば，自動的にアイコンは中央に戻る．アクションが一意に決まる場合，つまり ``default reduce''・``default shift''相当の場合，同様に 820--860~msec. のアニメーションが提示する．1文解析後プレーヤーには解析結果が正しかったかどうかが提示される．プレーヤーはジャンプすることにより次の文の解析に進むことができる．

ゲームの間ソフトウェアは各アクションの反応時間を計測する．今回の実験では，入力デバイスとして，バランス Wii ボードを用いたが，ソフトウェアはキーボード上のカーソルキー・ジョイスティック・ゲームパッド（Nintendo Wii リモコンの各種センサを含む）でも動かすことができる．入力デバイスとしてバランスWiiボードを用いた理由は，判断に迷った際にある程度プレーヤーに対して負荷を与えることができる点がある．プレーヤーが判断に迷った場合，キーボード上のカーソルキー・ゲームパッドを用いた場合にはプレーヤーは何もしなくてもよいが，バランス Wii ボードを用いた場合にはプレーヤーは体重を中心に保つ努力をしなければならない．この負荷の有無については，4人に対する小規模の対照実験においてバランスWiiボードの方が反応時間差が出やすいことを確認している．



