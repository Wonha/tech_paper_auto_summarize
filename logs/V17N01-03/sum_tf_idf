================================================================
[section type  : abstract]
[section title : abstract]
================================================================
[i:1, score:0.47267] オンライン未知語獲得では，形態素解析器と協調して動作する未知語獲得器が，文が解析されるたびに未知語を検出し，その可能な解釈の候補を列挙し，最適な候補を選択する．
[i:3, score:0.40106] 十分な用例の比較により曖昧性が解消されると，解析器の辞書を直接更新し，獲得された未知語が以降の解析に反映される．
[i:4, score:0.39035] 実験により，比較的少数の用例から高精度に未知語が獲得され，その結果形態素解析の精度が改善することが示された．

================================================================
[section type  : intro]
[section title : はじめに]
================================================================
[i:10, score:0.45421] 例えば，形態素解析器JUMANは，デフォルトの辞書を用いると，未知の動詞「ググる」を誤って「ググ」と「る」に分割する．
[i:45, score:0.38898] オンライン未知語獲得は，検出，列挙，選択のサブタスクにより実現される．
[i:47, score:0.39035] 実験により比較的少数の用例から高精度に未知語が獲得され，その結果形態素解析の精度が改善することが示された．

================================================================
[section type  : proposed_method]
[section title : 未知語獲得タスク]
================================================================
[i:52, score:0.40192] 未知語獲得とは，未知語について，テキスト中の一つ以上の用例から辞書項目を帰納的に生成するタスクである．
[i:54, score:0.38452] 例えば，未知語「ググる」について，「なんとなくググってみた．
[i:77, score:0.36019] 例えば，「ググる」の活用型は「子音動詞ラ行」で，「ググって」の活用形は「タ系連用テ形」，「ググら」は「未然形」となる．

================================================================
[section type  : proposed_method]
[section title : オンライン未知語獲得]
================================================================
[i:94, score:0.00000] 
-----------------------------------------------------
  [subsection title : システム構成]
-----------------------------------------------------
  [i:lead, score:0.29939] 未知語獲得タスクに対して，我々はオンラインによる解法を提案する．
.....
  [i:110, score:0.46869] 検出された各未知語用例に対して，語幹と品詞からなる辞書項目の候補を列挙する．
  [i:118, score:0.53252] 獲得器は，まず，この文の「ググ」を手がかりに未知語用例を検出する．
  [i:120, score:0.47128] 辞書項目の候補としては，語幹「ググ」と品詞「子音動詞ラ行」以外にも，同じ語幹で「子音動詞ワ行」，語幹「ググって」と品詞「子音動詞マ行」，語幹「なんとなくググ」と品詞「子音動詞ラ行」なども考えられる．
-----------------------------------------------------
  [subsection title : 未知語用例の検出]
-----------------------------------------------------
  [i:lead, score:0.28572] 未知語検出は各文から未知語の用例を検出するタスクである．
.....
  [i:143, score:0.32818] 形態素解析器は，入力文に対して，辞書引きと未知語処理により，出力すべき形態素の候補を列挙する．
  [i:147, score:0.37208] これにより，未知語「ググる」を含む入力文「ググってみた．
  [i:151, score:0.31983] 形態素解析を用いる検出手法でも検出されない未知語用例が存在する．

================================================================
[section type  : proposed_method]
[section title : 辞書項目の列挙と選択]
================================================================
[i:154, score:0.00000] 
-----------------------------------------------------
  [subsection title : 列挙タスクと選択タスク]
-----------------------------------------------------
  [i:lead, score:0.27652] 列挙は，検出された各用例に対して，文中の前後の文脈を利用して，考えられる辞書項目の候補を列挙するタスクである．
.....
  [i:158, score:0.32623] 例えば，「なんとなくググってみた」の場合，「なく」と「ググ」の間に前方境界が，「ググ」と「って」の間に後方境界が引かれる．
  [i:161, score:0.32983] 選択は，各未知語用例に対して，最適な辞書項目の候補を選択するタスクである．
  [i:162, score:0.28768] この際，検出済みの未知語用例を蓄積することで，複数の用例が比較できる．
-----------------------------------------------------
  [subsection title : 形態論的制約の利用]
-----------------------------------------------------
  [i:lead, score:0.19171] 辞書項目の列挙において，候補絞り込みの手がかりとして形態論的制約を利用する．
.....
  [i:171, score:0.37090] サフィックスとは，語幹に後続し得る文字列であり，自立語の語尾（あれば）と後続する付属語列を連結したものである．
  [i:179, score:0.42978] いま，サフィックスが十分に大きなコーパスから収集されたとき，ある品詞に属す形態素の語幹に後続し得るサフィックスは，品詞に対応するサフィックス集合中のいずれかに限定される．
  [i:180, score:0.41423] 従って，サフィックスを候補列挙に用いることで，後方境界と同時に品詞の候補が列挙できる．
-----------------------------------------------------
  [subsection title : サフィックスを用いた列挙手法]
-----------------------------------------------------
  [i:lead, score:0.31686] サフィックスを用いて辞書項目の列挙を行う．
.....
  [i:195, score:0.43041] 後方境界と品詞の組の候補を図[REF_fig:suffix-match]のようにサフィックスを用いて列挙する．
  [i:197, score:0.37836] サフィックスがマッチしたとき，サフィックス開始位置が後方境界の候補となり，サフィックスに対応する1個以上の品詞が候補となる．
  [i:201, score:0.39717] また，サフィックス以外の手がかりとして，以下を前方境界と後方境界の候補列挙に利用する．
-----------------------------------------------------
  [subsection title : 用例の蓄積]
-----------------------------------------------------
  [i:lead, score:0.18276] 辞書項目の選択には，それまでに検出された複数の用例を利用する．
.....
  [i:215, score:0.27337] ただし，真に同じ辞書項目を表す用例のみを取り出すのは難しいので，ひとまず前方境界を共有する用例群を取り出し，後の処理で絞り込みを行う．
  [i:216, score:0.22552] また，獲得に至らなかった用例は記憶に追加し，獲得時には使われた用例群を削除する．
  [i:220, score:0.31310] 例えば，図[REF_fig:suffix-match]の用例に対して，「ググ」と「何となくググ」をキーとして2箇所に格納する．
-----------------------------------------------------
  [subsection title : 辞書項目の選択]
-----------------------------------------------------
  [i:lead, score:0.34491] 辞書項目の候補，つまり前方境界，後方境界および品詞の候補のうち，最適な候補の選択を記憶から取り出された用例群の比較により行う．
.....
  [i:222, score:0.34491] 辞書項目の候補，つまり前方境界，後方境界および品詞の候補のうち，最適な候補の選択を記憶から取り出された用例群の比較により行う．
  [i:227, score:0.23913] 次に，用例群の比較により，若干の後方境界候補の足切りを行う(refineRearBoundaryCandidates)．
  [i:237, score:0.32336] 例えば，未知語「新撰組」に対して，形態素解析が「新」を接頭辞と解釈するため，常に「撰組」が辞書項目の候補となる．
-----------------------------------------------------
  [subsection title : 品詞分類手法の比較]
-----------------------------------------------------
  [i:lead, score:0.05124] 品詞分類について先行研究との簡単な比較を示す．
.....
  [i:243, score:0.39668] Mori et al.の後ろの「文字列」と福島・鍜治らの「後続するひらがなn-gram」，および桑江らの「最長後続ひらがな列」は，本論文のサフィックスと同様の働きをする[CITE]．
  [i:250, score:0.36447] 同様にして，形態素が属す品詞ごとに，後続サフィックスの頻度分布を求める．
  [i:265, score:0.40236] サフィックスは形態論的制約を満たすか否かの2値を表現しており，候補列挙の時点で，制約を満たさない品詞は候補から除外される．
-----------------------------------------------------
  [subsection title : 獲得未知語の分割可能性]
-----------------------------------------------------
  [i:lead, score:0.28137] 獲得された未知語が実際には2個以上の形態素からなる可能性がある．
.....
  [i:271, score:0.28137] 獲得された未知語が実際には2個以上の形態素からなる可能性がある．
  [i:272, score:0.37490] 未知語は比較的少数の用例から獲得するため，未知語[MATH]が，観測された用例中でたまたま[MATH]という連続で現れていた場合，[MATH]を1形態素として獲得してしまう．
  [i:274, score:0.32444] この問題に対処するために，未知語獲得時に，獲得済みの形態素が獲得形態素によって分割できるかを調べ，できる場合にはその形態素を辞書から削除する．

================================================================
[section type  : experiment_result]
[section title : 実験]
================================================================
[i:279, score:0.00000] 
-----------------------------------------------------
  [subsection title : 実験設定]
-----------------------------------------------------
  [i:lead, score:0.33504] オンライン未知語獲得について，獲得される未知語の精度，および未知語獲得の形態素解析への貢献を評価する．
.....
  [i:280, score:0.33504] オンライン未知語獲得について，獲得される未知語の精度，および未知語獲得の形態素解析への貢献を評価する．
  [i:290, score:0.34562] 獲得された未知語は，語幹と品詞の両方が正しい場合に正解とする．
  [i:294, score:0.30061] 未知語獲得の形態素解析への貢献の評価は次の手順で行う．
-----------------------------------------------------
  [subsection title : 実験結果]
-----------------------------------------------------
  [i:lead, score:0.03892] 表[REF_tb:queries]にクエリごとの統計を示す．
.....
  [i:311, score:0.35142] 順位の下位区間における急な落ち込みは，用例数の不足により獲得されていない未知語の影響と推測される．
  [i:314, score:0.41104] 終了時点での蓄積されている用例数と未知語の累積出現数の比較から，検出された未知語用例がすべて真の未知語と仮定すると，提案手法で検出される未知語のうちおよそ半分が獲得されたと推定できる．
  [i:316, score:0.32501] 予想される通り，獲得された未知語の大半が名詞(94.1--100%)やカタカナのみからなる形態素(67.9--79.4%)である．
-----------------------------------------------------
  [subsection title : 議論]
-----------------------------------------------------
  [i:lead, score:0.23156] 形態素解析において，カタカナ未知語が短いカタカナ形態素によって分割されることがある．
.....
  [i:340, score:0.38365] 仮に，解析対象のテキストが少量で，未知語獲得を行うには用例の出現回数が足りないとしても，ウェブから解析対象テキストと関連するテキストを収集することで，用例の出現回数を増やすことができる．
  [i:342, score:0.40884] すなわち，解析対象テキストから検出された用例にマークして，それらの用例が獲得に使われたか追跡することで，未知語が十分に獲得された時点で処理を停止させることができる．
  [i:352, score:0.32093] 形態レベルでの未知語獲得については，検出が大きな課題として残っている．

================================================================
[section type  : related_study]
[section title : 関連研究]
================================================================
[i:373, score:0.44750] テキストからの未知語の自動獲得については，Mori et al.は，語幹の前後の文字列とその頻度をベクトルで表現し，コーパス中の任意の部分文字列について，品詞のモデルとのベクトルの距離により品詞らしさを判定する[CITE]．
[i:375, score:0.44118] 彼らは，獲得対象を「ググる」などの語幹が自明なカタカナの用言に限定し，品詞分類に特化した手法を提案する．
[i:376, score:0.32374] 一般の未知語を獲得する場合には，あわせて語幹同定の問題も解く必要がある．

================================================================
[section type  : conclusion]
[section title : 結論]
================================================================
[i:377, score:0.29476] 本論文では，オンライン未知語獲得という枠組みと，その具体的な実現方法を提案した．
[i:378, score:0.30543] 実験により，未知語が高精度に獲得され，その結果形態素解析の精度が向上することが示された．
[i:379, score:0.07388] 形態素解析自体は成熟した技術であり，構文解析や情報検索といった応用のための前処理となっている．

