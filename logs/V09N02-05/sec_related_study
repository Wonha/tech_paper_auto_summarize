ところで一文字単位に改行してからmdiffを使う場合少々文に食い違いがあっても答えを正しく取り出すことができる．
例えば，知識ベースの文が「日本国の首都は東京です」であったとする．
この場合はmdiffの結果は以下のようになる．
日本;▼▼▼▼▼▼;●●●国;▲▲▲▲▲▲の首都は;▼▼▼▼▼▼X ;●●●東京;▲▲▲▲▲▲です
差分部分は少し増えるがXに対応する箇所は「東京」のままで，解を正しく抽出できる．
ところで，われわれが提案する質問応答システムでは類似度を尺度として用いた変形をくりかえし，質問文と知識データの文がより一致した状態で上記のような照合を行なう．
このために類似度を定義する必要がある．
mdiffを用いた場合は一致部分と不一致部分が認定できるので，類似度は(一致部分の文字数)/(全文字数)のような形で定義できる．
ここで，「日本国」と「日本」を言い換える規則があれば「日本の首都はXです」を「日本国の首都はXです」と言い換えて照合し，不一致部分を減らすことで，より確実に解を得ることができる．
本稿ではdiffを用いた言語処理の例を多数記述した．
[REF_sec:system]節では複数システムの出力を融合することで個々のシステムの精度以上のものを得る研究をdiffを用いて実現する方法を述べた．
この種の考え方はシステム融合という形で広く知られているもので，それがdiffで簡便に実現できることを示した．
[REF_sec:kakikae]節では言い換えの研究の一例として話し言葉と書き言葉の違いの考察，また，話し言葉から書き言葉への言い換え規則，また，その逆のための規則の自動獲得をdiffで行なっている研究を紹介した．
そこでは，話し言葉と書き言葉の言い換えを扱っていたが，言い換えの問題は，文を短縮する要約から，文を修正する文章校正支援，わかりにくい文からわかりやすい文を作成する平易文生成の研究まで幅広いものを含むものであり，それらでもdiffを用いることで，種々の考察や種々の書き換え規則の獲得を容易に実現することができる．
この意味で本稿はこの今後発展の予想される言い換えの研究の基盤的なものとなると思われる．
[REF_sec:merge]節ではデータのマージ，最適照合の例を示した．
diffコマンドは一般には差分の検出に利用されるものなので，データのマージや最適照合にも利用できることを示した[REF_sec:merge]節の例はまた別の新しさがある．
その節では対訳コーパスの対応づけ，講演と予稿の対応づけ，さらに最近はやりの質問応答システム(「日本の首都はどこですか」と聞くと「東京」と答えるシステムのこと)といった，種々の興味深い研究をdiffという簡便なツールで実現する方法を示した．
本稿はこのような研究テーマもしくは研究手段の斬新性といった側面も兼ね備えている．
