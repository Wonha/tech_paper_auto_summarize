複数文書要約においては，要約の冗長性に対する対処が重要な課題の1つである[CITE]．
複数の文書から1つの要約を生成する際に，複数の文書が類似する情報を含んでいるときには，類似する情報がいずれも要約に含まれる恐れがある．
複数文書要約の目的を鑑みると，類似する情報が要約に2度含まれることは好ましくないため，この問題に対処する必要がある．
この冗長性に対する対処として，Filatovaらによって最大被覆問題による要約モデルが提案された[CITE]．
最大被覆問題による要約モデルは文の集合と要約長を入力とする．
集合中の文はそれぞれ何らかの概念を含んでおり，この概念はその性質に応じて重要度を持っている．
概念はユニグラムやバイグラムなど，文から抽出できる何らかの単位である．
また，文はそれぞれその単語数や文字数に応じて，長さを持っている．
最大被覆問題の最適解は，合計の長さが要約長を超えない文の集合のうち，集合中の文が持っている概念の重要度の和が最大となるものである．
ただし，文の集合に含まれる概念の重要度の和を計算するときには，同じ概念は一度しか数えない．
例えば，文の集合にある概念が3つ含まれていたとしても，最大被覆問題においては，文の集合に含まれる概念の重要度の和は，その概念が1つしか含まれないときと同じである．
複数文書の要約を最大被覆問題として考えた場合，同じ概念は一度しか数えないという性質が重要な役割を果たす．
すなわち，文が含む概念を情報とすると，同じ情報を3つ含んだ要約も同じ情報を1つ含んだ要約も解としての良さは同じであり，よりよい解はより多様な情報を含んだ解である．
このような，多様な情報を含んだ解がより良好な解であるという最大被覆問題の性質は，複数文書要約に必要なモデルの性質として適切であり，これまで最大被覆問題に基づいた要約モデルがいくつも提案されてきた．
Filatovaらは単語を概念として，重要度をtf-idfで与え，これを貪欲法[CITE]で解いた．
Yihらはスタックデコーダ[CITE]を用いてこれを解いた[CITE]．
高村らはこれに整数計画問題としての厳密な定式を与え，近似解法と分枝限定法による結果を報告した[CITE]．
Gillickらも同様に整数計画問題としての定式を与え結果を報告した[CITE]．
これらは全て新聞記事を要約の対象としているが，他の領域を対象にした複数文書要約も行われている．
東中らはコンタクトセンタログを要約の対象として，発話を文，発話に含まれる単語を概念とする要約モデルを提案した[CITE]．
西川らはレビュー文書集合を要約の対象として，商品やサービスに対して評価を行っている記述を概念の単位とする複数文書要約モデルを提案した[CITE]．
最大被覆問題はNP困難である[CITE]ため，解の探索が重要な課題である．
貪欲法のような単純な探索法を用いた場合，良好な解を得られる可能性は必ずしも高くないものの，高速に解を得られる．
Khullerらによって提案された貪欲法による最大被覆問題の解は，最悪でも最適解の目的関数値の[MATH]を達成する[CITE]．
高村らはこれを複数文書要約に応用して結果を報告している[CITE]．
スタックデコーダのようなより複雑な探索法を用いることによってより良好な解を得られる可能性が高まるが，探索に要する時間も増加する．
分枝限定法を用いることで最適解を得ることができるものの，問題の規模が増加するにつれて探索に要する時間は著しく増加する．
単一文書要約に目を向けると，単一文書要約は冗長性が問題となる恐れが少ないため，冗長性を加味しない手法を利用することができる．
単一文書要約は，ナップサック問題として定式化できる[CITE]．
ナップサック問題による要約モデルも文の集合と要約長を入力とする．
最大被覆問題と異なり，ナップサック問題はそれぞれの文が直接重要度を持っている．
ナップサック問題の最適解は，合計の長さが要約長を超えない文の集合のうち，集合を構成する文の重要度の和が最大となるものである．
ナップサック問題の最適解は動的計画法の一種である動的計画ナップサックアルゴリズムによって擬多項式時間で求めることができる[CITE]．
そのため，ナップサック問題の最適解は高速に求めることができる．
しかし，ナップサック問題は文に対して直接重要度を定義し，その和を最大化するものであるため，冗長性を削減する仕組みを持たない．
従って，複数文書要約に適用した場合，冗長な要約が生成される恐れがある．
先に述べたように，最大被覆問題は複数文書要約に適した性質を持っているものの，良好な解の探索には多大な時間を要する．
一方，ナップサック問題は複数文書要約に適さないものの，最適解の探索は容易である．
本論文で提案する方法は，このトレードオフを解決するため，ナップサック問題に対して冗長性を削減する制約を加えたものである．
複数文書要約においては，要約の冗長性に対する対処が重要な課題の1つである[CITE]．
複数の文書から1つの要約を生成する際に，複数の文書が類似する情報を含んでいるときには，類似する情報がいずれも要約に含まれる恐れがある．
複数文書要約の目的を鑑みると，類似する情報が要約に2度含まれることは好ましくないため，この問題に対処する必要がある．
この冗長性に対する対処として，Filatovaらによって最大被覆問題による要約モデルが提案された[CITE]．
最大被覆問題による要約モデルは文の集合と要約長を入力とする．
集合中の文はそれぞれ何らかの概念を含んでおり，この概念はその性質に応じて重要度を持っている．
概念はユニグラムやバイグラムなど，文から抽出できる何らかの単位である．
また，文はそれぞれその単語数や文字数に応じて，長さを持っている．
最大被覆問題の最適解は，合計の長さが要約長を超えない文の集合のうち，集合中の文が持っている概念の重要度の和が最大となるものである．
ただし，文の集合に含まれる概念の重要度の和を計算するときには，同じ概念は一度しか数えない．
例えば，文の集合にある概念が3つ含まれていたとしても，最大被覆問題においては，文の集合に含まれる概念の重要度の和は，その概念が1つしか含まれないときと同じである．
複数文書の要約を最大被覆問題として考えた場合，同じ概念は一度しか数えないという性質が重要な役割を果たす．
すなわち，文が含む概念を情報とすると，同じ情報を3つ含んだ要約も同じ情報を1つ含んだ要約も解としての良さは同じであり，よりよい解はより多様な情報を含んだ解である．
このような，多様な情報を含んだ解がより良好な解であるという最大被覆問題の性質は，複数文書要約に必要なモデルの性質として適切であり，これまで最大被覆問題に基づいた要約モデルがいくつも提案されてきた．
Filatovaらは単語を概念として，重要度をtf-idfで与え，これを貪欲法[CITE]で解いた．
Yihらはスタックデコーダ[CITE]を用いてこれを解いた[CITE]．
高村らはこれに整数計画問題としての厳密な定式を与え，近似解法と分枝限定法による結果を報告した[CITE]．
Gillickらも同様に整数計画問題としての定式を与え結果を報告した[CITE]．
これらは全て新聞記事を要約の対象としているが，他の領域を対象にした複数文書要約も行われている．
東中らはコンタクトセンタログを要約の対象として，発話を文，発話に含まれる単語を概念とする要約モデルを提案した[CITE]．
西川らはレビュー文書集合を要約の対象として，商品やサービスに対して評価を行っている記述を概念の単位とする複数文書要約モデルを提案した[CITE]．
最大被覆問題はNP困難である[CITE]ため，解の探索が重要な課題である．
貪欲法のような単純な探索法を用いた場合，良好な解を得られる可能性は必ずしも高くないものの，高速に解を得られる．
Khullerらによって提案された貪欲法による最大被覆問題の解は，最悪でも最適解の目的関数値の[MATH]を達成する[CITE]．
高村らはこれを複数文書要約に応用して結果を報告している[CITE]．
スタックデコーダのようなより複雑な探索法を用いることによってより良好な解を得られる可能性が高まるが，探索に要する時間も増加する．
分枝限定法を用いることで最適解を得ることができるものの，問題の規模が増加するにつれて探索に要する時間は著しく増加する．
単一文書要約に目を向けると，単一文書要約は冗長性が問題となる恐れが少ないため，冗長性を加味しない手法を利用することができる．
単一文書要約は，ナップサック問題として定式化できる[CITE]．
ナップサック問題による要約モデルも文の集合と要約長を入力とする．
最大被覆問題と異なり，ナップサック問題はそれぞれの文が直接重要度を持っている．
ナップサック問題の最適解は，合計の長さが要約長を超えない文の集合のうち，集合を構成する文の重要度の和が最大となるものである．
ナップサック問題の最適解は動的計画法の一種である動的計画ナップサックアルゴリズムによって擬多項式時間で求めることができる[CITE]．
そのため，ナップサック問題の最適解は高速に求めることができる．
しかし，ナップサック問題は文に対して直接重要度を定義し，その和を最大化するものであるため，冗長性を削減する仕組みを持たない．
従って，複数文書要約に適用した場合，冗長な要約が生成される恐れがある．
先に述べたように，最大被覆問題は複数文書要約に適した性質を持っているものの，良好な解の探索には多大な時間を要する．
一方，ナップサック問題は複数文書要約に適さないものの，最適解の探索は容易である．
本論文で提案する方法は，このトレードオフを解決するため，ナップサック問題に対して冗長性を削減する制約を加えたものである．
