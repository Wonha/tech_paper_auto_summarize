
用例提示システムは下記の部分から構成されている．
日本語と英語の2言語ニュース記事データベース
日本語類似用例検索システム
検索結果の表示システム
このシステムは次のような形で利用する．
まず英訳したい日本語ニュース記事がある．
この中で翻訳を調査したい表現があればこれをシステムに入力する．
このとき利用者は表現を編集せず，カットアンドペーストで入力することを想定している．
システムは入力に一致する表現，あるいは最も近い表現を日本語記事データベースで検索する．
結果は日本語，英語とも記事を表示単位として，日本語の検索結果を含む文とそれに対応する英文を強調して表示する．
記事を単位として表示するのは，文脈を利用者に提供することが重要だと考えるからである．
ユーザは提示された過去の翻訳例を参照して自分の翻訳を作成する．
もし結果に満足できなければ次の検索結果をシステムに要求する．
2言語記事データベースはNHKの日本語ニュース記事とその人手による英訳を1995年3月から1997年2月までの期間蓄積して作成したものである．
表[REF_tab:database]に本稿のシステムで使った日本語記事データベースの大きさを示す．
また，英語の部分もほぼ同じ規模である．
英語のニュース記事は日本語の記事全体を元にして作成しており，日本語文の単純な直訳を集めたものではない．
これは英語視聴者の視点に立った分かりやすいニュースを作成するために意訳が求められるからである．
このため文間の対応関係を単純に求めることは難しい．
そこで[CITE]で提案された手法を使って対応付けを実施した．
さらに任意の日本語文字列を高速に検索できるように日本語データベースに対してポインタ表現の部分列インデックスを作成した[CITE]．
このインデックスにより，任意長の入力文字列の出現位置を漏らさず高速に求めることができる．
この時，どの記事のどの文に出現したかもわかるようにインデックスを作成している．
[REF_sec:hajimeni]章で述べたように著者らはこのシステムを使って定型的な翻訳だけでなく意訳を支援したいと考えている．
この目標はシステムの想定利用者であるニュース翻訳者への面接調査を行って設定した．
翻訳者は日本語，英語とも基本的に堪能である．
しかし経験によってはニュース翻訳の知識が十分でない場合がある．
面接調査によると，「固有名詞」や「複合語」などの主に定型的翻訳を行う表現と，単語，表現，文，記事のさまざまな段階で必要になる意訳を支援してほしいという要求があった．
定型的翻訳，意訳とも多種類の表現が対象になる．
そこで著者らのシステムではさまざまな長さの入力に対して検索できるようにした．
具体的には一文字から一文までを入力対象にした検索システムと記事を入力対象にした検索システムの二つを作成した．
日本語ニュース記事は5文程度からなっており段落がない．
そこで実用上はこの分類で十分と考えたからである．
本稿はこのうちの一文までの文字列を入力として類似用例を検索する手法について報告する．
なお本稿ではこの検索システムを表現検索システムと呼ぶ．
表現検索システムには次の2種類の検索機能がある．
完全一致検索
一文までの範囲の文字列を入力してこれに完全に一致する表現の出現位置を[REF_sec:database]節のインデックスを参照して漏らさず求める．
この結果，これを含む記事と文とその中の位置を特定することができる．
長い入力に対しては結果が得られない可能性が高いが，慣用的な表現を検索するのに有効である
類似検索
入力文字列を形態素解析して自立語を抽出しこれをキーワードとする．
データベース中の日本語の各文を対象にキーワードをなるべく多く含む文を検索する．
すなわち入力表現と用例文の類似性は共有するキーワードの数で評価する．
キーワードの出現位置は上記の完全一致検索を利用することで高速かつ完全に求めることができる．
キーワードの組み合わせによる検索もあとで述べるように高速に実現できる．
なお類似検索は一文を検索対象とするため，以後，一文と用例を同じ意味で使用する
類似検索は次のような手順で実行する．
また具体例は図[REF_fig:nagare]に示す．
最初はすべてのキーワードを含んだ用例を検索する．
成功すればそれらを表示する．
もし，検索に失敗するか，成功しても利用者がさらに検索を要求した場合にはキーワード数を一つ減らして検索を続ける．
この時一度表示した用例は検索の対象としない．
なぜなら同じ用例を提示しても利用者は新たな情報を得られないからである．
このようにキーワード数の条件を利用者の指示で徐々に緩和して検索を実行する．
条件を緩和する場合にはキーワードすべてが同じ重要性を持つと仮定して，任意のキーワードが一つなくなった条件で検索を行う．
ここで提案した検索は特殊な処理を想定していないため頑健である．
またキーワードの選択方法，キーワードの緩和方法を変えることでさまざまな検索を実現できるため柔軟性も高い．
このため将来の拡張も比較的簡単である．
また高速なため，満足な解が得られない場合は何度でも検索できる．
さらに類似検索の結果を提示する場合も根拠としてキーワードを提示できるため直感的な理解が容易になる．
なお，完全一致検索はポインタ表現の部分列インデックスを参照することでそのまま実現できるので以降では類似検索部分のみ議論する．
[REF_sec:gaiyou]章で述べた類似検索を実現するにあたり著者らは最初キーワードのAND検索を採用した[CITE]．
すなわち入力キーワードと検索対象中のキーワードの語順の一致を考慮しない手法である．
AND検索を採用した理由の1つは高速性である．
データベース中での各キーワードの出現位置さえわかれば，これらをAND条件で含む記事を特定するのは容易で高速である．
もう1つの理由は[REF_sec:kanren]章で述べるようにAND検索を採用した用例検索システムが多く提案されており効果的であると報告されていたからである．
しかし日本語ニュース原稿を対象にAND検索を使うと問題が発生することが明らかになった．
問題の例を示そう．
例えば「政府の作業」の類似用例を検索するのに{政府and作業}で検索すると下記の文をすべて出力する．
尚，用例中の照合キーワードを太字で強調している．
例1外務省の橋本外務報道官も，きのうの記者会見で，「保証人委員会は一生懸命作業をしているが，ペルー政府と武装グループが，保証人委員会の努力を受け入れる所まで事態は進んでいない」と述べました．
例2この問題に関する自民党の対外経済協力特別委員会が今日午後開かれ，政府側は，「中国は去年七月に核実験を行なった後，今後の核実験を凍結すると表明しており，無償資金協力の再開に向けた準備作業を進めていきたい．
」と述べました．
例3また池田外務大臣は，「日本政府とペルー政府との間は信頼関係が出来ている」と述べ，両国政府の間で緊密に連絡を取っていることを明らかにするとともに，今後の日本の役割について「関係国の間で，バラバラの対応にならないよう，国際社会が一致してペルー政府の進め方を支えていくことが重要だ．
日本政府は，事件の解決に向けたペルー政府の作業がうまく運ぶよう，条件を整える努力をしてきており，今後はこうした努力が一層大切になる」と述べました．
例1には「政府」「作業」というキーワードが一文中に出現している．
しかしこの順序が逆転しており，またその間に関連がなく類似用例とは考えられない．
例2では2つのキーワードが出現しており語順も入力と同じである．
しかし両者に係り受け関係はないため類似用例とは考えられない．
例3では「政府」が6個所，「作業」が1個所出現している．
この中で，下線部が入力表現と一致しており用例3は類似用例と判断できる．
しかしこの用例には「政府」が6個所も出現しているため下線がなければ該当個所を見いだすのは容易ではない．
ここで使った入力表現「政府の作業」は短いため，この中に重複するキーワードはない．
しかし長い入力表現では同じキーワードが出現する可能性がある．
この場合，照合部分を把握するのはさらに困難になる．
まとめるとAND検索の問題は例1と例2で示したような不正解文を拾いやすいこと，正解であっても例3のように該当個所を確認しにくいことである．
このような問題が発生する主な原因は日本語ニュースの文の平均長が88.9文字[CITE]と長いことにある．
短い用例を使ったシステムではこのような問題は発生しにくいであろう．
これらの問題を解決するには構文解析を利用する手法が考えられる．
入力のキーワード間の係り受け関係を認定して，同様の係り受け関係を持つ用例を検索する手法である[CITE]．
しかし現時点では構文解析器の精度が十分でないためこの手法は採用しにくい．
そこで著者らはこれらの問題を構文解析せずに[REF_sec:algo]章で提案する近似的な手法で解決することにした．
単純なAND検索手法には[REF_sec:mondai]章で述べた問題がある．
またこれらを解決するのに構文解析を使うことは困難である．
そこで著者らはAND検索に語順と変位とよぶ制約を加えた検索手法を考案した．
尚，以下ではこの手法をAND+W+D（AND + Word order + Deviation）検索とよぶ．
この手法は構文解析をせずに，表層の単語のならびと位置情報を使って近似的に構文的な情報を捉えたものである．
本章ではAND検索，AND検索に語順を加えた検索（AND+W検索）について説明し，その上で提案手法（AND+W+D検索）を説明する．
次にその実装アルゴリズムを説明する．
以下では次の入力例を用いて説明を行う．
ここで``A, B, C''はキーワード，``*''はそれ以外の単語とする．
また簡単のためキーワードや単語はすべて一文字とする．
AND検索では次の4つの用例をすべて出力する．
ここでは用例中の照合したキーワードを強調表示している．
これらの用例は順序が違ってもキーワード``A, B, C''を含んでいるので条件を満たす．
また4つの用例の間に優先順位はない．
用例3と用例4には``A''が3つあるが，この中のどの2つと照合したかを決めることができない．
以上の問題は先に[REF_sec:mondai]章の例3で具体例で説明した問題と同一である．
入力と語順が同じ表現はそうでない表現より近いであろう．
なぜなら語順はある程度構文の情報を担うからである．
そこでAND検索に語順の制約を付加することで類似性の低い不適切な検索結果を減らせると期待できる．
例えば上記の例でキーワードの語順を考慮して検索すると用例3と用例4だけが出力される．
[REF_sec:mondai]章の例で言うと，「政府の作業」に対して例2と例3だけに解を絞ったことに相当する．
しかし，語順だけでは不十分な点がある．
まず用例3と4には最初にAが2つあるがどちらが照合キーワードなのか決めることができず照合個所を特定できない．
また用例の間に優先順位をつけることができない．
キーワードの数と語順が同じ用例が検索されたときにその提示の優先順位を決められない問題である．
これは大規模なデータベースを対象にした場合に結果を絞り込めない問題につながる．
著者らは上記の問題を解決するために以下で説明するキーワードの「変位」を使った手法を利用した．
まず入力中のキーワード[MATH]の出現位置を与える関数を[MATH]とする．
この値は任意のキーワードについて一意に決めることができる．
これに対してキーワード[MATH]の用例内での出現位置を与える関数を[MATH]とする．
もし[MATH]の値が決まればキーワード[MATH]を入力と用例で照合できることになる．
しかし，現在の例のように用例に同一キーワードが複数出現する場合には一意に照合できない．
ここで入力中の[MATH]の右隣のキーワードが[MATH]であるとする．
また用例中にも[MATH]と[MATH]と同じ2つのキーワードが出現しているとする．
ただし用例にはこの2つのキーワードが複数出現しておりキーワードの対応があいまいだとする．
この時，次式で定義するキーワード対の変位[MATH]が最小になるように[MATH]を決めることにする．
この基準を使えば変位が同じ場合を除いて一意に照合することができる．
（[REF_for:dev]）式は入力のキーワード対の間隔と用例のキーワード対の間隔の差である．
これが最も小さくなるように照合するのは，キーワードの間隔が似ている場合には係り受け関係も近い可能性があると考えたからである．
例えばこの経験則で[REF_sec:mondai]章の例3の「政府の作業」の照合を正しく行うことができる．
一般に入力のキーワードが[MATH]個ある場合には隣接キーワード対の変位を利用して，その合計が最小になるように照合する．
現在の例で入力には[MATH]というキーワードがある．
そこで[MATH]が最小となるようキーワードを対応させる．
また，この値の小さな順に用例を提示する．
この結果は次の通りである．
AND+W検索と同じ用例を検索しているが，照合したキーワードを特定できており，また検索用例に順位がついていることに注意されたい．
ここでAND+W+D検索の特徴をまとめる．
キーワードのあいまい性の解消
AND+W+D検索はキーワード照合にあいまい性がある場合にそれを解消する能力がある．
[REF_sec:mondai]章の例3の場合では「政府」の照合個所を下線部分に特定できる．
この性質は結果を表示する場合に有用である．
用例の順位付けが可能
AND+W検索とAND+W+D検索が同じ入力キーワード群で出力する用例集合は上記の例のように常に一致する．
違いの一つは用例に優先順位がつく点である．
例えば，[REF_sec:mondai]章の例の例2と例3のキーワード数は2で同じである．
しかし例3の変位合計は0であるため1位となり例2は変位が大きいので2位の解となる．
完全一致検索に近い
名詞複合語を検索する場合は構成要素の名詞が連続した用例が正解である．
AND+W+D検索ではもし入力と同一の複合語があればその変位合計は0となって第1位で出力される．
すなわち完全一致検索の機能も包含した検索手法となっている．
一方，AND+W検索ではこのような保証はない．
この性質は特に名詞複合語の検索が多くなる場合に有利である．
一般的にAND検索は同じ入力キーワード群に対して語順を考慮したAND+W検索とAND+W+D検索より多くの文を検索する傾向がある．
ただし，キーワード数を1まで減らして検索できる文の集合はいずれの手法も同じである．
すなわちデータベース中の類似用例の正解がどう定義されていても最大限に条件を緩和すれば3手法の再現率は同じことになる．
類似検索全体のアルゴリズムは[REF_sec:houshin]節に示した手順に従っている．
すなわち利用者の要求に従ってキーワードの数を一つずつ減らして検索を行う．
このとき利用者は途中で検索を打ち切ることが可能である．
また，用例はキーワードを最大個数含む段階で表示するものとし，それ以後のキーワードを削減した段階では表示しない．
ここでは上記を考慮したAND+W+D検索アルゴリズムの概要を説明する．
処理の大まかな流れは以下の通りである．
入力表現の形態素解析を行ってキーワードを求める
用例集合中でのキーワードの出現位置を完全一致検索で求める
キーワードが出現している用例についてはノードテーブルを作成する．
ノードテーブルは検索に使うデータ構造である
検索，表示処理のループ．
ユーザの要求によって繰り返す
検索処理
表示処理
入力表現は形態素解析されて自立語がキーワードとして抽出される．
キーワードのうち活用語は活用語尾や「な（い）」「つつ」など接続し得る機能語をすべて付加して展開する．
本システムではキーワードの出現位置を文字列検索（完全一致検索）によって求めている．
このため活用するキーワードは可能な出現形で検索する必要がある．
このとき活用語尾を付加しただけでは間違った品詞のキーワードを検索する場合がある．
例えば一段動詞の未然形や連用形の「衰え」を検索すると名詞の「衰え」を検索する恐れがある．
このため機能語も付加して検索することで誤検索を防いでいる．
ただし，例えば否定の「ない」は「なかっ」「なかろ」「なく」「ない」「なけれ」と活用するが「な」だけを付加する．
つまり誤検索を防ぐのに必要十分な機能語部分文字列を付加する戦略を取っている．
入力には同じ表層形のキーワードが複数出現する場合があるため，出現順に付番してすべてを区別する．
この番号をキーワードidと呼ぶ．
ただし展開で得られる派生キーワードは同一のキーワードidとする．
全用例集合を対象に各キーワード表層形を完全一致検索によって検索し，それぞれが出現した用例とその中での位置を求める．
キーワードが一つ以上出現している用例については，ノードテーブルと呼ぶデータ構造を作成する．
前節で使った入力と4つの用例に対応するノードテーブルの例を図[REF_fig:dousa]に示す．
この図の最上段は入力のキーワードの出現位置を示している．
下部の[MATH]から[MATH]に示したノード群が用例1から4に対応するノードテーブルである．
このテーブルは入力のキーワードを出現順，つまりキーワードid順に並べ，各idのキーワード表層形の出現位置をノードとして記述している．
各ノードは対応するキーワードidで管理されている．
ここで入力中にキーワードが[MATH]個あるとする．
このノードテーブルには次の性質がある．
用例のノードテーブルに対して任意のノードから右方向でかつ出現位置が増加するような経路を作成したとする．
この経路上のノード集合は語順の条件を満たすキーワード集合である．
図[REF_fig:dousa]の矢印が経路の例である．
以後，経路とはこの条件を満たす経路であるとする．
任意のノードからの経路を求める場合に，ノードをなるべく多く含んでかつ変位合計が最小となる経路はグラフの最短経路問題として定式化できるので従来のアルゴリズムで高速に求めることができる．
すなわち各ノードを始点とする最適な検索結果を求めることができる．
[MATH]個のキーワードを含む経路はキーワードidが[MATH]以下（左）であるノードを開始点とする経路上にしかない．
例えば図[REF_fig:dousa]においてキーワード数3の経路はキーワードidが1のノードと2のノードを開始点とする場合しかない．
別な見方をするとキーワードidが[MATH]に属するノードを開始点として経路を求めると，[MATH]以下のキーワードを含む場合の経路を求めることができる．
以上の性質を利用して図[REF_fig:shousai]に示すAND+W+D検索を実現した．
アルゴリズム中の変数[MATH]は全用例集合を示す[MATH]．
[MATH]は検索対象の用例の番号を記録するリスト変数である（b5）．
一度表示した用例はこのリストから削除することで以降の処理を行わないようにする（d3）．
[MATH]は用例[MATH]に関する情報を格納する構造体の配列である．
この変数には用例[MATH]の最大キーワード含有数[MATH]，その変位合計[MATH]，キーワード群の出現位置[MATH]を記録する（c7）．
検索処理の中心部分は（c1--c10）である．
キーワード数[MATH]の用例を検索するために開始キーワードidを（c2）で設定している．
このあと各用例[MATH]の中でこのキーワードidに属するノードから最適経路を探索している（c5）．
検索開始キーワードidはキーワード数の緩和（d6）に伴って1から順に増加するように設定されている（c2）．
このため（性質2）から用例[MATH]でキーワード数[MATH]の経路が見つかった場合に，すでに同数の解が以前の開始キーワードid（[MATH]）での探索で発見されている可能性がある．
そこでこのような場合には変位合計の小さい解だけを残す処理を行っている（c6--c7）．
図[REF_fig:dousa]の矢印で示す経路と変位は，キーワードid 1のノードを開始点として最適経路を求めた結果である．
用例1と2についてはキーワード数3の解が，用例3と4についてはキーワード数4の解が求められている．
以上のように本手法はキーワードを最大限含む順に解を求めている．
多くの場合利用者は条件緩和の途中で検索を打ち切るので，この順序で解を求めている．
ただしこの手法では用例のノード集合を最初に全部保持するためデータベースの大きさによってはメモリの消費が問題になる可能性がある．
この場合には各用例の最適解を最初に求めるなど変更する余地はある．
いずれにせよ動的計画法を利用すれば実用的な速度で解を求めることができる．
