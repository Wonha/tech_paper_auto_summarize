用例提示システムの概要
\label{sec:gaiyou}
\subsection{構成}
用例提示システムは下記の部分から構成されている．
\begin{itemize}
 \item 日本語と英語の 2 言語ニュース記事データベース
 \item 日本語類似用例検索システム
 \item 検索結果の表示システム
\end{itemize}

このシステムは次のような形で利用する．まず英訳したい日本語ニュース記
事がある．この中で翻訳を調査したい表現があればこれをシステムに入力する．この
とき利用者は表現を編集せず，カットアンドペーストで入力することを想定している．
システムは入力に一致する表現，あるいは最も近い表現を日本語記事データベー
スで検索する．結果は日本語，英語とも記事を表示単位として，日本語の検索
結果を含む文とそれに対応する英文を強調して表示する．記事を単位として表
示するのは，文脈を利用者に提供することが重要だと考えるからである．ユー
ザは提示された過去の翻訳例を参照して自分の翻訳を作成する．もし結果に満
足できなければ次の検索結果をシステムに要求する．
\vspace{-3mm}
\subsection{データベース}
\label{sec:database}
\vspace{-1mm}
2 言語記事データベースは NHK の日本語ニュース記事とその人手による英訳
を 1995 年 3 月から 1997 年 2 月までの期間蓄積して作成したものである．
表~\ref{tab:database}~に本稿のシステムで使った日本語記事データベースの大きさを示す
\footnote{表~\ref{tab:database}~中の文の数は，記事内容を表す文と，記事
の作成者，タイトルといった付加情報を表す文を合わせた数である．検索ではこれら
すべてを対象としている．記事内容を表す文は 446,444 件（76 MB）である．
}．また，英語の部分もほぼ同じ規模である．

英語のニュース記事は日本語の記事全体を元にして作成しており，日本語文の単純
な直訳を集めたものではない．これは英語視聴者の視点に立った分かりやすい
ニュースを作成するために意訳が求められるからである．このため文間の対応関係
を単純に求めることは難しい．そこで\cite{Kuma97}で提案された手法を使って
対応付けを実施した．

さらに任意の日本語文字列を高速に検索できるように日本語データベースに対
してポインタ表現の部分列インデックスを作成した\cite{Naga96}．このイン
デックスにより，任意長の入力文字列の出現位置を漏らさず高速に求めること
ができる．この時，どの記事のどの文に出現したかもわかるようにインデック
スを作成している．

\begin{table}
 \begin{center}
  \caption{日本語部分のデータベースの規模}
  \begin{tabular}{l|r}\hline\hline
   記事数 & 94,830 件\\
   文の数 & 1,615,119 件\\
   バイト数 & 104 MB\\\hline
  \end{tabular}
  \label{tab:database}
 \end{center}
\end{table}

\subsection{検索部分の設計方針}
\label{sec:houshin}
\ref{sec:hajimeni}~章で述べたように著者らはこのシステムを使って定型
的な翻訳だけでなく意訳を支援したいと考えている．
この目標はシステムの想定利用者であるニュース翻訳者への面接調査を行って
設定した．
翻訳者は日本語，英語とも基本的に堪能である．しかし経験によってはニュー
ス翻訳の知識が十分でない場合がある．
面接調査によると，「固有名詞」や「複合語」などの主に定型的翻訳を行う表
現と，単語，表現，文，記事のさまざまな段階で必要になる意訳を支援してほ
しいという要求があった．

定型的翻訳，意訳とも多種類の表現が対象になる．そこで著者らのシステムで
はさまざまな長さの入力に対して検索できるようにした．具体的には一文字か
ら一文までを入力対象にした検索システムと記事を入力対象にした検索システ
ムの二つを作成した．日本語ニュース記事は 5 文程度からなっており段落が
ない．そこで実用上はこの分類で十分と考えたからである．
本稿はこのうちの一文までの文字列を入力として類似用例を検索す
る手法について報告する
\footnote{
記事を入力とした検索および閲覧システムに付いては\cite{Tan97a,Tan97b,Tan99a}を参照されたい．
}
．なお本稿ではこの検索システムを表現検索システムと呼ぶ．

表現検索システムには次の 2 種類の検索機能がある．
\begin{itemize}
\vspace{-0.25mm}
\item  完全一致検索\\
\vspace{-0.25mm}\hspace*{-3pt}
一文までの範囲の文字列を入力して
これに完全に一致する表現の出現位置を~\ref{sec:database}~節のインデック
スを参照して漏らさず求める．この結果，これを
含む記事と文とその中の位置を特定することができる．長い入力に対して
は結果が得られない可能性が高いが，慣用的な表現を検索するのに有効である
\vspace{-0.25mm}
\item  類似検索\\
\vspace{-0.25mm}\hspace*{-3pt}
入力文字列を形態素解析して自立語を抽出しこれをキーワードとする
\footnote{このとき活用する自立語は活用形に展開し，さらに間違ったキーワードを検索しないように接続し得る機能語を付与した展開を行う．\ref{sec:jissou}~節参照．}．
データベース中\break
の日本語の各文を対象にキーワードをなるべく多く含む文を検索す
る．すなわち入力表現
と用例文の類似性は共有するキーワードの数で評価する．キーワードの出現位
置は上記の完全一致検索を利用することで高速かつ完全に求めることができる．
キーワードの組み合わせによる検索もあとで述べるように高速に実現できる．
なお類似検索は一文を検索対象とするため，以後，一文と用例を同じ意味で使
用する
\end{itemize}
類似検索は次のような手順で実行する．また具体例は図~\ref{fig:nagare} に
示す．
\begin{enumerate}
\item 最初はすべてのキーワードを含んだ用例を検索する．成功すればそれら
を表示する．
\item もし，検索に失敗するか，成功しても利用者がさらに検索を要求
した場合にはキーワード数を一つ減らして検索を続ける．この時一度表示し
た用例は検索の対象としない．なぜなら同じ用例を提示しても利用者は新たな
情報を得られないからである．
\end{enumerate}
このようにキーワード数の条件を利用者の指示で徐々に緩和して検索を実行す
る．条件を緩和する場合にはキーワードすべてが同じ重要性を持つと仮定して，
任意のキーワードが一つなくなった条件で検索を行う．

ここで提案した検索は特殊な処理を想定していないため頑健である．またキーワー
ドの選択方法，キーワードの緩和方法を変えることでさまざまな検索を実現で
きるため柔軟性も高い．このため将来の拡張も比較的簡単である．
また高速なため，満足な解が得られない場合は何度でも検索できる．
さらに類似検索の結果を提示する場合も根拠としてキーワードを提示できるた
め直感的な理解が容易になる．
なお，完全一致検索はポインタ表現の部分列インデックスを参照することでそのまま
実現できるので以降では類似検索部分のみ議論する．

\begin{figure}
 \begin{center}
  \epsfile{file=98.eps,height=10cm}
  \caption{類似検索概念図}
  \label{fig:nagare}
 \end{center}
\end{figure}
AND 検索の問題点
\label{sec:mondai}
\ref{sec:gaiyou}~章で述べた類似検索を実現するにあたり著者らは最初キー
ワードの AND 検索を採用した\cite{Salt83}．
すなわち入力キーワードと検索対象中のキーワードの語順の一致
を考慮しない手法である．

AND 検索を採用した理由の 1 つは高速性である．データベース中での各キーワードの
出現位置さえわかれば，これらを AND 条件で含む記事を特定するのは容易で高
速である．
もう 1 つの理由は
\ref{sec:kanren}~章で述べるように AND 検索を採用した用例検索システムが
多く提案されており効果的であると報告されていたからである．

しかし日本語ニュース原稿を対象に AND 検索を使うと問題が発生することが
明らかになった．
問題の例を示そう．
例えば「政府の作業」の類似用例を検索するのに \{政府 {\bf and} 作業\} で検索する
と下記の文をすべて出力する．尚，用例中の照合キーワードを太字で強調している．
\smallskip
\begin{quote}
例 1

外務省の橋本外務報道官も，きのうの記者会見で，「保証人委員会は一生懸命
{\gt 作業}をしているが，ペルー{\gt 政府}と武装グループが，保証人委員会
の努力を受け入れる所まで事態は進んでいない」と述べました．

例 2

この問題に関する自民党の対外経済協力特別委員会が今日午後開かれ，{\gt 
政府}側は，「中国は去年七月に核実験を行なった後，今後の核実験を凍結す
ると表明しており，無償資金協力の再開に向けた準備{\gt 作業}を進めていき
たい．」と述べました．

例 3

また池田外務大臣は，「日本{\gt 政府}とペルー{\gt 政府}との間は信頼関係
が出来ている」と述べ，両国{\gt 政府}の間で緊密に連絡を取っていることを
明らかにするとともに，今後の日本の役割について「関係国の間で，バラバラ
の対応にならないよう，国際社会が一致してペルー{\gt 政府}の進め方を支え
ていくことが重要だ．日本{\gt 政府}は，事件の解決に向けたペルー\underline{{\gt 政府}の{\gt 作業}}がうまく運ぶよう，条件を整える努力をしてきており，今後
はこうした努力が一層大切になる」と述べました．
\end{quote}

\smallskip

例 1 には「政府」「作業」というキーワードが一文中に出現している．しかしこの順
序が逆転しており，またその間に関連がなく類似用例とは考えられない．
例 2 では 2 つのキーワードが出現しており語順も入力と同じである．しかし
両者に係り受け関係はないため類似用例とは考えられない．
例 3 では「政府」が 6 個所，「作業」が 1 個所出現している．この中で，
下線部が入力表現と一致しており用例 3 は類似用例と判断でき
る．しかしこの用例には「政府」が 6 個所
も出現しているため下線がなければ該当個所を見いだすのは容易ではない．

ここで使った入力表現「政府の作業」は短いため，この中に重複するキー
ワードはない．
しかし長い入力表現では同じキーワードが出現する可能性がある．こ
の場合，照合部分を把握するのはさらに困難になる．

まとめると AND 検索の問題は例 1 と 例 2 で示したような不正解文
を拾いやすいこと，正解であっても例 3 のように該当個所を確認しにくいこ
とである．このような問題が発生する主な原因は日本語ニュースの文の平均長が 
88.9 文字\cite{Kuma96}と長いことにある．短い用例を使ったシステムではこ
のような問題は発生しにくいであろう．

これらの問題を解決する
には構文解析を利用する手法が考えられる．入力のキー
ワード間の係り受け関係を認定して，同様の係り受け関係を持つ用例を検索す
る手法である\cite{Hyou94}．
しかし現時点では構文解析器の精度が十分でないためこの手法は採用しにくい．そこで
著者らはこれらの問題を構文解析せずに \ref{sec:algo}~章で提案する近似的な手
法で解決することにした．
提案手法
\label{sec:algo}
単純な AND 検索手法には\ref{sec:mondai}~章で述べた問題がある．またこ
れらを解決するのに構文解析を使うことは困難である．そこで
著者らは AND 検索に語順と変位とよぶ制約を加えた検索手法を考案した．尚，
以下ではこの手法を AND+W+D（AND + Word order + Deviation）検索とよぶ．
この手法は構文解析をせずに，表層の単語のならびと位置情報を使って近似
的に構文的な情報を捉えたものである．
本章では AND 検索， AND 検索に語順を加えた検索（AND+W 検索）について説
明し，その上で提案手法（AND+W+D 検索）を説明する．次にその実装アル
ゴリズムを説明する．

以下では
次の入力例を用いて説明を行う．
\begin{center}
\begin{tabular}{ll}
入力表現 & **A*B**A*C*
\end{tabular}
\end{center}
ここで ``A, B, C'' はキーワード， ``*'' はそれ以外の単語とする．また簡
単のためキーワードや単語はすべて一文字とする．
\subsection{AND 検索}
AND 検索では次の 4 つの用例をすべて出力する．ここでは用例中の照合
したキーワードを強調表示している．
\begin{center}
\begin{tabular}{ll}
用例 1 & *\underline{\bf A}**\underline{\bf B}*\underline{\bf C}**\underline{\bf A}**\\
用例 2 & *\underline{\bf AA}*\underline{\bf B}***\underline{\bf C}\\
用例 3 & *\underline{\bf A}**\underline{\bf A}**\underline{\bf B}*\underline{\bf A}**\underline{\bf C}\\
用例 4 & *\underline{\bf A}**\underline{\bf A}*\underline{\bf B}**\underline{\bf A}*\underline{\bf C}
\end{tabular}
\end{center}

これらの用例は順序が違ってもキーワード ``A, B, C'' を含んでいるので条
件を満たす．また 4 つの用例の間に優先順位はない．

用例 3 と用例 4 に
は ``A'' が 3 つあるが，この中のどの 2 つと照合したかを決めることができな
い
\footnote{入力に合わせて 2 つ ``A'' を選択するのであれば任意に選択する
しかなくあいまいである．}．
以上の問題は先に \ref{sec:mondai}~章の例 3 で具体例で説明した問題と同一であ
る．

\subsection{語順を考慮した AND 検索}
入力と語順が同じ表現はそうでない表現より近いであろう．なぜなら語順はある程
度構文の情報を担うからである．そこで AND 検索に語順の制約を付加するこ
とで類似性の低い不適切な検索結果を減らせると期待できる．
例えば上記の例でキー
ワードの語順を考慮して検索すると用例 3 と用例 4 だけが出力される．
\ref{sec:mondai}~章の例で言うと，「政府の作業」に対して例 2 と例 3 だ
けに解を絞ったことに相当する．
\begin{center}
\begin{tabular}{ll}
用例 3 & *\underline{\bf A}**A**\underline{\bf B}*\underline{\bf A}**\underline{\bf C}\\
用例 4 & *\underline{\bf A}**A*\underline{\bf B}**\underline{\bf A}*\underline{\bf C}
\end{tabular}
\end{center}
しかし，語順だけでは不十分な点がある．
まず用例 3 と 4 には最初に A が 2 つあるがどちらが照合キーワードなのか決め
ることができず照合個所を特定できない．
また用例の間に優先順位をつけることができない．キーワードの数と語順が同
じ用例が検索されたときにその提示の優先順位を決められない問題
である．これは大規模なデータベースを対象にした場合に結果を絞り込めない
問題につながる．
\subsection{語順と変位を考慮した AND 検索}
\label{sec:teian}
著者らは上記の問題を解決するために以下で説明するキーワードの「変位」を
使った手法を利用した．

まず入力中のキーワード $x_i$ の出現位置を与える関数を $org(x_i)$ とす
る．この値は任意のキーワードについて一意に決めることができる．
これに対してキーワード $x_i$ の用例内での出現位置を与える関数を 
$pos(x_i)$ とする\footnote{$org(x_i), pos(x_i)$ は差をとるためデータベース中での絶対位置であっても文毎の相対位置であってもかまわない．以下では文毎の相対位置とする．}．
もし $pos(x_i)$ の値が決まればキーワード $x_i$ を入力と用例で照合で
きることになる．しかし，現在の例のように用例に同一キーワードが複数出現す
る場合には一意に照合できない．

ここで入力中の $x_i$ の右隣のキーワードが $x_{i+1}$ であるとする．また用例中にも $x_i$ と $x_{i+1}$ と同じ 2 つのキーワードが出現しているとする．ただし用
例にはこの 2 つのキーワードが複数出現しておりキーワードの対応があいま
いだとする．この時，次式で定義するキーワード対の変位 
$dev(x_i,x_{i+1})$ が最小になるように $pos(x_i),pos(x_{i+1})$ を決める
ことにする．この基準を使えば変位が同じ場合を除いて一意に照合することが
できる．

\begin{equation}
dev(x_i,x_{i+1}) = |(org(x_{i+1})-org(x_i))  - ( pos(x_{i+1})-pos(x_i))|
\label{for:dev}
\end{equation}

（\ref{for:dev}）~式は入力のキーワード対の間隔と用例のキーワード対の間
隔の差である．これが最も小さくなるように照合するのは，キーワードの間隔
が似ている場合には係り受け関係も近い可能性があると考えたからである．
例えばこの経験則で~\ref{sec:mondai}~章の例 3 の「政府の作業」の照合を
正しく行うことができる．

一般に入力のキーワードが $n(n \ge 2)$ 個ある場合には隣接キーワード対の
変位を利用して，その合計が最小になるように照合する\footnote{隣接キーワー
ド一組では必ずしも構文の近さを反映しない場合がある．「政府の作業」と
「政府に作業」は係り受けは違うが変位は 0 である．キーワードが増えて制
限が強くなるほど構文的近さの良い近似になる傾向がある．}．
\begin{equation}
 \sum_{i=1}^{n-1} dev(x_i, x_{i+1})
\end{equation}

現在の例で入力には $\{A,B,A,C\}$ というキーワードがある．そこ
で $dev(A, B)+dev(B,A)+dev(A,C)$ が最小となるようキーワードを対応させ
る．また，この値の小さな順に用例を提示する．この結果は次の通りである．

\begin{center}
\begin{tabular}{lll}
用例 4 & *A**\underline{\bf A}*\underline{\bf B}**\underline{\bf A}*\underline{\bf C} & 変位合計 0\\
用例 3 & *A**\underline{\bf A}**\underline{\bf B}*\underline{\bf A}**\underline{\bf C} & 変位合計 3
\end{tabular}
\end{center}

AND+W 検索と同じ用例を検索しているが，照合したキーワードを特定できて
おり，また検索用例に順位がついていることに注意されたい．

ここで AND+W+D 検索の特徴をまとめる．
\begin{itemize}
\item キーワードのあいまい性の解消\\
AND+W+D 検索はキーワード照合にあいまい性がある場合にそれを解消する能力
がある．\ref{sec:mondai}~章の例 3 の場合では「政府」の照合個所を下線部分に特
定できる．この性質は結果を表示する場合に有用である．
\item 用例の順位付けが可能\\
AND+W 検索 と AND+W+D 検索が同じ入力キーワード群で出力する用例集合は上
記の例のように常に一致する．違いの一つは用例に優先順位がつく点である．
例えば，\ref{sec:mondai}~章の例の例 2 と例 3 のキーワード数は 2 で同じ
である．しかし例 3 の変位合計は 0 であるため 1 位となり例 2 は変位が大
きいので 2 位の解となる．
\item 完全一致検索に近い\\
名詞複合語を検索する場合は構成要素の名詞が連続した用例が正解である．AND+W+D 検索ではもし入力と同一の複合語があればその変位合計は 0 となっ
て第 1 位で出力される．すな
わち完全一致検索の機能も包含した検索手法となっている．一方，AND+W 検索
ではこのような保証はない．この性質は特に名詞複合語の検索が多くなる場
合に有利である．
\end{itemize}

一般的に AND 検索 は同じ入力キーワード
群に対して語順を考慮した AND+W 検索 と AND+W+D 検索より多くの文を検索する傾
向がある．
ただし，キーワード数を 1 まで減らして検索できる文の集合はいずれの手法
も同じである．すなわちデータベース中の類似用例の正解がどう定義されていて
も最大限に条件を緩和すれば 3 手法の再現率は同じことになる．
\subsection{アルゴリズムの概要}
\label{sec:jissou}
類似検索全体のアルゴリズムは~\ref{sec:houshin}~節に示した手順に
従っている．すなわち利用者の要求に従ってキーワードの数を一つずつ減らして検索を
行う．このとき利用者は途中で検索を打ち切ることが可能である
\footnote{実際，キーワード数が一つになるまで条件を緩和することは考えにくい．}
．
また，用例はキーワードを最大個数含む段階で表示するものとし，それ以後の
キーワードを削減した段階では表示しない．
ここでは上記を考慮した AND+W+D 検索アルゴリズムの概要を説明する．
処理の大まかな流れは以下の通りである．
\begin{itemize}
 \item 入力表現の形態素解析を行ってキーワードを求める
 \item 用例集合中でのキーワードの出現位置を完全一致検索で求める
 \item キーワードが出現している用例についてはノードテーブルを作成する．
ノードテーブルは検索に使うデータ構造である
 \item 検索，表示処理のループ．ユーザの要求によって繰り返す
 \begin{itemize}
  \item 検索処理
  \item 表示処理
 \end{itemize}
\end{itemize}

入力表現は形態素解析されて自立語がキーワードとして抽出される．
キーワードのうち活用語は活用語尾や「な（い）」「つつ」など接続し得る機能語をすべて付加して展開する．本システムではキーワードの出現位置を
文字列検索（完全一致検索）によって求めている．このため活用するキーワー
ドは可能な出現形
で検索する必要がある．このとき活用語尾を付加しただけでは間違った品詞のキーワー
ドを検索する場合がある．例えば一段動詞の未然形や連用形の「衰え」を検索
すると名詞の「衰え」を検索する恐れがある．このため機能語も付加して検索
することで誤検索を防いでいる．
ただし，例えば否定の「ない」は「なかっ」「なかろ」「なく」「ない」「な
けれ」と活用するが「な」だけを付加する．つまり誤検索を防ぐのに必要十
分な機能語部分文字列を付加する戦略を取っている．

入力には同じ表層形のキーワードが複数出現する場合があるため，出現順に付
番してすべてを区別する．この番号をキーワード id と呼ぶ．ただし展開で得られ
る派生キーワードは同一のキーワード id とする．

全用例集合を対象に各キーワード表層形を完全一致検索によって検索し，そ
れぞれが出現した用例とその中での位置を求める．キーワー
ドが一つ以上出現している用例については，ノードテーブルと呼ぶデータ構造
を作成する．

前節で使った入力と 4 つの用例に対応するノードテーブルの例を図~\ref{fig:dousa}~に示す．
\begin{figure}
\begin{center}
\epsfile{file=104.eps,height=10cm}
\caption{ノードテーブルと検索結果}
\label{fig:dousa}
\vspace*{-1mm}
\end{center}
\end{figure}

この図の最上段は入力のキーワードの出現位置を示している．下部の $g_1$ 
から $g_4$ に示したノード群が用例 1 から 4 に対応するノードテーブルで
ある．このテーブルは入力のキーワードを出現順，つまりキーワード id 順に
並べ，各 id のキーワード表層形の出現位置をノードとして記述して
いる．
各ノードは対応するキーワード id で管理されている\footnote{活用する語の場合には同一キーワード id に複数の表層形があ
り，そのすべての出現位置を同一キーワード id 下のノードとする．}．

ここで入力中にキーワードが $M$ 個あるとする．
このノードテーブルには次の性質がある．
\begin{itemize}
  \item [（性質 1）] 用例のノードテーブルに対して任意のノードから
右方向でかつ出現位置が増加するような経路を作成したとする．この経路上のノード
集合は語順の条件を満たすキーワード集合である．
図~\ref{fig:dousa}~の矢印が経路の例である．以後，経路とはこの
条件を満たす経路であるとする．

任意のノードからの経路を求める場合に，ノードをなるべく多く含んでかつ変
位合計が最小となる経路はグラフの最短経路問題として定式化できるので従来のアルゴ
リズムで高速に求めることができる
\footnote{ノード間の辺のスコアは式~(\ref{for:dev})~で定義する変
位とする．}
．すなわち各ノードを始点とする最適な検索結果を求めることができる．
  \item [（性質 2）] $N$ 個のキーワードを含む経路はキーワード id  
が $M-N+1$ 以下（左）であるノードを開始点とする経路上にしかない．
例えば図~\ref{fig:dousa}~においてキーワード数 3 の経路は 
キーワード id が 1  のノードと 2 のノードを開始点とする場合しかない．

別な見方をするとキーワード id が $M-N+1$ に属するノードを開始点として
経路を求めると，$N$ 以下のキーワードを含む場合の経路を求めることができ
る．
\end{itemize}
以上の性質を利用して図~\ref{fig:shousai}~に示す AND+W+D 検索を実現した．
\begin{figure}
\begin{quote}
\baselineskip=12pt
\sfcode`;=3000
\def\q{}
a1) \q 入力のキーワードを抽出，展開する;\\
a2) \q 用例集合でのキーワードの出現位置（文と位置）をすべて求める;\\
a3) \q $M$  キーワード数;\\
a4) \q $N = M$;\\[3mm]
b1) \q  $G \leftarrow \emptyset$;\\
b2) \q {\bf foreach} \{ $i \mid s_i \in S$\} \{   全用例に対して\\
b3) \q \q {\bf if} (用例 $s_i$ がキーワードを一つ以上含むならば) \{\\
b4) \q \q \q 用例 $s_i$ のノードテーブル $g_i$ を作成する;\\
b5) \q \q \q $G \leftarrow G \cup \{i\}$;  検索対象用例リストを作成
する\\ 
b6) \q \q \}\\
b7) \q \}\\[3mm]
c1) \q {\bf while} ( $N > 0$) \{\\
c2) \q \q $startId = M-N+1$;  開始点のキーワード id の設定\\
c3) \q \q {\bf foreach} \{$i \mid i \in G$\}\{  検索対象用例 $i$ に対して \\
c4) \q \q \q {\bf foreach} \{$n \mid g_i$ の $startId$ に属する各ノード
\}\{\\
c5-1) \q \q \q \q $g_i$ の ノード $n$ から始まる最適経路を求める\\
c5-2) \q \q \q \q 最適経路上のノード数を $num$\\
c5-3) \q \q \q \q 変位を $newdev$\\
c5-4) \q \q \q \q キーワード出現位置リストを $list$ とする\\
c6) \q \q \q \q {\bf if} ($R(i).dev > newdev$) \{\\
c7-1) \q \q \q \q \q $R(i).dev  \leftarrow newdev;$\\
c7-2) \q \q \q \q \q $R(i).kwd\_num \leftarrow num;$\\
c7-3) \q \q \q \q \q $R(i).kwd\_list \leftarrow list;$\\
c8) \q \q \q \q \}\\
c9) \q\q \q \}\\
c10) \q \q \}\\[3mm]
d1) \q \q {\bf foreach} \{$i \mid i \in \{R(i).kwd\_num = N\}\}$\{\\
d2) \q \q \q {\it dev} の小さい順に用例 $i$ とその照合キーワードを表示する;\\
d3) \q \q \q $G \leftarrow G - \{i\}$; 表示した集合を対象用例から削除
する\\
d4) \q \q \}\\
d5) \q \q {\bf if} ( 利用者が終了を指示 {\bf or} $G = \emptyset$ ) \{ 終了;\}\\
d6) \q \q {\bf else} \{ $N \leftarrow N - 1$;\}\\
d7) \q \}
\end{quote}
\caption{AND+W+D 検索の基本アルゴリズム}
\label{fig:shousai}
\end{figure}

アルゴリズム中の変数 $S$ は全用例集合を示す$S = \{s_1, s_2,\ldots s_i, \ldots\}$．$G$ は検索対象の用例の番号を記録するリスト変数である（b5）．
一度表示した用例はこのリストから削除することで以降の処理を行わないように
する（d3）． 

$R(i)$ は用例 $s_i$ に関する情報を格納する構造体の配列である．この変数
には用例 $s_i$ の最大キーワード含有数 
$R(i).kwd\_num$，その変位合計 $R(i).dev$，キーワード群の出現位置 
$R(i).kwd\_list$ を記録する（c7）．

検索処理の中心部分は（c1--c10）である．キーワード数 $N$ の用例を検索す
るために開始キーワード id を（c2）で設定している．このあと各用例 $i$ 
の中でこのキーワード id に属するノードから最適経路を探索している（c5）．
検索開始キーワード id はキー
ワード数の緩和（d6）に伴って 1 から順に増加するように設定されている（c2）．こ
のため（性質 2） から用例 $i$ でキーワード数 $N$ の経路が見つかった場
合に，すでに同数の解が以前の開始キーワード id （$\{1, \ldots, M-N\}$）
での探索で発見されている可能性がある．そこでこのような場合には変位合計
の小さい解だけを残す処理を行っている（c6--c7）．

図~\ref{fig:dousa}~の矢印で示す経路と変位は，キーワード id 1 のノード
を開始点として最適経路を求めた結果である．用例 1 と 2 についてはキーワー
ド数 3 の解が，用例 3 と 4 についてはキーワード数 4 の解が求められてい
る．

以上のように本手法はキーワードを最大限含む順に解を求めている．多くの場
合利用者は条件緩和の途中で検索を打ち切るので，この順序で解を求めている．
ただしこの手法では用例のノード集合を最初に全部保持するためデータベース
の大きさによってはメモリの消費が問題になる可能性がある．この場合には各
用例の最適解を最初に求めるなど変更する余地はある．いずれにせよ動的計画
法を利用すれば実用的な速度で解を求めることができる．
