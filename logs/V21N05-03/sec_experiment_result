実験にはNTCIR-9とNTCIR-10の特許データを使い，日英翻訳を行った．
日本語の形態素解析にはMecabを使用した．
英語文の語彙化構文木を作成するため，Enju [CITE]を用いて全ての英語文を解析した．
機械翻訳には，デコーダにMoses [CITE]，単語アライメントにGIZA++ [CITE]，言語モデルにSRILM [CITE]を用いた．
データ及びツールについては表2と表3にまとめる．
Enjuによって解析した語彙化構文木を文献[CITE]の規則によって中間英語木へと変換した．
削除した冠詞の挿入マークは，その冠詞を含む句の中で最も葉に近い非終端記号に付与した．
冠詞を含む句の非終端記号がない場合，品詞に挿入マークを付与した．
日本語の助詞挿入は文献[CITE]に従って行った．
提案手法の単語並べ替えモデルの学習は平均化パーセプトロン[CITE]で行った．
また，学習データの量が多いため，素性ハッシング[CITE]を使って，素性計算を高速化した．
提案手法，及び，比較手法での冠詞挿入によって``a/an''が挿入された場合，挿入位置の後ろに位置する単語の1文字目が母音の場合，anを挿入し，子音の場合，aを挿入して翻訳結果を出力した．
日本語助詞は事後並べ替えの解析時には1単語として扱い，翻訳結果の出力時には全て取り除いた．
提案手法の単語並べ替え性能を調べるため，全訓練データの中間英語木3,191,228文からランダムに300,000文を抽出し，並べ替えのための構文解析器を学習した．
ただし，中間英語木において冠詞削除，及び，日本語助詞の挿入は行っておらず，ここでは並べ替えのみ（挿入アクションは用いない）を行うようにしている．
なぜなら，冠詞削除や日本語助詞の挿入は翻訳時の単語アライメント性能向上を意図した操作であり，ここでは純粋に提案法の構文解析，及び，単語並べ替え性能を調べることが目的だからである．
図[REF_fig:comp]では提案法を学習したときの学習イテレーションと開発データに対するF値の関係，図[REF_fig:comp2]にはBLEUスコア[CITE]との関係を示す．
F値の計算はEVALBを用いて評価した．
``Base''は通常のビームサーチ，``DP''は動的計画法付きビームサーチ，``Hash''は第[REF_sec:amb]節で述べたハッシュテーブルによる枝刈りを表し，各システムはビーム幅12で訓練した．
図[REF_fig:comp]と図[REF_fig:comp2]から，``DP''や``Hash''に比べて，``Base''による学習の効率が悪いことがわかる．
図[REF_fig:comp3]と図[REF_fig:comp4]では``Base''のビーム幅を12，24，36にしたときの学習イテレーションと開発データに対するF値，及び，BLEUとの関係を示した．
これから``Base''による学習は，``DP''や``Hash''よりもビーム幅を大きく設定しなければ，学習が円滑に行えないことがわかる．
表[REF_tab:f-m]は，NTCIR-9のテストデータの中間英語文を各システムによって解析したときのBLEU，RIBES [CITE]，構文解析性能（再現率，適合率，F値，文正解率），解析時間を示した．
文献[CITE]は論文から抜粋した数値を示す．
Berkeley構文解析はデフォルト設定で学習し，6回の学習イテレーションを行った．
結果からは，提案手法のうち``DP''法が他の手法に比べ，高い性能を達成できることがわかった．
表[REF_tab:re1]では，表[REF_tab:feats]の非局所素性を全て取り除いた(nf.無し)モデルを学習し，nf.有りのモデルと比較した．
実験結果からは，非局所素性が並べ替えの性能向上に寄与していることがわかる．
表[REF_tab:re2]では，[MATH]-best出力時に，出力リストの中にどれだけの種類の文字列があるかを示す．
表[REF_tab:re2]には，テストデータに対して出力した各[MATH]-bestリスト中の文字列種類数の合計/ [MATH]-bestリストサイズの合計を示し，分子の数が多い程，多様な並べ替え文字列を出力できることを意味する．
例えば，``Base''法の[MATH]-bestリストには，3, 4種類程度の並べ替え文字列しか存在せず，Berkeley構文解析でも同様に，同じ文字列を表す解析結果を大量に出力しているがわかる．
一方，``Hash''法ではこれらの冗長な表現を排除し，多様な解析結果を出力できている．
以上の実験から，シフトリデュース法による単語並べ替え性能を向上させるには，Spurious Ambiguityの問題に対処し，ビーム幅を効率的に活用することが極めて重要であることがわかった．
よって，以下の翻訳実験では，提案法は全て``DP''法を用いて行う．
``Hash''は``DP''よりも同じ文字列を多く排除できる一方で，文字列を動的に作り出す必要があり，計算コストが高い．
``Hash''法のコスト削減や``DP''法との併用については，今後の課題である．
通常の日英翻訳器は，Mosesのdistortion limitを0，6，12，20に設定し，言語モデルには訓練データの全英語文から学習した6-gram言語モデルを使用した．
Mosesの学習はBLEUに対してMinimum error rate training (MERT) [CITE]を行った．
単語並べ替えによる翻訳実験では，学習データに中間英語木3,191,228文から抽出した中間英語文を使用し，日本語から中間英語文への翻訳モデルを作成した．
中間英語文の言語モデルは6-gramまで学習し，Mosesのdistortion limit (dist)は0に設定した．
Mosesの学習はBLEUに対してMERTで行った．
事後並べ替えは翻訳器から出力した中間英語文の1-bestを単語並べ替えモデルで元の英語文にし，評価を行った．
表[REF_tab:mtresults]に提案手法と他の手法の実験結果を示す．
表[REF_tab:mtresults]からは提案手法が文献[CITE]のモデルを上回る性能を達成していることがわかる．
文献[CITE]の実験結果は我々の実験によるものではないが，実験に使用したツールやデータは同一のものであることを明記しておく．
さらに，[REF_sec:sr]節で定義した非局所素性(nf.)を使ったモデル(nf.有り)と取り除いたモデル(nf.無し)を比較すると，非局所素性が有効であることがわかる．
BLEUスコアを使って，有意水準5%で2項検定を行ったところ，nf.無しモデルとnf.有りモデルには有意な差が確認された．
また，非局所素性を使うことによる解析時間への影響も少ない．
提案手法では単語並べ替えと冠詞挿入を同時に行っているが，それらを同時解析することの利点を分析するため，様々なシステムとの比較を行った．
NTCIR-9と-10のテストデータに対する実験結果は表[REF_tab:article]に示す．
単語並べ替えと冠詞生成の同時処理の有効性(1. 2. 3. 4.) 2.の結果は1.の結果から冠詞を削除したときの性能を示している．
冠詞を削除すると，BLEU評価尺度による翻訳精度が極端に落ちることがわかる．
これはBLEUが[MATH]-gram単位で評価を行う尺度だからである．
次に，3.の結果は，[MATH]-gram手法によって2.の翻訳文へ冠詞挿入を行ったときの結果を示している．
[MATH]-gram手法は文献[CITE]と同様の冠詞挿入手法を意味する．
この結果から，[MATH]-gram手法によって性能は向上するが，1.の同時解析ほどの性能は得られないことがわかる．
提案手法と[MATH]-gram手法による翻訳結果を比較すると，提案手法の方が冠詞挿入を多く行っていることがわかった．
[MATH]-gram手法では冠詞挿入を行う程，文が長くなるため，確率が小さくなり，なるべく短い文が選ばれてしまうためであると考察される．
4.は，Mosesによって日英翻訳を行うとき，英語データから冠詞を削除し，翻訳結果出力後に[MATH]-gram手法で冠詞挿入した結果を示している．
この結果から，単純に冠詞を後編集で挿入するだけでは，翻訳性能を改善できないことがわかる．
日英対訳データから冠詞を除去することの意味(1. 5.) 5.では，冠詞を英語文から削除せず，提案手法で単語並べ替えのみを行った結果を示している．
このアプローチでは翻訳性能を向上させることができなかった．
この理由は中間英語文で``the the the''のように冠詞が連続して出現してしまうため，翻訳文にも不要な冠詞が出現してしまうからである．
Berkeley構文解析器との比較(1. 2. 3. 6. 7.) Berkeley構文解析器と提案手法を比較する．
Berkeley構文解析器は提案手法と同様の500,000文を使って学習した．
2. 3.と6. 7.の結果から，Berkeley構文解析器による単語並べ替え性能と提案手法による単語並べ替えの性能はほぼ同等であることがわかる．
一方，1.と7.の結果に対して，BLEUスコアを使って，有意水準5%で2項検定を行ったところ，それらには有意な差が確認できた．
これは提案法の冠詞生成が[MATH]-gram冠詞生成法よりも高い精度であるためと言える．
また，Berkeley構文解析器と提案手法の解析速度を比較すると，提案手法のビーム幅を156に設定したときにちょうど同程度の解析時間となる．
さらに，提案手法は冠詞挿入も行っているのに対し，Berkeley構文解析器は[MATH]-gram手法による冠詞挿入を未だ行っていない時点での解析時間であり，提案法が従来法よりも効率的に動作することがわかる．
