本節ではまず[REF_sec:experiment1]節で，コンテストに提出したシステム，また，コンテストの後に改良したシステムについて記述し，その後[REF_sec:experiment2]節で，素性を変更した実験について記述する．
われわれはSENEVAL2のコンテストに四つのシステム(CRL1からCRL4)，すなわち，サポートベクトルマシン，シンプルベイズ([MATH])，融合手法1，融合手法2を提出した．
また，コンテストの後，[MATH]を用いるシンプルベイズと決定リスト法，融合手法3,4,5を用いて実験を行なった．
これらの結果を表[REF_tab:result]に示す．
「ベースライン」は学習データで最も頻度の大きかった分類を常に正解として選ぶ手法を意味する．
「コンテストの最高システム」はコンテストに参加した団体によって提出されたすべてのシステムにおいてもっとも高いシステムを意味し，実際にはそれは融合手法2であった．
表の値は，[REF_sec:mondai_settei]節でも述べたscorer2から算出されるmixed-grained scoreの値である．
値の分子が整数でないのは複数の語義が正解となる場合も考慮し部分点も与えるためである．
また，scorer2のプログラムでは適合率(精度)と再現率を出力するが，われわれのシステムではすべての事例に対して解を出すため適合率(精度)と再現率の値は常に一致する．
このため，表ではそれらを精度として統一して記述している．
表[REF_tab:result]の結果より以下のことがわかる．
すべてのシステムがベースラインよりも高い精度を出した．
このことから，それぞれの手法ともにそれなりにまともな解析をしていることがわかる．
提出した4システム(CRL1からCRL4)の中では，CRL4の融合手法2が最も高い精度(0.786)をえた．
また，コンテストの後，[MATH]を用いるシンプルベイズを用いたところ，さらに高い精度(0.790)をえた．
(この[MATH]の設定は脚注[REF_fn:bayes_epsilon]でのべたように学習データのみを用いて定めた値なので恣意的ではない．
)この結果から，この問題ではシンプルベイズ法が有効であることがわかる．
最近の機械学習手法を用いた種々の研究[CITE]ではたいていの場合サポートベクトルマシン法がよいようだが，日本語多義解消ではそうではないことがあることがわかる．
しかし，シンプルベイズとサポートベクトルマシンの精度差はそれほど大きいものではない．
融合手法としてはシンプルベイズ法でのパラメータ調整が適切でない場合つまり，[MATH]のとき，サポートベクトルマシンが0.783でシンプルベイズが0.778でそれらの融合が0.786であったので，精度向上を実現できる場合があることがわかる．
しかし，シンプルベイズ法でのパラメータ調整を適切にした場合つまり，[MATH]のとき，サポートベクトルマシンが0.783でシンプルベイズが0.790でそれらの融合が0.787であったので，精度向上を実現できていない．
このことから，システムの融合がいつでも効果があるわけではなく効果がないことがあることもわかる．
融合手法としては，[MATH]のシンプルベイズと[MATH]のシンプルベイズを融合する手法も用いたが，この精度は0.793となり精度向上を実現した．
これは単語ごとに最適な[MATH]が異なることを示唆する．
本稿のシンプルベイズ法では単純なスムージング法を採用しているが，本稿のスムージング法があまりよくないために単語ごとに最適なパラメータがかわっている可能性もある．
今後は他のもう少し高度なスムージング法も試してみる必要があると思われる．
ところで，融合手法としては同じシンプルベイズでもパラメータをかえたものを組み合わせることで精度向上ができる場合があることがわかった．
[t]
[h]{20cm}
(a)融合手法1
(b)融合手法2
(c)融合手法3
(d)融合手法4
(e)融合手法5
本研究では，融合手法としては[REF_sec:yuugou]節で述べたように5つのものを用いている．
ここで，実際に実験対象である100単語のうち，どのくらいの割合で融合される個々の機械学習手法が用いられていたかを示しておきたい．
この用いられた機械学習手法の内訳を表[REF_tab:yuugou_wariai]に示す．
ただし，融合手法において用いる学習手法は，学習データでの10分割のクロスバリデーションの精度がもっともよかったものとしているが，この精度が同点であった場合は，その同点であった学習手法のうち表に示した順序で最初に出現した手法を用いている．
表[REF_tab:yuugou_wariai]からわかるように精度の高い手法ほど，融合手法において多く利用されていることがわかる．
例えば，「サポートベクトルマシン」の精度は0.783で，「シンプルベイズ([MATH]=0.01)」の精度は0.778で，「サポートベクトルマシン」の方が精度が高いが，実際に表[REF_tab:yuugou_wariai](a)では，「サポートベクトルマシン」の方が多く用いられている．
次に解析に用いる情報，すなわち，素性を変更した場合の実験を行なった．
この実験では融合手法は用いず，シンプルベイズ([MATH])，サポートベクトルマシン，決定リストで行なった．
この結果を表[REF_tab:sosei_change]から表[REF_tab:sosei_change_verb]までに示す．
表[REF_tab:sosei_change]は課題の100単語すべてでの結果であり，表[REF_tab:sosei_change_noun]と表[REF_tab:sosei_change_verb]は名詞50単語，動詞50単語に対する結果である．
各表とも，まず全素性を用いる方法の精度を示し，次に各素性を省いた場合のもの，最後に各素性のみを用いた場合のものを示している．
各手法で最も大きいときの精度を太字にしている．
また，表で``------''としている部分については，システムおよび素性の設定の都合でシステムが問題を解けなかった単語が一部あったため精度が算出できなかったものを示す．
全課題での実験において精度がもっとも高かったのは，全素性を用いるシンプルベイズ法であった．
シンプルベイズ法では，名詞50単語，動詞50単語でも，全素性を用いる方法が安定して最も高い精度を獲得した．
サポートベクトルマシン法では，名詞ではUDC素性を用いない方法が最もよく，動詞では文字列素性のみを用いる方法がもっともよかった．
決定リスト法では名詞ではRWC形態素素性のみを用いる方法がもっともよく，動詞では文字列素性のみを用いる方法がもっともよかった．
名詞50単語の精度では，UDC素性を用いないサポートベクトルマシンがもっとも精度がよい．
このことから，常にシンプルベイズ法がよいわけではなく，他の方法の方がよい場合があることがわかる．
表[REF_tab:sosei_change]の文字列素性のみを用いる場合の各手法の精度を見て欲しい．
このときは，サポートベクトルマシン法がもっとも精度がよく0.777であった．
また，決定リスト法では0.773であった．
これらの数字は最高精度に比較してもそれほど悪くなく，単なる文字列の素性だけでも高い精度を獲得できることを示している．
また，特に動詞の場合は，サポートベクトルマシン，決定リスト法ともに文字列素性のみを用いた場合がもっとも精度が高い．
これらの結果から現状で日本語多義解消を行なう場合，簡便性を考えると以下の二通りのアプローチがあると思われる．
手法としては簡便なシンプルベイズを用いるが，素性としてはさまざまなものを用意して高い精度を目指す．
手法としては，サポートベクトルマシンや決定リストなどの強力な機械学習手法を用いるが，文字列素性などの少数の有用な素性のみを用いるもの．
このアプローチでは前者に比べて素性が簡便であってもよい．
本節ではまず[REF_sec:experiment1]節で，コンテストに提出したシステム，また，コンテストの後に改良したシステムについて記述し，その後[REF_sec:experiment2]節で，素性を変更した実験について記述する．
われわれはSENEVAL2のコンテストに四つのシステム(CRL1からCRL4)，すなわち，サポートベクトルマシン，シンプルベイズ([MATH])，融合手法1，融合手法2を提出した．
また，コンテストの後，[MATH]を用いるシンプルベイズと決定リスト法，融合手法3,4,5を用いて実験を行なった．
これらの結果を表[REF_tab:result]に示す．
「ベースライン」は学習データで最も頻度の大きかった分類を常に正解として選ぶ手法を意味する．
「コンテストの最高システム」はコンテストに参加した団体によって提出されたすべてのシステムにおいてもっとも高いシステムを意味し，実際にはそれは融合手法2であった．
表の値は，[REF_sec:mondai_settei]節でも述べたscorer2から算出されるmixed-grained scoreの値である．
値の分子が整数でないのは複数の語義が正解となる場合も考慮し部分点も与えるためである．
また，scorer2のプログラムでは適合率(精度)と再現率を出力するが，われわれのシステムではすべての事例に対して解を出すため適合率(精度)と再現率の値は常に一致する．
このため，表ではそれらを精度として統一して記述している．
表[REF_tab:result]の結果より以下のことがわかる．
すべてのシステムがベースラインよりも高い精度を出した．
このことから，それぞれの手法ともにそれなりにまともな解析をしていることがわかる．
提出した4システム(CRL1からCRL4)の中では，CRL4の融合手法2が最も高い精度(0.786)をえた．
また，コンテストの後，[MATH]を用いるシンプルベイズを用いたところ，さらに高い精度(0.790)をえた．
(この[MATH]の設定は脚注[REF_fn:bayes_epsilon]でのべたように学習データのみを用いて定めた値なので恣意的ではない．
)この結果から，この問題ではシンプルベイズ法が有効であることがわかる．
最近の機械学習手法を用いた種々の研究[CITE]ではたいていの場合サポートベクトルマシン法がよいようだが，日本語多義解消ではそうではないことがあることがわかる．
しかし，シンプルベイズとサポートベクトルマシンの精度差はそれほど大きいものではない．
融合手法としてはシンプルベイズ法でのパラメータ調整が適切でない場合つまり，[MATH]のとき，サポートベクトルマシンが0.783でシンプルベイズが0.778でそれらの融合が0.786であったので，精度向上を実現できる場合があることがわかる．
しかし，シンプルベイズ法でのパラメータ調整を適切にした場合つまり，[MATH]のとき，サポートベクトルマシンが0.783でシンプルベイズが0.790でそれらの融合が0.787であったので，精度向上を実現できていない．
このことから，システムの融合がいつでも効果があるわけではなく効果がないことがあることもわかる．
融合手法としては，[MATH]のシンプルベイズと[MATH]のシンプルベイズを融合する手法も用いたが，この精度は0.793となり精度向上を実現した．
これは単語ごとに最適な[MATH]が異なることを示唆する．
本稿のシンプルベイズ法では単純なスムージング法を採用しているが，本稿のスムージング法があまりよくないために単語ごとに最適なパラメータがかわっている可能性もある．
今後は他のもう少し高度なスムージング法も試してみる必要があると思われる．
ところで，融合手法としては同じシンプルベイズでもパラメータをかえたものを組み合わせることで精度向上ができる場合があることがわかった．
[t]
[h]{20cm}
(a)融合手法1
(b)融合手法2
(c)融合手法3
(d)融合手法4
(e)融合手法5
本研究では，融合手法としては[REF_sec:yuugou]節で述べたように5つのものを用いている．
ここで，実際に実験対象である100単語のうち，どのくらいの割合で融合される個々の機械学習手法が用いられていたかを示しておきたい．
この用いられた機械学習手法の内訳を表[REF_tab:yuugou_wariai]に示す．
ただし，融合手法において用いる学習手法は，学習データでの10分割のクロスバリデーションの精度がもっともよかったものとしているが，この精度が同点であった場合は，その同点であった学習手法のうち表に示した順序で最初に出現した手法を用いている．
表[REF_tab:yuugou_wariai]からわかるように精度の高い手法ほど，融合手法において多く利用されていることがわかる．
例えば，「サポートベクトルマシン」の精度は0.783で，「シンプルベイズ([MATH]=0.01)」の精度は0.778で，「サポートベクトルマシン」の方が精度が高いが，実際に表[REF_tab:yuugou_wariai](a)では，「サポートベクトルマシン」の方が多く用いられている．
次に解析に用いる情報，すなわち，素性を変更した場合の実験を行なった．
この実験では融合手法は用いず，シンプルベイズ([MATH])，サポートベクトルマシン，決定リストで行なった．
この結果を表[REF_tab:sosei_change]から表[REF_tab:sosei_change_verb]までに示す．
表[REF_tab:sosei_change]は課題の100単語すべてでの結果であり，表[REF_tab:sosei_change_noun]と表[REF_tab:sosei_change_verb]は名詞50単語，動詞50単語に対する結果である．
各表とも，まず全素性を用いる方法の精度を示し，次に各素性を省いた場合のもの，最後に各素性のみを用いた場合のものを示している．
各手法で最も大きいときの精度を太字にしている．
また，表で``------''としている部分については，システムおよび素性の設定の都合でシステムが問題を解けなかった単語が一部あったため精度が算出できなかったものを示す．
全課題での実験において精度がもっとも高かったのは，全素性を用いるシンプルベイズ法であった．
シンプルベイズ法では，名詞50単語，動詞50単語でも，全素性を用いる方法が安定して最も高い精度を獲得した．
サポートベクトルマシン法では，名詞ではUDC素性を用いない方法が最もよく，動詞では文字列素性のみを用いる方法がもっともよかった．
決定リスト法では名詞ではRWC形態素素性のみを用いる方法がもっともよく，動詞では文字列素性のみを用いる方法がもっともよかった．
名詞50単語の精度では，UDC素性を用いないサポートベクトルマシンがもっとも精度がよい．
このことから，常にシンプルベイズ法がよいわけではなく，他の方法の方がよい場合があることがわかる．
表[REF_tab:sosei_change]の文字列素性のみを用いる場合の各手法の精度を見て欲しい．
このときは，サポートベクトルマシン法がもっとも精度がよく0.777であった．
また，決定リスト法では0.773であった．
これらの数字は最高精度に比較してもそれほど悪くなく，単なる文字列の素性だけでも高い精度を獲得できることを示している．
また，特に動詞の場合は，サポートベクトルマシン，決定リスト法ともに文字列素性のみを用いた場合がもっとも精度が高い．
これらの結果から現状で日本語多義解消を行なう場合，簡便性を考えると以下の二通りのアプローチがあると思われる．
手法としては簡便なシンプルベイズを用いるが，素性としてはさまざまなものを用意して高い精度を目指す．
手法としては，サポートベクトルマシンや決定リストなどの強力な機械学習手法を用いるが，文字列素性などの少数の有用な素性のみを用いるもの．
このアプローチでは前者に比べて素性が簡便であってもよい．
