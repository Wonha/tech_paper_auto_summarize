構文解析で使用する言語リソースのデータ構造についてその定義を与える．
第１は，係り受け関係の表現ための構文木，第２は，係り受け関係の基本データ構造である縮退型共起関係である．
日本語の係り受けを解析することをここでは構文解析ともいう．
解析結果を与える構文は，工学的観点にたって見やすく工夫している．
図[REF_構文解析結果の表示例]にその例を示す．
各文節は順序番号を付与して係り先の文節番号と係り受け関係を明示しグラフで表示している．
文節は長い文節にも対応できるように縦に配置している．
文節の先頭の品詞も明示している．
詳細は省くが，このグラフ表示に対して形態素，構文レベルの修正が可能である．
修正機能は１００％正解が困難な現状の自然言語処理にとって有用な支援機能である．
グラフの上段は形態素解析の結果を示している．
[htb]
文中で連続した文節が係り受けの関係になっている場合，その係り受けの２文節は「連続」あるいは「連続句」であるという．
文中で離れた文節間で係り受け関係があれば「不連続」という．
日本語においては特定の係り受け関係は連続して生ずるケースが見られ，これに注目するため連続，不連続を区別している．
連続，不連続を付与した係り受け関係においては，連続して用いられる度合の強い係り受け関係は解析において単語に次ぐ重要な言語リソースで，辞書の見出しを単語から句に拡大するとき最初にエントリの候補となるものである．
縮退型共起関係では，文節の自立語列はヘッドとなる最終の自立語の品詞で，付属語列はリテラルとしてそのままの文字列で表現される．
句読点も付属語列に含める．
係り受け関係は例えば[CITE]に示したような係り受け関係名で記述する．
単に係り受けの関係だけを解析するのであれば関係名は係り側の付属語列で代用するか，あるいはまったく無視しても本処理系には影響を与えない．
図[REF_データ構造]に縮退型共起関係のデータ構造とその例を示す．
大文字Ａ，Ｂは自立語品詞，Ｆは付属語品詞列，小文字ａ，ｂは自立語リテラル，ｆは付属語列のリテラルを表わすとすると，一般に共起関係を構文規則として見て，抽象化の強いものから並べると次の４種類に分類される．
１）ＡＦＢＦ型，２）ＡｆＢｆ型，３）Ａｆｂｆ型あるいはａｆＢｆ型，４）ａｆｂｆ型である．
２），３），４）のように具体的に記述するにしたがって共起関係の数は増大する．
通常の構文規則は１）のレベルで記述するのが一般的である．
縮退型共起関係は２）の型に属し，その特徴は文節の自立語を品詞で代用していることと受け側の付属語も添付していることである．
付属語は付属語相当語を含めて現在６５０語を用いているがオーダ的には組み合わせや句読点を考慮して１０００程度であり，リテラルとした．
自立語は１０万のオーダになりそれらをすべて記憶しておくことは２項関係としては動詞が１万とすると名詞と動詞の組み合わせだけでギガのオーダであり，付属語パターンも含めると現状の機械処理の立場からは困難である．
これは[CITE]でも示された考え方であった．
本論文では，付属語列の末尾に句読点情報も付与している．
なぜなら，現実の文章においては，句読点が係り受け関係の決定に意味を持っているからである．
これの有効性は従属節の述語間の係り受けに対して[CITE]でも示されている．
係り受け関係で受け側の付属語列を伴ったＡｆＢｆ型が重要なことは，ＡｆＢでは次にどのような付属語列が来るかはＢのみの品詞情報で決定され，文節Ａの付属語列は関与しないことによる．
しかし文法的には等価であるが慣用的な用法が多い自然言語では，特定の付属語を好む場合がある．
例えば，文「欧米においては電車で寝ているような光景は決して見られないが，」で，「欧米においては」は動詞に係るというだけの情報では，この文の場合「寝ている」に係るとしてしまうことになる．
ＡｆＢｆ型にするとＢに付属語「〜ないが，」が付くパターンを優先して使用することができる．
もっと単純な場合では，「Ｎ（名詞）はＡ（形容詞）」の規則で，「彼は若い．
」と「彼は長い（トンネルを）」を同じと見てしまう．
しかしＢにｆを付与すると「．
」が効力を持つ．
もちろん組み合わせの数はＡｆＢｆ型がＡｆＢ型より３桁多くなるが，係り受けの絞り込みは良くなる．
付属語列をリテラルにしておくメリットは，「男は車に近づいた．
」の縮退型共起関係である「ＮはＶた．
」により「男は近づいた車を見た．
」の文で「男は」は「近づいた」ではなく「見た．
」
に係る．
また「女は赤い服を着た．
」で，「女は」は「赤い」に係らないで「着た．
」に係っている．
「Ｎ助詞Ａ」といったＡＦＢ型の共起記述では「女は」は「赤い」に係ってしまう．
もちろん自立語で品詞を使用することによって「髪が長い少女に会った．
」の類に関しては「ＮがＡ」の規則が生まれて上記の文の解析を誤らしめて良くないがこれは頻度情報や後述する学習機能によって避けられると考えている．
別の解決法は名詞の品詞を細分類したり，[CITE]のようにクラスター分割することが一つの解決策であるが，本論文では単純な方法を採用した．
縮退型共起関係と連続句の概念によって解析の曖昧性は次のように解消できる．
[CITE]では，「彼は山に登って景色を見た．
」に対して３つの解析例があるとしているが，連続句を優先すれば「山に」は「登って」に係り，縮退型共起関係「ＮはＶて」が無いか，あるいは在っても「ＮはＶた．
」に比較して頻度が少なければ「彼は」は「見た．
」に係かる．
共起データベースCOODBとは，係り受け解析の出力から得られる縮退型共起関係を蓄積したデータベースである．
但し，頻度は１であるので記憶していない．
各レコードは，縮退型共起関係からなっている．
それらを文に対応させて記憶することにより，任意の縮退型共起関係から逆にそれが使用された原文を参照することが可能になる．
これにより与えられた縮退型共起関係が正しいかどうかの判断を実例文で確認することができる．
図[REF_COODBの例]に共起データベースの例を示す．
共起データベース中の縮退型共起関係をソートして頻度を付与したものをソート済み共起データベースSTCDBと呼ぶ．
ＡｆＢｆ型の係り受け関係を形式化するとCFGと等価なことが分かる．
さらに図[REF_データ構造]でも示したように係り受け関係には頻度や確率が付与されるため確率付きCFGと見なすことも可能である．
文節の文法カテゴリをγＢf，δＢf等で表わすと一般の係り受け関係は，
で表現することが出来る．
ここで，γは規則が最初に適用される文節カテゴリに付与しており，δは１度以上規則を適用してできたカテゴリである．
カテゴリの添え字γ，δは，意味的には連続，不連続と関係させたものである．
連続のものは規則が適用されると文節間にギャップができるため左辺のカテゴリにはγは現われない．
またＢは品詞，ｆは付属語リテラルに相当する．
([REF_cc])の右辺の”γＢfγＢg”は文節カテゴリγＢfがγＢgに連続して係ることを示す．
（例．
机を＝＞運ぶ．
）([REF_dc])の意味はδＢfがγＢgに連続して係ることを表わしている．
（例．
（大きな＝＞）少年の＝＞頭には）([REF_cd])はγＢfが不連続にδＢgに係る．
（例．
少年が〜＞（机を＝＞）運ぶ）([REF_dd])はδＢfが不連続にδＢgに係ることを示している．
（例．
（大きな＝＞）少年が〜＞（机を＝＞）運ぶ．
）ここで＝＞は連続した係り受け関係を表わし，〜＞は不連続の係り受け関係を意味している．
以上の([REF_cc])，([REF_dc])の規則は連続フラグが立っている縮退型共起関係から生成され， ([REF_cd])，([REF_dd])は不連続な縮退型共起関係から生成したものである．
もう少し緩い規則として連続，不連続のいずれも上記４つの規則に展開しておくことを考えてもよい．
なぜなら，一般に日本語においては連続した共起関係は不連続でも発生し得るし，逆も可能であるからである．
いずれにしてもSTCDBをチョムスキー標準形のCFG規則に変換することが出来る．
しかしこれは従来のCFGの規則数と比較してオーダの違った規則群になる．
解析するのは原理的にCYK法のようなボトムアップ解析によれば可能である．
その場合，係り受けの交差も自動的に回避できる．
ここでは全解パージングではなくコスト等を導入して最尤解を求めるために[REF_ana-sys]に述べるような独自な系を作成した．
以下で縮退型共起関係を用いた解析系を記述する．
システム構成
縮退型共起関係を用いた解析システムの構成を図[REF_システム構成]に示す．
本システムで使用する特徴的な言語リソースを以下に示す．
いわゆる解析規則はなく，共起関係データベースがその代りになっている．
共起関係データベースはフィードバック系になっている．
係り受けマトリックス
これは，[CITE]でも与えられているが，本論文では図[REF_マトリックス]に示すように行列要素の値を係り受けの可否ではなくコストで与える点とさらにそれらの関係名を記述する点で相違する．
ソート済み縮退型共起関係データベースの作成
COODB，STCDBともに初期状態は空である．
先ず実際の文章からCOODBを収集し，ソートして重複頻度付きの形式でSTCDBを作成する．
係り受け解析の結果は共起関係で表現できるから，先ず何らかの手段で解析データを収集する．
人手でやるのも可能だが量的に限界がある．
解析の結果に対して機械的に収集すればよい．
すなわち解析そのものに共起関係を利用することが最終目標であるが，そのためのデータ収集は，人手で解析されたデータや別の解析ツールを使用することができる．
これによって本解析エンジンで最低限度の解析ができる程度の容量になるまで蓄積する．
今回は，本解析方式（図[REF_システム構成]中の日本語係り受け解析２）とは別の解析システム（日本語係り受け解析１）を用いてCOODBの自動抽出ツールを作成した．
STCDBのデータ構造はＢ木や配列として記憶しておく．
解析エンジンが始動してそこからデータを収集すればブートストラップになる．
解析ステップ
以下，解析のステップを順に述べる．
先ず，システムは形態素解析を行い，文節に区切られた結果を構文解析に渡す．
構文解析では係り受けマトリックスをSTCDBを用いて作成する．
その後，文頭の文節から順にその係り先を係り受けマトリックスを用いて非交差条件を守りながらコストの低いものを優先して決定する．
したがって係り先の文節はコストが同じなら距離が近いものほど優先することになる．
連続する共起関係は，学習で選んだものを除いて最もコストを低くしている．
最終的に最小コストの係り受け関係を一つだけ出力する．
コストを例えば１から６に設定すると，１は最小コストで６が最大コストになる．
後述する学習した共起関係のコストは１とし，連続する共起関係は２，不連続は頻度によって３から５とし，疑わしい共起関係は６とする．
データ量が多くなり飽和してくれば頻度の代りに確率を使うことも考えられるが，現状は１文づつの更新で常時頻度が変化しているため確率や頻度計算をすることは避け，連続，不連続だけで選択している．
更新機能および学習機能
本方式による係り受け解析は１００％の正確さではない．
従ってユーザには，失敗に対して，係り先や係り受け関係を修正する機能が提供されている．
[REF_data-str]章で述べたように係り受け解析の結果はグラフ表示が出来るためユーザは任意の係り受け関係を画面上で係り元，係り先および関係名を番号で指示することにより修正することができる．
係り受け関係を修正すると，縮退型共起関係の４種類の更新機能を聞いてくる．
ユーザはいずれかを選択する．
具体的には，１）何もしない．
２）現在の共起関係自身が間違っている疑いがある．
３）修正結果は新規の共起関係としてSTCDBに登録する．
および４）学習機能である．
２）の場合は直接削除することはやめて，疑問符を付けておき，コストも最大にする．
後日，COODB等を用いて適否を検討するようにしている．
４）の学習機能は係り先を変更したり，古い係り受け関係を新しい関係で置き換えることによって起動し，古い関係はコストを高めることにより優先度を下げ，当該共起関係の選択を抑止するようにする．
同時に新しく指定した共起関係に対しては図[REF_データ構造]（ａ）に示した学習フラグをセットして最小のコストを付与する．
頻度を高めていく方法もあるが，学習効果を即時に得るためこの方法を採用した．
１文の解析が終了するとこの文で指示されたSTCDBに対する上述の共起関係の追加，修正および学習が実行される．
以上のステップから，更新機能によってインクリメンタルにSTCDBが拡大していくとともに学習機能によって優先順位が更新され最近の選択結果を優先することが可能になる．
同じ構文をこの後に実行すると優先順位に逆転が起こり，正しい係り受け解析が得られる．
図[REF_学習]に学習例を示す．
構文解析が学習によって適応規則を変更していくため，インタラクティブな環境ではワープロのカナ漢字変換に似た学習効果が得られる．
学習・更新効果の評価は別の機会にゆずるが，一般的に述べると本方式の特徴は付属語リテラルのパターンを用いることにある．
「ですます調」とか「だ文」とかの文体あるいは「〜ですか」のような会話文独特の表現はいずれも付属語が文体を代表しており効果が現われやすい．
構文解析で使用する言語リソースのデータ構造についてその定義を与える．
第１は，係り受け関係の表現ための構文木，第２は，係り受け関係の基本データ構造である縮退型共起関係である．
日本語の係り受けを解析することをここでは構文解析ともいう．
解析結果を与える構文は，工学的観点にたって見やすく工夫している．
図[REF_構文解析結果の表示例]にその例を示す．
各文節は順序番号を付与して係り先の文節番号と係り受け関係を明示しグラフで表示している．
文節は長い文節にも対応できるように縦に配置している．
文節の先頭の品詞も明示している．
詳細は省くが，このグラフ表示に対して形態素，構文レベルの修正が可能である．
修正機能は１００％正解が困難な現状の自然言語処理にとって有用な支援機能である．
グラフの上段は形態素解析の結果を示している．
[htb]
文中で連続した文節が係り受けの関係になっている場合，その係り受けの２文節は「連続」あるいは「連続句」であるという．
文中で離れた文節間で係り受け関係があれば「不連続」という．
日本語においては特定の係り受け関係は連続して生ずるケースが見られ，これに注目するため連続，不連続を区別している．
連続，不連続を付与した係り受け関係においては，連続して用いられる度合の強い係り受け関係は解析において単語に次ぐ重要な言語リソースで，辞書の見出しを単語から句に拡大するとき最初にエントリの候補となるものである．
縮退型共起関係では，文節の自立語列はヘッドとなる最終の自立語の品詞で，付属語列はリテラルとしてそのままの文字列で表現される．
句読点も付属語列に含める．
係り受け関係は例えば[CITE]に示したような係り受け関係名で記述する．
単に係り受けの関係だけを解析するのであれば関係名は係り側の付属語列で代用するか，あるいはまったく無視しても本処理系には影響を与えない．
図[REF_データ構造]に縮退型共起関係のデータ構造とその例を示す．
大文字Ａ，Ｂは自立語品詞，Ｆは付属語品詞列，小文字ａ，ｂは自立語リテラル，ｆは付属語列のリテラルを表わすとすると，一般に共起関係を構文規則として見て，抽象化の強いものから並べると次の４種類に分類される．
１）ＡＦＢＦ型，２）ＡｆＢｆ型，３）Ａｆｂｆ型あるいはａｆＢｆ型，４）ａｆｂｆ型である．
２），３），４）のように具体的に記述するにしたがって共起関係の数は増大する．
通常の構文規則は１）のレベルで記述するのが一般的である．
縮退型共起関係は２）の型に属し，その特徴は文節の自立語を品詞で代用していることと受け側の付属語も添付していることである．
付属語は付属語相当語を含めて現在６５０語を用いているがオーダ的には組み合わせや句読点を考慮して１０００程度であり，リテラルとした．
自立語は１０万のオーダになりそれらをすべて記憶しておくことは２項関係としては動詞が１万とすると名詞と動詞の組み合わせだけでギガのオーダであり，付属語パターンも含めると現状の機械処理の立場からは困難である．
これは[CITE]でも示された考え方であった．
本論文では，付属語列の末尾に句読点情報も付与している．
なぜなら，現実の文章においては，句読点が係り受け関係の決定に意味を持っているからである．
これの有効性は従属節の述語間の係り受けに対して[CITE]でも示されている．
係り受け関係で受け側の付属語列を伴ったＡｆＢｆ型が重要なことは，ＡｆＢでは次にどのような付属語列が来るかはＢのみの品詞情報で決定され，文節Ａの付属語列は関与しないことによる．
しかし文法的には等価であるが慣用的な用法が多い自然言語では，特定の付属語を好む場合がある．
例えば，文「欧米においては電車で寝ているような光景は決して見られないが，」で，「欧米においては」は動詞に係るというだけの情報では，この文の場合「寝ている」に係るとしてしまうことになる．
ＡｆＢｆ型にするとＢに付属語「〜ないが，」が付くパターンを優先して使用することができる．
もっと単純な場合では，「Ｎ（名詞）はＡ（形容詞）」の規則で，「彼は若い．
」と「彼は長い（トンネルを）」を同じと見てしまう．
しかしＢにｆを付与すると「．
」が効力を持つ．
もちろん組み合わせの数はＡｆＢｆ型がＡｆＢ型より３桁多くなるが，係り受けの絞り込みは良くなる．
付属語列をリテラルにしておくメリットは，「男は車に近づいた．
」の縮退型共起関係である「ＮはＶた．
」により「男は近づいた車を見た．
」の文で「男は」は「近づいた」ではなく「見た．
」
に係る．
また「女は赤い服を着た．
」で，「女は」は「赤い」に係らないで「着た．
」に係っている．
「Ｎ助詞Ａ」といったＡＦＢ型の共起記述では「女は」は「赤い」に係ってしまう．
もちろん自立語で品詞を使用することによって「髪が長い少女に会った．
」の類に関しては「ＮがＡ」の規則が生まれて上記の文の解析を誤らしめて良くないがこれは頻度情報や後述する学習機能によって避けられると考えている．
別の解決法は名詞の品詞を細分類したり，[CITE]のようにクラスター分割することが一つの解決策であるが，本論文では単純な方法を採用した．
縮退型共起関係と連続句の概念によって解析の曖昧性は次のように解消できる．
[CITE]では，「彼は山に登って景色を見た．
」に対して３つの解析例があるとしているが，連続句を優先すれば「山に」は「登って」に係り，縮退型共起関係「ＮはＶて」が無いか，あるいは在っても「ＮはＶた．
」に比較して頻度が少なければ「彼は」は「見た．
」に係かる．
共起データベースCOODBとは，係り受け解析の出力から得られる縮退型共起関係を蓄積したデータベースである．
但し，頻度は１であるので記憶していない．
各レコードは，縮退型共起関係からなっている．
それらを文に対応させて記憶することにより，任意の縮退型共起関係から逆にそれが使用された原文を参照することが可能になる．
これにより与えられた縮退型共起関係が正しいかどうかの判断を実例文で確認することができる．
図[REF_COODBの例]に共起データベースの例を示す．
共起データベース中の縮退型共起関係をソートして頻度を付与したものをソート済み共起データベースSTCDBと呼ぶ．
ＡｆＢｆ型の係り受け関係を形式化するとCFGと等価なことが分かる．
さらに図[REF_データ構造]でも示したように係り受け関係には頻度や確率が付与されるため確率付きCFGと見なすことも可能である．
文節の文法カテゴリをγＢf，δＢf等で表わすと一般の係り受け関係は，
で表現することが出来る．
ここで，γは規則が最初に適用される文節カテゴリに付与しており，δは１度以上規則を適用してできたカテゴリである．
カテゴリの添え字γ，δは，意味的には連続，不連続と関係させたものである．
連続のものは規則が適用されると文節間にギャップができるため左辺のカテゴリにはγは現われない．
またＢは品詞，ｆは付属語リテラルに相当する．
([REF_cc])の右辺の”γＢfγＢg”は文節カテゴリγＢfがγＢgに連続して係ることを示す．
（例．
机を＝＞運ぶ．
）([REF_dc])の意味はδＢfがγＢgに連続して係ることを表わしている．
（例．
（大きな＝＞）少年の＝＞頭には）([REF_cd])はγＢfが不連続にδＢgに係る．
（例．
少年が〜＞（机を＝＞）運ぶ）([REF_dd])はδＢfが不連続にδＢgに係ることを示している．
（例．
（大きな＝＞）少年が〜＞（机を＝＞）運ぶ．
）ここで＝＞は連続した係り受け関係を表わし，〜＞は不連続の係り受け関係を意味している．
以上の([REF_cc])，([REF_dc])の規則は連続フラグが立っている縮退型共起関係から生成され， ([REF_cd])，([REF_dd])は不連続な縮退型共起関係から生成したものである．
もう少し緩い規則として連続，不連続のいずれも上記４つの規則に展開しておくことを考えてもよい．
なぜなら，一般に日本語においては連続した共起関係は不連続でも発生し得るし，逆も可能であるからである．
いずれにしてもSTCDBをチョムスキー標準形のCFG規則に変換することが出来る．
しかしこれは従来のCFGの規則数と比較してオーダの違った規則群になる．
解析するのは原理的にCYK法のようなボトムアップ解析によれば可能である．
その場合，係り受けの交差も自動的に回避できる．
ここでは全解パージングではなくコスト等を導入して最尤解を求めるために[REF_ana-sys]に述べるような独自な系を作成した．
以下で縮退型共起関係を用いた解析系を記述する．
システム構成
縮退型共起関係を用いた解析システムの構成を図[REF_システム構成]に示す．
本システムで使用する特徴的な言語リソースを以下に示す．
いわゆる解析規則はなく，共起関係データベースがその代りになっている．
共起関係データベースはフィードバック系になっている．
係り受けマトリックス
これは，[CITE]でも与えられているが，本論文では図[REF_マトリックス]に示すように行列要素の値を係り受けの可否ではなくコストで与える点とさらにそれらの関係名を記述する点で相違する．
ソート済み縮退型共起関係データベースの作成
COODB，STCDBともに初期状態は空である．
先ず実際の文章からCOODBを収集し，ソートして重複頻度付きの形式でSTCDBを作成する．
係り受け解析の結果は共起関係で表現できるから，先ず何らかの手段で解析データを収集する．
人手でやるのも可能だが量的に限界がある．
解析の結果に対して機械的に収集すればよい．
すなわち解析そのものに共起関係を利用することが最終目標であるが，そのためのデータ収集は，人手で解析されたデータや別の解析ツールを使用することができる．
これによって本解析エンジンで最低限度の解析ができる程度の容量になるまで蓄積する．
今回は，本解析方式（図[REF_システム構成]中の日本語係り受け解析２）とは別の解析システム（日本語係り受け解析１）を用いてCOODBの自動抽出ツールを作成した．
STCDBのデータ構造はＢ木や配列として記憶しておく．
解析エンジンが始動してそこからデータを収集すればブートストラップになる．
解析ステップ
以下，解析のステップを順に述べる．
先ず，システムは形態素解析を行い，文節に区切られた結果を構文解析に渡す．
構文解析では係り受けマトリックスをSTCDBを用いて作成する．
その後，文頭の文節から順にその係り先を係り受けマトリックスを用いて非交差条件を守りながらコストの低いものを優先して決定する．
したがって係り先の文節はコストが同じなら距離が近いものほど優先することになる．
連続する共起関係は，学習で選んだものを除いて最もコストを低くしている．
最終的に最小コストの係り受け関係を一つだけ出力する．
コストを例えば１から６に設定すると，１は最小コストで６が最大コストになる．
後述する学習した共起関係のコストは１とし，連続する共起関係は２，不連続は頻度によって３から５とし，疑わしい共起関係は６とする．
データ量が多くなり飽和してくれば頻度の代りに確率を使うことも考えられるが，現状は１文づつの更新で常時頻度が変化しているため確率や頻度計算をすることは避け，連続，不連続だけで選択している．
更新機能および学習機能
本方式による係り受け解析は１００％の正確さではない．
従ってユーザには，失敗に対して，係り先や係り受け関係を修正する機能が提供されている．
[REF_data-str]章で述べたように係り受け解析の結果はグラフ表示が出来るためユーザは任意の係り受け関係を画面上で係り元，係り先および関係名を番号で指示することにより修正することができる．
係り受け関係を修正すると，縮退型共起関係の４種類の更新機能を聞いてくる．
ユーザはいずれかを選択する．
具体的には，１）何もしない．
２）現在の共起関係自身が間違っている疑いがある．
３）修正結果は新規の共起関係としてSTCDBに登録する．
および４）学習機能である．
２）の場合は直接削除することはやめて，疑問符を付けておき，コストも最大にする．
後日，COODB等を用いて適否を検討するようにしている．
４）の学習機能は係り先を変更したり，古い係り受け関係を新しい関係で置き換えることによって起動し，古い関係はコストを高めることにより優先度を下げ，当該共起関係の選択を抑止するようにする．
同時に新しく指定した共起関係に対しては図[REF_データ構造]（ａ）に示した学習フラグをセットして最小のコストを付与する．
頻度を高めていく方法もあるが，学習効果を即時に得るためこの方法を採用した．
１文の解析が終了するとこの文で指示されたSTCDBに対する上述の共起関係の追加，修正および学習が実行される．
以上のステップから，更新機能によってインクリメンタルにSTCDBが拡大していくとともに学習機能によって優先順位が更新され最近の選択結果を優先することが可能になる．
同じ構文をこの後に実行すると優先順位に逆転が起こり，正しい係り受け解析が得られる．
図[REF_学習]に学習例を示す．
構文解析が学習によって適応規則を変更していくため，インタラクティブな環境ではワープロのカナ漢字変換に似た学習効果が得られる．
学習・更新効果の評価は別の機会にゆずるが，一般的に述べると本方式の特徴は付属語リテラルのパターンを用いることにある．
「ですます調」とか「だ文」とかの文体あるいは「〜ですか」のような会話文独特の表現はいずれも付属語が文体を代表しており効果が現われやすい．
