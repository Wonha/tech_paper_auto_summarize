はじめに
\label{sec:introduction}

様々な状況で利用される機械翻訳システムが直面する現実の文には，
システムが持つ言語知識では適切に解析できない様々な言語現象が現れる．
このような現象を含む文は，人間にとっても適格でない(が理解できる)絶対的不
適格文と，人間にとっては適格であるがシステムの処理能力を越えている相対的
不適格文に分けられるが，両者を適切に扱える頑健なシステムが求められている
\cite{Matsumoto94}．
絶対的不適格現象のうち語句の欠落や主語述語の不一致などの構文レベルの現
象へ対処することを目的とした手法としては，
部分解析法\cite{Imaichi95}や制約緩和法\cite{Mellish89,KatoTsuneaki95}な
どがこれまでに提案されている．

他方，我々は，相対的不適格文への対処に焦点を当て，機械翻訳システムの翻訳
品質の向上を目指している．
以降本稿では紛れない限り，相対的不適格文を単に不適格文と呼ぶ．
構文レベルの不適格文すなわちシステムの解析能力を越えた構文構造を持つ文を
扱うための代表的な手法には，
1) 対象テキストの分野を限定した専用文法を用いる手法\cite{Aizawa96}や，
2) 原文を書き換える手法\cite{Kim94,Narita94,Sagawa94,Shirai95,KatoTerumasa97}
などがある．
また，後者の手法に関連して，原文とそれを人間が書き換えた結果とを比較した
差分から原文書き換え規則を学習する手法\cite{Yamaguchi98}も示されている．
(1)と(2)の手法の設計方針は，システムの既存部分の変更を避け，新たな処理系
を追加するという点で共通しているが，以下の点で異なっている．
前者の手法では，システムの既存部分による処理は，可能な場合には，新たに追
加した処理系による処理によって代行される．
すなわち，新たな処理系による解析(分野依存の専用文法による解析)が成功した
場合には，既存の処理系による解析(汎用文法による解析)は実行されない．
これに対して後者では，新たに追加した処理系は既存部分の前処理系と
位置付けられる．

原文書き換えによる手法は，書き換えを構文解析の前に行なうか後に行なうかに
よって二つに分けられる．
構文解析後に行なう場合\cite{Sagawa94,Shirai95}
\footnote{白井らは，文献\cite{Shirai98}で，一部の書き換えを構文解析前に
行なうように拡張を施しているが，書き換え規則の多くは構文解析後に適用され
る．}
は，
構文情報が得られているため，構文解析前すなわち形態素解析後に行なう場合に
比べてより翻訳品質の高いシステムが実現できる可能性がある．
しかし，実用的な機械翻訳システムにおいて原文書き換えの実行を構文解析終了
後まで遅らせることは，処理効率の点では望ましくない．
なぜならば，入力文全体を覆う構文構造が生成できず構文解析に失敗すること
\footnote{以降本稿では，入力文全体を覆う構文構造が生成できないことを構文
解析の失敗と呼ぶ．}
が判明するのは構文解析規則をすべて適用し終えた後であるが，実用的な機械
翻訳システムでは構文解析規則の規模は非常に大きくなっており，構文解析に要
する時間は解析全体に要する時間の大半を占めているため，
構文解析後の書き換えは処理の効率化につながりにくいからである．
これに対して，構文解析が失敗しないようにあらかじめ原文を書き換えれば，す
べての構文解析規則の適用が試みられる可能性は低くなるため，システム全体と
して効率の良い処理が実現できる．
また，構文情報が(ほとんど)得られていない時点で行なう書き換えがどの程度有
効であるかを明らかにすることも重要である．

このような観点から本稿では，形態素解析で得られる情報と通常よりも簡単な
構文解析
\footnote{具体的には，\ref{sec:preedit:ruleformat:condition}\,節で述べる
手続きによる処理を指す．}
で得られる情報に基づいて原文書き換えを構文解析前に行なうことによって翻
訳品質と共に翻訳速度を改善する手法を示す．
以下，本稿で扱う書き換え対象を\ref{sec:object}\,節で整理する．
次に\ref{sec:preedit}\,節で原文書き換え系の処理枠組について説明する．
\ref{sec:experiment}\,節では，原文書き換え系を既存の英日機械翻訳システム
に組み込み，システムの性能向上にどの程度貢献できるかを実験によって検証す
る．
\ref{sec:relatedworks}\,節では関連研究との比較を行なう．

