本稿で記述する言い換えの統一的モデルは，図[REF_fig:model]の構成をしている．
このモデルは，変形部(transformation module)と評価部(evaluation module)の二つのモジュールからなる．
変形したいものが現れたときは，それを図のようにシステムに入力して，変形部で変形の候補をあげ，評価部において変形の妥当性をチェックし最も妥当であると判断されたものに変形され，それが図のように出力される．
{
変形部変形の候補を与えるモジュールである．
変形部は，人手による規則で構成してもよいし，計算機で自動獲得した規則で構成してもよいし，動的に書き換え候補を生成するものでもよいし，これらの組合わせでもよい．
評価部変形の候補の良さを，あらかじめ定めておいた尺度により評価し，最もふさわしい変形の候補を選択するモジュールである．
ここで定める尺度は，扱う問題ごとに適正なものに作りかえる必要がある．
}
評価部で用いられる尺度の具体例として以下のものが考えられる．
{
類似度例えば，AとBの類似度を調べたいとする．
このとき，変形部の規則がすべて同義性を満足するものだとする．
この場合，AとBの類似度が大きくなるように，変形部の規則でA,Bを変形し，A,Bが良く似た状態にしてから類似度を求めると，意味が同じなのに異なる表現で記述されているような場合でも正しく類似度を計算することができる．
長さ例えば，要約の一つの分野の文内圧縮のように，なるべく意味を変えずに文を圧縮したいとする．
このとき，変形部の規則はすべて意味をほとんど変えずに変形するものであるとする．
この場合，長さを尺度とし，この長さが短くなるように変形を繰り返すと文内圧縮が実現される．
頻度(または，生起確率)例えば，推敲システムを考える．
このとき，変形部の規則がすべて同義性を満足するものだとする．
この場合，推敲したいデータを，そのデータの生起確率が高くなるように変形すると非常に洗練された文章となる．
もう少し簡単な例でこれを説明すると，例えば，入力したデータに「データー」とあったとしよう．
また，変形規則に「データー」を「データ」とする規則があったとしよう．
このとき，毎日新聞[CITE]などで「データー」と「データ」の数を数え，「データ」の方が数が多い場合，「データー」を「データ」と直すといったことである．
また，頻度(または，生起確率)を調べるコーパスを種々のものに変更することで，様々な効果を生む．
例えば，入力データが書き言葉のときに，コーパスとして話し言葉を用いると書き言葉の話し言葉への変形が実現される[CITE]．
また，入力データが法律関係の文のときに，コーパスとして平易な文章の集合を与えておくと，法律関係の難解な文章が平易な文章に変形されることだろう．
また，ここで入力データとして適当に誰かが書いた小説をいれて，コーパスとしてシェークスピアの小説をいれると，シェークスピアの文体の小説が新たに完成することになる．
また，入力データを芥川の小説として，コーパスとして漱石の小説を用いると，芥川の小説を漱石の文体に変形するなどということもできるだろう．
文としての正当性のチェック上記の生起確率に基づく尺度は，推敲システムでも用いることができるように文の正当性のチェックに使うことができる．
しかし，生起確率だと尺度として強すぎる場合は以下のような尺度を用いるとよい．
対象としている表現が，コーパスで1回以上出現しているか否か．
(これは表記誤りの検出など[CITE]によく使われる尺度である．
)
コーパスでの生起確率がある程度以上か否か．
コーパスでの生起確率が，環境なしでの生起確率よりも大きいか否か．
ここで示したものは，尺度というよりは条件のようなもので，他の尺度と組み合わせて用いるとよい．
他の尺度のところで，もしその変形において，文としての正当性が保証されない場合は，ここで示した尺度を同時に用いるとよい．
変形の前後での意味の等価性変形規則が完全に同義性を満足するということがわからない場合は，この尺度が必要となる．
ただし，この尺度の構築は現時点では難しいと思われる．
これができるようになるまでは，変形部で利用する変形規則を完全に同義性を満足するものだけにするか，同義性を満足しない言い換えをしてしまう可能性があることを覚悟するかのいずれかである．
(とはいえ，変形部で利用する変形規則に同義性を満足しないものが少々ある状況で変形の前後での意味の等価性を調べる尺度を用いなかったとしても，上述の「文としての正当性のチェック」を用いれば多くの不適切な言い換えを取り除くことができるので，工学的見地ではある程度利用可能な言い換えシステムを構築できると思われる．
)また，この項目の尺度も一つ上の「文としての正当性のチェック」と同様に，尺度というよりは条件のようなもので，他の尺度とともに用いられる．
}ここにあげたもの以外にも様々な尺度が考えられる．
英語文でRやLなどを含む日本人にとって発音しにくい[CITE]単語をあまり使わないという尺度も考えられる．
また，丁寧な表現もしくはわかりやすさの計量的研究が十分なされれば，それも尺度とすることで丁寧な表現もしくはわかりやすい表現への自動言い換えが可能となるだろう．
ただし，これは丁寧な表現もしくはわかりやすい表現のみを使ったコーパスを生起確率の算出に用いることで，先の生起確率の尺度でも扱えることである．
また，条件のような尺度には，「21世紀」など特定の語を使うことを条件として言い換えることや，起承転結を満足する文章構成を条件として言い換えることや係り先未決定文節数を7程度以下とすること[CITE]を条件として言い換えることなど，様々なものが想定できる．
以降では，われわれが行なっている研究を具体的な事例として，この統一的モデルのもとでの変形操作がどのような尺度によってなされているかを，見てみよう．
最近は要約の研究[CITE]が盛んになっているが，ここでは要約の一分野である文内圧縮を試みてみよう．
変形規則としては，文献[CITE]の3節の研究で自動獲得した規則のうち，その文献の評価式(5)でソートした結果を上位から見て頻度が1の規則が現れる一つ手前までの規則を利用する．
このとき規則の総数は775個となった．
本節ではこれらを変形部の規則とする．
表[REF_tab:hitode_kisoku_djr]に規則の例を示す．
「φ」は空文字を意味する．
この文献[CITE]での研究では，同義な意味を持つ，複数の辞書の同じ項目の定義文を照合することで，ほぼ同義な表現の対を抽出している．
この表現の対を変形規則に利用するのである．
このシステムではこの得られた変形規則は双方向書き換え可能として利用する．
ここでは新聞記事の要約を考えることとして，評価部の尺度としては以下のものを用いることにする．
入力されたデータがより短くなるような変形を良いものとする．
新聞記事での出現が1個以上あることを条件とする．
(文としての適切性の判定)
ここでの新聞記事は94年と95年の毎日新聞2年分とした．
厳密には以下のアルゴリズムによって実行した．
入力として与えられるデータをJUMAN[CITE]で形態素解析して，形態素列に分解する．
文頭の形態素から順に，形態素ごとに以下の処理を行なう．
現在の形態素で始まる形態素列[MATH](形態素を一つも持たない場合，つまり空文字も含む)と，変形規則[MATH]の前件部の文字列[MATH]が一致した場合，その後件部の文字列[MATH]が，書き換え後表現の候補となる．
また，[MATH]の前接[MATH]-gramの形態素列を[MATH]，[MATH]の後節[MATH]-gramの形態素列を[MATH]とする．
各書き換え後表現の候補[MATH]に対して，文字列[MATH]から文字列[MATH]になるときに短縮される文字数を数え，この値が最も大きかったときの[MATH]を[MATH]とする．
評価に用いるコーパスにおいて[MATH]の文字列の頻度を求め，この値が1より大きいとき，[MATH]を[MATH]に書き換え，処理を次の形態素に移す．
ただし，[MATH]は定数である．
ここでは，少々再現率を下げてもよいから適合率を高める意味で[MATH]としては2を用いておこう．
この条件で毎日新聞の91年のデータの文内圧縮の実験を試みた．
その結果の一例を表[REF_tab:compress_result]にあげておく．
表で下線部は変形操作により消される部分を意味する．
本節の研究は圧縮ということで文を短くする操作があるため，変形規則としては消去するパターンのものが用いられていると思われる．
「強い」や「的」などのものが消去されて正しく圧縮できたものから，「は」や「と」を消去して意味が変わってしまう誤りもあった．
また，表の最後のデータは，「すること」を消去したが「候補として擁立を決めた」と短い範囲で見ると正しそうに見えるが，もう少し前からみると誰それをという部分があり「すること」を消去してはいけないとわかる．
この誤りを正すには構文的な情報を反映した評価式を用いる必要がある．
ここでは推敲システムについて考えてみる．
変形規則は前節と同じ775個のものを用いる．
このように変形規則は複数の言い換えシステムで利用できる場合があるのである．
ここでは新聞記事の推敲を考えることとして，評価部の尺度としては以下のものを用いることにする．
入力されたデータの各部分形態素列の新聞記事コーパスでの生起確率が，より大きくなるような変形を良いものとする．
ここでの新聞記事は94年と95年の毎日新聞2年分とした．
ここでは，新聞記事の推敲を考えるために生起確率をもとめるコーパスとして新聞記事コーパスを利用する．
もし，論文を推敲したいときは論文集合のコーパスを使えばよい．
すなわち，推敲したい文書と同一の種類のコーパスを利用するのである．
厳密には以下のアルゴリズムによって実行した．
入力として与えられるデータをJUMANで形態素解析して，形態素列に分解する．
文頭の形態素から順に，形態素ごとに以下の処理を行なう．
現在の形態素で始まる形態素列[MATH](形態素を一つも持たない場合，つまり空文字も含む)と，変形規則[MATH]の前件部の文字列[MATH]が一致した場合，その後件部の文字列[MATH]が，書き換え後表現の候補となる．
また，[MATH]の前接[MATH]-gramの形態素列を[MATH]，[MATH]の後節[MATH]-gramの形態素列を[MATH]とする．
各書き換え後表現の候補[MATH]に対して，新聞記事コーパスでの[MATH]の文字列の頻度を求め，この頻度が最も大きかったときの[MATH]を[MATH]とする．
新聞記事コーパスでの[MATH]の文字列の頻度を求め，この値よりも，[MATH]の文字列の頻度の方が大きいとき，[MATH]を[MATH]に書き換え，処理を次の形態素に移す．
ただし，[MATH]は定数である．
ここでも前節と同じく，アルゴリズムでの頻度算出の環境を固定長の前後2-gram[MATH]としておこう．
この条件で毎日新聞の91年のデータの推敲実験を試みた．
その結果の一例を表[REF_tab:suikou_result]にあげておく．
表の下線部は前節と同じく変形操作により消される部分を意味し，少し下に書いてある文字列はその文字列に変形されることを意味する．
「や」「も」「と」「の」を補って読みやすくなったように思われるものや，逆に「も」を補ったり「で」を省略して意味が変わってしまい良くないと思われる結果があった．
また，最後の行の例では，過去形の「した」を現在形の「する」に変形するというのがあったが，これは「昨年」の話で過去形であるべきで「した」を「する」にしてはいけない．
これの対処としては変形規則の獲得精度をあげるか，文の妥当性の判定チェックに時制の情報も組み込むかする必要がある．
次に判定チェックに時制の情報も組み込んだ実験を行なってみた．
つまり，評価部の尺度として，以下の条件も追加で利用した．
入力されたデータの各部分の形態素列を言い換える時に，その形態素列の末尾の形態素が動詞の場合は，時制が一致することを条件とする．
ここでは時制はJUMANの出力で「タ形」であるものとそれ以外の場合の二種類の時制を利用した．
アルゴリズムとしては(c)を以下のように変更した．
新聞記事コーパスでの[MATH]の文字列の頻度を求め，この値よりも，[MATH]の文字列の頻度の方が大きく，なおかつ，以下の条件を満足する時に[MATH]を[MATH]に書き換え，処理を次の形態素に移す．
[MATH]の最後の形態素と[MATH]の最後の形態素がともに動詞である場合は両方ともが「タ形」か両方ともが「タ形」でない場合にこの条件を満足するとする．
[MATH]の最後の形態素と[MATH]の最後の形態素のどちらか一方でも動詞でない場合はこの条件を満足するとする．
この方法で先の実験と同じデータで新聞記事の推敲を行なってみた．
先の時制が原因で誤った例(表[REF_tab:suikou_result]の最後の例)は「した」と「する」の言い換えを行なわなくなり，その部分の誤りは改善された．
また同様の誤りの文も多く改善された．
改善された文の例を表[REF_tab:suikou_result_jisei]に示す．
表の言い換え箇所の上段は入力文での表現で，下段は時制の制約を加えなければ出力される言い換えた表現である．
また，それぞれ表現の左上の部分に，正しい表現には[MATH]を意味が変わって言い換えとしては正しくない表現には[MATH]をつけている．
この時制によるシステムの変更で出力が変わった10例をチェックしたところ，1例だけそのように言い換えても文の意味が変わらないものであった．
それ以外は時制の情報を使って言い換えを抑制する必要のある箇所であった．
このことにより時制情報を利用することで言い換えシステムの性能を向上させる場合があることがわかった．
ここでは時制に関する誤りを対処するために，時制情報に関係する制約を評価部に追加したが，これは変換規則から時制が変化する規則を取り除くことでも対処できる．
ここでは書き言葉から話し言葉への言い換えを考えてみる[CITE]．
変形規則としては，文献[CITE]の研究で自動獲得した規則のうち，その文献の評価式(4)でソートした結果を上位から見て頻度が1の規則が現れる一つ手前までの規則を利用する．
このとき規則の総数は240個となった．
本節ではこれらを変形部の規則とする．
表[REF_tab:hitode_kisoku_w2s]に規則の例を示す．
「φ」は空文字を意味する．
この規則は双方向書き換え可能ではなく，一方への書き換えのみ可能である．
これは，この規則は書き言葉のテキストと話し言葉のテキストを照合して得られたもので，獲得された変形規則の段階で方向性があり，規則の左辺が書き言葉からまた右辺が話し言葉から得られた表現であるため，書き言葉から話し言葉への言い換えの際には左辺から右辺への一方方向のみで書き換え可能となる．
次に評価に用いるコーパスであるが，ここでは話し言葉に変形したいので，文献[CITE]で話し言葉データと呼んでいるものを使う．
このデータは，開放的融合研究推進制度，話し言葉の言語的・パラ言語的構造の解明に基づく「話し言葉工学」の構築の一環として通信総合研究所と国立国語研究所で作成しているもので，全国大会，研究会などの学会講演データからなっている．
本稿ではそのうちの82編のものを用いている．
評価部の尺度としては以下のものを用いることにする．
{
入力されたデータの各部分形態素列の話し言葉データでの生起確率が，より大きくなるような変形を良いものとする．
}実際に実行する厳密なアルゴリズムは前節のもの(時制情報を利用する改良をする前のもの)と等価である．
つまり，本節の研究は，前節の研究において新聞コーパスを用いていたところを話し言葉データに変えただけである．
前節の研究では，入力も評価コーパスも新聞という同じものだったため，新聞のデータをより新聞のデータらしくする，つまり，推敲の研究となっていたが，本節では入力を書き言葉，評価コーパスを話し言葉とするために，書き言葉から話し言葉への変形ということになる．
この条件で筆者の論文[CITE]を入力として与え，話し言葉から書き言葉への変形の実験を行なった．
前節のアルゴリズムの[MATH]が[MATH]のときの結果を表[REF_tab:s2p_henkei]に，[MATH]が[MATH]のときの結果を表[REF_tab:s2p_henkei2]に示す．
表の下線部は変形操作により消される部分を意味し，少し下に書いてある文字列はその文字列に変形されることを意味する．
もともとアルゴリズムが簡単なため，[MATH]が[MATH]の場合では精度が悪いがそれでも，「え」をいれたり「本稿」を「本研究」と言い換えたりする結果が得られている．
[MATH]が[MATH]の場合では精度は良くほとんど誤りがなかった．
「という」や「ま」や「あー」を入れていて，いかにも話し言葉にふさわしい表現になっている．
しかし，変形箇所が少なく再現率が低いといった感じであった．
ここでは，日本人にとって発音しにくい[CITE] RやLを含む単語をあまり使わない英文に言い換えるシステムについて考えてみる．
本稿ではこのシステムのことをRL発音回避システムと呼ぶ．
日本人が国際会議で英語で演説する際，このシステムによりRやLを含む単語をあまり使わない英文に言い換えておくと，RやLを含む単語の発音が苦手な日本人にとって話しやすい英語となる．
変形規則としては，WordNet 2.0の名詞と動詞の同義語表現を利用した．
評価部の尺度としては以下のものを用いることにした．
英語文で発音しにくいR+母音やL+母音の表現を含む個数が小さいほどよいとする．
(RとLは母音とくっつく場合が特に発音が難しい．
)
R+母音やL+母音の表現を含む個数が同じ場合は入力された元の表現の方がよいとし，また，変形後の表現同士の比較では，入力されたデータの各部分単語列の英語テキストでの生起確率がより大きくなるような変形を良いものとする．
英語テキストでの出現が1個以上があることを条件とする．
(文としての適切性の判定)
英語テキストとしてはBNCコーパス[CITE]を用いた．
本稿では，母音の判定には文字を利用し，a,i,u,e,o,yを後ろにくっつけて持つr,lの表現を，R+母音，L+母音の表現とした．
また，変形規則に用いる同義語表現には動詞の変化形，名詞の複数形なども追加して用いた．
厳密には以下のアルゴリズムによって実行した．
入力として与えられるデータをスペースで区切って単語列に分解する．
文頭の単語から順に，単語ごとに以下の処理を行なう．
現在の単語[MATH]と，変形規則[MATH]の前件部の単語[MATH]が一致した場合，その後件部の単語[MATH]が，書き換え後表現の候補となる．
また，[MATH]の前接[MATH]-gramの単語列を[MATH]，[MATH]の後節[MATH]-gramの単語列を[MATH]とする．
各書き換え後表現の候補[MATH]に対して，[MATH]中にR+母音とL+母音が含まれる頻度[MATH]と，英語コーパスでの[MATH]の単語列の頻度[MATH]を求め，[MATH]が1以上のもので，[MATH]の値が最も大きくその中で[MATH]の値が最も大きかったときの[MATH]を[MATH]とする．
[MATH]中にR+母音とL+母音が含まれる頻度を求め，この値よりも，[MATH]中にR+母音とL+母音が含まれる頻度の方が大きいとき，[MATH]を[MATH]に書き換え，処理を次の形態素に移す．
ただし，[MATH]は定数である．
本稿の言い換えの統一的モデルでは，変形部と評価部を分割した構成になっており，変形部の規則にWordNet 2.0[CITE]の同義語表現を利用し，評価部でR+母音やL+母音が含まれる頻度や英語テキストでの出現頻度を利用することで，比較的容易にRL発音回避システムを作成することができるのである．
この条件で筆者が今まで国際会議で口頭発表してきた発表の原稿を入力として与え，RやLをあまり含まない英文への変形の実験を行なった．
ここでは，少々再現率を下げてもよいから適合率を高める意味で[MATH]としては2を用いた．
この実験の結果の一例を表[REF_tab:l_r_result]にあげておく．
表の縦線で囲った部分が言い換えられた表現で，上の表現が下の表現に言い換えられている．
それぞれR+母音，L+母音が少なくなる表現に書き換えられている．
``approach''を``way''に書き換えたり，``length''を``size''に書き換えたりして，発音しやすい語への言い換えが正しくできているものがあった．
しかし，今のところこのシステムでは，言い換えると微妙に意味が異なってしまう誤りもあった．
このシステムの今後の応用としては，今のところまだ性能が悪いので，言い換えた結果のみを出力するのではなく，言い換えの候補をいくつか尺度の値(R+母音やL+母音の表現を含む個数など)とともにその値の順に提示し，そこでユーザに言い換えに適切な表現を選ばせるという支援システムのような形の利用が良いと思われる．
われわれの質問応答システム[CITE]では，与えられた質問文の答えが書いてありそうな文を探し出し，その答えが書いてありそうな文と質問文の類似度が大きくなるように双方を書き換えて照合し，答えが書いてありそうな文での，質問文の疑問詞に対応している箇所を答えとして出力するといったことを行なう．
例えば，表[REF_tab:mensetsu]のようなデータ[CITE]が与えられているときに「ニューヨーク州の中央部または北部に住む人たちの、最も一般的な職業は何ですか。
」という質問があったとしよう．
このときこの質問文は疑問詞をXにして平叙文化され，またこの質問文と類似している文がデータから抽出され，表[REF_tab:qa_result]の1行目の状態となる．
表[REF_tab:hitode_kisoku]にあげたような規則があったとすると，この規則を用いて質問文，データ双方を類似度が高くなるように書き換えていき，最終的に表のように類似度219.5に達して類似度がそれ以上高くならなくなる．
この状態で質問文とデータを照合すると，答えは「農業」と簡単にわかる．
質問応答システムでは，類似度を尺度として言い換えを行なっていることになる．
類似度が高くなるように言い換えを行なうことで答えとデータが照合しやすくなる．
ここに示したものは文献[CITE]の予備実験として用いていたシステムのものをあげている．
ここで用いた変形規則は人手で作成したものである．
また，表[REF_tab:qa_result]の最終状態のデータの日本語表現は文としておかしい．
これの対処としては「文としての正当性のチェック」などの条件を尺度に組み込むとよいだろう．
本節の質問応答システムは，システムの処理内容の複雑さの都合上，本稿でいう言い換えのモデルだけでは実現できない．
質問文において，疑問詞をXにして平叙文化するモジュールと，質問文とデータの類似度が向上するように言い換えを繰り返させるモジュールが新たに必要である．
しかし，質問文またはデータをデータまたは質問文に類似するように書き換える一回一回の言い換え処理は，変形規則に表[REF_tab:hitode_kisoku]の規則を利用し，変形の尺度に質問文とデータの文の類似度を利用することで，本稿の言い換えの統一的モデルで扱えるものである．
ここでは，質問応答システムを例にあげたが，それに限らず類似度を計算したいときには類似度を尺度として言い換えを行なってやるとよい．
例えば，情報検索などでも高度になると，上記の質問応答のようにクエリと検索される記事を類似度が高くなるように言い換えてからクエリと記事の類似度を求めるといったことも考えられる．
また，照応の問題[CITE]でも，「近くの大きな杉の木の根元にある穴」と「杉の木の根元の穴」の同一性もしくは包含関係が判定できないと照応を解決できないというのがあるが，類似度を尺度として両者を言い換え，例えば，「近くの大きな杉の木の根元の穴」と「杉の木の根元の穴」になった場合，後者が前者に含まれることになり後者が前者を指示可能とシステムに認識させてやることもできる．
