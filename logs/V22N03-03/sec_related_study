現在の抽出型要約の主流である文抽出，文圧縮の同時モデルでは，与えられた文書（群）から，文を単語間依存木として表現し，その根付き部分木を刈り込む，すなわち単語を削除することで要約を生成する．
また，これをILPとして定式化する研究が盛んに行われている[CITE]．
しかし，文から抽出する単語列を単語依存木の根付き部分木に限ると高圧縮な要約設定において情報の網羅性が低下するおそれがある．
さらに，これらの同時モデルでは文書が持つ談話構造を考慮しないため，情報の網羅性が高く自動評価指標のROUGEにおいて高い値を得ることができるが，一貫性に欠けた要約が生成されてしまうという欠点がある．
また，同時モデルにおける文圧縮の手段として，文を依存構造木ではなく句構造木として表現し，その部分木を抽出する手法も提案されている[CITE]．
句構造木は連続した単語列の文法的な役割を階層構造として表現した木であるため，この木を刈り込む際には連続した単語列（句）を同時に削除することが多くなる．
よって，依存構造木を用いた刈り込みと比較すると要約長に柔軟な刈り込みが難しい．
一方，一貫性をもった要約を生成する手法としてRSTを利用した手法が提案されている．
Daum{e} III and Marcuは，RSTを利用したNoisy-channelモデルに基づく文書圧縮手法を提案した[CITE]．
彼らの手法は一貫性を持った要約の生成が可能であるが，情報の網羅性という観点で最適解が得られるとは限らない．
また適切な確率を計算するために大量のコーパスを必要とする上に，計算量の問題で長い文書に適用できないという欠点があった．
Marcuは，RSTの構造を利用してEDUの順位を決定し，ランキング上位のEDUを要約として抽出した[CITE]．
Uzedaらは，Marcuの手法を含む合計6つの手法を組み合わせる手法を提案し，オリジナルの手法との比較評価を行った[CITE].
[REF_sec:rouge]節では彼らの報告にある数値も参考値として載せている．
Marcuらの手法を含むEDUのランキングに基づく手法は，十分な情報の網羅性が保証されないという欠点がある．
Hiraoらはこれを解決するため，EDUの依存木を構築し，その依存関係に基づいてEDUを選択する問題を木制約付きナプサック問題として定式化した[CITE]．
これらの手法はRSTにおけるテキストの最小単位であるEDUをそのまま抽出単位としていたが，EDUが文書要約においても適切な抽出単位であるかについては，要約長に対する柔軟性の面で疑問が残る．
EDUは文よりも短いとはいえそれなりの長さを持ったテキストスパンである．
そのため，要約に含める情報の組み合わせの自由度は比較的低く，かつEDUのようなテキストスパンを対象とした構文解析器がないため，文圧縮のような技術が適用できない．
これに関しては[REF_sec:unit]節で評価実験結果をふまえて考察を行う．
Hiraoらの手法は提案手法に最も強く関連している．
両者の違いは，Hiraoらの手法がEDUをノードとする依存木からEDUを選択する要約手法であることに対し，提案手法は文間の依存関係と単語間の依存関係が入れ子構造を成す木から単語を選択する要約手法であるという点である．
また，文重要度の決定に貢献する特徴を調べた文献[CITE]でも，RSTの有効性が示されている．
これまで，文書の（大域的な）談話構造を利用した要約手法について紹介したが，隣接した文同士のつながりを評価し，文の局所的な並びを最適にすることに取り組む研究も存在する[CITE]．
これらの方法では，修辞構造解析器を必要としないため，論理構造が明確でなく自動解析の精度が期待できない文書においては有効である．
一方で，文書の大域的な談話構造を考慮した要約生成はできない可能性がある．
現在の抽出型要約の主流である文抽出，文圧縮の同時モデルでは，与えられた文書（群）から，文を単語間依存木として表現し，その根付き部分木を刈り込む，すなわち単語を削除することで要約を生成する．
また，これをILPとして定式化する研究が盛んに行われている[CITE]．
しかし，文から抽出する単語列を単語依存木の根付き部分木に限ると高圧縮な要約設定において情報の網羅性が低下するおそれがある．
さらに，これらの同時モデルでは文書が持つ談話構造を考慮しないため，情報の網羅性が高く自動評価指標のROUGEにおいて高い値を得ることができるが，一貫性に欠けた要約が生成されてしまうという欠点がある．
また，同時モデルにおける文圧縮の手段として，文を依存構造木ではなく句構造木として表現し，その部分木を抽出する手法も提案されている[CITE]．
句構造木は連続した単語列の文法的な役割を階層構造として表現した木であるため，この木を刈り込む際には連続した単語列（句）を同時に削除することが多くなる．
よって，依存構造木を用いた刈り込みと比較すると要約長に柔軟な刈り込みが難しい．
一方，一貫性をもった要約を生成する手法としてRSTを利用した手法が提案されている．
Daum{e} III and Marcuは，RSTを利用したNoisy-channelモデルに基づく文書圧縮手法を提案した[CITE]．
彼らの手法は一貫性を持った要約の生成が可能であるが，情報の網羅性という観点で最適解が得られるとは限らない．
また適切な確率を計算するために大量のコーパスを必要とする上に，計算量の問題で長い文書に適用できないという欠点があった．
Marcuは，RSTの構造を利用してEDUの順位を決定し，ランキング上位のEDUを要約として抽出した[CITE]．
Uzedaらは，Marcuの手法を含む合計6つの手法を組み合わせる手法を提案し，オリジナルの手法との比較評価を行った[CITE].
[REF_sec:rouge]節では彼らの報告にある数値も参考値として載せている．
Marcuらの手法を含むEDUのランキングに基づく手法は，十分な情報の網羅性が保証されないという欠点がある．
Hiraoらはこれを解決するため，EDUの依存木を構築し，その依存関係に基づいてEDUを選択する問題を木制約付きナプサック問題として定式化した[CITE]．
これらの手法はRSTにおけるテキストの最小単位であるEDUをそのまま抽出単位としていたが，EDUが文書要約においても適切な抽出単位であるかについては，要約長に対する柔軟性の面で疑問が残る．
EDUは文よりも短いとはいえそれなりの長さを持ったテキストスパンである．
そのため，要約に含める情報の組み合わせの自由度は比較的低く，かつEDUのようなテキストスパンを対象とした構文解析器がないため，文圧縮のような技術が適用できない．
これに関しては[REF_sec:unit]節で評価実験結果をふまえて考察を行う．
Hiraoらの手法は提案手法に最も強く関連している．
両者の違いは，Hiraoらの手法がEDUをノードとする依存木からEDUを選択する要約手法であることに対し，提案手法は文間の依存関係と単語間の依存関係が入れ子構造を成す木から単語を選択する要約手法であるという点である．
また，文重要度の決定に貢献する特徴を調べた文献[CITE]でも，RSTの有効性が示されている．
これまで，文書の（大域的な）談話構造を利用した要約手法について紹介したが，隣接した文同士のつながりを評価し，文の局所的な並びを最適にすることに取り組む研究も存在する[CITE]．
これらの方法では，修辞構造解析器を必要としないため，論理構造が明確でなく自動解析の精度が期待できない文書においては有効である．
一方で，文書の大域的な談話構造を考慮した要約生成はできない可能性がある．
