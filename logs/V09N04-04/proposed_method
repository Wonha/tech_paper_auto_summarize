At-a-glance要約でひとつの具体的な目標にしたのが，電車の中吊り広告として見られる雑誌広告である．
ここで示される記事の見出しは，その記事本体を読むか否かを判断するための情報で，まさにindicative要約になっている．
これらの見出しは次のような性質をもっている．
構造が単純
文は短く
我々は，この単純さ，短さを「句」という言葉を用いて表す．
句表現要約は，重要概念(単語)を含んだ短い句の並びで文書の概要を表現することによって，「読む」負荷を読者に与えずに，重要概念間の関係が把握できることを目指すものである．
短い句を生成するために，単語と単語の係り受け関係を基本単位として，ふるいわけに必要な重要な概念を含み，意味にまとまりをもたせるのに必要な最低限の関係だけを選択して組み立てる方法をとる．
まず図[REF_algo]を用いてアルゴリズムの概要を示す．
句表現要約手法には，大きくは次の4つのステップがある．
文書中の文を一文ごとに解析し，それぞれDAG (Directed Acyclic Graph)を得る．
ここでは，アークとその両端のノード(単語列：名詞連続も含む)をまとめたものを関係の単位(以降では関係単位と呼ぶ)とする．
アークは係り側単語列と受け側単語列の係り受け関係を示しており，関係名がラベルとして付与される．
図[REF_algo]では説明のため意味的な役割を付記しているが，表層格を関係名として用いている．
文書中の全関係単位から重要な関係単位をひとつ選択する．
これをコア関係と呼ぶ．
図中では薄墨をつけたノードと太線のアークで示している．
コア関係だけでは意味が特定されずふるいわけの情報としては不十分であるので，意味を限定し，意味的なまとまりを持たせるために必要な関係単位を補完する．
図[REF_algo]ではこれらを二重線で囲んだ要素で示している．
DAG中で選択されたサブツリーから，次に示すような短い句を生成する．
「ライフサイクル全体を視野に入れたリサイクルモデル」
このアルゴリズムの基本構造を図[REF_frame]に示す．
上記のステップを，最初に設定した条件(句の数や要約全体の長さなど)を満たすまで繰り返すことで，短い句を複数個得る．
繰り返しの際に，用いた単語のスコアを一定の割合で落とすことにより，同じ単語ばかりが繰り返し出現することを避ける．
次節以降に，個々のステップを検討する．
文書中の各文に対して係り受け解析を行い，単語(列)をノード，係り受け関係をアークとするDAGを得る．
係り受け解析は，形態素解析結果の単語列に対して，パターンマッチにより係り受け関係を抽出する方法[CITE]を用いている．
この方法ではバックトラックを行わないため，解析誤りも含まれる．
例えば，「N1のN2のN3」は基本的にあいまいな構造であるが，名詞[MATH]「の」は直後の名詞に係るようにしており，解析誤りが生じる可能性がある．
このような解析誤りの一部は，関係補完のステップで``ambiguity packing''という方法で隠蔽される．
すべての関係単位に重要度スコアを付与する．
まず，すべての単語にスコアを付与する．
スコア付けの方法としては，一般的な方法であるtf*IDF積[CITE]をベースとして採用しているが，tf*IDF積ではtfの影響が強すぎる傾向が見られるので，tfの平方根をとることでtfによるスコアの伸びを抑える．
関係スコアの計算式は次式で与える．
S1，S2は関係アークでつながれる係り側と受け側の語ノードそれぞれのスコアである．
複合語のスコアは，構成要素の単語スコアから計算する．
長い複合語は意味を特定する目的には効果があるのだが，短い句を出す目的には不利になるので，両者のバランスをとり，構成要素の単語スコアの和を，それを構成する単語数に応じて減少させている．
Srelは関係の種類に与える重要度である．
動詞の格のように概念の中心的な役割を果たすものは大きく，名詞の並列のように関係が周辺的と考えられるものは低く設定している[CITE]．
また，副詞のように修飾的な意味が強いものは，関係そのものを選択しないよう，[MATH]としている．
付録[REF_app1]に関係の種類を列挙する．
このようにしてスコア付けしたすべての関係単位の中から，スコアの最も大きいものを選択し，コア関係とする．
コア関係だけでは提示される情報が不足し，ふるいわけの目的には十分ではない．
情報をより特定する付加的な要素を補完し，読者が元文書の内容を推測することを助ける．
ここではその補完規則から一部を示す(付録[REF_app2]に存在する規則を列挙する)．
必須格にあたる関係[H1]
係り側，受け側のいずれかが用言の場合，必須格に当たる関係を追加する．
一部の動詞に対してはそれぞれに必須格にあたる関係を規定しているが，それ以外の動詞に対しては一律に「が」関係，「を」関係，「に」関係を必須格関係として扱っている．
また，係助詞「は」，「も」，格助詞「の」，無形格もこれらを置き換え得るものとして同じ扱いとする．
用言に修飾される名詞[E1]
用言によって修飾される名詞がある場合，この用言部分は埋め込み構造を形成する．
受け側の名詞は，埋め込み文中の格を占める場合と，格を占めない場合(同格など)がある．
いずれの場合も，句のまとまりを形成する上で必要であるため，用言から名詞への修飾関係を付加している．
抽象度の高い名詞への修飾[H5]
「こと」，「もの」などの形式名詞や，「場合」，「時代」などそれ自身では独立して存在することが少なく，なんらかの限定的な修飾句を伴わなければ意味が通じないことが多い名詞を抽象度の高い名詞として定義し，これらの名詞を受け側とする関係を付加することにより，より適切な情報を提供する．
Ambiguity Packing [E3]
既に述べたように，パターンマッチによる解析ではあいまいさを解消する能力までもたないため，解析誤りが含まれることが多い．
例えば，
アーチ型の屋根の庇
では，「アーチ型→屋根」，「屋根→庇」の2つの関係しかとっておらず，正しい「アーチ型→庇」がとれない．
「アーチ型→屋根」の関係がすでに選択されている場合，「屋根→庇」の関係を補完し，結果的に「アーチ型の屋根の庇」として要約に含まれるようにする．
より性能の高い解析器を用いた場合でも，あいまいさの完璧な解消はできないため，この方法は有効である．
終了条件は，句の数または要約全体の長さのいずれかで指定する．
終了条件が満たされない場合，次の句を選択するため図[REF_frame]のコア選択以降を繰り返す．
要約中の手がかりとなる語の種類を増やすため，このループで得られた句の中の語がなるべく繰り返し使われないようにする．
このために今回使われた語(補完された単語も含む)のスコアを減らす．
これを行う関係再スコアリングというステップを図[REF_frame]のコア選択に入る前に入れる．
関係再スコアリングで行っている処理は以下のとおり．
今回使われた語(補完された単語も含む)のスコアに一定の逓減率R ([MATH])を積算する
新しい単語スコアを用いて，式([REF_eq-score])に従い，文書中のすべての関係単位のスコアを計算する．
逓減率Rは0.5を標準としている．
Rの値の設定に関する考察は付録[REF_app3]を参照されたい．
なお，2回目以降のコア選択においては，それまでに用いられた関係単位は除外する．
この除外規定では1文中から複数のコア関係が選択されることはありうるので，1文から複数の句が生成される場合もある．
またそれらがお互いの一部を共有する場合もある．
このようにして，コア関係にいくつかの関係が付加された複数のDAGが得られる．
このステップにおいては，ノードおよびアークにそれぞれ対応付けられている表層表現を出現順に取り出して結合することで，それぞれのDAGごとに表層表現を得る．
得られた表層表現を，元文書における出現順に列挙する．
このアルゴリズムに基づいて，要約システムを開発した．
開発言語はJavaで，Windows NT / 2000およびSolaris 2.6上で稼動している．
要約に要する時間はテキスト長に比例し，4KB (2000文字，A4文書1ページ相当)の文書の場合，Celeron 500 MHzのPCで約700 msecである．
95 %以上が解析(形態素解析と係り受け解析)で消費されている．
文書管理システムとの統合例を図[REF_applyex]に示す．
検索結果として得られた文書に，句表現要約(ここでは「キーフレーズ」という名前で示されている)を付加して列挙している．
