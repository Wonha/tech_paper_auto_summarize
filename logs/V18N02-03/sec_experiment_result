本研究では個別文書と，数十MB〜200 MBの自然言語やプログラミング言語の文書を用いて[REF_sihyou]章で説明した[MATH]の各指標の文長に対する値の変化を調べる実験を行った．
以下[REF_env]節で実験データや実行環境を説明した後に，[REF_result_small]節で小規模文書での実験結果，[REF_result_normal]節で大規模文書に対する結果を図とともに述べる．
今回の実験で用いた文書は表[REF_tb:many large]の通りである．
個別文書に関しては，[CITE]とは異なり，英語だけではなく，日本語，フランス語，スペイン語の文章も対象とした．
用いたデータは表[REF_tb:many large]の第一ブロックに示した．
[CITE]らの研究を概観すると，定数になるかどうかを吟味するには，小規模な個別文書では長さが不十分であることもよくある．
そこで，日本語，英語，中国語の新聞コーパスについても定数となるかどうかを調べる．
また，得られる定数が言語の特徴量を表すかどうかを吟味するため，比較対象としてプログラミング言語のデータも用いる．
このためには，Java, RubyとLispのソースを用いた．
ここで日本語と中国語については[MATH]と[MATH]の値を計算する際には日本語（ローマ字），中国語(pinyin)の文書を用いた場合，ならびに，元のテキストを用いた場合の両方を報告する．
その他の言語に関してはいずれの指標の場合も表[REF_tb:many large]にある各言語の文書を用いて実験を行った．
また，プログラミングにおける単語は以下のように定義した．
まず，JavaとRubyについてはソースを記号で分割し，分割された各要素を単語とした．
例えば`if(i [MATH] 5) break;'であれば`if', `(', `i', `[MATH]', `5', `)', `break`, `;'の8つの要素が単語である．
Lispの場合はこれらの要素から`('と`)'の2つを除いたものを単語とした．
今回の実験においてはいくつかの外部プログラムを利用した．
ここでそれらのプログラムについて記載する．
まず単語に基づいた指標[MATH]の値を計算するために文書を単語に分割する必要がある．
日本語の場合は形態素解析ソフトMecabを，中国語については，ICTCLASを用いて単語に分割した．
文字列に基づいた指標[MATH]については，日本語，中国語に関しては，ローマ字，pinyin変換したものについても計算した．
中国語に関してはあらかじめpinyin表記で書かれた別の文書を用いたが，日本語の場合はKAKASIを用いてローマ字に変換した．
各指標の計算方法は，[REF_sihyou]節で示したとおりである．
個別文書に関する結果を図[REF_fig:small_k]--[REF_fig:small_h]について示す．
英語の文書のみならず，他の印欧語族や日本語といった文書については，[MATH], [MATH]については一定となる一方で，[MATH], [MATH], [MATH]については大域的には単調変化する結果となった．
[CITE]の結果では，[MATH]が一定となることが示されていた．
しかし，実験では一貫して[MATH]が一定とはならないことが示されている．
同様に，類似の複雑系の指標としての[MATH]もやはり一定とはならなかった．
文長に対する各指標の値と，参考のためにシャッフル後の結果について述べる．
ここで文書をシャッフルするとは，各文書ごとに文書中の単語の順番をランダムに入れ替えることを言い，シャッフル後の結果とは，この操作を20回繰り返した際の指標の平均値である．
このように単語順序をランダムに入れ替えるのは，もともとTweedieとBaayen [CITE]が行っていた方法で，数式上の仮定を満たすためであり，文書定数を考える上で前処理としての妥当性は疑問である．
とはいえ，文書には確かに局所的な揺れやぶれがあるので，大域的特性を概観し，元文書に対する指標の推移を比較検討するために示すものである．
このシャッフルは先行研究との対比のため[MATH]と[MATH]の2つの指標に対してのみ結果を示す．
以下の図では，横軸は文書の単語数の対数をとったものであり，縦軸は指標の値である．
図[REF_fig:many_k]は各文書に対する[MATH]であり，図[REF_fig:many_sh_k]はシャッフル後の結果である．
まず[MATH]については自然言語の場合，いずれの言語においても文書の単語数の対数に対して値はほぼ一定となった．
プログラミング言語の場合は自然言語と比べて若干の変化が見られたが，単語数が10万を超えると同様に値はほぼ一定となった．
文書中の単語の順番をランダムに入れ替えた場合ではいずれの言語の場合でも文書の単語数の対数に対してほぼ完全に一定となった．
シャッフル前と後で[MATH]の値はほとんど変化していないことから，[MATH]は文書中の単語がランダムに出現するという仮定が背後にある指標にも拘わらず，ランダム性が崩れた実際の文書においても値がほとんど変わらずほぼ一定となったということが興味深い．
また，プログラミング言語の[MATH]の値は自然言語の値と比べてかなり大きくなり，両言語間の[MATH]の値に大きな差が出る結果となった．
[MATH]については日中をアルファベットに変換した場合の結果をまず吟味する．
図[REF_fig:many_v]は各文書に対する[MATH]であり，図[REF_fig:many_v2]は図[REF_fig:many_v]を拡大したものである．
日本語の場合に値が英語，中国語と比較してわずかに大きくなっているが，いずれも文書量の対数に対して値はほぼ一定でおよそ0.5の値をとった．
プログラミング言語の場合は自然言語の場合よりも変化が見られるが，単調に変化する傾向はみられない．
プログラミング言語に関する[MATH]の値は自然言語よりも大きく，およそ0.65の値をとり，両言語間で値に大きな差が表れた．
これは，自然言語の冗長性が，プログラミング言語のそれよりも一律に小さいことを示しているだろう．
次にアルファベットに変換しない場合の日本語，中国語の文字列をそのまま用いた場合の[MATH]の結果を図[REF_fig:raw_v]と図[REF_fig:raw_v2]に示す．
これらの図には比較のため，アルファベットに変換した場合の日本語，中国語の結果も含まれている．
まず[MATH]の値は，アルファベットに変換しない場合の日本語，中国語の文字列をそのまま用いた場合でも，アルファベットに変換した場合と同様に文書量の対数に対して値はほぼ一定となることがわかる．
しかし[MATH]の値の大きさに注目すると，その値は日本語，中国語のいずれの場合もおよそ0.35であり，アルファベットに変換した場合の0.5という値より小さくなっている．
これは日本語，中国語の原文におけるアルファベットサイズが変換後のそれよりも遥かに大きいため，文書中で繰り返し出現する文字列の種類が減少し，接尾辞木の内部節点の数が少なくなったからだと考えられる．
その他の3つの指標[MATH]について述べる．
図[REF_fig:many_z]--[REF_fig:many_h]はそれぞれ各文書に対する[MATH]の結果である．
まず複雑系に関連した指標である[MATH]は[MATH]におけるLispを除いて文長に対して値が単調に増加する結果となった．
Lispは[MATH]において値が微増するにとどまり，ほぼ一定となった．
[MATH]や[MATH]は，言語に内在する大域的な構造を一挙に捉えるものであるが，それは一般的には一定値にはならないということである．
また，文字列のエントロピー[MATH]は文長に対して値が単調に減少する結果となった．
なお，ここで示す[MATH]は日中についてはアルファベット表記に変換した結果である．
さらに，[MATH]についてはシャッフル後も同様にLispを除いて値が一定とはならなかった．
他の言語においては全く一定にならなかった[MATH]がLispに限り，値が微増するにとどまったという結果は大変興味深い．
以上の実験に加えて[MATH]と[MATH]の2つの指標については，文書の文字列を逆順にしたものに対しても実験を行ったので，その結果を簡単に述べる．
これは[MATH]と[MATH]が本研究で検討している指標の中で文字列の順序に依存する指標であるからであり，文書の文字列を逆順にすることによって，文字列の前から後ろへの依存性だけではなく，後ろから前への依存性を調査した．
結果としては，文字列を逆順にしても，[MATH]と[MATH]の値は文長が増加するにつれて文字列の順序を変えない場合の値とほぼ同じになった．
本研究では個別文書と，数十MB〜200 MBの自然言語やプログラミング言語の文書を用いて[REF_sihyou]章で説明した[MATH]の各指標の文長に対する値の変化を調べる実験を行った．
以下[REF_env]節で実験データや実行環境を説明した後に，[REF_result_small]節で小規模文書での実験結果，[REF_result_normal]節で大規模文書に対する結果を図とともに述べる．
今回の実験で用いた文書は表[REF_tb:many large]の通りである．
個別文書に関しては，[CITE]とは異なり，英語だけではなく，日本語，フランス語，スペイン語の文章も対象とした．
用いたデータは表[REF_tb:many large]の第一ブロックに示した．
[CITE]らの研究を概観すると，定数になるかどうかを吟味するには，小規模な個別文書では長さが不十分であることもよくある．
そこで，日本語，英語，中国語の新聞コーパスについても定数となるかどうかを調べる．
また，得られる定数が言語の特徴量を表すかどうかを吟味するため，比較対象としてプログラミング言語のデータも用いる．
このためには，Java, RubyとLispのソースを用いた．
ここで日本語と中国語については[MATH]と[MATH]の値を計算する際には日本語（ローマ字），中国語(pinyin)の文書を用いた場合，ならびに，元のテキストを用いた場合の両方を報告する．
その他の言語に関してはいずれの指標の場合も表[REF_tb:many large]にある各言語の文書を用いて実験を行った．
また，プログラミングにおける単語は以下のように定義した．
まず，JavaとRubyについてはソースを記号で分割し，分割された各要素を単語とした．
例えば`if(i [MATH] 5) break;'であれば`if', `(', `i', `[MATH]', `5', `)', `break`, `;'の8つの要素が単語である．
Lispの場合はこれらの要素から`('と`)'の2つを除いたものを単語とした．
今回の実験においてはいくつかの外部プログラムを利用した．
ここでそれらのプログラムについて記載する．
まず単語に基づいた指標[MATH]の値を計算するために文書を単語に分割する必要がある．
日本語の場合は形態素解析ソフトMecabを，中国語については，ICTCLASを用いて単語に分割した．
文字列に基づいた指標[MATH]については，日本語，中国語に関しては，ローマ字，pinyin変換したものについても計算した．
中国語に関してはあらかじめpinyin表記で書かれた別の文書を用いたが，日本語の場合はKAKASIを用いてローマ字に変換した．
各指標の計算方法は，[REF_sihyou]節で示したとおりである．
個別文書に関する結果を図[REF_fig:small_k]--[REF_fig:small_h]について示す．
英語の文書のみならず，他の印欧語族や日本語といった文書については，[MATH], [MATH]については一定となる一方で，[MATH], [MATH], [MATH]については大域的には単調変化する結果となった．
[CITE]の結果では，[MATH]が一定となることが示されていた．
しかし，実験では一貫して[MATH]が一定とはならないことが示されている．
同様に，類似の複雑系の指標としての[MATH]もやはり一定とはならなかった．
文長に対する各指標の値と，参考のためにシャッフル後の結果について述べる．
ここで文書をシャッフルするとは，各文書ごとに文書中の単語の順番をランダムに入れ替えることを言い，シャッフル後の結果とは，この操作を20回繰り返した際の指標の平均値である．
このように単語順序をランダムに入れ替えるのは，もともとTweedieとBaayen [CITE]が行っていた方法で，数式上の仮定を満たすためであり，文書定数を考える上で前処理としての妥当性は疑問である．
とはいえ，文書には確かに局所的な揺れやぶれがあるので，大域的特性を概観し，元文書に対する指標の推移を比較検討するために示すものである．
このシャッフルは先行研究との対比のため[MATH]と[MATH]の2つの指標に対してのみ結果を示す．
以下の図では，横軸は文書の単語数の対数をとったものであり，縦軸は指標の値である．
図[REF_fig:many_k]は各文書に対する[MATH]であり，図[REF_fig:many_sh_k]はシャッフル後の結果である．
まず[MATH]については自然言語の場合，いずれの言語においても文書の単語数の対数に対して値はほぼ一定となった．
プログラミング言語の場合は自然言語と比べて若干の変化が見られたが，単語数が10万を超えると同様に値はほぼ一定となった．
文書中の単語の順番をランダムに入れ替えた場合ではいずれの言語の場合でも文書の単語数の対数に対してほぼ完全に一定となった．
シャッフル前と後で[MATH]の値はほとんど変化していないことから，[MATH]は文書中の単語がランダムに出現するという仮定が背後にある指標にも拘わらず，ランダム性が崩れた実際の文書においても値がほとんど変わらずほぼ一定となったということが興味深い．
また，プログラミング言語の[MATH]の値は自然言語の値と比べてかなり大きくなり，両言語間の[MATH]の値に大きな差が出る結果となった．
[MATH]については日中をアルファベットに変換した場合の結果をまず吟味する．
図[REF_fig:many_v]は各文書に対する[MATH]であり，図[REF_fig:many_v2]は図[REF_fig:many_v]を拡大したものである．
日本語の場合に値が英語，中国語と比較してわずかに大きくなっているが，いずれも文書量の対数に対して値はほぼ一定でおよそ0.5の値をとった．
プログラミング言語の場合は自然言語の場合よりも変化が見られるが，単調に変化する傾向はみられない．
プログラミング言語に関する[MATH]の値は自然言語よりも大きく，およそ0.65の値をとり，両言語間で値に大きな差が表れた．
これは，自然言語の冗長性が，プログラミング言語のそれよりも一律に小さいことを示しているだろう．
次にアルファベットに変換しない場合の日本語，中国語の文字列をそのまま用いた場合の[MATH]の結果を図[REF_fig:raw_v]と図[REF_fig:raw_v2]に示す．
これらの図には比較のため，アルファベットに変換した場合の日本語，中国語の結果も含まれている．
まず[MATH]の値は，アルファベットに変換しない場合の日本語，中国語の文字列をそのまま用いた場合でも，アルファベットに変換した場合と同様に文書量の対数に対して値はほぼ一定となることがわかる．
しかし[MATH]の値の大きさに注目すると，その値は日本語，中国語のいずれの場合もおよそ0.35であり，アルファベットに変換した場合の0.5という値より小さくなっている．
これは日本語，中国語の原文におけるアルファベットサイズが変換後のそれよりも遥かに大きいため，文書中で繰り返し出現する文字列の種類が減少し，接尾辞木の内部節点の数が少なくなったからだと考えられる．
その他の3つの指標[MATH]について述べる．
図[REF_fig:many_z]--[REF_fig:many_h]はそれぞれ各文書に対する[MATH]の結果である．
まず複雑系に関連した指標である[MATH]は[MATH]におけるLispを除いて文長に対して値が単調に増加する結果となった．
Lispは[MATH]において値が微増するにとどまり，ほぼ一定となった．
[MATH]や[MATH]は，言語に内在する大域的な構造を一挙に捉えるものであるが，それは一般的には一定値にはならないということである．
また，文字列のエントロピー[MATH]は文長に対して値が単調に減少する結果となった．
なお，ここで示す[MATH]は日中についてはアルファベット表記に変換した結果である．
さらに，[MATH]についてはシャッフル後も同様にLispを除いて値が一定とはならなかった．
他の言語においては全く一定にならなかった[MATH]がLispに限り，値が微増するにとどまったという結果は大変興味深い．
以上の実験に加えて[MATH]と[MATH]の2つの指標については，文書の文字列を逆順にしたものに対しても実験を行ったので，その結果を簡単に述べる．
これは[MATH]と[MATH]が本研究で検討している指標の中で文字列の順序に依存する指標であるからであり，文書の文字列を逆順にすることによって，文字列の前から後ろへの依存性だけではなく，後ろから前への依存性を調査した．
結果としては，文字列を逆順にしても，[MATH]と[MATH]の値は文長が増加するにつれて文字列の順序を変えない場合の値とほぼ同じになった．
