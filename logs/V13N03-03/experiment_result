PDGは依存森により整依存木集合を圧縮共有して表現することにより，各種の曖昧性により生じる組合せ爆発を抑制することを狙いの１つとしており，本稿では，PDGの構文解析から圧縮依存構造の構築までの方式を中心に述べている．
本章では，自然言語の各種の曖昧性を記述したPDG文法を用いて，典型的な曖昧性例文の構文解析・依存森生成実験を行い，各種の曖昧性がどの様に処理されるかについて述べると共に，統語森と依存森との対応関係やNon-projectiveな依存木の生成についても実例も用いながら述べる．
なお，アルゴリズムの効率も実用上重要なファクタであるが，本稿で示した構文解析アルゴリズム，統語森・依存森構成アルゴリズム，依存森縮退アルゴリズムは，PDGの解析方式の検証を行うことを主眼に実装をしており，実システムとしての実装では種々の改善が考えられる．
PDGの実装上の検討，テストコーパスなどを使った性能評価などについては，今後の課題とする．
なお，以下の実験では，Prolog上に実装されたPDGの試作システムを利用している．
図[REF_fig:GrammarForExamples]は，例文解析に使用した文法規則であり，代表的な各種曖昧性構文を含んでいる．
文法中の品詞det,n,be,ving,v,adv,pre,relcは，それぞれ，冠詞，名詞，BE動詞，動詞の現在分詞，動詞，副詞，前置詞，関係節を表している．
また，図にはトップノードを導入するルート規則は明示されていないが，文全体(s)と名詞句(np)を解析結果として受理するルート規則を想定している．
この文法は例題分析実験用のため，言語学的妥当性や厳密性は二義的である．
文法には次のような構文的曖昧性が記述されている．
：R6(名詞修飾)とR10,R17(動詞修飾)の2種類がある
：R11(〜and〜),R12(〜or〜)の名詞句並列を表す規則が存在する
：be動詞に対してR15(現在進行形の構文)とR16(copulaの構文)の構文解釈曖昧性規則が存在する
：動詞の現在分詞形に関しては様々な解釈が可能であり，次のような用法が記述されている
名詞が現在分詞の主格を占める形容詞的用法(R7)
名詞が現在分詞の目的格を占める形容詞的用法(R8)
名詞句が動詞の目的格となる動名詞句(R9,R10)
R8とR9は動詞と名詞の修飾関係としては類似しているが，どちらが主辞(句ヘッド)であるかという依存構造の観点からは異なった構造である．
また，平叙文(R1)と命令文(R2)のパタンもあり，``Time flies like an arrow''のような多品詞の曖昧性と組み合わさって種々の構文解釈を生成する．
また，(R19)は，non-projectiveな依存木，すなわち，交差する依存関係を含む依存木を生成する規則である．
以下では，上記文法を用いて代表的な曖昧性例文等を解析した結果について述べる．
多品詞に起因する曖昧性の解析例については，既に例題として述べている．
以下では，自然言語の統語的な曖昧性の代表例として前置詞付加曖昧性，接続詞スコープ曖昧性，構造解釈曖昧性の３つについて前記PDG文法での解析例を示す．
図[REF_fig:DFForISaw]は，前置詞の付加(PP-attachment)曖昧性の例文`` I saw a girl with a telescope in the forest''に対する依存森である．
依存グラフのアークには，アーク名/アークIDと選好スコアが付与されている．
各ノードの品詞や表層位置情報は依存グラフの下の対応表に示している．
この例では多品詞曖昧性を持つ語はないが，前置詞``with''に2つ([MATH],[MATH])，``in''に3つ([MATH],[MATH],[MATH])の依存先の曖昧性が存在する．
図に示すように，これらのアーク間には，共起マトリックスで○が存在しない組合せ，すなわち共起制約がかかっているアークの組がいくつか存在している．
[MATH]と[MATH]，[MATH]と[MATH]と[MATH]は，それぞれ位置を同じくするアークであるため被覆制約の1種である単一役割制約がかかっている．
また，[MATH]と[MATH]の間には非交差制約がかかっている．
この共起制約がなければ，前置詞句付加曖昧性の組合せにより[MATH]個の解が存在するが，CM(14,25)[MATH]○によりNon-projectiveな依存木が排除され，この依存森は5つの整依存木（解釈）を含んでおり，例文に対して可能な前置詞句付加曖昧性を適切に表現している．
例文に対して，統語森のサイズは25，初期依存森のサイズは18，縮退依存森のサイズは13である．
統語森は5つの解釈に対応する5つの構文木からなる集合，初期依存森と縮退依存森は，5つのID付き依存木(5つの汎化依存木に対応)の集合に対応している．
初期依存森は，[MATH],[MATH],[MATH],[MATH]に関してそれぞれ2本,1本,1本,1本の同値アークを有している．
例えば，[MATH]とその同値アークは，次に模式的に示す単一弧から生成されるが，これらは全て文法規則(R14)から生まれた弧である．
\myhalfskip
[MATH]1, 4, vp/([saw]-v-1) [MATH] v(ID:109) np(ID:126)・, {arc(obj-5,[girl]-n-3,[saw]-v-1)}[MATH]
[MATH]1, 7, vp/([saw]-v-1) [MATH] v(ID:109) np(ID:163)・, {arc(obj-15,[girl]-n-3,[saw]-v-1)}[MATH]
[MATH]1,10, vp/([saw]-v-1) [MATH] v(ID:109) np(ID:203)・, {arc(obj-28,[girl]-n-3,[saw]-v-1)}[MATH]
\myhalfskip最初の弧は，被覆範囲が1〜4(``saw a girl''に対応)で，句ヘッドが[saw]-v-1，圧縮弧v(ID:109)とnp(ID:126)を構成素としてもち，アークIDが5で関係名がobjのアークを有する．
これら同値アークは弧の範囲がそれぞれ異なった名詞句との結合により生成されている．
これらは全て1つのアークにマージされ，縮退依存森では同値アークは存在していない．
同値アーク[[(5),15,28],[(13),32],[(14),33],[(11),27]]最終アーク30, 4, 5,13,14,10,11,25,23,26,20,21,35
(obj-5)：スコープが異なる：ノードの範囲とは無関係にマージ可能としている（できる場合とできない場合の弁別を入れることが考えられる）** new arcid: arc_share(obj-15,[girl]-n-3,[saw]-v-1) 173:[1,7] vp/([saw]-v-1)--> [109 163]* : [[arc(obj-15,[girl]-n-3,[saw]-v-1)]] ** new arcid: arc_share(obj-5,[girl]-n-3,[saw]-v-1) 135:[1,4] vp/([saw]-v-1)--> [109 126]* : [[arc(obj-5,[girl]-n-3,[saw]-v-1)]] ** new arcid: arc_share(obj-28,[girl]-n-3,[saw]-v-1) 222:[1,10] vp/([saw]-v-1)--> [109 203]* : [[arc(obj-28,[girl]-n-3,[saw]-v-1)]]
163:[2,7] np/([girl]-n-3)--> [126 161]* : [[arc(npp-13,[with]-pre-4,[girl]-n-3)]] 126:[2,4] np/([girl]-n-3)--> [119 122]* : [[arc(det-4,[a]-det-2,[girl]-n-3)]] 203:[2,10] np/([girl]-n-3)--> [163 199]* : [[arc(npp-25,[in]-pre-7,[girl]-n-3)]]
-- npp-13の同値アーク：163:[2,7] np/([girl]-n-3)--> [126 161]* : [[arc(npp-13,[with]-pre-4,[girl]-n-3)]] 228:[2,10] np/([girl]-n-3)--> [126 213]* : [[arc(npp-32,[with]-pre-4,[girl]-n-3)]]
====== Number of various trees ======== [Parse Forest] (a) Parse Forest Size : 25 (b) Number of collection of parse trees : 5 (c) Number of set of parse trees : 5 [Dependency Forest] (I-1) Initial DF size : 18 (I-2) Initial DF ID-tree collection number : 5 (I-3) Initial DF ID-tree set number : 5 (I-4) Initial DF Generalized-tree number : 5 (R-1) Reduced DF size : 13 (R-2) Reduced DF ID-tree collection number : 5 (R-3) Reduced DF ID-tree set number : 5 (R-4) Reduced DF Generalized-tree number : 5
図[REF_fig:DFForEarthAndMoon]は，接続詞のスコープ曖昧性を含む名詞句`` Earth and Moon or Jupitor and Ganymede''に対する依存森である．
3つの接続詞のスコープの組合せに対応して``Earth''に3つ，``Moon''に2つのアークの依存先の曖昧性が存在する．
前節の例と同様，被覆制約だけ満足する場合には，前置詞句スコープ曖昧性の組み合わせで6つの解釈が存在するが，[MATH]と[MATH]が非交差制約に対応する共起マトリックスの制約を持っているため，1つの依存木が排除され，この依存森は合計5つの整依存木を持っている．
例文に対して，統語森のサイズは18，初期依存森のサイズは17，縮退依存森のサイズは10である．
統語森は5つの解釈に対応する5つの構文木からなる集合，初期依存森と縮退依存森は，5つのID付き依存木(5つの汎化依存木に対応)からなる集合に対応している．
初期依存森は，[MATH],[MATH],[MATH],[MATH],[MATH]は各々1本,1本,1本,2本,2本の同値アークを有している．
これらは全て1つのアークにマージされ，縮退依存森では同値アークは存在していない．
接続詞スコープ曖昧性は，前置詞付加曖昧性と類似しているが，後に述べる修飾スコープの問題を持つという点で言語現象的には異なっている．
同値アーク[[(22),23],[(9),10],[(6),7],[(18),19,20],[(14),15,16]]最終アーク25,12, 4, 2,22, 9, 6,18,14,26 ----- dgarc(and-25,[earth]-n-0,[ganymede]-n-6) dgarc(and-12,[earth]-n-0,[jupitor]-n-4) dgarc(and-4,[earth]-n-0,[moon]-n-2) dgarc(cnj-2,[and]-and-1,[earth]-n-0) dgarc(or-22,[moon]-n-2,[ganymede]-n-6) dgarc(or-9,[moon]-n-2,[jupitor]-n-4) dgarc(cnj-6,[or]-or-3,[moon]-n-2) dgarc(and-18,[jupitor]-n-4,[ganymede]-n-6) dgarc(cnj-14,[and]-and-5,[jupitor]-n-4) dgarc(root-26,[ganymede]-n-6,[root]-x-root)×dgarc(or-23,[moon]-n-2,[ganymede]-n-6)×dgarc(or-10,[moon]-n-2,[jupitor]-n-4)×dgarc(cnj-7,[or]-or-3,[moon]-n-2)×dgarc(and-19,[jupitor]-n-4,[ganymede]-n-6)×dgarc(and-20,[jupitor]-n-4,[ganymede]-n-6)×dgarc(cnj-15,[and]-and-5,[jupitor]-n-4)×dgarc(cnj-16,[and]-and-5,[jupitor]-n-4)
====== Number of various trees ======== [Parse Forest] (a) Parse Forest Size : 18 (b) Number of collection of parse trees : 5 (c) Number of set of parse trees : 5 [Dependency Forest] (I-1) Initial DF size : 17 (I-2) Initial DF ID-tree collection number : 5 (I-3) Initial DF ID-tree set number : 5 (I-4) Initial DF Generalized-tree number : 5 (R-1) Reduced DF size : 10 (R-2) Reduced DF ID-tree collection number : 5 (R-3) Reduced DF ID-tree set number : 5 (R-4) Reduced DF Generalized-tree number : 5
図[REF_fig:DFForMyHobbyIs]は，構造解釈上の曖昧性を含む例文``My hobby is watching birds with telescope''に対する依存森である．
この例も，多品詞曖昧性を持たないが，``be''動詞の解釈(コピュラか進行形か)，``watching birds''の解釈([MATH],[MATH],[MATH])，前置詞の付加曖昧性([MATH],[MATH],[MATH],[MATH])等を持っており，「私の趣味は双眼鏡で鳥を見ることです」，「私の趣味は，双眼鏡で鳥を見ています」，「私の趣味は双眼鏡を持った見る鳥です」など10の解釈に対応する整依存木を含んでいる．
例文に対して，統語森のサイズは23，初期依存森のサイズは24，縮退依存森のサイズは16である．
統語森は10の解釈に対応する8つの構文木集合，初期依存森と縮退依存森は，10のID付き依存木(10個の汎化依存木に対応)の集合に対応している．
初期依存森は，[MATH],[MATH],[MATH],[MATH],[MATH]に関してそれぞれ2本,2本,5本,2本,2本の同値アークを有している．
この例では，[REF_sec:PP-attachment]節の例とは異なり，複数の規則から同値アークが生成されている．
例えば，[MATH]の同値アークは，(R9),(R10),(R15)などの文法規則から得られる次に示すような弧に含まれている．
\myhalfskip(R9)⇒[MATH]3, 5, np/([watching]-ving-3) [MATH] ving(ID:121) np(ID:130)・,
{arc(obj-5,[birds]-n-4,[watching]-ving-3)}[MATH]
(R10)⇒[MATH]3, 7, np/([watching]-ving-3) [MATH] ving(ID:121) np(ID:130) pp(ID:176)・,
{arc(obj-6,[birds]-n-4,[watching]-ving-3),arc(vpp-22,[with]-pre-5,[watching]-ving-3)}[MATH]
(R15)⇒[MATH]2,5, vp/([watching]-ving-3) [MATH] be(ID:117) ving(ID:121) np(ID:130)・,
{arc(prg-2,[is]-be-2,[watching]-ving-3),arc(obj-7,[birds]-n-4,[watching]-ving-3)}[MATH] \myhalfskipこれら同値アークは全て1つのアークにマージされ，結果として得られる縮退依存森では同値アークは存在していない．
この例では，統語森が8つの構文木を持つのに対して解釈(汎化依存木)の数は10となっており，1つの構文木が複数の依存木に対応する例となっている．
以下，構文木と依存木の対応関係について述べる．
##同じ依存片の組[[(9),30],[(8),31],[(5),6,7,27,29],[(21),23],[(22),25]] > CurrentSameArcIDList: [[9],[8],[5],[21],[22]] XM, 1,35,33, 2, 4, 3, 9, 8, 5,21,24,26,22,20,41,38
同値アークで違う規則からの期待(R9) np/V→ving/V,np/NP : [arc(obj,NP,V)] (R10) np/V→ving/V,np/NP,pp/PP : [arc(obj,NP,V),arc(vpp,PP,V)] --> objアークdgarc(obj-5,[birds]-n-4,[watching]-ving-3)×dgarc(obj-6,[birds]-n-4,[watching]-ving-3)×dgarc(obj-7,[birds]-n-4,[watching]-ving-3)×dgarc(obj-27,[birds]-n-4,[watching]-ving-3)×dgarc(obj-29,[birds]-n-4,[watching]-ving-3)
138:[3,5] np/([watching]-ving-3)--> [ving(121) np(130)]* : [[arc(obj-5,[birds]-n-4,[watching]-ving-3)]] 139:<3,5> np/([watching]-ving-3)--> [ving(121) np(130)]* pp/C/true: [[arc(obj-6,[birds]-n-4,[watching]-ving-3),arc(vpp-_89026,C,[watching]-ving-3)]] 140:[2,5] vp/([watching]-ving-3)--> [be(117) ving(121) np(130)]* : [[arc(prg-2,[is]-be-2,[watching]-ving-3),arc(obj-7,[birds]-n-4,[watching]-ving-3)]]
187:[3,7] np/([watching]-ving-3)--> [121 177]* : [[arc(obj-27,[birds]-n-4,[watching]-ving-3)]] 188:<3,7> np/([watching]-ving-3)--> [121 177]* pp/C/true: [[arc(obj-28,[birds]-n-4,[watching]-ving-3),arc(vpp-_106115,C,[watching]-ving-3)]]
-- 117:[2,3] be/([is]-be-2)--> [lex([is]-be)]* : [[]] 121:[3,4] ving/([watching]-ving-3)--> [lex([watching]-ving)]* : [[]] 130:[4,5] np/([birds]-n-4)--> [n(128:birds)]* : [[]] 177:[4,7] np/([birds]-n-4)--> [np(130) pp(176)]* : [[arc(npp-21,[with]-pre-5,[birds]-n-4)]]
====== Number of various trees ======== [Parse Forest] (a) Parse Forest Size : 23 (b) Number of collection of parse trees : 10 (c) Number of set of parse trees : 8 [Dependency Forest] (I-1) Initial DF size : 24 (I-2) Initial DF ID-tree collection number : 10 (I-3) Initial DF ID-tree set number : 10 (I-4) Initial DF Generalized-tree number : 10 (R-1) Reduced DF size : 16 (R-2) Reduced DF ID-tree collection number : 10 (R-3) Reduced DF ID-tree set number : 10 (R-4) Reduced DF Generalized-tree number : 10
========================== dgarc(det-1,[my]-det-0,[hobby]-n-1) dgarc(sub-35,[hobby]-n-1,[is]-be-2) dgarc(sub-33,[hobby]-n-1,[watching]-ving-3) dgarc(prg-2,[is]-be-2,[watching]-ving-3) dgarc(adjo-4,[watching]-ving-3,[birds]-n-4) dgarc(adjs-3,[watching]-ving-3,[birds]-n-4) dgarc(dsc-9,[watching]-ving-3,[is]-be-2) dgarc(dsc-8,[birds]-n-4,[is]-be-2) dgarc(obj-5,[birds]-n-4,[watching]-ving-3) dgarc(npp-21,[with]-pre-5,[birds]-n-4) dgarc(npp-24,[with]-pre-5,[watching]-ving-3) dgarc(vpp-26,[with]-pre-5,[is]-be-2) dgarc(vpp-22,[with]-pre-5,[watching]-ving-3) dgarc(pre-20,[telescope]-n-6,[with]-pre-5) dgarc(root-41,[is]-be-2,[root]-x-root) dgarc(root-38,[watching]-ving-3,[root]-x-root)
====== Number of various trees ======== [Parse Forest] (a) Parse Forest Size : 23 (b) Number of collection of parse trees : 10 (c) Number of set of parse trees : 8 [Dependency Forest] (I-1) Initial DF size : 24 (I-2) Initial DF ID-tree collection number : 10 (I-3) Initial DF ID-tree set number : 10 (I-4) Initial DF Generalized-tree number : 10 (R-1) Reduced DF size : 16 (R-2) Reduced DF ID-tree collection number : 10 (R-3) Reduced DF ID-tree set number : 10 (R-4) Reduced DF Generalized-tree number : 10
統語森中の構文木と依存森中の依存木の対応関係は保証されているが，1つの構文木が複数の依存木に対応したり，複数の構文木が１つの依存木に対応したりする．
以下では実験文法を用いて具体例を示しながら，同一意味解釈に対する構文構造と依存構造の表現力についても考察を加える．
1つの構文木が複数の依存木に対応するのは，１つの構文構造に対する解釈が複数存在するような場合であり，例えば，``watching bird''という文に対して動詞の現在分詞形が名詞を修飾しているという１つの構文構造をアサインした時，依存構造としてwatching [MATH] birdとwatching [MATH] birdの２つを対応させるような場合である．
すなわち，同一の書き換え規則部を持つが異なった構造構築部を持つような規則が存在する場合である．
図[REF_fig:GrammarForExamples]の文法では，(R7),(R8)がこれに対応する．
(R7),(R8)は依存森の検証のため導入した恣意的な規則である．
同一の書き換え規則に対して複数の部分依存構造を与えるのは，構文構造としては同一であるが依存関係としては異なっているような場合である．
想定されるケースとしては，機能的関係の多義と意味的関係の多義が存在する．
機能的多義は，文法機能関係(subject,objectなど)への曖昧性である．
機能的関係は構文構造と密接な関係にあること，また，機能的関係の違いがある場合には構文構造自体にそれを反映するなどにより異なった構文構造とするなどの文法上の対応も可能であることから，全く同一の書き換え規則に複数の機能的多義構造をアサインすることは必ずしも一般的であるとは考えにくい．
これに対して，意味的関係の多義はきわめて一般的な現象であると言える．
意味的な関係を構文規則に融合することは，組合せ爆発の問題やメンテナンス性の低下を招く恐れがある．
このため，構文解析と意味解析に独立性を持たせたアプローチが広く提唱・利用されている．
PDGでも意味的な曖昧性は語彙概念，概念間意味関係を表現する意味依存グラフとして扱うことを想定している．
但し，統語森と依存森のマッピングの枠組み自体は，機能的・意味的多義という言語的分類の議論とは独立であり，文法設計に応じて適宜利用すればよい．
[REF_sec:AmbiguityInStructuralInterpertation]節の例(図[REF_fig:DFForMyHobbyIs])は，(R7),(R8)により2つの依存構造を生成する構文木を含んでいる．
このため，統語森数の構文木の数(8)は，依存森の汎化依存木数(10)より少なくなっている．
図[REF_fig:MapFromOnePTToTwoDTs]に実際の構文木と依存木を示す．
# Parse Tree [1] s[0,7,is/be]:207 +--np[0,2,hobby/n]:108 | +--det[0,1,my/det]:101 | +--n[1,2,hobby/n]:104 +--vp[2,7,is/be]:182 +--be[2,3,is/be]:117 +--np[3,7,birds/n]:179 +--np[3,5,birds/n]:132 | +----ving[3,4,watching/ving]:121 | +----n[4,5,birds/n]:128 +--pp[5,7,with/pre]:176 +----pre[5,6,with/pre]:165 +----np[6,7,telescope/n]:170 +----n[6,7,telescope/n]:168
#### Dependency Structure [1] [is/be,2] + <-(dsc-31)- [birds/n,4] | + <-(adjs-3)- [watching/ving,3] | + <-(npp-23)- [with/pre,5] | + <-(pre-20)- [telescope/n,6] + <-(sub-35)- [hobby/n,1] + <-(det-1)- [my/det,0]
#### Dependency Structure [2] [is/be,2] + <-(dsc-31)- [birds/n,4] | + <-(adjo-4)- [watching/ving,3] | + <-(npp-23)- [with/pre,5] | + <-(pre-20)- [telescope/n,6] + <-(sub-35)- [hobby/n,1] + <-(det-1)- [my/det,0]
複数の構文構造が１つの依存構造に対応するような現象の例としては，例えば見せかけの曖昧性が挙げられる[CITE]．
構文構造とそれの表す意味との関係において，構文構造の違いが意味的な違いに対応する真の曖昧性と，構文構造は異なるが意味に違いがない構造，または，文法が不十分なために言語学的に誤った構造などの見せかけの曖昧性が存在し，特にコーパスからの文法学習での対応が重要となっている[CITE]．
また，文脈自由文法ではないが，CCG(Conbinatory Categorial Grammar)においては，多数のspurious ambiguityが存在するという類似の問題があり，標準形の木のみをただ１つ解析結果として出力する手法が提案されている[CITE]．
この手法では，解析木の末端のカテゴリ(CCGのカテゴリ)が同一である木は同じ意味構造を有するという定義の基で，同じ意味を表す木（同じ意味クラスの木）はただ1つだけ取り出すことができる．
PDGの枠組みでは，文の解釈は(汎化)依存木で表現するため，同一の(汎化)依存木を持つ構文木を同じクラスの木とするという関係になっていると見ることができる．
図[REF_fig:DFContainingNtoOneMapping]は，``She curiously saw a cat in the forest''を例文文法で解析して得られる依存森であり，見せかけの曖昧性を含んでいる．
共起制約が掛かっているのは依存先曖昧性に対応する[MATH],[MATH]に対する単一役割制約のみであり，``in the forest''の依存先が異なる2つの依存木(解釈)が存在している．
統語森は3つの構文木，初期依存森は3つのID付き依存木(2つの汎化依存木)，縮退依存森は2つのID付き依存木(2つの汎化依存木)を含んでいる．
見せかけの曖昧性は，動詞句に対する２つの修飾句に関する規則(R17),(R18)の適用順序の違いにより生じている．
図[REF_fig:SuriousNtoOneMapping]に構文木と依存木を示す．
====== Number of various trees ======== [Parse Forest] (a) Parse Forest Size : 19 (b) Number of collection of parse trees : 3 (c) Number of set of parse trees : 3 [Dependency Forest] (I-1) Initial DF size : 12 (I-2) Initial DF ID-tree collection number : 3 (I-3) Initial DF ID-tree set number : 3 (I-4) Initial DF Generalized-tree number : 2 (R-1) Reduced DF size : 9 (R-2) Reduced DF ID-tree collection number : 2 (R-3) Reduced DF ID-tree set number : 2 (R-4) Reduced DF Generalized-tree number : 2
言語解釈の意味的な違いについては，微妙な意味の違い[CITE]や限量詞や数の解釈に関わる曖昧性なども考慮する必要があり，依存構造の同一性で意味の同一性を判定することはあくまで１つの側面に関する同一性の判定に過ぎない．
[CITE]は，依存構造での自然な構造表現が困難なケースを挙げ，それらには句構造では自然に表現できるもの，句構造でも自然に表現できないもの(句構造，依存構造の両方とも能力不足)があることを示している．
PDGは，句構造と依存構造を扱うため，少なくとも前者については枠組みとしての検証が必要と考える．
前者は，依存構造において句のヘッドワードに修飾語が存在する場合にそれがヘッドワードのみを修飾するのか，それともヘッドワード以下の全体を修飾するのかというスコープの曖昧性を表現できないという，標準的な依存構造一般に存在する問題（ここでは修飾スコープ問題と呼ぶ）である．
図[REF_fig:DFContainingNtoOneMappingRealAmbiguity]に``Earth and Jupiter in Solar System''に対する依存森を示す．
この文には，前置詞句が並列句のヘッド``Jupitor''のみを修飾する解釈と``Earth and Jupitor''全体を修飾する解釈の2つが存在する．
統語森には2つの解釈に対応する2つの構文木が存在し，初期依存森には2つのID付き依存木(1つの汎化依存木)が存在し，縮退依存森には1つのID付き依存木(1つの汎化依存木)が存在する．
2つの構文木と1つの依存木の対応を図[REF_fig:RealNtoOneMapping]に示す．
修飾スコープ問題への対応方法として[CITE]は，Groupingという概念を導入している．
Groupingは論理的にフレーズと同じでカバーする単語の範囲を示すものである．
ただし，Groupingは，全てに記述されるものではなく，対象は曖昧性が生じる並列構造(conjoined structure)，``not'',``only''と言ったオペレータ語(operator word)などに限定されている．
依存構造をベースにした大規模文法を有する機械翻訳システム[CITE]では，Groupingに相当する仕組みを導入している．
工学的観点から言うと，一般にどの程度詳細に深いレベルの解釈構造を作るかという設定は，目的とするアプリケーションにより異なる．
機械翻訳アプリケーションにおいては，修飾スコープ問題については並列構造に対する対応だけで実システムが構築されており，前記Grouping対象の限定は経験的に妥当であると考えている．
また，修飾スコープ問題は，言語によって様相が異なってくる．
例えば，ロシア語では形容詞の数，名詞の文法的格が一致(agreement)や支配(government)により統語的に導入され，解釈が決定されるために修飾スコープ問題が起こらないことがある[CITE]．
また，日本語では，係り受け文法(依存構造文法)に被修飾語は修飾語の左に位置するという制約が存在するため，そもそも修飾スコープ問題が発生せず，依存構造(係り受け構造)の表現力の問題として意識されることがほとんどない．
PDGでは同値アークがノードのスコープの違いを表現しているので，依存構造の修飾スコープ問題は，Groupingの概念を同値アークに導入するという拡張により対応できる可能性があり，今後の検討課題である．
====== Number of various trees ======== [Parse Forest] (a) Number of collection of parse trees : 2 (b) Number of set of parse trees : 2 [Dependency Forest] (I-1) Initial DF size : 7 (I-2) Initial DF ID-tree collection number : 2 (I-3) Initial DF ID-tree set number : 2 (I-4) Initial DF Generalized-tree number : 1 (R-1) Reduced DF size : 5 (R-2) Reduced DF ID-tree collection number : 1 (R-3) Reduced DF ID-tree set number : 1 (R-4) Reduced DF Generalized-tree number : 1 ------
依存構造での表現力の問題
D-language単独で表現が困難な構造がある．
節のヘッドワードを修飾している要素Ｘがある構造と，Ｘが句全体を修飾している構造との意味的な対比．
his cheerfulness and his accent astonishing (1a) his cheerfulness and {his accent astonishing} (1b) {his cheerfulness and his accent} astonishing
この例は単純にスコープの問題で句構造では，表現されている．
(平川)
Bob and Dick's novels (2a) novels written by the team ``Bob + Dick'' {Bob and Dick}'s novels (2b) novels written by Bob and novels written by Dick {Bob} and {Dick's novels}→スコープの問題として
この例は表現されていない要素の問題で単純にスコープの問題として扱うことは困難で，句構造なら表現できるというものでもない．
3つの方法(a)ラベルに情報をつける→良くないmodif(ヘッドのみ) v.s. phrase-modif(句全体) (b) (1b)(2b)を省略の問題であるとしてとらえ全体構造で表現(1b') {his cheerfulness astonishing} and {his accent astonishing} (2b') {Bob's novels} and {Dick's novels} (c)ノード属性の属性マーカを付けて弁別(注：次は正確でない．
本と違う)
ロシア語では，語のinflectionで数の情報が表現され，次の２文の構造が弁別される．
New York(MASC.SG,NOM) and Chicago(MASC.SG.NOM) University[masc](PK.NOM) (ニューヨークとシカゴの各１つの大学）New York(PL.NOM) and Chicago (PL.NOM) University[masc](PK.NOM) (ニューヨークとシカゴの各いくつかの大学）
-----・句構造でも自然に表現できないもの(両方とも能力不足)とできるものがある・表現できるものスコープの曖昧性・MelukではGroupingという概念を導入している(Groupingは論理的にフレーズと等しい)（=スコープノードと同じ) Groupingは，全てに入れているのではなく，限定されている- conjoined structure (曖昧性の出る場合) - ``operator'' word (not, onlyなど)
・アプリケーションにも依存する(弁別の必要がないアプリケーションもある)大規模な英語文法では，conjoined structureのみにスコープノードで対応するだけで実用上ほぼ問題なく実現できている．
・このヘッドワード修飾か全体修飾かというスコープの問題は対象言語によって異なる．
ロシア語では形容詞の数，名詞の文法的格がsyntacticallyに導入されている(by agreement and government)日本語では発生しない(係り受け文法の制約の存在）
今後の課題．
非交差制約(Projectivity constraint)は，多くの依存構造解析システムにより受け入れられている制約であり，これらシステムはProjective parserと呼ばれる．
Projective parserはnon-projectiveな構造を持つ文の解析に失敗する．
種々の言語の大半の文はprojectiveであるが，いくつかのタイプのnon-projectiveな文が多くの言語に存在する[CITE]．
英語では，``She saw the cat curiously which was Percian''，日本語では「私は本を東京に買いに昨日行きました」などがnon-projectiveな構造を持つ文である．
英語に比べて自由度の高い語順を持つチェコ語の解析において，Non-projective parserがprojective parserに対して総合的な精度で上回るという報告もある[CITE]．
しかしながら，単純にNon-projectiveな解釈を許すだけでは，全体として性能の劣化に繋がる恐れもあり多くのシステムでは対象をprojectiveな依存木に限定していると思われる．
PDGでは，[REF_sec:bunpoukisoku]節で述べたように，構成素列(規則ボディ)とアーク集合(部分依存構造)のマッピングが拡張CFG規則で定義される．
この記述の枠組みにより，All or nothingではなく，規則により定義されたnon-projectiveな構造のみをWell-formedな構造として共起マトリックスの共起制約として表現することが可能である．
これをコントロールされたnon-projectivityと呼ぶこととする．
図[REF_fig:GrammarForExamples]の(R19)はNon-projectiveな構文に対する文法規則であり，関係節の前に副詞が挿入された構文に対応している．
図[REF_fig:Non-projectiveDT]に``She saw the cat curiously which was Percian''に対して例文文法が生成する依存森を示す．
依存森には，non-projectiveな整依存木が１つ存在している．
