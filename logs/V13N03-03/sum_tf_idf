================================================================
[section type  : abstract]
[section title : abstract]
================================================================
[i:0, score:0.65960] 選好依存文法(PDG: Preference Dependency Grammar)は，自然言語の形態素，構文，意味解析を統合的に行う枠組みであり，各レベルの種々の曖昧性を統合的に効率良く保持し，各レベルの知識により優先度を設定し，全体解釈として最適な解を計算する．
[i:1, score:0.86885] 本稿では，PDGの基本モデルである多レベル圧縮共有データ結合モデルとPDGの概要について述べるとともに，選好依存文法で用いられるヘッド付き統語森，依存森といった言語解釈を統合保持するデータ構造とその構築手法について説明する．
[i:2, score:0.67099] また，文の句構造を圧縮共有する統語森と依存構造を圧縮共有する依存森との対応関係において完全性と健全性が成立することを示す．

================================================================
[section type  : intro]
[section title : はじめに]
================================================================
[i:20, score:0.41623] このように，文法フレームワークの研究は，生成・制約知識を対象とした研究から統計ベースの選好知識の扱いへと進展し，統計的手法は語系列，句構造，依存構造へと適用範囲を拡大し融合され，生成・制約・選好知識全体の統合のベースが整ってきている．
[i:27, score:0.51631] PDGは，複数の解釈記述空間に基づくアプローチを取っており，後に述べるように複数の解釈記述空間で対応付けられた圧縮共有データ構造をベースに多レベルの知識の融合を行っている．
[i:28, score:0.91378] 本稿では，PDGのモデル・概要について述べた後，PDGで採用している句構造と依存構造という２種類の中心的共有データ構造であるヘッド付き統語森(HPF:Headed Parse Forest)，依存森(DF:Dependency Forest)について構築法を示し，それらに完全性と健全性が成立することを示す．

================================================================
[section type  : proposed_method]
[section title : 選好依存文法(PDG)の概要と圧縮共有データ構造]
================================================================
[i:30, score:0.00000] 
-----------------------------------------------------
  [subsection title : 多レベル圧縮共有データ結合モデル]
-----------------------------------------------------
  [i:lead, score:0.35616] PDGは，自然言語の曖昧性・多義性の問題に焦点をあてて設計された形態素・構文・意味レベルの文解析を行うフレームワークである．
.....
  [i:31, score:0.35616] PDGは，自然言語の曖昧性・多義性の問題に焦点をあてて設計された形態素・構文・意味レベルの文解析を行うフレームワークである．
  [i:46, score:0.36789] 句構造，依存構造等の複数のデータ構造(言語知識の記述ベース)を利用して，形態素，構文，意味の多レベルの知識をモジュール独立性良く扱う．
  [i:49, score:0.57915] 文解釈となる依存木を圧縮共有した選好スコア付き圧縮共有データ構造から制約と選好を組み合わせた最適解探索手法により最適解を探索する．
-----------------------------------------------------
  [subsection title : 選好依存文法(PDG)のモデル]
-----------------------------------------------------
  [i:lead, score:0.25522] PDGの全体モデルを図[REF_fig:PDGAnalysisModel]に示す．
.....
  [i:57, score:0.83762] 語品詞トレリス，ヘッド付き統語森，機能依存森，意味依存森の４つの圧縮共有データ構造により，それぞれ，語品詞系列，構文木(句構造)，機能依存木，意味依存木の解釈の集合を保持する．
  [i:72, score:0.82963] PDGでは依存構造に対して全可能性を有する依存森を生成するが，これは下位レベルの統語森中の解釈のみから派生する依存木であり，句構造レベルの知識の活用による効率化が行える．
  [i:75, score:0.75405] 以下では，PDGの共有データ構造であるヘッド付き統語森，依存森について説明してゆく．
-----------------------------------------------------
  [subsection title : 圧縮共有データ構造の要件]
-----------------------------------------------------
  [i:lead, score:0.24746] 多レベル圧縮共有データ結合モデルにおける圧縮共有データ構造には次の性質が必要である．
.....
  [i:76, score:0.24746] 多レベル圧縮共有データ結合モデルにおける圧縮共有データ構造には次の性質が必要である．
  [i:83, score:0.34671] (b)は，多レベルの知識を扱う場合に，各レベルの曖昧性を全て過不足なく表現できること，すなわち共有構造そのものに由来する解釈の枝刈り(あるべき解釈の欠落)や解釈の過生成(あるべきでない解釈の生成)が起こらないという性質である．
  [i:85, score:0.25526] (c)は，それぞれのレベルでの知識の記述が行いやすいこと,選好知識と制約知識が適切に扱えることであり[CITE]，(d)は各レベルの解釈の対応関係を取ることができるという性質である．
-----------------------------------------------------
  [subsection title : 句構造と依存構造の併用]
-----------------------------------------------------
  [i:lead, score:0.03946] 文解析を精度良く行なうためには様々な知識を利用する必要がある．
.....
  [i:89, score:0.82621] それぞれの表現レベルでの制約知識・選好知識の記述を自然な形で可能とするため，PDGでは，句構造形式の共有データ構造(ヘッド付き統語森)と依存構造形式の共有データ構造(依存森)をそれぞれ関連付けて組み込んでいる．
  [i:90, score:0.29012] これは句構造(C-構造)と機能構造(F-構造)という２つの構文レベルの表現を持つLFG[CITE]において，SUBJECT,OBJECTなど構文的機能に関する制約がF-構造で記述され，文法の記述性を高めているのと類似している．
  [i:91, score:0.33395] なお，Early法，Chart法といった文脈自由文法の解析アルゴリズムを用いて依存文法を直接解析して依存構造を求める手法も提案されている[CITE]が，句構造を作らない点で本手法とは異なっている．
-----------------------------------------------------
  [subsection title : 圧縮共有データ構造の従来技術と問題点]
-----------------------------------------------------
  [i:lead, score:0.38715] 語品詞トレリスは，全ての語品詞系列を圧縮共有するデータ構造であり，PDGでもそのまま利用する．
.....
  [i:94, score:0.81875] 文脈自由文法で入力文を解析し文の可能な解釈全体を得る手法は広く知られており，例えば，富田により，グラフスタックを用いた構文解析手法と共に文の句構造解釈(構文木)全体を効率的に保持する圧縮共有統語森(Packed Shared Parse Forest)が提案されている[CITE]．
  [i:102, score:0.76309] 構文グラフは，語品詞に対応するノードとノード間の依存関係を表現する名前付きアークで構成される有向グラフであり，排他マトリックス(EM:Exclusion Matrix)と呼ばれるデータと組になって，入力文に含まれる依存構造の集合（文の解釈の集合）を表現する．
  [i:109, score:0.72851] 排他マトリックスの[MATH]行[MATH]列が1である場合には，[MATH]番目と[MATH]番目のアークは，いかなる解釈(依存木)においても共起しない．

================================================================
[section type  : proposed_method]
[section title : PDGにおける共有データ構造]
================================================================
[i:120, score:0.78572] PDGでは，前節で述べた従来手法の問題を解決するデータ保持方式として，文脈自由文法の構文構造の保存方式としてヘッド付き統語森を採用し，依存構造の保存方式として依存森を提案する．
-----------------------------------------------------
  [subsection title : ヘッド付き統語森]
-----------------------------------------------------
  [i:lead, score:0.85396] ヘッド付き統語森は統語森の一種であり，適用された書き換え規則に対応する弧(edge)から構成され，次の条件を満足する構文木を圧縮共有する．
.....
  [i:121, score:0.85396] ヘッド付き統語森は統語森の一種であり，適用された書き換え規則に対応する弧(edge)から構成され，次の条件を満足する構文木を圧縮共有する．
  [i:125, score:0.55023] (a),(b)の２つがヘッド無し統語森の共有条件である[CITE]．
  [i:127, score:0.80524] PDGにおける弧とヘッド付き統語森の具体例は構築アルゴリズムと共に[REF_sec:construction]章で述べる．
-----------------------------------------------------
  [subsection title : 依存森]
-----------------------------------------------------
  [i:lead, score:0.78698] 依存森は，依存グラフ(DG:Dependency Graph)と共起マトリックス(CM:Co-occurrence Matrix）より成る．
.....
  [i:140, score:0.83232] 共起マトリックスCM([MATH],[MATH])が○の場合に限り，アーク[MATH]と[MATH]は１つの依存木（解釈）において共起可能であるという制約を表現する．
  [i:153, score:0.83445] 複数の解釈に対するアークの共有の度合いによって，同じ依存木の集合を表すサイズの異なった複数の依存森を構成可能である．
  [i:154, score:0.81015] 詳細は後述するが，PDGでは，初期依存森(Initial Dependency Forest)と，それから変換して得られる縮退依存森(Reduced Dependency Forest)の2種を扱う．

================================================================
[section type  : proposed_method]
[section title : 統語森と依存森の生成]
================================================================
[i:160, score:0.06054] 本稿では，形態素解析処理については省略し，構文解析以降について述べる．
-----------------------------------------------------
  [subsection title : 文法規則]
-----------------------------------------------------
  [i:lead, score:0.48937] PDGにおいて文法規則は，可能な句構造の定義と，句構造から依存構造へのマッピングとを規定する拡張文脈自由文法(extended CFG)で記述される．
.....
  [i:166, score:0.70067] 構造構築部は，``arc(アーク名,構造変数1,構造変数2)''という形式のアークの集合であり，構造変数には，書き換え規則部の構成要素の句ヘッドとなる語品詞が束縛される．
  [i:167, score:0.70711] 例は，[MATH]をヘッドとし，objアークで[MATH]が，vppアークで[MATH]が接続する依存構造を示している．
  [i:175, score:0.76563] ルート規則は，統語森のルートとなる弧と依存森のトップノードをそれぞれ１つにするために導入している．
-----------------------------------------------------
  [subsection title : 構文解析]
-----------------------------------------------------
  [i:lead, score:0.69391] PDGの構文解析は，本稿では，Bottom-up Chart Parsingのアルゴリズムをベースに，依存構造の生成が可能となるよう，弧の構成やアルゴリズムを拡張することにより実現している．
.....
  [i:184, score:0.94137] 通常の弧：[MATH]0,1, s [MATH] np・vp pp[MATH] PDGの弧：[MATH]0,1, s/PH [MATH] np/NP・vp/PH pp/PP : DS[MATH] [REF_sec:bunpoukisoku]節で述べたように，PHが句ヘッド(ノード)，DSが部分依存構造(アーク集合)を示す．
  [i:190, score:0.83528] 単一弧：[MATH]0,5, s/PH [MATH] np/NP vp/PH pp/PP・: DS1[MATH] [MATH]0,5, s/PH [MATH] np/NP vp/PH・: DS2[MATH]圧縮弧：[MATH]0,5, s/PH [MATH] [[np/NP vp/PH pp/PP], [np/NP vp/PH]]・: [DS1,DS2][MATH]この例で，PHは句ヘッド，[np/NP vp/PH pp/PP], [np/NP vp/PH]は構成素列，DS1,DS2は部分依存構造を示している．
  [i:201, score:0.81067] 弧*E3は，``an arrow''をnpとして解釈し，部分依存構造として{arc(det-14,[an]-det-3,[arrow]-n-4)}を持つ不活性弧(RCSが[])である．
-----------------------------------------------------
  [subsection title : 統語森・初期依存森の生成]
-----------------------------------------------------
  [i:lead, score:0.42363] 構文解析後のChartは，活性弧，不活性弧より成る．
.....
  [i:233, score:0.80677] それぞれの関数の実行後は,その引数に対する統語森HPF，依存グラフDG，共起マトリックスCMの要素や値が追加設定されている．
  [i:234, score:0.78025] try_edge(E),try_FCSL(FCSL),try_CS(CS)が返すアーク集合中のアークをそれぞれ弧E,構成素列リストFCSL,構成素列CSが支配するアークと呼ぶ．
  [i:259, score:0.83250] また，try_CS([103,119,165])の処理において，CM処理(3)により(CM3)すなわち弧#103,#119,#165が支配するアーク間の共起関係のCMへのセットが行われる．
-----------------------------------------------------
  [subsection title : 縮退依存森の生成]
-----------------------------------------------------
  [i:lead, score:0.88308] 初期依存森には，図[REF_fig:IDF]におけるobj4とobj25のようにアークID以外は同一のアークが存在することがあり，これを同値アークと呼ぶ．
.....
  [i:286, score:0.96116] \mygapskip\mynoindent[同値アークのマージ条件]「同値アークX,Yのマージ前後の依存森をそれぞれDF,DF'とした時，縮退条件は，``DF中の汎化整依存木集合[MATH]DF'中の汎化整依存木集合''である．
  [i:314, score:0.95344] [ID付き依存木の増加条件]  DG,CMにおいて同値アークX,Yに対するアークペア(A,B)[MATH]diff(X,Y)とした時，YをXにマージして得られるDG',CM'において,{X,A,B}を含むID付き整依存木NDTが存在する時，またこの時に限り，ID付き依存木は増加する．
  [i:336, score:0.96658] \mygapskip「同値アークX,Yのマージ前後の依存森DF,DF'に対して，新規に増加するDF'中のID付き依存木DT[MATH]に対して，?DT[MATH]=?DTなるID付き整依存木DTがDFに存在する」\mygapskip
-----------------------------------------------------
  [subsection title : 統語森と依存森の対応関係]
-----------------------------------------------------
  [i:lead, score:0.54008] 依存森は，統語森との間で完全性と健全性が成立する．
.....
  [i:388, score:0.54008] 依存森は，統語森との間で完全性と健全性が成立する．
  [i:390, score:0.75185] 縮退依存森は初期依存森と同じ(汎化)依存木の集合を保持しているため，統語森と(縮退)依存森に完全性と健全性が成立すると言える．
  [i:391, score:0.52964] 統語森中の構文木（句構造）と依存森中の依存木（依存構造）の対応関係は単純な1対1対応ではなく，1つの構文木が複数の依存木に対応したり，複数の構文木が１つの依存木に対応したりする．

================================================================
[section type  : experiment_result]
[section title : 例文解析評価実験]
================================================================
[i:394, score:0.86922] PDGは依存森により整依存木集合を圧縮共有して表現することにより，各種の曖昧性により生じる組合せ爆発を抑制することを狙いの１つとしており，本稿では，PDGの構文解析から圧縮依存構造の構築までの方式を中心に述べている．
[i:395, score:0.82149] 本章では，自然言語の各種の曖昧性を記述したPDG文法を用いて，典型的な曖昧性例文の構文解析・依存森生成実験を行い，各種の曖昧性がどの様に処理されるかについて述べると共に，統語森と依存森との対応関係やNon-projectiveな依存木の生成についても実例も用いながら述べる．
[i:396, score:0.74296] なお，アルゴリズムの効率も実用上重要なファクタであるが，本稿で示した構文解析アルゴリズム，統語森・依存森構成アルゴリズム，依存森縮退アルゴリズムは，PDGの解析方式の検証を行うことを主眼に実装をしており，実システムとしての実装では種々の改善が考えられる．
-----------------------------------------------------
  [subsection title : 例文解析用文法]
-----------------------------------------------------
  [i:lead, score:0.22919] 図[REF_fig:GrammarForExamples]は，例文解析に使用した文法規則であり，代表的な各種曖昧性構文を含んでいる．
.....
  [i:400, score:0.52281] 文法中の品詞det,n,be,ving,v,adv,pre,relcは，それぞれ，冠詞，名詞，BE動詞，動詞の現在分詞，動詞，副詞，前置詞，関係節を表している．
  [i:411, score:0.43777] R8とR9は動詞と名詞の修飾関係としては類似しているが，どちらが主辞(句ヘッド)であるかという依存構造の観点からは異なった構造である．
  [i:413, score:0.47066] また，(R19)は，non-projectiveな依存木，すなわち，交差する依存関係を含む依存木を生成する規則である．
-----------------------------------------------------
  [subsection title : 典型的曖昧性例文の解析]
-----------------------------------------------------
  [i:lead, score:0.08061] 多品詞に起因する曖昧性の解析例については，既に例題として述べている．
.....
  [i:432, score:0.99754] 同値アーク[[(5),15,28],[(13),32],[(14),33],[(11),27]]最終アーク30, 4, 5,13,14,10,11,25,23,26,20,21,35 (obj-5)：スコープが異なる：ノードの範囲とは無関係にマージ可能としている（できる場合とできない場合の弁別を入れることが考えられる）** new arcid: arc_share(obj-15,[girl]-n-3,[saw]-v-1) 173:[1,7] vp/([saw]-v-1)--> [109 163]* : [[arc(obj-15,[girl]-n-3,[saw]-v-1)]] ** new arcid: arc_share(obj-5,[girl]-n-3,[saw]-v-1) 135:[1,4] vp/([saw]-v-1)--> [109 126]* : [[arc(obj-5,[girl]-n-3,[saw]-v-1)]] ** new arcid: arc_share(obj-28,[girl]-n-3,[saw]-v-1) 222:[1,10] vp/([saw]-v-1)--> [109 203]* : [[arc(obj-28,[girl]-n-3,[saw]-v-1)]] 163:[2,7] np/([girl]-n-3)--> [126 161]* : [[arc(npp-13,[with]-pre-4,[girl]-n-3)]] 126:[2,4] np/([girl]-n-3)--> [119 122]* : [[arc(det-4,[a]-det-2,[girl]-n-3)]] 203:[2,10] np/([girl]-n-3)--> [163 199]* : [[arc(npp-25,[in]-pre-7,[girl]-n-3)]] -- npp-13の同値アーク：163:[2,7] np/([girl]-n-3)--> [126 161]* : [[arc(npp-13,[with]-pre-4,[girl]-n-3)]] 228:[2,10] np/([girl]-n-3)--> [126 213]* : [[arc(npp-32,[with]-pre-4,[girl]-n-3)]] ====== Number of various trees ======== [Parse Forest] (a) Parse Forest Size : 25 (b) Number of collection of parse trees : 5 (c) Number of set of parse trees : 5 [Dependency Forest] (I-1) Initial DF size : 18 (I-2) Initial DF ID-tree collection number : 5 (I-3) Initial DF ID-tree set number : 5 (I-4) Initial DF Generalized-tree number : 5 (R-1) Reduced DF size : 13 (R-2) Reduced DF ID-tree collection number : 5 (R-3) Reduced DF ID-tree set number : 5 (R-4) Reduced DF Generalized-tree number : 5
  [i:449, score:0.99316] \myhalfskip(R9)⇒[MATH]3, 5, np/([watching]-ving-3) [MATH] ving(ID:121) np(ID:130)・, {arc(obj-5,[birds]-n-4,[watching]-ving-3)}[MATH] (R10)⇒[MATH]3, 7, np/([watching]-ving-3) [MATH] ving(ID:121) np(ID:130) pp(ID:176)・, {arc(obj-6,[birds]-n-4,[watching]-ving-3),arc(vpp-22,[with]-pre-5,[watching]-ving-3)}[MATH] (R15)⇒[MATH]2,5, vp/([watching]-ving-3) [MATH] be(ID:117) ving(ID:121) np(ID:130)・, {arc(prg-2,[is]-be-2,[watching]-ving-3),arc(obj-7,[birds]-n-4,[watching]-ving-3)}[MATH] \myhalfskipこれら同値アークは全て1つのアークにマージされ，結果として得られる縮退依存森では同値アークは存在していない．
  [i:452, score:0.99951] ##同じ依存片の組[[(9),30],[(8),31],[(5),6,7,27,29],[(21),23],[(22),25]] > CurrentSameArcIDList: [[9],[8],[5],[21],[22]] XM, 1,35,33, 2, 4, 3, 9, 8, 5,21,24,26,22,20,41,38同値アークで違う規則からの期待(R9) np/V→ving/V,np/NP : [arc(obj,NP,V)] (R10) np/V→ving/V,np/NP,pp/PP : [arc(obj,NP,V),arc(vpp,PP,V)] --> objアークdgarc(obj-5,[birds]-n-4,[watching]-ving-3)×dgarc(obj-6,[birds]-n-4,[watching]-ving-3)×dgarc(obj-7,[birds]-n-4,[watching]-ving-3)×dgarc(obj-27,[birds]-n-4,[watching]-ving-3)×dgarc(obj-29,[birds]-n-4,[watching]-ving-3) 138:[3,5] np/([watching]-ving-3)--> [ving(121) np(130)]* : [[arc(obj-5,[birds]-n-4,[watching]-ving-3)]] 139:<3,5> np/([watching]-ving-3)--> [ving(121) np(130)]* pp/C/true: [[arc(obj-6,[birds]-n-4,[watching]-ving-3),arc(vpp-_89026,C,[watching]-ving-3)]] 140:[2,5] vp/([watching]-ving-3)--> [be(117) ving(121) np(130)]* : [[arc(prg-2,[is]-be-2,[watching]-ving-3),arc(obj-7,[birds]-n-4,[watching]-ving-3)]] 187:[3,7] np/([watching]-ving-3)--> [121 177]* : [[arc(obj-27,[birds]-n-4,[watching]-ving-3)]] 188:<3,7> np/([watching]-ving-3)--> [121 177]* pp/C/true: [[arc(obj-28,[birds]-n-4,[watching]-ving-3),arc(vpp-_106115,C,[watching]-ving-3)]] -- 117:[2,3] be/([is]-be-2)--> [lex([is]-be)]* : [[]] 121:[3,4] ving/([watching]-ving-3)--> [lex([watching]-ving)]* : [[]] 130:[4,5] np/([birds]-n-4)--> [n(128:birds)]* : [[]] 177:[4,7] np/([birds]-n-4)--> [np(130) pp(176)]* : [[arc(npp-21,[with]-pre-5,[birds]-n-4)]] ====== Number of various trees ======== [Parse Forest] (a) Parse Forest Size : 23 (b) Number of collection of parse trees : 10 (c) Number of set of parse trees : 8 [Dependency Forest] (I-1) Initial DF size : 24 (I-2) Initial DF ID-tree collection number : 10 (I-3) Initial DF ID-tree set number : 10 (I-4) Initial DF Generalized-tree number : 10 (R-1) Reduced DF size : 16 (R-2) Reduced DF ID-tree collection number : 10 (R-3) Reduced DF ID-tree set number : 10 (R-4) Reduced DF Generalized-tree number : 10 ========================== dgarc(det-1,[my]-det-0,[hobby]-n-1) dgarc(sub-35,[hobby]-n-1,[is]-be-2) dgarc(sub-33,[hobby]-n-1,[watching]-ving-3) dgarc(prg-2,[is]-be-2,[watching]-ving-3) dgarc(adjo-4,[watching]-ving-3,[birds]-n-4) dgarc(adjs-3,[watching]-ving-3,[birds]-n-4) dgarc(dsc-9,[watching]-ving-3,[is]-be-2) dgarc(dsc-8,[birds]-n-4,[is]-be-2) dgarc(obj-5,[birds]-n-4,[watching]-ving-3) dgarc(npp-21,[with]-pre-5,[birds]-n-4) dgarc(npp-24,[with]-pre-5,[watching]-ving-3) dgarc(vpp-26,[with]-pre-5,[is]-be-2) dgarc(vpp-22,[with]-pre-5,[watching]-ving-3) dgarc(pre-20,[telescope]-n-6,[with]-pre-5) dgarc(root-41,[is]-be-2,[root]-x-root) dgarc(root-38,[watching]-ving-3,[root]-x-root) ====== Number of various trees ======== [Parse Forest] (a) Parse Forest Size : 23 (b) Number of collection of parse trees : 10 (c) Number of set of parse trees : 8 [Dependency Forest] (I-1) Initial DF size : 24 (I-2) Initial DF ID-tree collection number : 10 (I-3) Initial DF ID-tree set number : 10 (I-4) Initial DF Generalized-tree number : 10 (R-1) Reduced DF size : 16 (R-2) Reduced DF ID-tree collection number : 10 (R-3) Reduced DF ID-tree set number : 10 (R-4) Reduced DF Generalized-tree number : 10
-----------------------------------------------------
  [subsection title : 構文木と依存木の１対多/多対１対応関係]
-----------------------------------------------------
  [i:lead, score:0.47313] 統語森中の構文木と依存森中の依存木の対応関係は保証されているが，1つの構文木が複数の依存木に対応したり，複数の構文木が１つの依存木に対応したりする．
.....
  [i:471, score:0.89140] # Parse Tree [1] s[0,7,is/be]:207 +--np[0,2,hobby/n]:108 | +--det[0,1,my/det]:101 | +--n[1,2,hobby/n]:104 +--vp[2,7,is/be]:182 +--be[2,3,is/be]:117 +--np[3,7,birds/n]:179 +--np[3,5,birds/n]:132 | +----ving[3,4,watching/ving]:121 | +----n[4,5,birds/n]:128 +--pp[5,7,with/pre]:176 +----pre[5,6,with/pre]:165 +----np[6,7,telescope/n]:170 +----n[6,7,telescope/n]:168 #### Dependency Structure [1] [is/be,2] + <-(dsc-31)- [birds/n,4] | + <-(adjs-3)- [watching/ving,3] | + <-(npp-23)- [with/pre,5] | + <-(pre-20)- [telescope/n,6] + <-(sub-35)- [hobby/n,1] + <-(det-1)- [my/det,0] #### Dependency Structure [2] [is/be,2] + <-(dsc-31)- [birds/n,4] | + <-(adjo-4)- [watching/ving,3] | + <-(npp-23)- [with/pre,5] | + <-(pre-20)- [telescope/n,6] + <-(sub-35)- [hobby/n,1] + <-(det-1)- [my/det,0]
  [i:482, score:0.88876] ====== Number of various trees ======== [Parse Forest] (a) Parse Forest Size : 19 (b) Number of collection of parse trees : 3 (c) Number of set of parse trees : 3 [Dependency Forest] (I-1) Initial DF size : 12 (I-2) Initial DF ID-tree collection number : 3 (I-3) Initial DF ID-tree set number : 3 (I-4) Initial DF Generalized-tree number : 2 (R-1) Reduced DF size : 9 (R-2) Reduced DF ID-tree collection number : 2 (R-3) Reduced DF ID-tree set number : 2 (R-4) Reduced DF Generalized-tree number : 2
  [i:501, score:0.88083] ====== Number of various trees ======== [Parse Forest] (a) Number of collection of parse trees : 2 (b) Number of set of parse trees : 2 [Dependency Forest] (I-1) Initial DF size : 7 (I-2) Initial DF ID-tree collection number : 2 (I-3) Initial DF ID-tree set number : 2 (I-4) Initial DF Generalized-tree number : 1 (R-1) Reduced DF size : 5 (R-2) Reduced DF ID-tree collection number : 1 (R-3) Reduced DF ID-tree set number : 1 (R-4) Reduced DF Generalized-tree number : 1 ------
-----------------------------------------------------
  [subsection title : Non-projective依存木の生成]
-----------------------------------------------------
  [i:lead, score:0.24281] 非交差制約(Projectivity constraint)は，多くの依存構造解析システムにより受け入れられている制約であり，これらシステムはProjective parserと呼ばれる．
.....
  [i:517, score:0.74901] PDGでは，[REF_sec:bunpoukisoku]節で述べたように，構成素列(規則ボディ)とアーク集合(部分依存構造)のマッピングが拡張CFG規則で定義される．
  [i:521, score:0.64374] 図[REF_fig:Non-projectiveDT]に``She saw the cat curiously which was Percian''に対して例文文法が生成する依存森を示す．
  [i:522, score:0.71394] 依存森には，non-projectiveな整依存木が１つ存在している．

================================================================
[section type  : conclusion]
[section title : おわりに]
================================================================
[i:523, score:0.76169] 本稿では，PDGの基本モデルである多レベル圧縮共有データ結合モデルとPDGの概要について述べるとともに，特にPDGにおける圧縮共有データ構造である統語森と依存森について述べた．
[i:525, score:0.70961] 圧縮共有された句構造解釈（統語森）を圧縮共有された依存構造（依存森）に対応関係を持って変換でき，それぞれのレベルでの言語知識の適応が可能である点が最大の特徴である．
[i:526, score:0.78903] また，自然言語の曖昧性例文に対してPDGの文法と試作システムを用いて解析実験を行い，各種曖昧性が依存森により圧縮共有表現できることを示し，さらに，PDGではNon-projectiveな構造を必要に応じて規則導入できることを示した．

