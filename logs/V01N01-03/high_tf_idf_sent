================================================================
[section type  : abstract]
[section title : abstract]
================================================================
[i:2, score:0.47293] 我々は，すでに，このような考え方に基づき，長い文の中に多く存在する並列構造が文節列同士の類似性を発見するという手法でうまく検出できることを示した．
[i:3, score:0.34820] 本論文では，そのようにして検出した並列構造の情報を利用して構文解析を行なう手法を示す．
[i:5, score:0.32159] そこでまず，文内の並列構造相互間の位置関係を調べ，それらの入れ子構造などを整理する．

================================================================
[section type  : intro]
[section title : はじめに]
================================================================
[i:21, score:0.44943] 」という文では，並列構造前部の主要語である「処理(と)」に対して，それよりも後ろにある名詞の中から最も類似している名詞を探すという方法により後部の主要語を決定していた(この場合「処理(を)」が後部の主要語)．
[i:22, score:0.45295] しかし並列構造においては，主要語間だけではなく，構造内の他の語の間(この例の場合「原言語」と「相手言語」，「解析する」と「生成する」)にも，さらに文節列の並び(「〜を〜する〜と〜を〜する〜」)にも類似性が認められる場合が多く，これらの類似性を考慮することによってより正確に並列構造を認識することができる．
[i:23, score:0.49502] そこで我々は，並列構造の存在を示す表現(名詞並列を示す助詞「と」など)の前後における最も類似度の高い文節列の対を，音声認識などで広く使われているダイナミックプログラミングのマッチング法と同様の考え方を用いて発見するという方法を考案し，このことにより並列構造の高精度な検出が可能であることを示した[CITE]．

================================================================
[section type  : proposed_method]
[section title : 並列構造の検出と文の簡単化]
================================================================
-----------------------------------------------------
  [subsection title : 並列構造の検出の概要]
-----------------------------------------------------
  [i:lead, score:0.26816] 1文中の並列する部分は何らかの意味において類似していると考えることが出来る．
.....
  [i:56, score:0.62260] この方法によって求まった並列構造の範囲は前部と後部からなり，前部の最初の文節を起点文節，後部の最後の文節を終点文節とよぶことにする(以降本論文では，前部，後部という用語は，並列構造を構成する文節列を示すものとする)．
  [i:57, score:0.59260] 終点文節は前部と後部を分かつ並列のキー(前部の最後の文節)と対応する文節であり，パスの定義からわかるようにこれら2つの文節は類似度をもったものが選ばれる．
  [i:58, score:0.62060] 一方，並列構造の前部と後部にはそれぞれ並列のキーと終点文節を修飾している文節列があり，起点文節は前部の修飾部分がどこまでであるかを示している．
-----------------------------------------------------
  [subsection title : 並列構造間の関係の整理による文の簡単化]
-----------------------------------------------------
  [i:lead, score:0.31745] 前節の処理で得られた並列構造の範囲に関する情報をまとめることによって，文の大まかな構造を把握することができる．
.....
  [i:71, score:0.52137] 並列構造の範囲は，{起点文節の位置，並列のキーの位置，終点文節の位置}の3組値で表すことができる．
  [i:81, score:0.50606] このうちA,B,C,Gの位置関係の場合は並列構造Yの前部を並列構造Xを含むように延長する(図[REF_fig:kankei_rei](b))．
  [i:86, score:0.54484] なお，I,Jの位置関係は親子関係としたC,Gと左右対称であるが，並列構造の後部については前節の処理で正確な範囲が求まっており後方へ延長することはないので，違反関係とする(Eの親子関係の場合は特別，図[REF_fig:kankei_rei](c)と図[REF_fig:kankei_rei](d)参照)．
-----------------------------------------------------
  [subsection title : 違反関係にある並列構造の修正]
-----------------------------------------------------
  [i:lead, score:0.36249] 文内に違反関係の並列構造がある場合には，並列構造の検出のやり直しを行なう．
.....
  [i:102, score:0.55642] 並列構造の再検出では，並列構造の起点文節と終点文節の位置をこのようにして求まった範囲内に制限し，その中でもっとも類似度の高い並列構造を求める．
  [i:104, score:0.56085] 図の中に示した表は，並列構造[プログラム，データだけでなく，] - [ファイル，データベースをも]を基準として並列のキー「ファイル，」に対する並列構造を再検出する場合，起点文節が6番目の文節「ファイル，」であり，終点文節が7番目の文節「データベースをも」である並列構造だけが制限を満たすことを示している．
  [i:105, score:0.53671] すなわち，この例文の場合，再検出される並列構造の範囲は起点文節と終点文節に対する制限によって一意に決まることになる．

================================================================
[section type  : proposed_method]
[section title : 係り受け解析]
================================================================
[i:109, score:0.13660] この結果，簡単化された各部分に対して単純な係り受け解析をするだけで，従来の構文解析よりも頑強な，すなわち長い文に対しても有効な構文解析を行なうことができる．
-----------------------------------------------------
  [subsection title : 係り受け解析の概要]
-----------------------------------------------------
  [i:lead, score:0.28020] 係り受け解析の目的は，文節間の係り受け関係を明らかにし，その関係を依存構造木によって表現することである[CITE]．
.....
  [i:118, score:0.54232] 並列節点は，係りの文節となる場合には終点文節の内容を継承し，受けの文節となる場合には並列のキーと終点文節の内容を継承する．
  [i:122, score:0.56494] この各部分は1文節なので係り受け解析の必要はなく，単にそれらをまとめた並列節点が作られる(図[REF_fig:kakari_rei](a))．
  [i:124, score:0.60393] ]の前部と後部を係り受け解析してそれぞれを依存構造木にまとめ，さらに並列節点を作る(図[REF_fig:kakari_rei](b))．
-----------------------------------------------------
  [subsection title : 一定範囲内の文節列の係り受け解析]
-----------------------------------------------------
  [i:lead, score:0.39851] 並列構造を1つのものと見ることによる文の簡単化がうまくいったとして，次にその各部分をどのような規則で係り受け解析するかということが問題となる．
.....
  [i:126, score:0.39851] 並列構造を1つのものと見ることによる文の簡単化がうまくいったとして，次にその各部分をどのような規則で係り受け解析するかということが問題となる．
  [i:158, score:0.49215] 係り得る最初の文節が並列構造をまとめた並列節点の文節である場合．
  [i:159, score:0.54066] 並列構造外の文節が並列節点(並列のキー文節と終点文節)に係る場合には，かなり離れた文節に係ることになるため．
-----------------------------------------------------
  [subsection title : 並列構造の範囲の延長]
-----------------------------------------------------
  [i:lead, score:0.48646] 前節で述べた並列構造の検出方法ではその前部がどこから始まるかについて正確な情報が得られないので，係り受け解析の段階でこれを明らかにする必要がある．
.....
  [i:183, score:0.58748] 並列のキーを係り先の対象から外すのは，もし並列のキーに係るのであれば，それと対応している終点文節にも係ると考えられ，そのような係り受け関係はその上のレベルの係り受け解析において並列節点との関係として扱うからである．
  [i:184, score:0.60962] たとえば，図[REF_fig:suitei_rei]で示した例文1では，起点文節の前の「その」は「可能性を」に係ると考えて並列構造に含まれるとし，助詞「は」および読点を伴う「解消するためには，」のところで延長の処理を終了する．
  [i:186, score:0.59421] なお，延長を考える並列構造が強並列の場合は，並列構造内の前部と後部の各文節が強く対応しているので，延長する部分の文節が上述のように前部の文節だけに係ると考えるのではなく，前部と後部の対応する文節の対に係ると考える．
-----------------------------------------------------
  [subsection title : 係り受け解析を失敗した場合]
-----------------------------------------------------
  [i:lead, score:0.50600] これまで説明してきた規則によって並列構造の各部分を係り受け解析すると，ある文節に対してその係り得る文節がなくなり，解析が失敗するということがある．
.....
  [i:199, score:0.60050] そして，次のレベルの解析において並列節点の係り先が明らかになった段階で，その係り先の文節を前部に対して補うことによって述語並列への変換を行う(図[REF_fig:incom_new](e))．
  [i:203, score:0.58138] 係り受け解析の失敗が起こらないような並列構造を検出するために，その起点文節と終点文節の位置について次のような制限を与える．
  [i:209, score:0.58776] 図の中に示した表は，再検出する並列構造が係り受け解析可能であるためには，起点文節に対する制限はないが，終点文節は5番目の文節「文書処理とともに」か10番目の文節「なす．

================================================================
[section type  : experiment_result]
[section title : 文解析の結果とその評価]
================================================================
[i:212, score:0.02660] テストサンプルは，文字数が30〜50文字，50〜80文字，80文字以上のものをそれぞれ50文づつランダムに収集した．
-----------------------------------------------------
  [subsection title : 定量的評価]
-----------------------------------------------------
  [i:lead, score:0.02835] 150文の解析結果について人手で評価を行なった．
.....
  [i:214, score:0.60606] まず文節を並列のキー，用言に係る文節，体言に係る文節の3タイプに分類し，並列のキーについては正しい終点文節が検出されているか，用言に係る文節，体言に係る文節については正しい係り先が求まっているかを調べた(表[REF_tab:hyouka])．
  [i:225, score:0.63541] 215個の並列のキーについては，1度目の並列構造の検出で正しい終点文節が求まったものは175個であったが，並列構造間の違反関係によって再検出の対象となった5個の並列のキーについてすべて正しい終点文節が求まり，さらに，並列構造内の係り受け解析の失敗によって再検出の対象となった8個の並列のキーのうち5個について正しい終点文節が求まった．
  [i:227, score:0.58855] 例文中には，区切り文節は20個(係り受け解析の対象範囲の最後の述語であるために区切り文節としたものは除く)，読点を伴う文節は274個(並列のキー，助詞「は」を伴う文節を除く)，助詞「は」を伴う文節は115個存在したが，それらを扱うために追加した係り受け規則はすべて有効に働き，解析に悪影響を与えた例はなかった．
-----------------------------------------------------
  [subsection title : 関連研究]
-----------------------------------------------------
  [i:lead, score:0.33436] 構文解析システムを，実際にテキストを処理するツールとして考えた場合，並列構造と依存構造(または句構造/格構造)に対する優先規則を持つことは必要不可欠である．
.....
  [i:231, score:0.33805] 実用的機械翻訳システムであるMuシステム[CITE]の日本語解析部では，並列構造，依存構造に対する優先規則による処理を行っているが，その評価は翻訳結果に対して行われており，日本語解析部に対する評価の報告はない[CITE]．
  [i:232, score:0.38731] しかし，Muシステムにおける並列構造解析は基本的に1章で述べた「並列する主要語間の類似度を調べる」方法であり，また，本手法のように並列構造の再検出を起動するような枠組も示されていない．
  [i:233, score:0.47527] 稲垣らは，並列構造に対する優先規則，読点を伴う文節に対する優先規則に加えて，用例とシソーラスを用いた優先規則を備えた日本語文解析システムを提案している[CITE]．
-----------------------------------------------------
  [subsection title : 解析の誤り]
-----------------------------------------------------
  [i:lead, score:0.29689] 本手法における係り受け解析誤りの根本的原因を分類し，それらを具体例とともに説明する(表[REF_tab:ayamari]:下線部分は誤った係り先を求めた文節とその誤った係り先の文節，傍点はその正しい係り先の文節を示している)．
.....
  [i:237, score:0.57810] 並列のキーに対する終点文節の検出の誤りについては文献[CITE]で論じたので，ここでは用言に係る文節と体言に係る文節の係り先の誤りに的を絞る．
  [i:240, score:0.60584] このため，後部の文節数が非常に多い並列構造では後部の範囲が正しく求まらない可能性があり(図[REF_fig:hei_ayamari](a))，この場合は並列のキーに対して終点文節の検出を誤ったということになる．
  [i:241, score:0.53494] これに対して，前部の文節数が非常に多い並列構造では前部の範囲が正しく求まらない可能性がある(図[REF_fig:hei_ayamari](b))．

================================================================
[section type  : conclusion]
[section title : おわりに]
================================================================
[i:256, score:0.32477] 従来方式の構文解析では長い文の中に多く存在する並列構造を正しく認識することが困難であり，そのことが長い文を解析する上での大きな問題であった．
[i:257, score:0.56786] 本論文では，まず文内の並列構造の範囲を文節列同士の類似性を発見するという考え方によって検出し，次に並列構造の情報を利用しながら簡単な係り受け解析を行なうという方法によって，長い文に対しても有効であり，かつ高精度な構文解析が実現できることを示した．
[i:258, score:0.26353] 次のステップでは，構文解析によって求まった依存構造木において依存関係にある文節間の格関係の推定を行ない，同時にその過程で省略語句の復元や指示詞の指示対象の同定を行なうことを考えている．

