 \section{はじめに}

 従来の構文解析法は基本的に句構造文法あるいは格文法をその拠り所としてきた．
 前者の考え方は局所的統合の繰り返しによって文の構造を認識しようというもの
 である．
 しかし，実際にそのような方法で文を解析しようとすると，規則の数が
 非常に多くなり，なおかつ十分な精度の解析結果を得ることが困難であった．
 また，格文法の場合は格要素を決定するための意味素が必ずしもうまく設定できず，
 またこの場合も基本的には局所的な解析であるため，
 十分な精度の解析結果が得られていない．
 これらの問題を解決するためには，これらの文法的枠組に加えて，
 局所的記述ではとらえきれない情報を
 文中の広い範囲を同時的に調べることによって取り出す必要がある．

 日本語文解析の困難さの原因の一つである並列構造の範囲に関する曖昧性の問題も，
 このような「広い範囲を同時的に調べる」ことを必要とする問題の一つである．
 日本語文は，特に長い文になればなるほど多くの並列構造を含んでいる．
 「〜し，〜し，〜する」のように，いわゆる連用中止法によって複数の文を
 1文にまとめることができることは日本語文の特徴でもある．
 それ以外にも，名詞並列，形容詞並列や，連体修飾節の並列などが頻繁に現れる．
 このような並列構造に対する従来の解析方法は，基本的には
 次のようなものであった\cite{Nagao1983,Agarwal1992}．
 例えば「\ldots 原言語を解析する\underline{処理と}
 相手言語を生成する\underline{処理を} \ldots ．」
 という文では，
 並列構造前部の{\bf 主要語}である「\underline{処理(と)}」に対して，
 それよりも後ろにある名詞の中から最も類似している名詞を探すという
 方法により後部の主要語を決定していた(この場合「\underline{処理(を)}」が
 後部の主要語)．
 しかし並列構造においては，主要語間だけではなく，
 構造内の他の語の間
 (この例の場合「原言語」と「相手言語」，「解析する」と「生成する」)にも，
 さらに文節列の並び(「〜を〜する〜と〜を〜する〜」)にも類似性が認められる
 場合が多く，
 これらの類似性を考慮することによってより正確に並列構造を認識することが
 できる．
 そこで我々は，
 並列構造の存在を示す表現(名詞並列を示す助詞「と」など)の前後における最
 も類似度の高い文節列の対を，
 音声認識などで広く使われているダイナミックプログラミング
 のマッチング法と同様の考え方を用いて発見するという方法を考案し，
 このことにより
 並列構造の高精度な検出が可能であることを示した\cite{KurohashiAndNagao1992}．
score of this paragraph is 2
