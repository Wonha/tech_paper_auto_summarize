本手法による文解析の実験をテストサンプルの150文に対して行なった．
テストサンプルは，文字数が30〜50文字，50〜80文字，80文字以上のものをそれぞれ50文づつランダムに収集した．
150文の解析結果について人手で評価を行なった．
まず文節を並列のキー，用言に係る文節，体言に係る文節の3タイプに分類し，並列のキーについては正しい終点文節が検出されているか，用言に係る文節，体言に係る文節については正しい係り先が求まっているかを調べた(表[REF_tab:hyouka])．
また，各文をその長さと並列構造の有無によって分類し，文中の全ての並列構造が正しく求まっているか(文の簡単化が正しく行なわれたかどうか)，さらに文全体の依存構造が正しく求まっているかどうかを調べた(表[REF_tab:hyouka2]上部)．
次に，本手法の有効性，特に並列構造の検出による文の簡単化の有効性を調べるために比較実験を行なった．
この比較実験では，並列のキーに対してダイナミックプログラミングによる並列構造の範囲推定を行なわずに，単にそれを最も類似する文節に対応付けるという規則を用いた(2.1節の文節間類似度の計算を用いた)．
この規則と本論文で示した係り受けの優先規則によって，文末の文節から順にその係り先あるいは対応先を決定するという形で文解析を行なった．
この方法による解析結果を表[REF_tab:hyouka2]下部に示す．
この実験で対象としたのはかなり長い文であり，1文当たりの文節数も多い(平均14.3)．
各文節に対して係り先の候補が多数あるため解析の誤りが起こる可能性が高く，また1文の解析結果(依存構造木)の中に誤りが含まれる可能性も高くなる．
このように文が長くなった場合，文の簡単化を行なわなければ表[REF_tab:hyouka2]に示したように解析成功率は極端に低下する．
このような条件を考えれば，本手法の文単位の解析成功率65%(97/150)は決して低くないと考えられる．
また表[REF_tab:hyouka]に示す通り文節単位の解析成功率は十分に高いので，解析誤りを一部に含む場合でも文のおおまかな構造は多くの場合正しく求まっており，そこからなんらかの情報を取り出すことは十分可能である．
215個の並列のキーについては，1度目の並列構造の検出で正しい終点文節が求まったものは175個であったが，並列構造間の違反関係によって再検出の対象となった5個の並列のキーについてすべて正しい終点文節が求まり，さらに，並列構造内の係り受け解析の失敗によって再検出の対象となった8個の並列のキーのうち5個について正しい終点文節が求まった．
なお再検出の対象になった並列のキーは，すべて，最初の検出で誤った並列構造が検出されたものであった．
例文中には，区切り文節は20個(係り受け解析の対象範囲の最後の述語であるために区切り文節としたものは除く)，読点を伴う文節は274個(並列のキー，助詞「は」を伴う文節を除く)，助詞「は」を伴う文節は115個存在したが，それらを扱うために追加した係り受け規則はすべて有効に働き，解析に悪影響を与えた例はなかった．
たとえば，読点を伴う文節の係り先は2番目の係り得る文節としたが，実際には3番目の文節に係ることが正解であるために誤りとなる例はあったが，1番目の文節に係ることが正解であり読点に対する追加規則のためにそれが正しく取り出せないという例はなかった．
構文解析システムを，実際にテキストを処理するツールとして考えた場合，並列構造と依存構造(または句構造/格構造)に対する優先規則を持つことは必要不可欠である．
しかし，日本語文解析において，そのような規則を備えたシステムとその評価結果を示した研究は非常に少ない．
実用的機械翻訳システムであるMuシステム[CITE]の日本語解析部では，並列構造，依存構造に対する優先規則による処理を行っているが，その評価は翻訳結果に対して行われており，日本語解析部に対する評価の報告はない[CITE]．
しかし，Muシステムにおける並列構造解析は基本的に1章で述べた「並列する主要語間の類似度を調べる」方法であり，また，本手法のように並列構造の再検出を起動するような枠組も示されていない．
稲垣らは，並列構造に対する優先規則，読点を伴う文節に対する優先規則に加えて，用例とシソーラスを用いた優先規則を備えた日本語文解析システムを提案している[CITE]．
このシステムは，解析対象テキスト中の一意に決定される係り受け関係を用例として利用することにより残りの部分の曖昧性を解消する，というシステムであり，特許請求範囲文10篇に対する文節単位の解析成功率は97%であると報告されている．
しかし，このシステムの場合も並列構造解析の方法については上述のMuシステムと同様の問題がある．
本手法における係り受け解析誤りの根本的原因を分類し，それらを具体例とともに説明する(表[REF_tab:ayamari]:下線部分は誤った係り先を求めた文節とその誤った係り先の文節，傍点はその正しい係り先の文節を示している)．
並列のキーに対する終点文節の検出の誤りについては文献[CITE]で論じたので，ここでは用言に係る文節と体言に係る文節の係り先の誤りに的を絞る．
並列構造の前部の範囲と関連するもの
並列構造の検出では，文節数が同じぐらいの文節列同士が並列することが自然であるということを1つの尺度にしている．
このため，後部の文節数が非常に多い並列構造では後部の範囲が正しく求まらない可能性があり(図[REF_fig:hei_ayamari](a))，この場合は並列のキーに対して終点文節の検出を誤ったということになる．
これに対して，前部の文節数が非常に多い並列構造では前部の範囲が正しく求まらない可能性がある(図[REF_fig:hei_ayamari](b))．
この問題の大部分は[REF_subsec:enchou]節で示した方針によって並列構造の前部の延長を行なうことで解決できるが，なかにはその方法で扱えない場合もある．
誤り例1では，並列のキー「必要で，」に対する並列構造として``『'',``』''で囲まれた部分が検出され，その前の「構築には，」は助詞「は」と読点を伴うので並列構造の延長は行なわれない．
そのため，「構築には，」の正しい係り先は「必要で，」であるのに，本手法では文全体を解析する段階で並列節点，すなわち「必要で，」と「データベース化した。
」の両方が係り先であると解釈されてしまう．
このような原因による解析の誤りは用言に係る文節の解析の場合が圧倒的に多い．
述語的働きをする「で」・「の」に関連するもの
名詞に続く「で」・「の」は助詞である場合と判定詞の活用形である場合がある．
判定詞である場合，「で」は「であり」に，「の」は「である」に言いかえることができる(誤り例2:「錯覚で，」，誤り例3:「つきものの」)．
これらの区別は困難であるので，本手法では今のところ圧倒的に頻度の高い助詞としての解釈を優先している．
そのため，それらが判定詞である場合その文節(「名詞＋判定詞」)に係るはずの文節の解析は失敗してしまう．
連体修飾(「〜の」を含む)の連続する部分での誤り
体言に係る文節の係り先の解析の失敗は，ほとんど連体修飾の連続する部分で起こっている(誤り例4)．
150文に対する実験では誤りの絶対数が少ないので，誤りを上のように分類することはできるが，それらの解決方法の考察まで行なうことは難しい．
解決方法を考えるためには，誤りの原因となっているような表現を大量に収集して調査することが必要である．
本手法による文解析の実験をテストサンプルの150文に対して行なった．
テストサンプルは，文字数が30〜50文字，50〜80文字，80文字以上のものをそれぞれ50文づつランダムに収集した．
150文の解析結果について人手で評価を行なった．
まず文節を並列のキー，用言に係る文節，体言に係る文節の3タイプに分類し，並列のキーについては正しい終点文節が検出されているか，用言に係る文節，体言に係る文節については正しい係り先が求まっているかを調べた(表[REF_tab:hyouka])．
また，各文をその長さと並列構造の有無によって分類し，文中の全ての並列構造が正しく求まっているか(文の簡単化が正しく行なわれたかどうか)，さらに文全体の依存構造が正しく求まっているかどうかを調べた(表[REF_tab:hyouka2]上部)．
次に，本手法の有効性，特に並列構造の検出による文の簡単化の有効性を調べるために比較実験を行なった．
この比較実験では，並列のキーに対してダイナミックプログラミングによる並列構造の範囲推定を行なわずに，単にそれを最も類似する文節に対応付けるという規則を用いた(2.1節の文節間類似度の計算を用いた)．
この規則と本論文で示した係り受けの優先規則によって，文末の文節から順にその係り先あるいは対応先を決定するという形で文解析を行なった．
この方法による解析結果を表[REF_tab:hyouka2]下部に示す．
この実験で対象としたのはかなり長い文であり，1文当たりの文節数も多い(平均14.3)．
各文節に対して係り先の候補が多数あるため解析の誤りが起こる可能性が高く，また1文の解析結果(依存構造木)の中に誤りが含まれる可能性も高くなる．
このように文が長くなった場合，文の簡単化を行なわなければ表[REF_tab:hyouka2]に示したように解析成功率は極端に低下する．
このような条件を考えれば，本手法の文単位の解析成功率65%(97/150)は決して低くないと考えられる．
また表[REF_tab:hyouka]に示す通り文節単位の解析成功率は十分に高いので，解析誤りを一部に含む場合でも文のおおまかな構造は多くの場合正しく求まっており，そこからなんらかの情報を取り出すことは十分可能である．
215個の並列のキーについては，1度目の並列構造の検出で正しい終点文節が求まったものは175個であったが，並列構造間の違反関係によって再検出の対象となった5個の並列のキーについてすべて正しい終点文節が求まり，さらに，並列構造内の係り受け解析の失敗によって再検出の対象となった8個の並列のキーのうち5個について正しい終点文節が求まった．
なお再検出の対象になった並列のキーは，すべて，最初の検出で誤った並列構造が検出されたものであった．
例文中には，区切り文節は20個(係り受け解析の対象範囲の最後の述語であるために区切り文節としたものは除く)，読点を伴う文節は274個(並列のキー，助詞「は」を伴う文節を除く)，助詞「は」を伴う文節は115個存在したが，それらを扱うために追加した係り受け規則はすべて有効に働き，解析に悪影響を与えた例はなかった．
たとえば，読点を伴う文節の係り先は2番目の係り得る文節としたが，実際には3番目の文節に係ることが正解であるために誤りとなる例はあったが，1番目の文節に係ることが正解であり読点に対する追加規則のためにそれが正しく取り出せないという例はなかった．
構文解析システムを，実際にテキストを処理するツールとして考えた場合，並列構造と依存構造(または句構造/格構造)に対する優先規則を持つことは必要不可欠である．
しかし，日本語文解析において，そのような規則を備えたシステムとその評価結果を示した研究は非常に少ない．
実用的機械翻訳システムであるMuシステム[CITE]の日本語解析部では，並列構造，依存構造に対する優先規則による処理を行っているが，その評価は翻訳結果に対して行われており，日本語解析部に対する評価の報告はない[CITE]．
しかし，Muシステムにおける並列構造解析は基本的に1章で述べた「並列する主要語間の類似度を調べる」方法であり，また，本手法のように並列構造の再検出を起動するような枠組も示されていない．
稲垣らは，並列構造に対する優先規則，読点を伴う文節に対する優先規則に加えて，用例とシソーラスを用いた優先規則を備えた日本語文解析システムを提案している[CITE]．
このシステムは，解析対象テキスト中の一意に決定される係り受け関係を用例として利用することにより残りの部分の曖昧性を解消する，というシステムであり，特許請求範囲文10篇に対する文節単位の解析成功率は97%であると報告されている．
しかし，このシステムの場合も並列構造解析の方法については上述のMuシステムと同様の問題がある．
本手法における係り受け解析誤りの根本的原因を分類し，それらを具体例とともに説明する(表[REF_tab:ayamari]:下線部分は誤った係り先を求めた文節とその誤った係り先の文節，傍点はその正しい係り先の文節を示している)．
並列のキーに対する終点文節の検出の誤りについては文献[CITE]で論じたので，ここでは用言に係る文節と体言に係る文節の係り先の誤りに的を絞る．
並列構造の前部の範囲と関連するもの
並列構造の検出では，文節数が同じぐらいの文節列同士が並列することが自然であるということを1つの尺度にしている．
このため，後部の文節数が非常に多い並列構造では後部の範囲が正しく求まらない可能性があり(図[REF_fig:hei_ayamari](a))，この場合は並列のキーに対して終点文節の検出を誤ったということになる．
これに対して，前部の文節数が非常に多い並列構造では前部の範囲が正しく求まらない可能性がある(図[REF_fig:hei_ayamari](b))．
この問題の大部分は[REF_subsec:enchou]節で示した方針によって並列構造の前部の延長を行なうことで解決できるが，なかにはその方法で扱えない場合もある．
誤り例1では，並列のキー「必要で，」に対する並列構造として``『'',``』''で囲まれた部分が検出され，その前の「構築には，」は助詞「は」と読点を伴うので並列構造の延長は行なわれない．
そのため，「構築には，」の正しい係り先は「必要で，」であるのに，本手法では文全体を解析する段階で並列節点，すなわち「必要で，」と「データベース化した。
」の両方が係り先であると解釈されてしまう．
このような原因による解析の誤りは用言に係る文節の解析の場合が圧倒的に多い．
述語的働きをする「で」・「の」に関連するもの
名詞に続く「で」・「の」は助詞である場合と判定詞の活用形である場合がある．
判定詞である場合，「で」は「であり」に，「の」は「である」に言いかえることができる(誤り例2:「錯覚で，」，誤り例3:「つきものの」)．
これらの区別は困難であるので，本手法では今のところ圧倒的に頻度の高い助詞としての解釈を優先している．
そのため，それらが判定詞である場合その文節(「名詞＋判定詞」)に係るはずの文節の解析は失敗してしまう．
連体修飾(「〜の」を含む)の連続する部分での誤り
体言に係る文節の係り先の解析の失敗は，ほとんど連体修飾の連続する部分で起こっている(誤り例4)．
150文に対する実験では誤りの絶対数が少ないので，誤りを上のように分類することはできるが，それらの解決方法の考察まで行なうことは難しい．
解決方法を考えるためには，誤りの原因となっているような表現を大量に収集して調査することが必要である．
