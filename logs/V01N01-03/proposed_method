
1文中の並列する部分は何らかの意味において類似していると考えることが出来る．
そこで，類似性という観点から並列構造を検出する方法を図[REF_fig:suitei_rei]を用いて説明する(詳細は文献[CITE]参照)．
並列構造の存在を機械的に認識することは比較的容易である．
名詞並列は，名詞の直後の読点や助詞「と」・「や」などによって認識でき，述語並列は，述語自身が連用形であることや述語が助詞「が」などを伴うことによって認識できる(このように並列構造の存在を示す文節を並列のキーとよぶことにする)．
問題となるのは，そういった表現がある場合にその前後のどこまでが並列構造の範囲であるかということである．
そこでまず，文節間の類似度を品詞の一致，文字列の一致，シソーラスによる意味的な近さ，などによって定義し，全ての文節間についてこの値を計算した．
図[REF_fig:suitei_rei]の三角行列では，対角要素は文節を，(i,j)要素はi番目の文節とj番目の文節の類似度を示している．
次にいくつかの連続した文節，すなわち文節列相互間の類似度を考える．
そのために以下の用語を定義する．
並列のキーの右上部分の行列(図[REF_fig:suitei_rei]では点線で囲まれた部分)．
部分行列の中の1番下の行の0以外のある要素から1番左の列のある要素までの左上方向への要素の並び．
パスに含まれる要素の値の総和．
パス内の要素の並びが真左上方向からずれる場合にはペナルティとして値を小さくする．
パスに含まれる各要素の値は並列のキーの前後にある2つの文節間の類似度を示しているので，それらの値の総和であるパスのスコアはパスの左側の文節列と下側の文節列の間の類似度を示している．
パスの方向のずれに対してペナルティを与えるのは，それによって文節数が同じぐらいの文節列間の類似度を相対的に高くするためである．
このように考えると，文節列間の類似度をパスのスコアという形で計算することができるようになる．
そこで，ダイナミックプログラミングの手法によって並列のキーに対する最大スコアのパスを求め，そのパスによって示される最も類似度の高い文節列を並列構造の範囲と考えることにする．
図[REF_fig:suitei_rei]の例では，実線で囲まれた要素の並びが最大スコアのパスとして求まり，このパスによって正しい並列構造の範囲が検出される．
実験として30文字〜50文字，50文字〜80文字，80文字以上の各60文，合計180文の日本語文に対してこの手法を適用したところ，82%の並列のキーに対して正しい並列構造を検出することができた．
これは文献[CITE]で既に発表した．
この方法によって求まった並列構造の範囲は前部と後部からなり，前部の最初の文節を起点文節，後部の最後の文節を終点文節とよぶことにする(以降本論文では，前部，後部という用語は，並列構造を構成する文節列を示すものとする)．
終点文節は前部と後部を分かつ並列のキー(前部の最後の文節)と対応する文節であり，パスの定義からわかるようにこれら2つの文節は類似度をもったものが選ばれる．
一方，並列構造の前部と後部にはそれぞれ並列のキーと終点文節を修飾している文節列があり，起点文節は前部の修飾部分がどこまでであるかを示している．
しかし，前部と後部の修飾部分には正確な対応関係があるわけではなく，起点文節は主にバランス(文節数の同じ文節列の類似度が高い)という観点から決定される．
そのため，起点文節は並列構造の始まりの位置を必ずしも正確に示しているわけではない．
その最終決定は係り受け解析の段階で処理する([REF_subsec:enchou]節)．
なお，検出された並列構造のうち次の二つの条件を満たす，とくに類似度の高いものを強並列とよぶことにする．
前部の文節数(n1)と後部の文節数(n2)がほぼ等しい．
並列構造を与えるパスのスコアが高い．
たとえば，次の文の下線部分は強並列である．
例文2:「もちろん、問題の大部分は、ある現象を調べるのにどんなアルゴリズムが必要かを正確に見定めることであるが、コンピューターのアーキテクチャがその開発の助けになることもあれば、妨げになることもある。
」
強並列は，以降の処理において他の並列構造と若干異なった扱いをする．
前節の処理で得られた並列構造の範囲に関する情報をまとめることによって，文の大まかな構造を把握することができる．
この処理は，まず二つの並列構造間の関係を明らかにし，それをもとに1文内の全ての並列構造間の関係を整理することによって行う．
並列構造の範囲は，{起点文節の位置，並列のキーの位置，終点文節の位置}の3組値で表すことができる．
1文内に2つの並列構造が存在するとき，図[REF_fig:kankei]に示すように，前方の並列構造Xの範囲を{x1，x2，x3}，後方の並列構造Yの範囲を{y1，y2，y3}とする．
並列構造間の関係が問題となるのは，その範囲が重なる場合，すなわちy1 [MATH] x3の場合である．
このときy1とx1,x2，およびx3とy2,y3の関係によって2つの並列構造間の位置関係を図[REF_fig:kankei]のように分類できる．
この16の位置関係は次の3つの関係に分類することができ，そのそれぞれに対して次のような処理を行う．
--- F
前節の処理では，3つ以上の部分からなる並列構造は，Fの位置関係にある複数の並列構造の組合せとして検出される．
そこでFの位置関係にある並列構造は1つの並列構造にまとめる(図[REF_fig:kankei_rei](a))．
--- A,B,C,D,E,G,H,M,N
ある並列構造の中にさらに並列構造が含まれる入れ子構造の場合である．
このうちA,B,C,Gの位置関係の場合は並列構造Yの前部を並列構造Xを含むように延長する(図[REF_fig:kankei_rei](b))．
逆にEの場合は並列構造Xの後部を並列構造Yを含むように延長する(図[REF_fig:kankei_rei](c))．
--- I,J,K,L,O,P
これらの位置関係は，正しい並列構造の重なりではなく，並列構造の検出の誤りによって生じたものであると考えられる．
このような関係にある並列構造については次節で示す方法によって並列構造の再検出を行う．
なお，I,Jの位置関係は親子関係としたC,Gと左右対称であるが，並列構造の後部については前節の処理で正確な範囲が求まっており後方へ延長することはないので，違反関係とする(Eの親子関係の場合は特別，図[REF_fig:kankei_rei](c)と図[REF_fig:kankei_rei](d)参照)．
なお，並列構造の類似度が高い強並列では，その中の文節がそれぞれ強く対応しており，意味的に強い{ま}{と}{ま}{り}をなしていると考えられる．
そのため，外部の並列構造(並列のキーが強並列の範囲の外にあるもの)の境界が強並列の内部にある場合は違反関係とする．
すなわち，後の並列構造が強並列である場合に，A,Eの位置関係を違反関係とする．
これらの処理の具体例を図[REF_fig:kankei_rei](a)の例文(以後，例文3とよぶ)について示す．
この例文の場合，前節の処理で次の3つの並列構造が検出される．
CS1 [表題，] - [著者，]
CS2 [著者，] - [主題などの]
CS3 [主題などの〜再編成し，] - [索引の〜記録しておく．
]
このうちCS1とCS2は兄弟関係にあるので，これらを3つの部分からなる1つの並列構造CS'([表題，] - [著者，] - [主題などの])にまとめる．
さらに，CS2とCS3，すなわちCS'とCS3が親子関係にあるので，CS3の前部を「表題，著者，」の部分を含むように延長する．
これらの処理の結果，図[REF_fig:heiretu_tree]に示すように，文の大まかな構造を得ることができる．
文内に違反関係の並列構造がある場合には，並列構造の検出のやり直しを行なう．
違反関係にある2つの並列構造のうち，スコアの高い方の並列構造の範囲を基準とし，その範囲に対して違反関係にならないような並列構造をもう一方の並列のキーについて再検出する．
たとえば，前方の並列構造Xの再検出を行なう場合には，x2,y1,y2,y3の値に対して図[REF_fig:kankei]の関係式によって正しい位置関係を与えるようなx1,x3の値の範囲を求める．
並列構造の再検出では，並列構造の起点文節と終点文節の位置をこのようにして求まった範囲内に制限し，その中でもっとも類似度の高い並列構造を求める．
図[REF_fig:kankei_shuusei]に並列構造の再検出の例を示す．
図の中に示した表は，並列構造[プログラム，データだけでなく，] - [ファイル，データベースをも]を基準として並列のキー「ファイル，」に対する並列構造を再検出する場合，起点文節が6番目の文節「ファイル，」であり，終点文節が7番目の文節「データベースをも」である並列構造だけが制限を満たすことを示している．
すなわち，この例文の場合，再検出される並列構造の範囲は起点文節と終点文節に対する制限によって一意に決まることになる．
違反関係にある並列構造の組が1文内に複数ある場合には，スコアの差が最も大きい組について再検出の処理を行なう．
そして一つの並列構造の再検出を行うたびに全体の並列構造間の関係を調べ直し，違反関係がなくなるまでこの処理を繰り返す．
前章で説明したように，文内の並列構造が決定されると文の大まかな構造がとらえられたことになり，文を簡単化した形で扱うことが可能となる．
この結果，簡単化された各部分に対して単純な係り受け解析をするだけで，従来の構文解析よりも頑強な，すなわち長い文に対しても有効な構文解析を行なうことができる．
係り受け解析の目的は，文節間の係り受け関係を明らかにし，その関係を依存構造木によって表現することである[CITE]．
依存構造木では，木の節点には受けの文節を，その子の節点には係りの文節を配置する．
日本語の場合，各文節はそれよりも後ろの文節に係るので，最終的には文末の文節を根節点とする依存構造木が得られる．
係り受け解析は，まず並列構造に関する部分について行なう．
複数の並列構造が入れ子構造(親子関係)をなしている場合は，その中の最も深いレベルにある並列構造から順に解析していく．
そして，最後に文全体の解析を行なう．
並列構造の前部と後部はそれぞれ意味的なまとまりをなしており，それぞれを1つの依存構造木にまとめることができる．
そこで，並列構造を表すためにその2つの依存構造木の根節点(依存構造木の表示では``[MATH]P[MATH]''を付加)を子の節点とする新たな節点(依存構造木の表示では``PARA''と表記，並列節点とよぶことにする)を作り，その上のレベル(親の並列構造，それがない場合には文全体)の係り受け解析では，この並列節点のみが扱われるようにする．
並列節点は，係りの文節となる場合には終点文節の内容を継承し，受けの文節となる場合には並列のキーと終点文節の内容を継承する．
こうすることによって，並列構造中の並列のキーと終点文節以外の文節は並列構造の外の文節の係り先にはならないことになる．
3つ以上の部分からなる並列構造の場合は，並列節点の子の節点，すなわち並列構造内でまとめられる依存構造木の数が増えるだけで，その他の処理は全く同じである．
たとえば図[REF_fig:heiretu_tree]に挙げた例文3では，まず並列構造[表題，著者，主題などの]の各部分が処理対象となる．
この各部分は1文節なので係り受け解析の必要はなく，単にそれらをまとめた並列節点が作られる(図[REF_fig:kakari_rei](a))．
次に，並列構造[表題，〜記憶しておく．
]の前部と後部を係り受け解析してそれぞれを依存構造木にまとめ，さらに並列節点を作る(図[REF_fig:kakari_rei](b))．
そして最後に文全体を係り受け解析し，文全体の依存構造木を得る(図[REF_fig:kakari_rei])．
並列構造を1つのものと見ることによる文の簡単化がうまくいったとして，次にその各部分をどのような規則で係り受け解析するかということが問題となる．
我々はまず，次のような優先規則によって決定論的に動作する解析を考えた．
解析すべき範囲について後ろから順に各文節の係り先を決定する．
各文節の係り先は，係り受け関係が相互に交差しない条件(非交差条件)をみたし，かつ{係}{り}{得}{る}文節のうち最も近い文節とする[CITE]．
係り得る関係は次のものである．
ただし，助詞「が」・「を」を伴う文節は，それぞれ同じ述語に2つ以上は係り得ない．
名詞に係り得る: 連体詞，助詞「の」，活用語の基本形・タ形
動詞に係り得る:活用語の連用形，副詞，助詞
述語のイ形容詞・ナ形容詞に係り得る: 活用語の連用形，副詞，助詞(「を」・「へ」以外)
連体形のイ形容詞に係り得る: 副詞，助詞「が」・「の」・「に」・「より」
連体形のナ形容詞に係り得る: 副詞，助詞「が」・「に」・「より」
連用形のイ形容詞・ナ形容詞に係り得る:副詞
名詞＋判定詞に係り得る: 活用語の連用形，副詞，助詞(「を」以外)．
述語のイ形容詞・ナ形容詞とは，読点を伴うもの，文末のもの，「〜という」などの表現を伴うものをさす．
それ以外の場合の連体形，連用形の形容詞については，その係り先の体言，用言の方が意味的に強いと考え，上記のようにそれらの形容詞に係り得る文節を制限した．
図[REF_fig:kakari_gairyaku]の例では，文節2,文節3,…の順に係り先を決定していき，文節6の係り先を調べる段階では，非交差条件によって文節4,文節3は対象外となり，文節5,文節2,文節1の順で係り得る文節を探す．
このような方法で30文の学習サンプル(岩波情報科学辞典のテキスト)に対して係り受け解析を行なったところ，幾つかの問題点が明らかになった．
そのうち，語彙に依存した問題ではなく，一般性をもった問題を解決するために次の3つのタイプの文節に対する規則を新たに加えた．
並列構造の検出では主従関係にある述語の接続は対象としていない．
これは，主節と従属節の間には類似性が存在するとはいえないためである．
そのため，文を簡単化した各部分の中には主従関係の述語の接続が含まれている．
実際に文を解析した結果をみてみると，これらのうち条件を示す述語(「〜すれば，」など)と因果関係を示す述語(「〜するので，」など)が読点を伴っている場合，非常に意味的な区切りが強いことが分かった．
そこで，この種の述語を区切り文節とし，その係り先は係り得る最も近い文節ではなく最も遠い文節とする．
文が読点で区切られるのは，そこに意味的な区切りが存在することを示すためであり，それを伴った文節が少し離れた文節に係っていくことを示していると考えられる．
そこで読点を伴う文節は，係り得る最初の文節を飛び越して2番目の文節に係るとする．
ただし，次の場合にはこの規則は適用しない．
係り得る最初の文節が上述の区切り文節である場合．
「[MATH]〜することが多い．
」，「[MATH]〜であると考える．
」などの表現で下線部分が係り得る最初の文節である場合．
このような表現では，下線部分の述語までが意味的なまとまりをなしており，文末の述語は付随的であると考えられるため，下線部分の述語を飛び越して文末の述語に係るとはしない．
この下線部分の述語も，受けの文節としては区切り文節であるとする．
係り得る最初の文節が並列構造をまとめた並列節点の文節である場合．
並列構造外の文節が並列節点(並列のキー文節と終点文節)に係る場合には，かなり離れた文節に係ることになるため．
係り得る文節が解析対象範囲内に1つしかない場合．
助詞「は」は文(あるいは文を簡単化したときのある部分)の主題を示すので，これを伴う文節に対しては係り得る最も近い文節に係るという規則は当てはまらない．
その係り先は区切り文節との相対的関係で微妙であるが，実際の文解析の結果から次のような規則を用いることにした．
なお，係り受け解析の対象範囲内の最後の述語も区切り文節とする．
助詞「は」を伴い読点を伴わない場合:
最も近い区切り文節に係るとする(図[REF_fig:HA](a))．
助詞「は」と読点を伴う場合:
最も遠い区切り文節に係るとする(図[REF_fig:HA](b))．
ただし，その文節に付属語が全て同じである文節が係っていて，かつ，その前にも区切り文節が存在する場合には前の区切り文節に係るとする(図[REF_fig:HA](c))．
例えば，例文4 (図[REF_fig:kakari_rei5])の場合，「ミハイロフらが，」は読点を伴うために，係り得る最初の文節「追究する」ではなく2番目の「与えた」に係る．
また，「用語は」は助詞「は」を伴うので係り先として区切り文節を探し，その結果，文末の文節「言葉である．
」に係ることになる．
例文5 (図[REF_fig:kakari_rei6])の場合は，文節「とらえられるので，」が区切り文節であるため，助詞「は」を伴う文節「内容は」はこの区切り文節に係り，この区切り文節自身は係り得る最も遠い文節である「分野である．
」に係る．
これらの規則でうまく扱うことができない問題については[REF_sec:evaluation]章で議論する．
前節で述べた並列構造の検出方法ではその前部がどこから始まるかについて正確な情報が得られないので，係り受け解析の段階でこれを明らかにする必要がある．
そこで，``検出した並列構造の起点文節より前の文節であっても，その並列構造内の文節に係ることが{妥}{当}{で} {あ}{る}文節は並列構造に含まれるとみなす''という考え方で並列構造の範囲の延長を行なう．
延長を行なうのは，述語を含む並列構造，すなわち述語並列の場合と連体修飾節を含む名詞並列の場合である．
そのような並列構造の場合，その前部の係り受け解析を，並列構造として検出された範囲内だけでなくさらにその前の部分に対しても延長して行なう．
ただし，延長の解析は次のように行なう．
解析対象の文節が読点あるいは助詞「は」を伴う場合は，延長の処理を終了する．
そのような文節は，並列構造との間に意味的な区切りがあり，並列構造内部の文節に係るのではなく，並列構造全体，あるいはさらに後ろの文節に係ると考えられるからである．
並列のキーを係り先の対象から外して係り受け解析を行ない，係り先がない場合には，延長の処理を終了する．
並列のキーを係り先の対象から外すのは，もし並列のキーに係るのであれば，それと対応している終点文節にも係ると考えられ，そのような係り受け関係はその上のレベルの係り受け解析において並列節点との関係として扱うからである．
たとえば，図[REF_fig:suitei_rei]で示した例文1では，起点文節の前の「その」は「可能性を」に係ると考えて並列構造に含まれるとし，助詞「は」および読点を伴う「解消するためには，」のところで延長の処理を終了する．
最終的に得られる依存構造木を図[REF_fig:kakari_rei1]に示す．
なお，延長を考える並列構造が強並列の場合は，並列構造内の前部と後部の各文節が強く対応しているので，延長する部分の文節が上述のように前部の文節だけに係ると考えるのではなく，前部と後部の対応する文節の対に係ると考える．
この処理は，並列構造後部において省略された修飾語を補間する処理であるとみなすこともできる．
たとえば，[REF_subsec:heiretu_kenshutu]節で示した例文2では，「その開発の」は「助け」と「妨げ」の両方に，「コンピューターのアーキテクチャが」は「(助けに)なる」と「(妨げに)なる」の両方に係るとする(図[REF_fig:kakari_rei2])．
これまで説明してきた規則によって並列構造の各部分を係り受け解析すると，ある文節に対してその係り得る文節がなくなり，解析が失敗するということがある．
このような失敗は，もともと1つの依存構造木にまとめることができない不完全な部分が並列している場合(このような並列構造を部分並列とよぶことにする)と，検出された並列構造の範囲が誤りである場合に起こる．
部分並列は，前部と後部の述語が等しい述語並列において前部の述語が省略された構造である(図[REF_fig:incom_new](a)(b))．
そこで，次の2つの条件をみたす場合にその並列構造を部分並列とみなす(図[REF_fig:incom_new](c))．
並列構造の前部と後部の両方で(3つ以上の部分からなる並列構造ではその各部分で)係り受け解析が失敗する．
係り先がない文節の付属語がすべて等しい．
たとえば，次の文の下線部分は部分並列である．
例文6:「図に示すように，電流源にpnpトランジスター，スイッチングにnpn
トランジスターを使用し，…」
部分並列の場合は，並列のキー，終点文節に加えて，係り先のない文節もいったん並列節点の子節点とする(図[REF_fig:incom_new](d))．
そして，次のレベルの解析において並列節点の係り先が明らかになった段階で，その係り先の文節を前部に対して補うことによって述語並列への変換を行う(図[REF_fig:incom_new](e))．
さらに，部分並列の並列のキー文節の助詞が省略されている場合は，終点文節の助詞によってそれを補間する．
例文6の場合，助詞「を」と述語「使用し」が補われる(図[REF_fig:kakari_rei4])．
係り受け解析が失敗し，上記の条件が成り立たない場合には，並列構造の検出が誤っていたと考え，並列構造の検出のやり直しを行なう．
係り受け解析の失敗が起こらないような並列構造を検出するために，その起点文節と終点文節の位置について次のような制限を与える．
並列のキーから文の先頭までを対象範囲として係り受け解析が可能かどうかを調べる．
ある位置で解析が失敗する場合は，並列構造の前部がそれよりも広い範囲になると必ず解析が失敗するので，起点文節の位置はその失敗した位置よりも後ろであるとする．
並列構造の後部として考えられるすべての範囲についてその中の係り受け解析が可能であるかどうかを調べ，可能でない場合はその範囲の末尾の文節が終点文節となることを禁止する．
並列構造の再検出を行なった場合は，並列構造間の関係を求める処理まで戻って解析をやり直す．
図[REF_fig:kakari_shuusei]に並列構造の再検出の例を示す．
図の中に示した表は，再検出する並列構造が係り受け解析可能であるためには，起点文節に対する制限はないが，終点文節は5番目の文節「文書処理とともに」か10番目の文節「なす．
」に限られることを示している．
