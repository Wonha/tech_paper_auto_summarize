はじめに
 \label{SEC::INTRO} 

テキスト中に出現する述語の格構造を認識する処理は述語
 項構造解析や格解析などと呼ばれ，計算機によるテキスト理解のための重要な1
 ステップである．しかし，格構造を表現する際に使用される``格''には，述語の
 出現形\footnote{本論文では，能動形，受身形，使役形など，述語が実際にテキ
 ストにおいて出現した形のことを出現形と呼ぶ．}に対する表層格や，能動形に
 対する表層格，さらには深層格など複数の表現レベルが存在し，どの表現レベル
 を用いるべきかは使用するコーパス\footnote{京都大学テキストコーパス
 \cite{TAG}では出現形の表層格情報，NAISTテキストコーパス\cite{Iida2007}で
 は能動形の表層格情報が付与されている．}やタスクにより異なっている．

 格構造を表層格で扱う利点としては，表層格はテキスト中に格助詞として明示的
 に出現することから``格''を定義する必要がないこと，述語ごとに取りうる格を
 コーパスから自動獲得することが可能なことなどが挙げられる．さらに，出現形
 に対する表層格で扱う利点としては，能動形では現れない使役文におけるガ格や
 一部の受身文のガ格を自然に扱えること，先行する述語のガ格の項が後続する述
 語でもガ格の項となりやすい\cite{Kameyama1986s,Nariyama2002s}などといった
 談話的な情報が自然に利用できることなどが挙げられる．特に後者はゼロ照応解
 析において重要な手掛りになることが知られており
 \cite{Iida2007T,Sasano2011}，ゼロ照応の解決も含む述語項構造解析の高精度
 化のためには，格構造を出現形の表層格で扱うのが望ましいと考えられる．

 一方，テキストの意味を考える上では，出現形に対する表層格解析では不十分な
 場合がある．
\begin{exe}
 \ex\label{EX::FRIEND} 私が知り合いに誘われた．
 \ex\label{EX::PARTY} 私がパーティーに誘われた．
\end{exe}
たとえば，(\ref{EX::FRIEND})，(\ref{EX::PARTY})のような文を考
 えると，出現形の表層格としては(\ref{EX::FRIEND})の「知り合い」と
 (\ref{EX::PARTY})の「パーティー」は同じニ格となっているが，前者は能動主
 体を表しており能動形ではガ格となるのに対し，後者は誘致先を表しており能動
 形においてもニ格となる．このような違いを認識することは情報検索や機械翻訳
 などといった多くの自然言語処理のアプリケーションにおいて重要となる
 \cite{Iida2007}．実際に，Google翻訳
 \footnote{http://translate.google.co.jp/, 2014年5月10日実施．}を用いてこ
 れらの文を英訳すると，(\ref{EX::FRIEND}$'$)，(\ref{EX::PARTY}$'$)に示すよ
 うにいずれの文もニ格が誘致先を表すものとして翻訳される．このう
 ち，(\ref{EX::FRIEND}$'$)に示した翻訳は誤訳であるが，これは
 (\ref{EX::FRIEND})の文と(\ref{EX::PARTY})の文におけるニ格の表す意味内容
 の違いを認識できていないため誤って翻訳されたと考えられる．

\begin{exe}
 \exp{EX::FRIEND} I was invited to an acquaintance. \label{EXE::FRIEND}
 \exp{EX::PARTY} I was invited to the party. \label{EXE::PARTY}
\end{exe}

 また，文(\ref{EX::BOTH})は(\ref{EX::FRIEND})，(\ref{EX::PARTY})の2文が表
 す内容を含意していると考えられるが，出現形に対する表層格解析だけではこれ
 らの含意関係を認識することはできない．このため，含意関係認識や情報検索な
 どのタスクでは，能動形に対する表層格構造や深層格構造といった，より深い格
 構造を扱うことが望ましいと言える．

\begin{exe}
 \ex 知り合いが私をパーティーに誘った．\label{EX::BOTH}
\end{exe}

 そこで，まず出現形における表層格の解析を行い，その結果をより深い格構造に
 変換することを考える．このような手順を用いることで，談話的な情報を自然に
 取り入れながら，含意関係認識や情報検索などのタスクにも有用な能動形格構造
 を扱うことができると考えられる．本研究ではこのうち特に受身形・使役形から
 能動形への格構造変換に焦点を当てる．

 受身形・使役形から能動形への格構造変換における格交替パターンの数は限定的
 であり人手で列挙することは容易である．しかし，文
 (\ref{EX::FRIEND})，(\ref{EX::PARTY})からも分かるように，述語と格が同じ
 であっても同一の格交替パターンとなるとは限らない．同様に，項とその格が同
 じであっても同一の格交替パターンとなるとは限らない．たとえば，文
 (\ref{EX::FRIEND})と(\ref{EX::AWARD})のニ格はいずれも「知り合い」である
 が，これらの文を能動形に変換した場合，文(\ref{EX::FRIEND})のニ格はガ格と
 なるのに対し，文(\ref{EX::AWARD})のニ格は能動形においてもニ格のままであ
 る．

\begin{exe}
 \ex 奨励賞が知り合いに贈られた．\label{EX::AWARD}
\end{exe}

 このため，受身形・使役形から能動形への格構造の変換を高精度に行うために
 は，述語・項・格の組み合わせごとに，どのような格交替パターンとなるかを記
 述した大規模な語彙知識が必要となると考えられる．そこで，本研究ではこのよ
 うな語彙知識を大規模コーパスから自動獲得する手法を提案する．具体的には，
 格交替のパターンの数が限定的であること，および，対応する受身文・使役文と
 能動文の格の用例や分布が類似していることに着目し，人手で記述した少数の格
 交替パターンとWebから自動構築した大規模格フレームを用いることで，受身文・
 使役文と能動文の表層格の対応付けに関する知識の自動獲得を行う．また，自動
 獲得した知識を受身文・使役文の能動文への変換における格変換タスクに適用す
 ることにより，その有用性を示す．

 本論文の構成は以下の通りである．まず，2節で関連研究について概観した後，3節
 で受身・使役形と能動形間の格の交替パターンについて，4節でWebから自動構築
 した大規模格フレームについてそれぞれまとめる．続いて5節で提案する格フレー
 ムの対応付け手法について説明し，6節では実験を通してその有効性を示す．最
 後に7節で本論文のまとめを記す．


 