2節で述べたように，既存手法を日本語の述部の同義判定にそのまま適用した場合，再現率もしくは精度に問題が出る．
そこで，本節では述部の同義性を正しく計算機で判別するために必要な情報を考察するため，述部の言語構造を言語学的な視点で分析する．
本稿の対象である述部は，(4)のように内容語と複数の機能語の集まりである「機能表現」(松吉他2007)で構成されている．
「／」は形態素の区切りを表す．
\enumsentence{捨て／【内容語】なく／て／は／いけ／ない【機能表現】}述部の主な意味は，動詞，形容詞，形容動詞，名詞などの内容語が担っており，機能表現は内容語で表現される意味に対し，時制（アスペクト），モダリティ，否定などの意味を加えている(Narrog 2005; Portner 2005)．
ここで，述部の主な意味を担っている内容語の言語構造を考える．
図1はRamchand (2010, p. 4)から抜粋した動詞``run''の言語的情報を，複数の言語レベルに分類したものである．
図1の，``[MATH]dynamic''と``-telic''は，``run''という動詞そのものが，動作の変化を伴う動詞であるが([MATH]dynamic)，動作に終点がない動詞(-telic)であることを表している（Dowty (1979)の``Activities'',金田一(1976)の「継続動詞」を表している）．
図1が表すように，述部の意味を考えた場合，複数の言語レベルの要素が絡み合って意味を構成していることがわかる．
我々が知らない単語に出くわした場合，その単語の意味を理解するために，辞書を引いたり(Lexical-Encyclopedic information)，周辺単語を手掛かりに推測したり(Syntax, Context)，また見覚えのある単語であればその本来の意味から派生されそうな意味(Semantic)を考え，対象単語の言語情報をできるだけ集めて意味を理解する．
さらに，時制や否定，モダリティ表現なども手掛かりに，述部の意味を推測する．
つまり，図1の複数の言語的情報を埋めていくことで，意味を理解すると考えることができる．
計算機に意味を理解させるためには，これらの複数の言語的特徴を与えなくてはいけないと言える．
そこで，本稿では述部の言語情報を複数のレベルに分類し，同義述部の認識という観点で必要な情報を用いて，計算機に同義の述部を認識させる．
本稿では，述部の同義判定を行うために，4つの言語情報を素性とし，識別学習を用いて同義か否かを判定する．
処理の流れを図2に示す．
4つの言語情報は，「辞書定義文」，「用言属性」，「分布類似度」，「機能表現」である．
以下に素性の具体的な説明を行う．
述部の同義性を判別するためには，まず単語そのものの定義が必要となる(Lexical-Encyclopedic information)．
我々が，単語の意味を調べるために辞書を用いるように，本稿でも国語辞書の定義文からの情報を素性として用いる．
なお，国語辞書などの定義文は，言い換え研究においても有効性が確認されている．
（e.g.,土屋・黒橋2000;藤田・乾2001;鍜治，河原，黒橋，佐藤2003）
述部の同義性を判別するという目的で，辞書定義文を考察すると，2つの有益な特徴を見出すことができる．
1つ目は，同義の述部同士は，お互いの定義文内に現れやすいという点である．
これを，定義文の相互補完性とここでは呼ぶ．
下記は，同義述部のペアである「出来上がる」と「完成する」の定義文の一例である．
\enumsentence{ [出来上がる]
定義文：すっかりできる．
完成する．
} \enumsentence{ [完成する]
定義文：すっかりできあがること．
全部しあげること．
}「出来上がる」の意味を定義するために，同義の「完成する」という述部を用いており，同様に，「完成する」の意味を定義するために，同義の「できあがる（出来上がる）」という述部を用いている．
このように，同じ意味をあらわす述部同士は，お互いの定義文内に現れやすいという特徴がある．
そこで，2つの述部が与えられた際に，それぞれの述部に対して「相手述部の辞書定義文内に現れるか」という相互補完性の有無を第一の素性として用いる．
また，「プリンターが‐動かない」といった「項‐述部」の単位で同義判定を行うため，項（プリンター）もしくは項と同様の名詞クラスが相手の定義文に現れたか否かも素性として用いる．
名詞クラスは，日本語語彙大系(池原，宮崎，白井，横尾，中岩，小倉，大山，林1999)の一般名詞意味属性を用いる．
次に，意味が似ている述部同士は，定義文同士も似ているという特徴がある．
下記は，「高値だ」と「高い」という同義の述部の定義文の一例である．
\enumsentence{ [高い]
定義文：買うのに多額の金銭がかかる．
量や質にくらべて，値段が多い．
} \enumsentence{ [高値]
定義文：値段が高いこと．
高い値段．
} (7)，(8)が示すように，双方の定義文に「値段」という単語が含まれている．
そこで，これらの定義文同士の語彙の重なりを，定義文間の内容語の重なり数を用いて素性とする．
このように，同義判別に必要なLexical-encyclopedicな情報として，辞書定義文の相互補完性と定義文中の語彙の重なりを素性として用いる．
なお，「辞書定義文内に相互補完性があり，かつ片方の述部にのみに否定表現が入っているか否か」を区別する素性も作成した．
これは，本稿が機能表現を含んだ述部を対象としており，機能表現に含まれる否定表現が同義関係を逆転させてしまうために特別に組み込んだ素性である．
同義の述部は，辞書的な意味だけではなく，より抽象的な意味レベル(Semantics)でも共通性があると考えられる．
例えば(9)の同義述部は，日本語語彙大系(池原他1999)において以下のような用言属性を持つ．
\enumsentence{用言属性の例
a.出来上がる【生成】
b.完成する【生成】，【属性変化】}
双方とも，「新しく何かを作り上げる」事を意味する，「生成」という属性を共通に保持している．
そこで，同義判定に必要なSemanticレベルの素性として，日本語語彙大系(池原他1999)の用言属性を用いて，述部同士の抽象的な意味の重なりを抽出する．
日本語語彙大系の用言属性には，「生成」，「知覚状態」，「物理的移動」など36種類の用言属性ラベルがあり，それらが階層的に構造化されている（図3）．
これらの用言属性を用いて，次の2種類の素性を抽出する．
1つ目は，共通して保持している用言属性そのものである．
(9)の場合，「出来上がる」と「完成する」が共通して保持している「生成」という用言属性を素性として用いる．
2つ目は，用言属性の重なり度合いである．
(9b)が表すように，1つの述部が複数の用言属性を持つ場合がある．
複数の用言属性が付与されている場合，それらの重なりが大きければ大きいほど，2つの述部は似ていると考えられる．
また，重なっている用言属性がより具体的であればあるほど，より類似していると考えられる．
そこで，用言属性の重なり度というものを用いて，2つの述部の用言属性の共通性を計算する．
より詳細なレベルで用言属性が重なっている方がより共通性が高いと言えるため，重なり度の算出の際に，下層の用言属性に重みをつける．
重みは，ヒューリスティックに決定した．
下記が，用言属性の重なり度の算出方法である．
これらの用言属性を用いることで，辞書定義文など語義そのものの重なり以外に，抽象的な意味レベル(Semantics)での共通性を素性として用いることができる．
述部が同義であれば，それら述部が現れる文脈も類似していると考えられる．
Firth (1957)で述べられたように，対象の述部がどのような単語とともに現れるかが，述部の意味類似度を測るための重要な言語情報となる．
そこで，本稿ではこれらの周辺の項や文脈の情報を，分布類似度の値を用いて表す．
分布類似度の計算は，柴田・黒橋(2010)の手法を用いて，「項‐述部」もしくは「述部」を単位として行う．
柴田・黒橋(2010)は，「メモリを‐消費している」のような「項‐述部」，もしくは「消費する」という述部を単位(u)として，係り受け関係にある単語を素性に，分布類似度の計算を行っている．
素性は，対象の単位(u)に前出する素性をpre，対象の単位(u)に後続する素性をpostとして抽出する．
例えば，「ソフトが常駐し，メモリを消費している」というような文があった場合，「メモリを‐消費する」に対して，素性「常駐する：pre」を抽出する．
(10)が具体的な素性の種類である．
\enumsentence{柴田・黒橋(2010)の類似度計算の単位と素性（e.g.,メモリを‐消費する）}
分布類似度の計算は，Curran (2004)をもとに，下記のようにweight関数とmeasure関数に分けて行う．
weight関数は，素性ベクトルの値を適切な値に変換するためのものであり，柴田・黒橋(2010)では，下記のように定義した．
・weight関数
MIは，下記の式を用いて計算する．
P(u)は，素性ベクトルを作る対象単位(u)の出現確率を表す（すなわち，「項‐述部」また「述部」の出現確率）．
P(f)は，対象に対する素性(f)の出現確率を表す（すなわち，対象単位と係り受け関係にある格要素もしくは述部）．
P(u,f)は分布類似度計算の対象単位とその素性の共起確率である．
分布類似度の計算には，JACCARD係数とSIMPSON係数の平均値を用いる．
JACCARD係数は，分布類似度を計算する対象(u)（項‐述部もしくは述部）が共通して持つ素性(f)を，それぞれがもつ素性の和集合で割った値である．
SIMPSON係数は，2つの対象が共通して持つ素性を，2つの対象の間で素性の数が少ない方の素性の数で割った値である．
・measure関数
& \text{measure} = \frac{1}{2} (\text{JACCARD}+\text{SIMPSON})
&　\text{JACCARD} = \frac{|(\mathrm{u1}, \ast) \cap(\mathrm{u2}, \ast)|}{|(\mathrm{u1}, \ast) \cup(\mathrm{u2}, \ast)|}
&　\text{SIMPSON} = \frac{|(\mathrm{u1}, \ast) \cap(\mathrm{u2}, \ast)|}(|\mathrm{u1}, \ast|, |\mathrm{u2}, \ast|)
&　\text{where}
&　(\mathrm{u},\ast) \equiv{ f|\text{weight}(\mathrm{u},\mathrm{f})=1}
上記で算出された，述部および項‐述部を単位とした分布類似度を文脈(Context)の情報として用いる．
述部は「内容語」と「機能表現」から構成されている．
この，機能表現の意味そのものも述部の同義性に影響する．
\eenumsentence{
辞書に‐入って／い／ない【てい（る）：継続】【ない：否定】
辞書に‐載って／い／ない【てい（る）：継続】【ない：否定】
辞書に‐載る}
(11a)と(11b)は，機能表現「て／い／ない」を共有しており，同義述部になるが，機能表現を共有しない(11a)と(11c)は同義ではない．
このように，述部の機能表現が重なっているか否かにより，同義か否かが変わってくる．
そこで，松吉他(2007)の日本語機能表現辞書を用いて，述部の機能表現に「継続」や「否定」と言った意味ラベルを付与し，対象述部の機能表現の意味ラベルが重なっている場合に，その重なった意味ラベルを素性として抽出する．
またどの程度，機能表現の意味を共有しているかを表す指標として，意味ラベルの重なり率を素性として用いる．
意味ラベルの重なり率は，下記のように算出する．
以上のように，提案手法では，「辞書定義文」，「用言属性」，「分布類似度」，「機能表現」という4つの異なる言語的特徴を用いて，述部の同義判定を行う．
素性の一覧を表1に示す．
同義判定モデルの作成と提案手法の評価のため，「メモリを‐消費している」のような「項‐述部」を単位とした同義述部コーパスを作成した．
2010年4月のブログからランダム抽出した約810万文を対象に，係り受け関係にある「項‐述部」を抽出した．
述部は，Izumi, Imamura, Kikui, and Sato (2010)を用いて，述部の機能表現から終助詞など出来事の意味に影響を与えない表現を自動で削除し，単純な述部表現に正規化した．
項は，日本語語彙大系(池原他1999)の具体名詞に属する名詞のブログ出現頻度上位700語を使用した．
抽出した「項‐述部」の集合から，項をキーとして「同義」，「含意」，「推意」，「反義」，「その他」の意味関係に属する述部のペアを抽出した．
これらの意味関係を明確にするため，Chierchia and McConnell-Ginet (2000)を参考に，異なる2つの述部の意味関係を下記のように5種類に分類し，言語テストを作成した．
これに基づき作業者は「同義」，「含意」，「推意」，「反義」，「その他」を判断した．
（＃は「文法的には正しいが意味的におかしい文」を表す．
）
・同義(Mutual Entailment)
定義：表層が異なる2つの述部が同じ出来事(Event)を表している
言語テスト1：片方の述部を否定すると，意味が通じない
×「述部A，でも，述部Bという訳ではない」
×「述部B，でも，述部Aという訳ではない」
例：＃「土産を買った．
でも，（その土産を）購入したという訳ではない．
」
言語テスト2：片方の述部を推測表現（または疑問表現）にすると，意味が通じない
×「述部A，述部Bかも知れない／のか？」
×「述部B，述部Aかも知れない／のか？」
例：＃「土産を購入した．
（その土産を）買ったかも知れない／のか？」
・含意（Entailment，「衝動買いした」は「買った」を含意する）
定義：どちらか一方の述部がもう一方の述部の意味を包含していること
言語テスト：含意されている述部を否定することができない
×「述部A，でも，述部Bという訳ではない」
○「述部B，でも，述部Aという訳ではない」
例：＃「土産を衝動買いした．
でも，（その土産を）買ったという訳ではない．
」
○「土産を買った．
でも，衝動買いしたという訳ではない．
」
・推意（Implicature，「（土産が）お買い得だった」は「（土産を）買った」を推測させる）
定義：どちらか一方の述部によってもう一方の述部が「自然に推測される」
{言語テスト：もう一方の述部が自然に推測されるが，含意と異なり推測される述部を否定することができる}
○「述部A，でも，述部Bという訳ではない」
○「述部B，でも，述部Aという訳ではない」
例：○「土産がお買い得だった．
でも，買ったという訳ではない．
」
・反義(Contradiction)
定義：表層が異なる2つの述部において，両方の述部が真であることが成立しない
言語テスト：両方の述部を「でも」でつなげると，意味が矛盾する
×「述部A．
でも述部B」
×「述部B．
でも述部A」
例：＃「土産が多い．
でも，（その土産が）少ない．
」
・その他(Others)
定義：異なる2つの述部において意味的な関係がない
上記の言語テストをもとに，同義述部コーパスを作成した．
コーパスは，1次作業者が述部ペアの作成・意味関係の付与を行い，1次評価者が指針にあっているか否かを評価した．
2人が合意した意味関係を付与したデータを1次データとし，2次作業者と2次評価者（第一著者）が1次データの修正（2次作業者）とそのチェック（2次評価者）を行った．
その際，「推意」に関する述部ペアに関しては1次データでの一致率が良くなかったため，本研究のデータから排除した．
これは，推意の定義にある「自然に推測される」という判断に個人差があるからだと考えられる．
最終的には，「同義」，「含意」，「反義」，「その他」の意味関係に対し，4名の合意が取れた述部ペアを使用した．
下記が，作成されたデータの例と総数である．
\enumsentence{同義ペア（2,843ペア）
} \enumsentence{含意ペア（2,368ペア）
} \enumsentence{反義ペア（2,227ペア）
} \enumsentence{その他ペア（4,948ペア）
}
2節で述べたように，既存手法を日本語の述部の同義判定にそのまま適用した場合，再現率もしくは精度に問題が出る．
そこで，本節では述部の同義性を正しく計算機で判別するために必要な情報を考察するため，述部の言語構造を言語学的な視点で分析する．
本稿の対象である述部は，(4)のように内容語と複数の機能語の集まりである「機能表現」(松吉他2007)で構成されている．
「／」は形態素の区切りを表す．
\enumsentence{捨て／【内容語】なく／て／は／いけ／ない【機能表現】}述部の主な意味は，動詞，形容詞，形容動詞，名詞などの内容語が担っており，機能表現は内容語で表現される意味に対し，時制（アスペクト），モダリティ，否定などの意味を加えている(Narrog 2005; Portner 2005)．
ここで，述部の主な意味を担っている内容語の言語構造を考える．
図1はRamchand (2010, p. 4)から抜粋した動詞``run''の言語的情報を，複数の言語レベルに分類したものである．
図1の，``[MATH]dynamic''と``-telic''は，``run''という動詞そのものが，動作の変化を伴う動詞であるが([MATH]dynamic)，動作に終点がない動詞(-telic)であることを表している（Dowty (1979)の``Activities'',金田一(1976)の「継続動詞」を表している）．
図1が表すように，述部の意味を考えた場合，複数の言語レベルの要素が絡み合って意味を構成していることがわかる．
我々が知らない単語に出くわした場合，その単語の意味を理解するために，辞書を引いたり(Lexical-Encyclopedic information)，周辺単語を手掛かりに推測したり(Syntax, Context)，また見覚えのある単語であればその本来の意味から派生されそうな意味(Semantic)を考え，対象単語の言語情報をできるだけ集めて意味を理解する．
さらに，時制や否定，モダリティ表現なども手掛かりに，述部の意味を推測する．
つまり，図1の複数の言語的情報を埋めていくことで，意味を理解すると考えることができる．
計算機に意味を理解させるためには，これらの複数の言語的特徴を与えなくてはいけないと言える．
そこで，本稿では述部の言語情報を複数のレベルに分類し，同義述部の認識という観点で必要な情報を用いて，計算機に同義の述部を認識させる．
本稿では，述部の同義判定を行うために，4つの言語情報を素性とし，識別学習を用いて同義か否かを判定する．
処理の流れを図2に示す．
4つの言語情報は，「辞書定義文」，「用言属性」，「分布類似度」，「機能表現」である．
以下に素性の具体的な説明を行う．
述部の同義性を判別するためには，まず単語そのものの定義が必要となる(Lexical-Encyclopedic information)．
我々が，単語の意味を調べるために辞書を用いるように，本稿でも国語辞書の定義文からの情報を素性として用いる．
なお，国語辞書などの定義文は，言い換え研究においても有効性が確認されている．
（e.g.,土屋・黒橋2000;藤田・乾2001;鍜治，河原，黒橋，佐藤2003）
述部の同義性を判別するという目的で，辞書定義文を考察すると，2つの有益な特徴を見出すことができる．
1つ目は，同義の述部同士は，お互いの定義文内に現れやすいという点である．
これを，定義文の相互補完性とここでは呼ぶ．
下記は，同義述部のペアである「出来上がる」と「完成する」の定義文の一例である．
\enumsentence{ [出来上がる]
定義文：すっかりできる．
完成する．
} \enumsentence{ [完成する]
定義文：すっかりできあがること．
全部しあげること．
}「出来上がる」の意味を定義するために，同義の「完成する」という述部を用いており，同様に，「完成する」の意味を定義するために，同義の「できあがる（出来上がる）」という述部を用いている．
このように，同じ意味をあらわす述部同士は，お互いの定義文内に現れやすいという特徴がある．
そこで，2つの述部が与えられた際に，それぞれの述部に対して「相手述部の辞書定義文内に現れるか」という相互補完性の有無を第一の素性として用いる．
また，「プリンターが‐動かない」といった「項‐述部」の単位で同義判定を行うため，項（プリンター）もしくは項と同様の名詞クラスが相手の定義文に現れたか否かも素性として用いる．
名詞クラスは，日本語語彙大系(池原，宮崎，白井，横尾，中岩，小倉，大山，林1999)の一般名詞意味属性を用いる．
次に，意味が似ている述部同士は，定義文同士も似ているという特徴がある．
下記は，「高値だ」と「高い」という同義の述部の定義文の一例である．
\enumsentence{ [高い]
定義文：買うのに多額の金銭がかかる．
量や質にくらべて，値段が多い．
} \enumsentence{ [高値]
定義文：値段が高いこと．
高い値段．
} (7)，(8)が示すように，双方の定義文に「値段」という単語が含まれている．
そこで，これらの定義文同士の語彙の重なりを，定義文間の内容語の重なり数を用いて素性とする．
このように，同義判別に必要なLexical-encyclopedicな情報として，辞書定義文の相互補完性と定義文中の語彙の重なりを素性として用いる．
なお，「辞書定義文内に相互補完性があり，かつ片方の述部にのみに否定表現が入っているか否か」を区別する素性も作成した．
これは，本稿が機能表現を含んだ述部を対象としており，機能表現に含まれる否定表現が同義関係を逆転させてしまうために特別に組み込んだ素性である．
同義の述部は，辞書的な意味だけではなく，より抽象的な意味レベル(Semantics)でも共通性があると考えられる．
例えば(9)の同義述部は，日本語語彙大系(池原他1999)において以下のような用言属性を持つ．
\enumsentence{用言属性の例
a.出来上がる【生成】
b.完成する【生成】，【属性変化】}
双方とも，「新しく何かを作り上げる」事を意味する，「生成」という属性を共通に保持している．
そこで，同義判定に必要なSemanticレベルの素性として，日本語語彙大系(池原他1999)の用言属性を用いて，述部同士の抽象的な意味の重なりを抽出する．
日本語語彙大系の用言属性には，「生成」，「知覚状態」，「物理的移動」など36種類の用言属性ラベルがあり，それらが階層的に構造化されている（図3）．
これらの用言属性を用いて，次の2種類の素性を抽出する．
1つ目は，共通して保持している用言属性そのものである．
(9)の場合，「出来上がる」と「完成する」が共通して保持している「生成」という用言属性を素性として用いる．
2つ目は，用言属性の重なり度合いである．
(9b)が表すように，1つの述部が複数の用言属性を持つ場合がある．
複数の用言属性が付与されている場合，それらの重なりが大きければ大きいほど，2つの述部は似ていると考えられる．
また，重なっている用言属性がより具体的であればあるほど，より類似していると考えられる．
そこで，用言属性の重なり度というものを用いて，2つの述部の用言属性の共通性を計算する．
より詳細なレベルで用言属性が重なっている方がより共通性が高いと言えるため，重なり度の算出の際に，下層の用言属性に重みをつける．
重みは，ヒューリスティックに決定した．
下記が，用言属性の重なり度の算出方法である．
これらの用言属性を用いることで，辞書定義文など語義そのものの重なり以外に，抽象的な意味レベル(Semantics)での共通性を素性として用いることができる．
述部が同義であれば，それら述部が現れる文脈も類似していると考えられる．
Firth (1957)で述べられたように，対象の述部がどのような単語とともに現れるかが，述部の意味類似度を測るための重要な言語情報となる．
そこで，本稿ではこれらの周辺の項や文脈の情報を，分布類似度の値を用いて表す．
分布類似度の計算は，柴田・黒橋(2010)の手法を用いて，「項‐述部」もしくは「述部」を単位として行う．
柴田・黒橋(2010)は，「メモリを‐消費している」のような「項‐述部」，もしくは「消費する」という述部を単位(u)として，係り受け関係にある単語を素性に，分布類似度の計算を行っている．
素性は，対象の単位(u)に前出する素性をpre，対象の単位(u)に後続する素性をpostとして抽出する．
例えば，「ソフトが常駐し，メモリを消費している」というような文があった場合，「メモリを‐消費する」に対して，素性「常駐する：pre」を抽出する．
(10)が具体的な素性の種類である．
\enumsentence{柴田・黒橋(2010)の類似度計算の単位と素性（e.g.,メモリを‐消費する）}
分布類似度の計算は，Curran (2004)をもとに，下記のようにweight関数とmeasure関数に分けて行う．
weight関数は，素性ベクトルの値を適切な値に変換するためのものであり，柴田・黒橋(2010)では，下記のように定義した．
・weight関数
MIは，下記の式を用いて計算する．
P(u)は，素性ベクトルを作る対象単位(u)の出現確率を表す（すなわち，「項‐述部」また「述部」の出現確率）．
P(f)は，対象に対する素性(f)の出現確率を表す（すなわち，対象単位と係り受け関係にある格要素もしくは述部）．
P(u,f)は分布類似度計算の対象単位とその素性の共起確率である．
分布類似度の計算には，JACCARD係数とSIMPSON係数の平均値を用いる．
JACCARD係数は，分布類似度を計算する対象(u)（項‐述部もしくは述部）が共通して持つ素性(f)を，それぞれがもつ素性の和集合で割った値である．
SIMPSON係数は，2つの対象が共通して持つ素性を，2つの対象の間で素性の数が少ない方の素性の数で割った値である．
・measure関数
& \text{measure} = \frac{1}{2} (\text{JACCARD}+\text{SIMPSON})
&　\text{JACCARD} = \frac{|(\mathrm{u1}, \ast) \cap(\mathrm{u2}, \ast)|}{|(\mathrm{u1}, \ast) \cup(\mathrm{u2}, \ast)|}
&　\text{SIMPSON} = \frac{|(\mathrm{u1}, \ast) \cap(\mathrm{u2}, \ast)|}(|\mathrm{u1}, \ast|, |\mathrm{u2}, \ast|)
&　\text{where}
&　(\mathrm{u},\ast) \equiv{ f|\text{weight}(\mathrm{u},\mathrm{f})=1}
上記で算出された，述部および項‐述部を単位とした分布類似度を文脈(Context)の情報として用いる．
述部は「内容語」と「機能表現」から構成されている．
この，機能表現の意味そのものも述部の同義性に影響する．
\eenumsentence{
辞書に‐入って／い／ない【てい（る）：継続】【ない：否定】
辞書に‐載って／い／ない【てい（る）：継続】【ない：否定】
辞書に‐載る}
(11a)と(11b)は，機能表現「て／い／ない」を共有しており，同義述部になるが，機能表現を共有しない(11a)と(11c)は同義ではない．
このように，述部の機能表現が重なっているか否かにより，同義か否かが変わってくる．
そこで，松吉他(2007)の日本語機能表現辞書を用いて，述部の機能表現に「継続」や「否定」と言った意味ラベルを付与し，対象述部の機能表現の意味ラベルが重なっている場合に，その重なった意味ラベルを素性として抽出する．
またどの程度，機能表現の意味を共有しているかを表す指標として，意味ラベルの重なり率を素性として用いる．
意味ラベルの重なり率は，下記のように算出する．
以上のように，提案手法では，「辞書定義文」，「用言属性」，「分布類似度」，「機能表現」という4つの異なる言語的特徴を用いて，述部の同義判定を行う．
素性の一覧を表1に示す．
同義判定モデルの作成と提案手法の評価のため，「メモリを‐消費している」のような「項‐述部」を単位とした同義述部コーパスを作成した．
2010年4月のブログからランダム抽出した約810万文を対象に，係り受け関係にある「項‐述部」を抽出した．
述部は，Izumi, Imamura, Kikui, and Sato (2010)を用いて，述部の機能表現から終助詞など出来事の意味に影響を与えない表現を自動で削除し，単純な述部表現に正規化した．
項は，日本語語彙大系(池原他1999)の具体名詞に属する名詞のブログ出現頻度上位700語を使用した．
抽出した「項‐述部」の集合から，項をキーとして「同義」，「含意」，「推意」，「反義」，「その他」の意味関係に属する述部のペアを抽出した．
これらの意味関係を明確にするため，Chierchia and McConnell-Ginet (2000)を参考に，異なる2つの述部の意味関係を下記のように5種類に分類し，言語テストを作成した．
これに基づき作業者は「同義」，「含意」，「推意」，「反義」，「その他」を判断した．
（＃は「文法的には正しいが意味的におかしい文」を表す．
）
・同義(Mutual Entailment)
定義：表層が異なる2つの述部が同じ出来事(Event)を表している
言語テスト1：片方の述部を否定すると，意味が通じない
×「述部A，でも，述部Bという訳ではない」
×「述部B，でも，述部Aという訳ではない」
例：＃「土産を買った．
でも，（その土産を）購入したという訳ではない．
」
言語テスト2：片方の述部を推測表現（または疑問表現）にすると，意味が通じない
×「述部A，述部Bかも知れない／のか？」
×「述部B，述部Aかも知れない／のか？」
例：＃「土産を購入した．
（その土産を）買ったかも知れない／のか？」
・含意（Entailment，「衝動買いした」は「買った」を含意する）
定義：どちらか一方の述部がもう一方の述部の意味を包含していること
言語テスト：含意されている述部を否定することができない
×「述部A，でも，述部Bという訳ではない」
○「述部B，でも，述部Aという訳ではない」
例：＃「土産を衝動買いした．
でも，（その土産を）買ったという訳ではない．
」
○「土産を買った．
でも，衝動買いしたという訳ではない．
」
・推意（Implicature，「（土産が）お買い得だった」は「（土産を）買った」を推測させる）
定義：どちらか一方の述部によってもう一方の述部が「自然に推測される」
{言語テスト：もう一方の述部が自然に推測されるが，含意と異なり推測される述部を否定することができる}
○「述部A，でも，述部Bという訳ではない」
○「述部B，でも，述部Aという訳ではない」
例：○「土産がお買い得だった．
でも，買ったという訳ではない．
」
・反義(Contradiction)
定義：表層が異なる2つの述部において，両方の述部が真であることが成立しない
言語テスト：両方の述部を「でも」でつなげると，意味が矛盾する
×「述部A．
でも述部B」
×「述部B．
でも述部A」
例：＃「土産が多い．
でも，（その土産が）少ない．
」
・その他(Others)
定義：異なる2つの述部において意味的な関係がない
上記の言語テストをもとに，同義述部コーパスを作成した．
コーパスは，1次作業者が述部ペアの作成・意味関係の付与を行い，1次評価者が指針にあっているか否かを評価した．
2人が合意した意味関係を付与したデータを1次データとし，2次作業者と2次評価者（第一著者）が1次データの修正（2次作業者）とそのチェック（2次評価者）を行った．
その際，「推意」に関する述部ペアに関しては1次データでの一致率が良くなかったため，本研究のデータから排除した．
これは，推意の定義にある「自然に推測される」という判断に個人差があるからだと考えられる．
最終的には，「同義」，「含意」，「反義」，「その他」の意味関係に対し，4名の合意が取れた述部ペアを使用した．
下記が，作成されたデータの例と総数である．
\enumsentence{同義ペア（2,843ペア）
} \enumsentence{含意ペア（2,368ペア）
} \enumsentence{反義ペア（2,227ペア）
} \enumsentence{その他ペア（4,948ペア）
}
