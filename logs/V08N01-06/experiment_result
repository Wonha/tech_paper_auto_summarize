品詞体系はJUMAN[CITE]のものを仮定した．
品詞は細分類まで考慮すると全部で53種類ある．
これに文節区切りを考慮すると推定するべき文法的属性の数は倍の106種類となる．
活用型，活用形は品詞が決まれば表記からほぼ一意に決めることができるので，モデルから確率的に推定することはしない．
したがって，式([REF_eq:p])の[MATH]は[MATH]から[MATH]までの107個の値をとるものとする．
実験には，京大コーパス(Version 2) [CITE]を用いた．
学習には1月1日と1月3日から8日までの7日分(7,958文)，試験には1月9日の1日分(1,246文)を用いた．
一文が与えられると，5文字以下のすべての文字列および5文字を越えるが辞書に登録されている文字列に対して，その文字列が形態素であるかないか，形態素である場合にはその文法的属性が何かを推定する．
5文字以下のすべての文字列としたのは，5文字を越えるような形態素は大抵，複合語あるいはカタカナ語であり，辞書に登録されていなければ，ほとんどの場合形態素ではないためである．
複合語は辞書に登録されているもの以外は5文字以下の文字列に分割できると仮定する．
また，カタカナ連続は辞書に登録されていない場合，ひとまとまりにして「未定義語(大分類)，カタカナ(細分類)」という品詞を持つものとして辞書に登録されていたものとして扱う．
ビタビアルゴリズムを用いて最適解を探索する際には，JUMANで定義されている連接規則を満たさなければならないという制約を加えた．
[REF_sec:model]章に述べたモデルでは，各文字列に対し品詞を付与する際，すべての品詞候補(53種類)のうち一文全体の確率を最大にするものが選ばれる．
このとき，必ずしも辞書に記述されている品詞が選ばれるとは限らない．
そこで，辞書に登録されている文字列については，その文字列に付与可能な品詞がすべて辞書に記述されていると仮定し，各文字列に対し品詞を付与する際には，辞書に記述されている品詞の中から選択するという制約を加える．
次に，実験に用いた素性を表[REF_table:feature]にあげる．
ここで素性とは，各素性名に対し素性値を展開したもののことである．
各々の素性は式([REF_eq:p])の素性関数[MATH]の[MATH]に対応する．
素性番号は便宜上設けたものであり，各素性名に対応している．
例えば，素性番号，素性名，素性値がそれぞれ「13」，「品詞(-1)(Major)」，「動詞」である素性および，「3」，「辞書(0)(Major)」，「形容詞」である素性に対応する素性関数はそれぞれ，式([REF_eq:g])および以下の式のように表わされる．
なお，式中では添字の[MATH]は省略している．
これらの式および表[REF_table:feature]で素性名に使われている「(0)」「(-1)」という表記はそれぞれ，着目している文字列，その文字列の左に連接する一形態素を意味する．
素性関数としては，素性とfutureの組が学習コーパスで3回以上観測されたもののみを用いた．
結果として実験に用いた素性は8,525個であった．
以下で，表[REF_table:feature]の各素性名，素性値について説明する．
(文字列)学習コーパスに形態素として現れた文字列のうち，頻度5以上のもの
(長さ)文字列の長さ
(文字種)文字の種類．
「(頭)」「(末尾)」はそれぞれ文字列の先頭と末尾の文字を表す．
文字列ではなく一文字の場合はともに同じ文字を指すものとする．
「文字種(0)(変化)」は先頭と末尾の文字の変化を表す．
「文字種(-1)(変化)」は左に連接する一形態素の末尾文字の文字種から着目している文字列の先頭文字の文字種への変化を表す．
例えば，左に連接する一形態素が「先生」，着目している文字が「に」の場合，素性値は「漢字[MATH]平仮名」と表す．
(辞書) JUMANの辞書を用いる．
この辞書に登録されている異なり形態素数は約20万個である．
Major，MinorはそれぞれJUMANの品詞大分類と細分類に対応する．
Major&MinorはMajorとMinorの可能な組み合わせである．
着目している文字列が辞書に登録されている場合，辞書に記述されている品詞の情報を素性として利用する．
複数の品詞を持つものとして登録されている場合にはそれぞれを素性として用いたときに形態素モデルから推定される確率が一文全体で最大となるものを採用する．
その文字列が，連語辞書に登録されている形態素列の一番左の形態素の文字列である場合には，その文字列が連語の先頭の形態素であるという情報を付加したものを素性として利用する．
この場合，素性値としては「連語」という表記が付加されているものを用いる．
連語については文献[CITE]に詳しい説明がある．
未知語の性質を学習するために，学習コーパスにおいて各文字列に対し辞書引きをしたときに一回しか引かれなかったものは辞書になかったものとして学習する．
今回の実験ではそのような語の数は20,317個であった．
ちなみに，辞書引きされた語の延べ数は1,964,829個，異なり語の総数は60,908個であった．
このような学習方法をとることによって，辞書が充実すればその情報を反映できるとともに，辞書に依存し過ぎることなく未知語にも対処できると考えている．
(品詞) Major，MinorはそれぞれJUMANの品詞大分類と細分類に対応
(活用) Major，MinorはそれぞれJUMANの活用型，活用形に対応
(文節区切り)形態素の左側に文節区切りがあるかないか
パラメータの推定にはImproved Iterative Scaling (IIS)アルゴリズム[CITE]を用いた．
計算マシンとしてSun Enterprise 450 (400MHz，SunOS Release 5.6 Version)を用いたところ，推定に要した時間は二日程度であった．
形態素解析の結果を表[REF_Result]に示す．
ここで，再現率はコーパス中の全形態素に対して区切りと品詞(大分類のみ)を正しく推定できたものの割合を，適合率はシステムが推定した全形態素に対して区切りと品詞(大分類のみ)を正しく推定できたものの割合を求めたものである．
表中のFというのはF-measureのことで，以下の定義式により計算した．
表の各行にはそれぞれ，[REF_sec:exp_condition]節で述べた手法およびJUMANによる精度をあげた．
JUMANは単独では辞書に登録されていないカタカナ語に対し「未定義語」という品詞を付与するため，それによる誤りが多くなる．
ルールベースの構文解析システムKNP[CITE]は，JUMANに複数解の出力を許しその出力を入力とすると，構文解析の過程で品詞の曖昧性を解消し，未定義語も何らかの品詞に置き換えることができる．
そこで，JUMANとKNPで解析した結果も評価した．
表には+KNPと表記した．
表[REF_Result]にあげた形態素区切りと品詞大分類に対する推定精度は，我々の手法ではJUMAN+KNPよりも3%程度低かった．
その原因として学習コーパスの量，素性，コーパスにおける形態素の揺れなどが考えられる．
今回用いた学習コーパスは約8,000文と少なく，素性については文献[CITE]などで用いられているような組み合せの素性に相当するものはあまり用いていない．
利用可能なマシンのメモリ容量の都合上，今回は学習コーパスの量，素性の数ともにこれ以上増やすのは困難であったが，いずれ可能になるだろう．
次に形態素の揺れについてであるが，これは実験に用いた京大コーパスがJUMAN+KNPの解析結果を人手で修正したものであるということに起因していると思われる．
このことはJUMAN+KNPの出力の評価に有利に働いている．
例えば，最後が「者」で終わる形態素はテストコーパス中に153個あり，すべてJUMAN+KNPの出力と同じであった．
このうち我々のシステムの誤りは3個(約2%)であった．
コーパスには「生産(名詞)者(接尾辞)」と「消費者(名詞)」の違いなどの揺れがあり，このように区切りに一貫性のない場合，過学習にならないように学習するのは難しい．
揺れに関してはコーパス全体を通して他にも同様な例がいくつかある．
例えば，「芸術家(名詞)」と「工芸(名詞)家(接尾辞)」，「警視庁(名詞)」と「検察(名詞)庁(名詞)」，「現実的(形容詞)」と「理想(名詞)的(接尾辞)」などがそうである．
この揺れの問題を解決するためには，コーパス修正の研究がより活発に行なわれる必要がある．
一つの方法として，我々のモデルを用いる方法が考えられる．
学習したモデルを用いて学習コーパス中の各形態素の確率を再推定し，確率の低い部分に一貫性を欠いたものがある可能性が高いと推測する方法である．
今後，この方法を試してみたい．
辞書の情報，未知語の性質は，我々が実験で用いた素性に反映されている．
表[REF_table:feature]にあげた素性のうち，「文字列」「辞書」の素性が辞書の情報を，「長さ」「文字種」の素性が未知語の性質を反映する．
表[REF_table:feature]の右欄には，それぞれの素性を削除したときの解析精度と削除したことによる精度の増減を示した．
ほとんどの素性が精度向上に貢献しており，特に辞書情報の貢献度が高いことが分かる．
逆に辞書が解析結果に悪い影響を及ぼす例もある．
例えば，「／海／に／かけた／ロマンは／，／」「／荒波／に／負け／ない心／と／」(「／」は形態素区切り)といった形態素区切りが出力として得られることがある．
これは，漢字を使った表記「ロマン派」「内心」に加えて平仮名を使った表記「ロマンは」と「ない心」も名詞として辞書に登録されていたために生じた誤りである．
このような間違いをなくすためには，不自然な表記を辞書に登録しないようにする，あるいは，辞書の表記に使われる文字種の性質を学習する必要がある．
学習の際，一回しか辞書引きされなかった語は辞書に登録されていなかったものとして扱った．
このようにしたのは，テストコーパスを解析するときには未知語が多くなると予想されるため，学習の際にもそれと同じ状況に少しでも近付けようとしたためである．
ところが，実験後，学習コーパス，テストコーパスにおける未知語の割合を調べたところ，辞書に登録されていなかった語の数(見出し語の異なり数)の異なり形態素数に対する割合は，学習コーパスで26.6%(3,859/14,493)，テストコーパスで17.7%(901/5,093)であり，テストコーパスにおける未知語の割合の方が学習コーパスにおける割合より少ないことが分かった．
ちなみに，未知語の大部分は数詞およびカタカナで表記された名詞が占めていた．
そこで，辞書に登録されていた場合には辞書引きの頻度に関わりなくその情報をすべて学習に用いることにすると，精度は再現率95.78%，適合率95.38%，F-measure 95.58ポイントとなった．
これは表[REF_table:feature]にあげた精度よりわずかに良い結果である．
今回の実験では学習コーパスより未知語の割合が少ないコーパスに対して実験したためこのような結果となったが，本手法を学習コーパスよりも未知語の割合が多い分野に適用するときには我々がとった学習手法は有効ではないかと考えている．
その有効性を調べることは今後の課題である．
この節では，学習コーパスと解析精度の関係について考察する．
図[REF_fig:learning_curve]に学習コーパスとテストコーパスのそれぞれを解析した場合の学習コーパスの量と解析精度の関係をあげる．
図の横軸は学習コーパスの文数，縦軸はF-measureを表す．
学習コーパスの解析には基本的に京大コーパスの1月1日の一日分を用いた．
学習曲線(図[REF_fig:learning_curve])を見ると，わずかではあるが増加する傾向にある．
したがって，学習コーパスの量が増えればもう少し精度の向上が期待できそうである．
我々の手法は，未知語に対しても前後の形態素のつながりから形態素と認定でき，適切な品詞を付与することができる．
例えば，「漱石」や「露伴」はJUMANの辞書には登録されていないため，JUMAN+KNPでは「漱(名詞)石(名詞)」「露(副詞)伴(名詞)」のように解析されるのに対し，我々のシステムではどちらも正しく名詞であると解析される．
この場合は，細分類も正しく人名であると解析できた．
このような固有名詞などは未知語になることが多い．
そこで，未知語(辞書にも素性にもなかった語)に対する再現率を調査した．
結果を表[REF_Result2]にあげる．
表には品詞細分類まで正しい場合に正解とするという基準で求めた再現率もあげた．
この基準で求めた我々の手法の精度はJUMAN+KNPに比べて10%程度良かった．
この結果は我々のモデルでは未知語，特に固有名詞や人名，組織名，地名に関する語に対する学習が比較的にできていることを示していると考えて良いだろう．
さらに，固有表現に関する情報を素性として利用した場合の実験を行なった．
ここで固有表現とは，人名，組織名，地名など特定の事物を示す表現のことである．
これらの表現は特に未知語になりやすい．
固有表現に関する情報は，固有表現にSGML形式のタグを付与したコーパスから抽出した．
このようなコーパスとしては，CRL(郵政省通信総合研究所)固有表現データ，IREX-NE予備試験トレーニングデータ，IREX-NE予備試験データ，IREX-NE本試験逮捕トレーニングデータなど(合計約12,000文)[CITE]がある．
これをJUMANを用いて形態素解析した結果から，固有表現を構成する形態素あるいは固有表現の前後の形態素の文字列として5回以上出現したもの2,279個を抽出し，素性として追加した．
実験結果を表[REF_Result2]の二行目(本手法+NE)にあげる．
未知語に対する再現率は表[REF_Result2]に本手法としてあげた精度より約2%良くなっている．
テストコーパスに対する精度は再現率95.93%，適合率95.12%，F-measure 95.52ポイントであった．
これは表[REF_Result]にあげた本手法の精度よりもわずかに良い．
これらの結果から，未知語になりやすい文字列を選択して素性として利用すると全体の精度が良くなるだけでなく，未知語に対する再現率も良くなることが分かる．
