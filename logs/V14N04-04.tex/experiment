\section{実験}

提案手法によって解析した構文・述語項構造の評価実験を行った．各パラメータ
は表\ref{Table::ParameterEstimation}のリソースから最尤推定によって計算し
た．これらのリソースは一度の処理で得られたものではなく，構文解析，格フレー
ム構築，格解析という順番で処理を行い，得られたものである．ここにおける格
解析は，シソーラスに基づく類似度を用いた格解析\cite{Kawahara2005}である．
格フレームはウェブテキスト約5億文から自動構築したものを用い，格解析済みデー
タはウェブテキスト約600万文を格解析することによって得たものを用いた．構
文構造の候補としては，ルールベースの構文解析器KNPが出力するすべての候補
を用いた．

\begin{table}[b]
\input{table2.txt}
\end{table}


\subsection{構文解析実験}

構文解析実験は，ウェブテキスト675文\footnote{これらの文は格フレーム構築と
モデル学習には用いていない．}を形態素解析器JUMANに通した結果を提案システ
ムに入力することによって行う．その675文には，京都テキストコーパスと同じ基
準で係り受けのタグ付けを行い，これを用いて係り受けの評価を行った．文末か
ら2つ目までの文節以外の係り受けを評価し，その評価結果を表
\ref{Table::Accuracy}に示す．表において，「CaboCha」とは，SVMに基づく統計
的構文解析器
    CaboCha\footnote{http://chasen.org/{\textasciitilde}taku/software/cabocha/ 
（形態素解析器JUMANの結果を入力できる最後のバージョンである
CaboCha 0.36を用いた．）}を表し，「KNP」とは，構文解析器KNPを表しており，い
ずれのシステムにも同じ形態素解析結果を入力している．係り受けの精度比較の
ため，「CaboCha」には「KNP」による文節区切りの結果を入力し，文節区切りも
一致させている．

\begin{table}[b]
\input{table3.txt}
\end{table}

\begin{table}[b]
\input{table4.txt}
\end{table}

表\ref{Table::Accuracy}より，提案手法は「CaboCha」や「KNP」より精度がよい
ことがわかる．マクネマー検定を行った結果，提案手法の精度は「CaboCha」と
「KNP」より有意($p < 0.05$)に上回っていることがわかった．また，表には，係
り受けのタイプごとの精度も併せて示してある．述語項構造と密接に関係してい
るのは，「体言$\rightarrow$用言」の係り受けであり，その中で中心的なのは
「係助詞句以外」である．その精度は「KNP」と比べて1.6\%向上しており，エラー
率は10.9\%減少している．これより提案手法が，述語項構造に関係する係り受け
の解析に有効であることがわかる．

表\ref{Table::GoodExamples}に，「KNP」では誤りになるが，提案手法によって
正解になった例を挙げる．四角形で囲まれた文節の係り先が×下線部から○下線
部に変化したことを示している．

また，以下に提案手法の主な誤り原因を挙げる．


\subsubsection*{係り受けの正解基準からのずれ}

提案モデルは，語彙的な選好を強く考慮して係り受けを決定する．しかし，解析
結果が，係り受けの正解基準とずれるために，誤りとなる場合がある．

\begin{itemize}
 \item \fbox{行政相談委員は，}~いつでも自宅でみなさんからのご相談に\qline{応じて
       いますが，}{×}この期間中は次のところで行政相談所を\qline{開きます．}{○}
\end{itemize}

この文において，「行政相談委員は，」の正解係り先は「開きます．」であるが，
提案手法は係り先を「応じていますが，」と解析し，誤りとなる．「開きま
す．」，「応じていますが，」のどちらも意味的には係り先として正しいと考え
られるが，基準としては文末の「開きます．」であるのでずれが生じる．このよ
うな問題を解決するには，省略関係の正解を考慮しながら評価を行う必要がある．


\subsubsection*{係り受けの制約}

KNPが出力している構文構造の候補中に，正解の構造が含まれていないことがある．

\begin{itemize}
 \item 本当に，美味い~\fbox{コーヒーを}~\qline{お探しの}{○}方にオススメの
\qline{サイトです．}{×}
\end{itemize}

この文において，「コーヒーを」の正解係り先は「お探しの」であるが，「お探
しの」は「コーヒーを」の係り先候補にはなっていないために解析が誤る．
「お探しの」のような体言の文節は，通常，連体修飾しか受けないためこのよう
な扱いになっているが，この問題を解決するためにはこのような制約を緩める，
より多くの候補を探索する必要がある．


\subsubsection*{各確率の重み付け}

提案モデルにおいて，各確率を重み付けすることは行っていない．実際には，読
点を考慮する確率と用例を生成する確率のどちらかを強く考慮するかの重みを最
適化した方がよい場合があり，機械学習手法を用いてそのような最適化を行うこ
とが考えられる．


\subsection{格解析実験}

述語項構造が正しく認識されているかを評価するために，係助詞句と被連体修飾
詞の格が正しく認識できているかどうかを調べた．ウェブテキスト215文に対して京
都コーパスと同様の基準で関係タグを付与し，それと自動解析結果を比較した．
精度を表\ref{Table::CaseAccuracy}に示す．ベースラインとは，類似度に基づ
く格解析手法\cite{Kawahara2005}である．この表より，ベースラインから大幅
に改善しており，提案手法が有効であることがわかる．

\begin{table}[b]
\input{table5.txt}
\end{table}


\subsection{格フレームのカバレージ}

解析における格フレームのカバレージを調べるために，格要素がその係り先用言
の格フレームの用例になっているかどうかを調べた．正しい係り受けのみを評価
したところ，60.7\%の格要素が格フレームの用例となっていた．比較のため，新
聞記事26年分の2,600万文から構築した格フレームで同様の実験を行ったところ，
35.1\%であった．これより，ウェブテキスト5億文から構築した格フレームは高
いカバレージをもっていることが確認された．

また，英語の統計的構文解析器において，テスト文中の2項間の依存関係が学習コー
パス中に存在する割合が約1.5\%であるという報告がある\cite{Bikel2004}．言語・
リソースの違いがあるので直接の比較はできないが，格フレームのカバレージは
非常に高いと思われる．


