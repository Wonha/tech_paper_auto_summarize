括弧付きコーパスからの文法抽出
\label{sec:文法抽出}
\subsection{EDRコーパスの概要}
\label{sec:EDRコーパスの概要}

本論文では，言語データとしてEDR日本語コーパスを使用する．
EDRコーパスに収録されている例文数は207,802である．
それぞれの文には補助情報として形態素情報，構文情報，意味情報が
付加されている．
本論文では形態素情報(特に品詞情報)と括弧付けによる構文構造を
利用する．
EDRコーパスの例文，及びそれに付加された
形態素情報・括弧付けによる構文構造の例を
図\ref{fig:構文構造の例1} に示す．

\begin{center}
  \atari(120,68)

  \figcap{EDRコーパスの構文構造}{fig:構文構造の例1}
\end{center}

EDRコーパスで使われている品詞は以下に挙げる15種類であり，
比較的粗い品詞体系になっている．
\begin{quote}
  名詞，動詞，形容詞，形容動詞，連体詞，
  副詞，接続詞，数字，感動詞，助詞，\\
  助動詞，語尾，接頭語，接尾語，記号
\end{quote}
ここで注意しなければならないのは，
``動詞''という品詞は動詞語幹に対して割り当てられ，
語尾には``語尾''という品詞が割り当てられている点である．
同様に，``形容詞''，``形容動詞''，``助動詞''という品詞は，
それぞれ形容詞語幹，形容動詞語幹，助動詞語幹に割り当てられている．
\subsection{ノードへの非終端記号の付与}
\label{sec:ノードへの非終端記号の付与}

図\ref{fig:構文構造の例1} は図\ref{fig:基本規則} のような
書き換え規則の集合とみなすことができる．
図\ref{fig:構文構造の例1} のような構文構造の各ノードに対して
適切なラベル(非終端記号)を割り当てることができれば，
図\ref{fig:基本規則} の規則はCFG規則となる．
このように，括弧付けによる構文構造の内部ノードに
適切なラベルを与えることは括弧付きコーパスからCFGを
抽出することと等価である．
そこで，\ref{sec:ラベルの決定方法} 節では構文構造の内部ノードに
与えるラベルを決定する方法について考える．

\begin{center}
  \small
  \smallskip
  \begin{tabular}[t]{ccccc}
    \inode{0} & $\rightarrow$ & \inode{1} & 記号 & \hspace{3zw} \\
    \inode{1} & $\rightarrow$ & \inode{2} & 助動詞 & \\
    \inode{2} & $\rightarrow$ & \inode{3} & \inode{4} & \\
    \inode{3} & $\rightarrow$ & 名詞 & 助詞 & \\
    \inode{4} & $\rightarrow$ & \inode{5} & \inode{14} & \\
    \inode{5} & $\rightarrow$ & \inode{6} & 助詞 & \\
    \inode{6} & $\rightarrow$ & \inode{7} & 名詞 & \\
    \inode{7} & $\rightarrow$ & \inode{8} & \inode{13} & \\
  \end{tabular}
  \hspace{5mm}
  \begin{tabular}[t]{ccccc}
    \inode{8}  & $\rightarrow$ & \inode{9}  & 助詞 & \\
    \inode{9}  & $\rightarrow$ & \inode{10} & 名詞 & \\
    \inode{10} & $\rightarrow$ & \inode{11} & 助詞 & \\
    \inode{11} & $\rightarrow$ & \inode{12} & 名詞 & \\
    \inode{12} & $\rightarrow$ & 接頭語 & 名詞 & \\
    \inode{13} & $\rightarrow$ & 動詞   & 語尾 & \\
    \inode{14} & $\rightarrow$ & 動詞   & 語尾 & 助動詞 \\
  \end{tabular}
  \bigskip

  \figcap{構文構造から得られる書き換え規則}{fig:基本規則}
\end{center}
\subsection{ラベルの決定方法}
\label{sec:ラベルの決定方法}

日本語の特徴として，前の要素が後ろの要素を修飾する，
すなわち句の主辞はその句における一番最後の要素である
ということが知られている\cite{mihara94a}．
例えば，図\ref{fig:基本規則} の中の
\begin{quote}
  \inode{12} ~~ $\rightarrow$ ~~ 接頭語 ~~ 名詞
\end{quote}
という規則について考えよう．[接頭語 名詞]という句の主辞は
句の一番最後にある``名詞''であると考えられる．
そこで，この主辞``名詞''に``句''をつけたラベル``名詞句''を
左辺のノード\inode{12}に与えることにする．
同様に，
\begin{quote}
  X ~~ $\rightarrow$ ~~ 形容詞句 ~~ 名詞句
\end{quote}
という規則が存在すると仮定し，
ラベルの決定されていないノードXに非終端記号を与える場合を考える．
この時，[形容詞句 名詞句]という句全体の主辞もまた
句の最後にある``名詞句''であると考えられる．
先ほどと異なるのは主辞となる記号が非終端記号であるという点である．
このような場合には，右再帰を用いて左辺ノードXにも主辞と同じ
``名詞句''というラベルを与える．

しかしながら，このようなラベルの与え方が常に適切であるわけではない．
\begin{itemize}
\item 主辞にならない品詞

  \quad 例えば，
  \begin{quote}
    X ~~ $\rightarrow$ ~~ 接続詞 ~~ 記号
  \end{quote}
  という規則について考える
  \footnote{
    この規則の右辺は「しかし，」などに対応している．
    }．[接続詞 記号]という句の1番最後にある
  品詞は``記号''であるが，
  この句の主辞は``記号''ではなく``接続詞''である．
  したがって，左辺のノードXに与えるラベルも``記号句''ではなく
  ``接続詞句''とすべきである．
  このように，``記号''は主辞にはならない品詞であるとみなし，
  句の一番最後にある要素が``記号''である場合には，
  その左隣にある要素を主辞とみなす．

\item ``語尾''と``助動詞''の取り扱い

  \quad 図\ref{fig:基本規則} の中の
  \begin{quote}
    \inode{13} ~~ $\rightarrow$ ~~ 動詞 ~~ 語尾
  \end{quote}
  という規則について考える．
  今までのやり方では，[動詞 語尾]という句の1番最後にある
  品詞は``語尾''であるので，左辺のノード\inode{13}に与える
  ラベルは``語尾句''となる．
  ところが，\ref{sec:EDRコーパスの概要} 節で述べたように，
  EDRコーパスにおいては，``語尾''という品詞は
  動詞の語尾にだけではなく形容詞・形容動詞・助動詞の
  語尾にも割り当てられている．
  したがって，このようなラベルの付け方では，
  \begin{quote}
    X ~~ $\rightarrow$ ~~ 形容詞 ~~ 語尾   \\
    X ~~ $\rightarrow$ ~~ 形容動詞 ~~ 語尾 \\
    X ~~ $\rightarrow$ ~~ 助動詞 ~~ 語尾
  \end{quote}
  といった規則の左辺にも``語尾句''というラベルを与えることになる．
  この場合，``語尾句''というラベルを割り当てられたノードが
  ``動詞''，``形容詞''，``形容動詞''，``助動詞''の
  どれを含んでいるのかを識別することができない．
  同様に，規則の右辺の一番最後にある要素が``助動詞''のときも，
  左辺に``助動詞句''というラベルを与えるのは好ましいことではない．
  このような理由から，句の一番最後にある要素が品詞``語尾''または
  ``助動詞''である場合には，その左隣にある要素から左辺に与える
  非終端記号を導出する．

\item 主辞が``助詞''の場合
  
  \quad 左辺に``助詞句''というラベルを与えることも考えられるが，
  わかりやすさのため``後置詞句''というラベルを与える．

\item 主辞が``接尾語''の場合

  \quad EDRコーパスにおいては，品詞が``接尾語''となる形態素は
  「月」，「日」，「メートル」など単位を表しているものが多く，
  他にも「区」，「氏」など全体として名詞句を形成するものが
  ほとんどである．
  そこで，主辞が``接尾語''のときには左辺ノードに``名詞句''
  というラベルを与える．
\end{itemize}

以上のようないくつかの例外処理が必要ではあるが，
基本的には句の一番最後にある要素を主辞とみなして，
それから左辺ノードに与えるラベルを決定することにする．

本節で提案した括弧付きコーパスから文法を抽出する
アルゴリズムを以下にまとめる．

\begin{flushleft}
  \vspace*{2mm}{\bf 【文法抽出アルゴリズム】}\vspace*{-3mm}
\end{flushleft}

\begin{enumerate}
\item
  構文構造の中で，まだラベルが割り当てられていなくて，
  かつその子ノードには全てラベルが割り当てられているノードを
  見つける．
  そのようなノードがなければ(3)へ．

\item
  (1)で見つけたノードが構文構造のルートである場合には，
  そのノードのラベルを開始記号Sとする．
  それ以外は【ラベル決定アルゴリズム】(後述)を用いて
  ノードに与えるラベルを決定する．
  (1)へ戻る．

\item
  構文構造の全ての内部ノードにはラベルが与えられているはずなので，それを
  \begin{center}
    ノード \quad → \quad 子ノードの列
  \end{center}
  という形に分解しCFG規則とする．
\end{enumerate}

\begin{flushleft}
  \vspace*{2mm}{\bf 【ラベル決定アルゴリズム】}\vspace*{-3mm}
\end{flushleft}

``記号'',``語尾'',``助動詞''以外の要素で子ノードの列の
最も右側にあるものを選び，それをXとする．
\begin{itemize}
\item
  Xが``助詞''の場合，左辺ノードに``後置詞句''というラベルを与える．

\item
  Xが``接尾語''の場合，左辺ノードに``名詞句''というラベルを与える．

\item
  Xが``助詞''，``接尾語''以外の品詞の場合，
  左辺ノードに``X句''というラベルを与える．
  例えば主辞が``名詞''の場合，``名詞句''というラベルを与える．

\item
  Xが非終端記号の場合，左辺ノードにも同じXという
  ラベルを与える．
  例えば主辞が``名詞句''の場合，左辺ノードにも
  同じ``名詞句''というラベルを与える．
\end{itemize}

\bigskip
上記の方法によって図\ref{fig:構文構造の例1} の内部ノードにラベルを
与えて抽出された文法規則を図\ref{fig:抽出された文法の例} に示す．
この操作をコーパスの全ての構文構造に対して行うことにより
CFGを抽出することができる．

\begin{center}
  \small
  \smallskip
  \begin{tabular}{lcll}
    S        & $\rightarrow$ & 助動詞句 & 記号 \\
    助動詞句 & $\rightarrow$ & 動詞句 & 助動詞 \\
    動詞句   & $\rightarrow$ & 後置詞句 & 動詞句 \\
    動詞句   & $\rightarrow$ & 動詞 & 語尾 \\
    動詞句   & $\rightarrow$ & 動詞 & 語尾 ~~~~ 助動詞 \\
    後置詞句 & $\rightarrow$ & 名詞 & 助詞 \\
    後置詞句 & $\rightarrow$ & 名詞句 & 助詞 \\
    名詞句   & $\rightarrow$ & 後置詞句 & 名詞 \\
    名詞句   & $\rightarrow$ & 接頭語 & 名詞 \\
    名詞句   & $\rightarrow$ & 動詞句 & 名詞 \\
    名詞句   & $\rightarrow$ & 名詞句 & 名詞 \\
  \end{tabular}

  \bigskip
  \figcap{抽出された文法規則}{fig:抽出された文法の例}
\end{center}

次に，本手法の文法抽出に要する計算量について考察する．
【文法抽出アルゴリズム】は，
「句の主辞はその句における一番最後の要素である」という
日本語の言語学的特徴を利用して括弧付けによる構文構造の
内部ノードに非終端記号を与えているため，
文法抽出に必要な計算量はコーパスの構文構造の内部ノード数に比例する．
また，長さ $n$ の文があったとき，
それに対する最も内部ノード数の多い構文構造は完全な二分木であり，
そのときの内部ノード数は $n-1$ である．
したがって，文法抽出に必要な計算量は入力文の長さ $n$ にも比例する．
このことは大規模なコーパスからの文法抽出を可能にしている．
これに対し，本研究と同じく括弧付きコーパスを用いてCFGを獲得する
Pereiraらの方法~\cite{pereira92a,schabes93b} では，
Inside-Outsideアルゴリズムによる規則の推定に
必要な計算量は$O(n)$ であり\footnote{
  厳密には，コーパスに付加された構文木が完全な二分木のときのみ
  $O(n)$ となり，それ以外の場合の計算量は$O(n)$ よりも多い．}
，しかもこの作業を反復しなければならない．
また，同じく括弧付きコーパスを利用した
横田らの方法~\cite{yokota96a} では，
内部ノードに与える非終端記号をランダムに変化させることを
繰り返すSimulated Annealing法を用いてCFG規則を獲得しているため，
内部ノードに決定的に非終端記号を与える本手法よりも
多くの計算量を必要とするのは明らかである．
\subsection{規則の確率の推定}
\label{sec:規則の確率の推定}

前節で提案した方法により括弧付きコーパスから抽出した
CFGに対して，各規則の確率を次のように推定した\cite{wetherell80a}．

\newpage
\begin{flushleft}
  \vspace*{2mm}{\bf 【規則の確率の推定】}\vspace*{-3mm}
\end{flushleft}

\begin{enumerate}
\item
  コーパスからCFG規則を抽出する際に，同じ規則を抽出した回数，
  すなわちその規則のコーパスにおける出現頻度を数える．
  規則 $r_i$ の出現頻度を $C(r_i)$ とする．

\item
  規則 $r_i \;:\; A \rightarrow \zeta_i$ の確率 $P(r_i)$ を
  次式により求める．
  \begin{equation}
    \label{eq:規則の確率}
    \hspace*{30mm}
    P(r_i) \quad = \quad 
      \frac{C(r_i)}
           {\displaystyle
            \sum_{\forall r_j \;:\; A \rightarrow \zeta_j} C(r_j)}
  \end{equation}
  すなわち $P(r_i)$ は，$r_i$ の出現頻度を，
  $A$ を左辺とする全ての規則の出現頻度の和で割った値とする．
\end{enumerate}

以上のように規則の確率を推定することにより，
括弧付きコーパスからPCFGを抽出することができる．
文法の改良
\label{sec:文法の改良}

サイズの小さなコーパスを用いて，
前節で説明した方法によりPCFGを抽出する予備実験を行ったところ，
以下のような問題点が明らかになった．

\begin{itemize}


\item 文法のサイズが大きい

  \quad EDRコーパスからランダムに選び出した3,000例文から
  PCFGを抽出したところ，文法規則の数は1,009となり，
  コーパスサイズに比べて非常に多くの文法規則が抽出されることがわかった．
  統語解析に要するコストを考えると，
  文法サイズが不必要に大きいことは望ましいことではない．

\item 生成される解析木の数が多い

  \quad 抽出したPCFGを用いて
  EDRコーパスからランダムに選び出した100例文\footnote{
    PCFGを抽出した3,000例文とは別の例文である．
    }
  を統語解析したところ，
  解析結果の候補として生成された解析木の数は
  平均 $1.5 \times 10^6$ となり，
  非常に多くの解析木を生成することがわかった．
  また，メモリ不足によって解析に失敗した文は69文あった．
  統語解析を意味解析や文脈解析などの前処理と考えるなら，
  統語解析結果の候補の数はできるだけ少ないことが望まれる．
\end{itemize}
本節ではこれらの問題への対応策について述べる．
\subsection{文法サイズの縮小}
\label{sec:文法サイズの縮小}

ここでは，コーパスから抽出した文法のサイズを縮小する方法を提案する．
文法サイズを縮小する方法としてまず考えられるのは，
出現頻度の低い規則を削除することである．
しかし，単純に出現頻度の低い規則を削除した場合，
その規則がコーパスの構文構造作成時の誤りによって生じた
不適切な規則であればよいが，
稀にしか現われない言語現象に対応した規則である場合には，
そのような規則を削除することにより文法の適用範囲(coverage)が狭くなる．
両者を出現頻度のみで区別することは難しく，出現頻度が低いからといって
その規則を削除することは必ずしも適切ではない．


予備実験で抽出した文法を調べたところ，
右辺長の長い規則が多く含まれていることがわかった．
予備実験で抽出した文法規則の右辺長の分布を
表\ref{tab:規則の右辺長の分布} に示す．
\begin{center}

  \tblcap{文法規則の右辺長の分布}{tab:規則の右辺長の分布}

  \small
  \begin{tabular}{|c||r|r|r|r|r|r|r|r|r|r|r|r|r|r|} \hline
    右辺長 &
    \makebox[4mm]{2}  & \makebox[4mm]{3}  & \makebox[4mm]{4} &
    \makebox[4mm]{5}  & \makebox[4mm]{6}  & \makebox[4mm]{7} &
    \makebox[4mm]{8}  & \makebox[4mm]{9}  & \makebox[4mm]{10} &
    \makebox[4mm]{11} & \makebox[4mm]{12} & \makebox[4mm]{13} &
    \makebox[4mm]{14} & \makebox[4mm]{16} \\ \hline
    規則数 &
    235 & 205 & 155 & 161 & 111 & 69 & 31 & 25 & 7 & 6 &
    1 & 1 & 1  & 1 \\ \hline
  \end{tabular}
  \bigskip
\end{center}
右辺長の長い規則が多く含まれていることがわかる．
そのような規則の一例を次に挙げる．
\begin{center}
  \begin{tabular}{ccl}
    動詞句 & $\rightarrow$ &
      動詞 ~ 語尾 ~ 名詞 ~ 助詞 ~ 形容動詞 ~ 語尾 ~ 動詞 ~ 語尾 \\
  \end{tabular}
\end{center}
これは，コーパスのある例文において，
\begin{center}
  [ ~~ 動詞 ~ 語尾 ~ 名詞 ~ 助詞 ~ 形容動詞 ~ 語尾 ~ 動詞 ~ 語尾 ~~ ]
\end{center}
といった括弧付けがなされているためである．
本来，その例文の構文構造を反映させるためには
もう少し細かい括弧付けが必要である．
しかし，EDRコーパスの中には多くの要素を1つの括弧で括ってしまう
例文も存在する．
このような右辺の長い規則の存在が文法サイズを大きくしている
原因の1つと考えられる．

右辺の長い規則の場合，その規則を除去しても文法中の
他の規則によって右辺の記号列を生成できる場合がある．
例えば，文法中に次のような規則があったとする．
\begin{center}
  \begin{tabular}{llcl}
    $r_b$ :    & 動詞句   & $\rightarrow$ &
      動詞句 ~ 後置詞句 ~ 動詞句 \\[-1mm]
    $r_{c1}$ : & 動詞句   & $\rightarrow$ &
      動詞 ~ 語尾 \\[-1mm]
    $r_{c2}$ : & 後置詞句 & $\rightarrow$ &
      名詞 ~ 助詞  \\[-1mm]
    $r_{c3}$ : & 動詞句   & $\rightarrow$ &
      形容動詞 ~ 語尾 ~ 動詞 ~ 語尾 \\
  \end{tabular}
\end{center}
これら4つの規則を用いれば，非終端記号``動詞句''から
``動詞~ 語尾~ 名詞~ 助詞~ 形容動詞 語尾~ 動詞~ 語尾''
という記号列を生成することが可能である．
このことを図式化したものを図\ref{fig:冗長規則の例1} に示す．
このように，ある規則を文法から除去しても，
他の規則によって右辺の記号列を生成できるような場合は
文法の生成能力は変わらない．

\begin{center}
  \bigskip
  \atari(115,36)
  \figcap{複数の規則を用いた記号列の展開}{fig:冗長規則の例1}
\end{center}

そこで，「冗長な規則」を次のように定義する．
\begin{center}
  \begin{minipage}{0.73\textwidth}
    ある規則 $r_i : A_i \rightarrow \zeta_i$ があるとき，
    文法内の $r_i$ 以外の規則を用いて
    非終端記号 $A_i$ を記号列 $\zeta_i$ に展開できるならば，
    すなわち $A_i \stackrel{*}{\rightarrow} \zeta_i$ である
    ならば，$r_i$ は冗長な規則である．
  \end{minipage}
\end{center}

\noindent
$\stackrel{*}{\rightarrow}$ は規則を1回以上適用することを示す．
冗長な規則を削除する前の文法によって受理される文は，
冗長な規則を削除した後の文法でも必ず受理される．
したがって，冗長な規則を自動的に検出しそれを削除すれば，
文法の適用範囲を狭めることなく文法サイズを縮小することができる．

ここで問題となるのは，冗長な規則のコーパスにおける出現頻度を
どのように取り扱うかということである．
本論文では，式(\ref{eq:規則の確率})に示した通り，
規則の出現頻度を規則の確率の推定に用いている．
そのため，冗長な規則を文法から削除する際に，
その出現頻度をも破棄してしまうのは望ましいことではない．
冗長な規則を削除するのは，その規則の右辺の記号列が
他の規則によって生成できることが保証されているからである．
したがって，削除された冗長な規則の出現頻度は，
その規則の右辺の記号列を生成するのに必要な
規則の出現頻度に加えるべきである．
例えば図\ref{fig:冗長規則の例1} において，
$r_a$ の右辺の記号列は$r_b$, $r_{c1}$, $r_{c2}$, $r_{c3}$ を
それぞれ1回ずつ適用することによって生成されるので，
$r_a$ を文法から除去する場合には，
$r_b$, $r_{c1}$, $r_{c2}$, $r_{c3}$ の出現頻度に
$r_a$ の出現頻度をそれぞれ加えるべきである．

さらに，冗長な規則の右辺を生成する規則の組\{$r_b$, $r_{ci}$\}
(図\ref{fig:冗長規則の例1} においては
\{$r_b$, $r_{c1}$, $r_{c2}$, $r_{c3}$\})が
複数ある場合には，冗長な規則$r_a$ の出現頻度を，
各組の$r_b$ に該当する規則の出現頻度で比例配分してから
各規則に足し合わせる．
また，ある規則$r_a$ が冗長であるかどうかを調べる際には
右辺長の長い規則から順番に行い，
\{$r_b, r_{ci}$\}が冗長であるかどうかについては考慮しない．
そして，$r_a$ が冗長であるとわかった際には，
\{$r_b, r_{ci}$\}の規則の出現回数を更新してから
次の規則が冗長であるかどうかを調べる．
したがって，例えば図\ref{fig:冗長規則の例1} の$r_{c3}$ が
冗長な規則である場合でも，$r_a$ の出現頻度は$r_{c3}$ の
出現頻度に一旦加えられた後，$r_{c3}$ の右辺の記号列を生成する
規則の出現頻度にも足し合わされる．

本節で提案した冗長な規則を検出しそれを削除するアルゴリズムを
以下にまとめる．

\begin{flushleft}
  \vspace*{2mm}{\bf 【冗長規則削除アルゴリズム】}
  \vspace*{-3mm}
\end{flushleft}

$R, ~ R_{new}, ~ C(r), ~ C_{new}(r)$ を次のように定義する．
\begin{center}
  \begin{tabular}{lcl}
    $R$          & ~$\cdots$~ &
      抽出した文法規則の集合 \\
    $C(r)$       & ~$\cdots$~ &
      $R$ 中の規則 $r$ の出現頻度 \\
    $R_{new}$    & ~$\cdots$~ &
      冗長な規則を削除して作られる新しい文法規則の集合 \\
    &&($R$ の中から冗長でない規則を取り出した集合) \\
    $C_{new}(r)$ & ~$\cdots$~ &
      $R_{new}$ の各規則の出現頻度 \\
  \end{tabular}
\end{center}

\begin{enumerate}
\item
  $R_{new}$ を空集合とする．

\item
  $R$ の中から右辺長の一番長い規則 $r_a$ を1つ抜き出す．

\item
  以下の条件を満たす規則の組
  \{$r_b^j$, $r_{c1}^j$, $\cdots$, $r_{cn}^j$\} を
  可能な限り見つける．
  \begin{quote}
    規則$r_b^j$ の右辺に含まれる非終端記号$B_i^j$ を，
    $B_i^j$ を左辺とする規則$r_{ci}^j$ の右辺の記号列$\beta_i^j$ に
    置き換えた記号列が$r_a$ の右辺の記号列と一致する．
  \end{quote}

  この条件を図示すると図\ref{fig:冗長な規則のチェック} のようになる．
  但し，図\ref{fig:冗長な規則のチェック} において，
  $A, \; B_i \in N ~，~~~ \alpha_i, \; \beta_i \in (N+T)*$である．
  ($N$ は非終端記号の集合，$T$ は終端記号の集合)

  \bigskip
  \begin{center}
    \atari(120,44)
    \figcap{冗長な規則のチェック}{fig:冗長な規則のチェック}
  \end{center}

  ※ このような規則の組が1つも見つからなかった場合($j=0$の場合)
  \begin{quote}
    $r_a$ は冗長な規則ではない．
    この規則を $R_{new}$ に加え，$C_{new}(r) = C(r)$ とする．
  \end{quote}
  ※ このような規則の組が1つ以上見つかった場合($j>=1$の場合)
  \begin{quote}
    $r_a$ は冗長な規則である．
    このときは $r_a$ を $R_{new}$ には加えず，
    出現頻度 $C(r)$ の更新のみを
    図\ref{fig:出現頻度の更新} のように行う．
    すなわち，見つけた規則の組の $r_b^j$ に該当する
    規則の出現頻度で $C(r_a)$ を比例配分し，
    それを $C(r_b^j)$, $C(r_{ci}^j)$ に加える．

    \bigskip
    \begin{center} $
      \begin{array}{c@{\hspace*{5mm}}c@{\hspace*{5mm}}ccc@{\hspace*{10mm}}l}
        C(r_b^j)    & \leftarrow & C(r_b^j)    & + &
          C(r_a) \times \frac{\displaystyle C(r_b^j)}
                             {\displaystyle \sum_j ~ C(r_b^j)} &
          for ~ all ~~~~ j \\[5mm]
        C(r_{ci}^j) & \leftarrow & C(r_{ci}^j) & + &
          C(r_a) \times \frac{\displaystyle C(r_b^j)}
                             {\displaystyle \sum_j ~ C(r_b^j)} &
          for ~ all ~~~ i, \; j \\
      \end{array} $
      \figcap{出現頻度の更新}{fig:出現頻度の更新}
      \bigskip
    \end{center}
  \end{quote}

\item
  $R$ が空なら終了．それ以外は(2)へ戻る．
\end{enumerate}

以上のように冗長な規則を削除することにより，
文法の適用範囲を狭めることなく文法サイズを縮小することができる．
この方法により文法サイズをどの程度縮小することができるのかについては
第\ref{sec:評価実験} 節の実験で評価する．
\subsection{解析木数の抑制}
\label{sec:解析木数の抑制}

ここでは，抽出した文法が生成する解析木の数を抑制するための
3つの方法を提案する．
\subsubsection{同一品詞列の取り扱い}
\label{sec:同一品詞列}

統語解析を行う文の中に同じ品詞が複数並んだ句が存在する
場合には，生成される解析木数が増大すると予想される．
例えば，``名詞''が3つ並んで構成される句の構造としては，
名詞間の修飾関係に応じて図\ref{fig:複合名詞の構造3} に
示す3つの構造が考えられる．
\begin{center}
  \atari(110,24)
  \figcap{``名詞''が3つ並んだ句の構造}{fig:複合名詞の構造3}
\end{center}

ところが，これらの構造の中から正しいものを選択するためには
何らかの意味的な情報が必要である\cite{kobayashi96a}．
したがって，意味的な情報を用いない統語解析の段階では，
これらの構造全てを解析結果の候補として生成する．
一般に，生成される解析木の数は組合せ的に増大するため，
同一品詞列に対して不必要な構造を無意味に生成することが
解析木数を増大させる原因の1つとなっている．
そこで統語解析の段階では，
図\ref{fig:複合名詞の構造3} のような構造を全て生成する代わりに，
図\ref{fig:右下がりの構造} のような右下がりの構造のみを
出力することにし，
この部分の係り受け解析については統語解析の後で
行われる意味解析に任せることにした．
また，他の非終端記号と区別するために，
図\ref{fig:右下がりの構造} の構造の内部ノードには
``X列''(例えばXが``名詞''の場合は``名詞列'')という
ラベルを与えることにした．

\begin{center}
  \atari(40,23)
  \figcap{右下がりの構造}{fig:右下がりの構造}
\end{center}

\noindent
このように同一品詞列に対する構造を一意に決めれば
解析結果として得られる解析木の数を減少させることができる．

同一品詞列に対して図\ref{fig:右下がりの構造} のような
右下がりの構造のみを生成するために，
\ref{sec:ラベルの決定方法} 節に述べた【文法抽出アルゴリズム】に，
次の手続きを最初のステップとして追加する．

\newpage
\begin{flushleft}
  {\bf 【文法抽出アルゴリズム】}
  \vspace*{-3mm}
\end{flushleft}

\begin{itemize}
\item[0.]
  構文構造において一種類の品詞のみを支配するノードがあれば，
  そのノードの下の構造を図\ref{fig:右下がりの構造} のような
  右下がりの構造に修正する．

\item[1.] $\sim$ 3. \hspace{5mm} 変更なし．
\end{itemize}

\bigskip
\noindent
また，【ラベル決定アルゴリズム】に次の手続きを追加する．
\begin{flushleft}
  {\bf 【ラベル決定アルゴリズム】}
  \vspace*{-3mm}
\end{flushleft}

\begin{itemize}
\item
  子ノードが品詞``X''または非終端記号``X列''のみによって
  構成されている場合には，\\
  ``Ｘ列''というラベルを与える．
\end{itemize}

\subsubsection{品詞の細分化}
\label{sec:品詞の細分化}

\ref{sec:EDRコーパスの概要} 節で述べたようにEDRコーパスで
使われている品詞は15種類である．
したがって，コーパスから抽出した文法に含まれる
終端記号(品詞セット)の数も15であるが，
これは統語解析を行うのに十分であるとは言えない。
例えば，コーパスの中に
\begin{center}
  [ ~ 名詞 ~ 助詞 ~ 名詞 ~ ] \qquad (e.g. ~ 記者席 / と / 傍聴席 ~)
\end{center}
という括弧付けが存在し，名詞並列を表わすCFG規則が抽出されたとする．
ところが，この規則は``名詞 助詞 名詞''という
品詞列に常に適用され，「地上 / に / 茅 (を出す)」といった
名詞並列でない入力に対しても，それが名詞並列であるといった
解析結果を出力してしまう．
これは全ての助詞に対して``助詞''という品詞を与えているためであり，
並列助詞と他の助詞に異なる品詞を与えれば，
このような誤った解析を回避することができる．

そこで，EDRコーパスに用いられている品詞を細分化して
生成される解析木の数を抑制することを試みた．
ここでは``記号''と``助詞''の2つの品詞に着目する．
\begin{itemize}
\item 品詞``記号''の細分化

  \quad EDRコーパスにおいては，
  記号には全て``記号''という品詞が割り当てられている．
  しかし，読点は文の切れ目を，句点は文の終りを表す特別な記号であり，
  他の記号とは区別するべきである．
  そこで，形態素「、」と「，」には``読点''という品詞を
  与えることにした．
  また，EDRコーパス中の例文の文末に現れる形態素のほとんどは
  「。」,「．」,「？」,「！」のいずれかであり，
  しかもこれらは文末以外に現れることはほとんどなかった．
  そこで，形態素「。」,「．」,「？」,「！」には
  ``文末記号''という品詞を与えることにした．
  また，これらの以外の形態素が文末に現れる文，
  及びこれらの形態素が文末以外の場所に現れる文，
  合計102文を例外としてコーパスから除去した．

\item 品詞``助詞''の細分化

  \quad EDRコーパスにおいては，
  助詞には全て``助詞''という品詞が割り当てられているが，
  その助詞の持っている機能により``格助詞'', ``係助詞''などの
  品詞を割り当てるべきである．
  しかしながら，助詞の中には2つ以上の機能を持っているものもあり，
  助詞の機能をその表層だけから判断することは一般に困難である．
  そこで，EDRコーパスにおいて``助詞''という品詞を
  割り当てられた形態素「Ｍ」については，
  その形態素毎に独自の品詞``助詞Ｍ''を割り当てることにした．
  例えば，形態素「は」が``助詞''という品詞を
  割り当てられていたならば，その品詞を``助詞は''に変更する．
\end{itemize}

PCFGの抽出は，まずコーパスの品詞を上記のように細分化し，
その後で\ref{sec:ラベルの決定方法} 節で提案した
【文法抽出アルゴリズム】 に従って行う．
また，品詞の細分化に伴い\ref{sec:ラベルの決定方法} 節の
【ラベル決定アルゴリズム】 を以下のように変更する．
下線を引いた部分が変更箇所である．

\begin{flushleft}
  \vspace*{2mm}{\bf 【ラベル決定アルゴリズム】}\vspace*{-3mm}
\end{flushleft}

\underline{``記号''，``語尾''，``助動詞''，``読点''，``文末記号''}
以外の要素で子ノードの列の最も右側にあるものを選び，それをXとする．
\begin{itemize}
\item
  Xが\underline{``助詞Ｍ''}の場合，
  左辺ノードに``後置詞句''というラベルを与える．

\item[~] (以下同じ)
\end{itemize}

\subsubsection{法・様相を表わす助動詞に対する構造の統一}
\label{sec:助動詞に関する修正}

文末に現われる助動詞は文全体の法や様態を表していることが多い．
例えば，EDRコーパス中の2つの例文
\begin{quote}
  \smallskip
  \begin{tabular}{ll}
    (a) & １０月中旬には、袋から顔を出しそうだ。 \\
    (b) & そのうえソ連は対越援助を削減しそうだ。 \\
  \end{tabular}
  \smallskip
\end{quote}
には「そう」と「だ」という2つの助動詞が含まれている．
これらは文全体にそれぞれ伝聞，断定の意味合いを
持たせる働きをしている．
ところがEDRコーパスにおいては，このような助動詞は，
文全体に付加している構造(図\ref{fig:助動詞の2つの構造} の(a))と，
文末の最後の要素に付加している構造(図\ref{fig:助動詞の2つの構造} の(b))
の2通りの構造で表されている．
このような2種類の構文構造を含むコーパスから抽出された文法は，
文末に助動詞を含む文に対して少なくとも
図\ref{fig:助動詞の2つの構造} のような2つの構造を生成し，
このことが解析木の数を増加させる一因となっている．


そこで，助動詞が文全体に付加された
図\ref{fig:助動詞の2つの構造} の(a)のような構造を，
図\ref{fig:助動詞の2つの構造} の(b)のような構造に修正してから
文法を抽出することにした．
助動詞に対する構造を統一することにより，
生成される解析木数の減少が期待できる．
統一後の構造として図\ref{fig:助動詞の2つの構造} の(a)ではなく
(b)を選択したのは，(a)のような構造からは
解析木数を著しく増加させる文法規則が抽出されるからである．
例えば，図\ref{fig:助動詞の2つの構造} の(a)のノード
\inode{1},\inode{2},\inode{3},\inode{8},\inode{10},\inode{12}には，
\ref{sec:ラベルの決定方法} 節の【文法抽出アルゴリズム】に従って
``動詞句''という非終端記号が割り当てられ，
その結果次のような規則が抽出される．
\begin{quote}
  動詞句 ~ $\rightarrow$ ~ 動詞句 ~ 助動詞  \qquad
  (``\inode{1} $\rightarrow$ \inode{2} 助動詞'' という枝分かれに対応)
\end{quote}

\begin{center}
  \atari(95,100)
  \figcap{助動詞に対する2つの構造}{fig:助動詞の2つの構造}
\end{center}

\noindent
ところが，この規則により``助動詞''がノード
\inode{8},\inode{10},\inode{12}に付加される
構造も生成されることになり，生成される解析木の数を増加させる
要因の1つとなっている．
これに対して，図\ref{fig:助動詞の2つの構造} の(b)のような構造からは
上述のような文法規則は抽出されないため，
無駄な解析木を生成することはない．
\vspace{-1mm}
