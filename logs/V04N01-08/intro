序論
\label{sec:序論}

近年，機械可読な言語データの整備が進んだことや，
計算機能力の向上により大規模な言語データの取り扱いが
可能になったことから，
自然言語処理に用いる様々な知識を言語データから
自動的に獲得する研究が盛んに行われている\cite{utsuro95a}．
大量の言語データから自動的に獲得した知識は，
人手によって得られる知識と比べて，
獲得した知識が人間の主観に影響されにくい，
知識作成のためのコストが低い，
知識の適用範囲が広い，
知識に何らかの統計情報を容易に組み込むことができる，
といった優れた特徴を持っている．

言語データから自動獲得される自然言語処理用知識には
様々なものがあるが，その中の1つとして文法がある．
文法には様々なクラスがあるが，
統語解析の際に最もよく用いられるのは文脈自由文法
(Context Free Grammar，以下CFGと呼ぶ)であり，
一般化LR法，チャート法などのCFGを用いた
効率の良い解析手法がいくつも提案されている．
ところが，人手によってCFGを作成する場合，
作成の際に考慮されなかった言語現象については，
それに対応する規則がCFGに含まれていないために解析することができない．
これに対して，コーパスから自動的にCFGを抽出することができれば，
コーパス内に現れる多様な言語現象を網羅できるだけでなく，
人的負担も極めて軽くなる．
また，CFGの拡張の1つとして，文法規則に確率を付与した
確率文脈自由文法(Probabilistic Context Free Grammar，以下PCFGと呼ぶ)
がある\cite{wetherell80a}．
PCFGは，生成する複数の解析結果の候補(解析木)に対して，
生成確率による順序付けを行うことができるという点で
CFGよりも優れている．
そこで本論文では，CFGをコーパスから自動抽出し，
その後各規則の確率をコーパスから学習することにより
最終的にPCFGを獲得する手法を提案する．

CFGまたはPCFGをコーパスから自動獲得する研究は過去にも
いくつか行われている．
文法獲得に利用されるコーパスとしては，
例文に対して何の情報も付加されていない平文コーパス，
各形態素に品詞が割り当てられたタグ付きコーパス，
内部ノードにラベルのない構文木が与えられた括弧付きコーパス，
内部ノードのラベルまで与えられた構文木付きコーパスなど，
様々なものがある．
以下ではまず，文法獲得に関する過去の研究が，どのような種類のコーパスから
どのような手法を用いて行われているのかについて簡単に概観する．

平文コーパスからの文法規則獲得に関する研究としては
清野と辻井によるものがある~\cite{kiyono93a,kiyono94a,kiyono94b}．
彼らの方法は，まずコーパスの文を初期のCFGを用いて統語解析し，
解析に失敗した際に生成された部分木から，
解析に失敗した文の統語解析を成功させるために
必要な規則(彼らは仮説と呼んでいる)を見つけ出す．
次に，その仮説がコーパスの文の解析を成功させるのに
どの程度必要なのかを表わす尤度(Plausibility)を計算し，
高い尤度を持つ仮説を新たな規則として文法に加える．
彼らは全ての文法規則を獲得することを目的としているわけではなく，
最初からある程度正しいCFGを用意し，それを新たな領域に
適用する際にその領域に固有の言語現象を取り扱うために
必要な規則を自動的に獲得することを目的としている．

タグ付きコーパスからCFGを獲得する研究としては
森と長尾によるものがある~\cite{mori95a}．
彼らは，前後に現われる品詞に無関係に出現する品詞列を
独立度の高い品詞列と定義し，コーパスに現われる
品詞列の独立度をn-gram統計により評価する．
次に，ある一定の閾値以上の独立度を持つ品詞列を
規則の右辺として取り出す．
また，取り出された品詞列の集合に対して，
その前後に現われる品詞の分布傾向を利用してクラスタリングを行い，
同一クラスタと判断された品詞列を右辺とする規則の左辺に
同一の非終端記号を与える．
そして，得られた規則のクラスタの中からコーパス中に
最もよく現れるものを選び，それらをCFG規則として採用すると同時に，
コーパス中に現われる規則の右辺の品詞列を左辺の非終端記号に置き換える．
このような操作を繰り返すことにより，最終的なCFGを獲得すると同時に，
コーパスの各例文に構文木を付加することができる．


括弧付きコーパスからCFGを獲得する研究としては，
まずInside-Outsideアルゴリズムを利用したものが挙げられる．
LariとYoungは，与えられた終端記号と非終端記号の集合から
それらを組み合わせてできる全てのチョムスキー標準形の
CFG規則を作り，それらの確率をInside-Outsideアルゴリズムによって学習し，
確率の低い規則を削除することにより新たなPCFGを獲得する方法を
提案した~\cite{lari90a}．
この方法では収束性の悪さや計算量の多さが問題となっていたが，
この問題を解決するために，PereiraらやSchabesらは
Inside-Outsideアルゴリズムを部分的に括弧付けされたコーパスに対して
適用する方法を提案している~\cite{pereira92a,schabes93b}．
しかしながら，局所解は得られるが最適解が得られる保証はない，
得られる文法がチョムスキー標準形に限られるなどの問題点も残されている．
一方，括弧付きコーパスから日本語のCFGを獲得する研究としては
横田らのものがある\cite{yokota96a}．
彼らは，Shift-Reduceパーザによる訓練コーパスの例文の
統語解析が最も効率良くなるように，コーパスの内部ノードに
人工的な非終端記号を割り当てることによりCFGを獲得する
方法を提案している．
これは組み合わせ最適化問題となり，Simulated Annealing法を用いる
ことにより解決を求めている．
1000〜7500例文からCFGを獲得し，それを用いた統語解析では
15〜47\%の正解率が得られたと報告している．
この方法では，CFG獲得の際に統計情報のみを利用し，
言語的な知識は用いていない．
しかしながら，
利用できる言語学的な知識はむしろ積極的に利用した方が，
文法を効率良く獲得できると考えられる．

構文木付きコーパスから文法を獲得する研究としては
SekineとGrishmanによるものがある~\cite{sekine95a}．
彼らは，Penn Tree Bank~\cite{marcus93a} の中から
SまたはNPを根ノードとする部分木を自動的に抽出する．
解析の際には，得られた部分木をSまたはNPを左辺とし
部分木の葉の列を右辺としたCFG規則に変換し，
通常のチャート法により統語解析してから，
解析の際に使用した規則を元の部分木に復元する．
得られた解析木にはPCFGと同様の生成確率が与えられるが，
この際部分木を構成要素としているため若干の
文脈依存性を取り扱うことができる．
しかしながら，SまたはNPがある記号列に展開されるときの
構造としては1種類の部分木しか記述できず，
ここでの曖昧性を取り扱うことができないといった問題点がある．
また，構文木付きコーパスにおいては，
例文に付加された構文木の内部ノードにラベル(非終端記号)が
割り当てられているため，
通常のCFGならば構文木の枝分れをCFG規則と
みなすことにより容易に獲得することができる．

大量のコーパスからPCFGを獲得するには，
それに要する計算量が少ないことが望ましい．
ところが，統語構造情報が明示されていない平文コーパスや
タグ付きコーパスを用いる研究においては，
それらの推測に要する計算コストが大きいといった問題がある．
近年では，日本においてもEDRコーパス~\cite{edr95a} といった
大規模な括弧付きコーパスの整備が進んでおり，
効率良くCFGを獲得するためにはそのような括弧付きコーパスの
統語構造情報を利用することが考えられる．
一方，括弧付きコーパスを用いる
研究\cite{pereira92a,schabes93b,yokota96a} においては，
平文コーパスやタグ付きコーパスと比べて統語構造の情報が
利用できるとはいえ，反復アルゴリズムを用いているために
文法獲得に要する計算量は多い．
本論文では，括弧付きコーパスとしてEDRコーパスを利用し，
日本語の言語的特徴を考慮した効率の良いPCFG抽出方法を
提案する~\cite{shirai95b,shirai95a}．

本論文の構成は以下の通りである．
2節では，括弧付きコーパスからPCFGを抽出する
具体的な手法について説明する．
3節では，抽出した文法を改良する方法について説明する．
文法の改良とは，具体的には文法サイズを縮小することと，
文法が生成する解析木の数を抑制することを指す．
4節では，実際に括弧付きコーパスからPCFGを抽出し，
それを用いて統語解析を行う実験について述べる．
最後に5節では，この論文のまとめと今後の課題について述べる．
