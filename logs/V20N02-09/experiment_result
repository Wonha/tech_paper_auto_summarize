
本節では集合拡張において，カテゴリ間の兄弟関係を事前知識として使用することの効果を実験的に検証する．
実験ではEspressoアルゴリズム[CITE]，Espressoアルゴリズムにカテゴリ間の排他制約を加えたもの（Espresso +排他制約），Espressoアルゴリズムにカテゴリ間の排他制約と兄弟関係を事前知識として加えたもの（提案手法（ベース：Espresso））のブートストラッピング手法と，g-Espressoアルゴリズム[CITE]，g-Espressoアルゴリズムにカテゴリ間の排他制約と兄弟関係を事前知識として加えたもの（提案手法（ベース：g-Espresso））のグラフカーネルを用いた手法について比較を行う．
グラフカーネルを用いた手法における，正則化ラプラシアンカーネルの拡散パラメータは萩原ら[CITE]と同様，[MATH]とした．
ブートストラッピング手法では反復毎に，各カテゴリのインスタンスとパターンの獲得数を15個ずつ増加（すなわち[MATH]）させた．
集合拡張は未知のインスタンスを取得するタスクであるため，再現率を正確に測定することは難しい．
そのため，各手法の比較は，同じ数のインスタンスを取得した際の適合率を比べることによって行う．
さらに，各手法の出力した正解インスタンスの集合を正解セットと考え，再現率を疑似的に計算し，比較する．
なお，獲得インスタンスの正否は3人の評価者によって判定する．
[REF_introduction]節で説明したように，近年では，全てのカテゴリのインスタンスを収集する需要が高まっている．
このため実験では，Carlsonら[CITE]のように，様々な種類のカテゴリを対象とする．
代表的なカテゴリをまんべんなく対象とするため，関根の拡張固有表現階層のリストとWikipediaを参考に，人手で41個のカテゴリを実験対象として選択した．
対象カテゴリは表[REF_tab:table2]に示した通りであり，この表に示した全てのカテゴリについて，同時に集合拡張を行う．
なお，表[REF_tab:table2]ではカテゴリを兄弟グループが同一のものでまとめてあり，兄弟グループ間は罫線によって区切られている．
兄弟グループは同じ上位カテゴリを持つカテゴリの集合となるよう，Wikipediaを参考に人手で作成した．
各カテゴリはただ1つの兄弟グループに属するものとし，各兄弟グループは2つ以上のカテゴリを含む．
シードインスタンスについてはWikipediaから自動でインスタンスを抽出するツール[CITE]を利用し，各カテゴリ毎に15個ずつ用意した．
なお，自動で抽出した結果には誤りも含まれているため，人手によって誤りインスタンスを除去している．
実験には1億1千万の日本語ウェブページをコーパスとして用いた．
ウェブページ中の文は日本語係り受け解析器であるKNP [CITE]を用いて係り受け構造を解析した．
また，計算時間を削減するため，出現頻度が2回以下であるパターンとインスタンスは除去している．
ブートストラッピングの反復を10回行った際の，各手法における全カテゴリでの獲得インスタンス数とその適合率を図[REF_fig:figure3]に示す．
グラフカーネルを用いた手法では，ブートストラッピングと同数のインスタンスを獲得した際の適合率を示している．
また，提案手法ではフィルタパターンにおいて係り受け関係の方向を指定しないとしていたが，この効果を確認するため，フィルタパターンにおいて係り受け関係の方向を指定した手法での結果も記した．
この図より，Espresso +排他制約はEspressoよりも適合率が上昇していることがわかる．
Espresso +排他制約の適合率はEspressoと比べると，4,305個のインスタンスを獲得したときに最も上昇し，2.4%高い．
また，10回の反復後，すなわち6,765個のインスタンスを獲得したときには1.3%上昇している．
提案手法（ベース：Espresso）はEspresso +排他制約よりもさらに適合率が上がっており，Espressoと比べると，4,305個のインスタンスを獲得したときには4.4%上昇し，6,765個のインスタンスを獲得したときには2.1%上がっている．
さらに，g-Espressoと提案手法（ベース：g-Espresso）を比較しても，提案手法の適合率が上昇していることがわかる．
提案手法（ベース：g-Espresso）の適合率はg-Espressoと比べ，3,690個のインスタンスを獲得したときに最も上昇し，6.1%高い．
この結果から，カテゴリ間の兄弟関係についての事前知識は意味ドリフトの抑制に寄与し，集合拡張の精度を向上させることがわかる．
また図[REF_fig:figure3]より，フィルタパターンにおいて係り受け関係の方向を指定した手法では，Espressoよりも適合率が上昇するが，提案手法（フィルタパターンにおいて係り受け関係の方向を指定しない場合）よりは適合率が低いことがわかる．
したがって，フィルタパターンにおいて係り受け関係の方向まで指定することは厳しすぎる制約であり，フィルタパターンを用いて兄弟グループの共通性を検証する際には，係り受け関係の方向を指定する必要はないことがわかる．
小町ら[CITE]や萩原ら[CITE]はグラフカーネルを用いることにより，意味ドリフトが抑制できることを示した．
しかし，図[REF_fig:figure3]において，グラフカーネルを用いた手法であるg-Espressoの適合率はEspressoより低い．
これは，[REF_sec:g_espresso]節で説明したように，グラフカーネルを適用するパターンと候補インスタンスを制限しているためであると考えられる．
例えば，ヨーロッパの国カテゴリについて，「ドイツ」というシードインスタンスから「X[MATH]サッカー選手一覧」，「X[MATH]キーパーは」というパターンが抽出されるため，「強豪」や「代表」のような，対象とする意味カテゴリとは無関係なインスタンスのスコアが高くなってしまう．
この問題について萩原ら[CITE]は，グラフの範囲を広げることで解消できるとしたが，複数の意味カテゴリを対象にした集合拡張では，計算量を抑えるためにグラフはできるだけ小さくせねばならず，避けられない問題であると考えられる．
再現率を疑似的に計算するため，反復を10回行った（すなわち各カテゴリで165個のインスタンスを獲得した）ときの，各手法で獲得した正解インスタンスの和集合を正解セットとして，反復毎の適合率と再現率を計算した．
この結果を図[REF_fig:graph_pr_curve]に示した．
図[REF_fig:graph_pr_curve]より，提案手法（ベース：Espresso）はEspresso，Espresso +排他制約よりも性能が良く，また，提案手法（ベース：g-Espresso）はg-Espressoよりも性能が良いことがわかる．
これより，提案手法は再現率を保ったまま，適合率を上昇させることが可能であると言える．
適合率，再現率共に高いブートストラッピング手法に着目し，さらに詳しい分析を行う．
まず，各手法における取得インスタンスの傾向を調べる．
同じ兄弟グループに属する神社と寺カテゴリについて，各手法で反復を5回行った際の，獲得インスタンスのうち上位15個を表[REF_tab:table1]に示す．
なお，表[REF_tab:table1]ではインスタンスを正解と誤りに分けて記している．
表[REF_tab:table1]によると，EspressoとEspresso +排他制約は多くの誤りインスタンスを獲得しているが，誤りの傾向には違いがある．
Espressoは「八幡宮」や「太宰府天満宮」，「浅草寺」など，いくつかのインスタンスを神社と寺カテゴリの両方に属するものとしてしまっている．
これに対して，Espresso +排他制約はインスタンスが複数カテゴリに所属しないように，インスタンスの属するただ1つのカテゴリを選択しており，Espressoのような誤りは発生していない．
すなわち，排他制約は意味ドリフトを緩和する効果があることがわかる．
しかしながら，Espresso +排他制約は寺カテゴリにおいて，「袋屋醤油店」や「あだしのまゆ村」など，対象カテゴリとは無関係のインスタンスを多く獲得してしまっている．
提案手法は兄弟グループの共通性についての知識を利用することにより，このような誤りインスタンスを除去することに成功している．
この結果から，兄弟関係は集合拡張に対して，有用な情報であることがわかる．
反復を5回行った際の，各カテゴリにおける各手法の獲得インスタンスの適合率を表[REF_tab:table2]に記す．
また表[REF_tab:table2]には提案手法の適合率の，Espressoからの上昇率も示した．
さらに，それぞれの兄弟グループでのフィルタパターンのうち，上位3つをそのスコアとともに記した．
表[REF_tab:table2]より，提案手法とEspresso +排他制約は多くのカテゴリにおいてEspressoよりも適合率が上昇していることがわかる．
この結果は，カテゴリ間の排他関係と兄弟関係は集合拡張の精度を向上させることを示している．
しかしながら，いくつかのカテゴリにおいては適合率が下がっており，兄弟関係の知識が有効に働いていないようである．
この原因は以下の2つに分類されると考えられる．
フィルタパターンのスコアが低い
ベースラインでの適合率が高い
([REF_case1])の場合は自動車メーカーと医薬品メーカー，美術館と劇場など，兄弟グループのカテゴリすべてで適合率が下がっている．
例えば，自動車メーカーと医薬品メーカーカテゴリについては，Espressoと比べ，適合率がそれぞれ14.44%，2.22%下がっている．
この2つのカテゴリを含む兄弟グループでは，最もスコアの高いフィルタパターンでさえスコアが0.1837とかなり低い．
各兄弟グループで取得したフィルタパターンのスコアの最大値と，その兄弟グループの適合率のEspressoからの上昇率を図[REF_fig:figure5]に記した．
さらに図[REF_fig:figure5]には一次近似曲線を引き，スコアと上昇率の相関を示した．
この図より，取得したフィルタパターンのスコアの最大値が低いほど上昇率が下がり，スコアが0.6以下の場合にはEspressoよりも精度が悪くなることがわかる．
フィルタパターンのスコアとは，兄弟グループの共通性を表したパターンをフィルタパターンとして取得できるよう，兄弟グループのシードインスタンスを用いて計算されたものである．
つまり，取得したフィルタパターンのスコアが低いということは，提案手法がフィルタパターンに必要な要素である，網羅性と平等性を持つパターンを見つけられなかったことを示唆している．
網羅性と平等性を持つパターンを獲得できなかった原因は，自動車メーカーと医薬品メーカーなど共通性の少ないカテゴリを兄弟グループとしてしまったためであると考えられる．
兄弟グループの選択による提案手法への影響については，今後調査していきたい．
映画監督やコメディアンカテゴリは([REF_case2])にあてはまる．
([REF_case2])の場合，Espressoにおいて意味ドリフトは起こっていないにもかかわらず，提案手法はフィルタを適用し，正解インスタンスを削除してしまっている．
言い換えれば，提案手法は誤りインスタンスよりも正解インスタンスを多く除去してしまっている．
この原因としては，フィルタパターンはシードインスタンスによってのみ決定されるため，ブートストラッピングの反復中に新たに抽出したインスタンスによってもたらされる，兄弟グループの共通性を扱えていない可能性がある．
これに対処するために，ブートストラッピングの反復中にフィルタパターンを更新することが必要であると考えられる．
しかし，新たに獲得したインスタンスを用いてフィルタパターンを更新した場合，意味ドリフトを抑制する効果が失われてしまうことも考えられるため，更新は慎重に行わなければならない．
フィルタパターンの更新方法については今後の課題である．
