================================================================
[section type  : abstract]
[section title : abstract]
================================================================
[i:0, score:367] 本論文では，コサイン係数，ダイス係数，ジャッカード係数，オーバーラップ係数に対し，簡潔かつ高速な類似文字列検索アルゴリズムを提案する．
[i:2, score:426] そして，類似文字列検索が転置リストにおける[MATH]オーバーラップ問題として正確に解けることを示す．
[i:4, score:495] CPMergeは，検索クエリ文字列中のシグニチャと呼ばれる特徴と，解候補が枝刈りできる条件に着目し，[MATH]オーバーラップ問題の解候補を絞り込む．

================================================================
[section type  : intro]
[section title : はじめに]
================================================================
[i:23, score:333] 本論文では，自然言語処理でよく用いられる類似度関数であるコサイン係数，ジャッカード係数，ダイス係数，オーバーラップ係数に対して，式[REF_equ:approximate-string-retrieval]の簡潔かつ高速なアルゴリズムを提案する．
[i:25, score:523] まず，類似文字列検索における必要十分条件及び必要条件を導出し，式[REF_equ:approximate-string-retrieval]が転置リストにおける[MATH]オーバーラップ問題[CITE]として正確に解けることを示す．
[i:33, score:352] 次節では，類似文字列検索の必要十分条件，必要条件を導出し，式[REF_equ:approximate-string-retrieval]が[MATH]オーバーラップ問題として正確に解けることを示す．

================================================================
[section type  : proposed_method]
[section title : 類似文字列検索の定式化]
================================================================
[i:50, score:361] 本論文では，ダイス係数，ジャッカード係数，コサイン係数，オーバーラップ係数など，集合間のオーバーラップに基づく類似度（集合間類似度）に対して，類似文字列検索アルゴリズムを導出する．
[i:53, score:243] 精細な類似度が必要な場合は，適当な類似度関数に対して緩い閾値[MATH]を用い，提案手法で再現率が高くなるように類似文字列を検索し，関連研究（第[REF_sec:related-work]節）で紹介する手法などで精査することで，適合率を改善すればよい．
[i:70, score:241] 検索クエリ文字列[MATH]とし，コサイン類似度の閾値[MATH]で類似文字列検索を行う．

================================================================
[section type  : proposed_method]
[section title : データ構造とアルゴリズム]
================================================================
[i:82, score:0] 
-----------------------------------------------------
  [subsection title : データ構造]
-----------------------------------------------------
  [i:lead, 169] 前節までの議論により，類似文字列検索は次の部分問題を解くことに帰着される．
.....
  [i:87, score:450] 式[REF_equ:match-condition]から，探索すべき文字列のサイズ[MATH]の範囲が絞り込まれること，式[REF_equ:necessary-condition]から，[MATH]に依存して最小オーバーラップ数[MATH]が決まることを考慮し，文字列のサイズ[MATH]毎に転置インデックス[MATH]を構築する．
  [i:88, score:419] また，アルゴリズムを効率よく実行するため，文字列をユニークな文字列識別番号(SID)で表現し，転置リストは特徴を含む文字列のSIDを昇順に並べたものを格納することとする．
  [i:95, score:504] 文字列のサイズ[MATH]毎に構成された転置インデックスの配列[MATH]に対して，検索文字列[MATH]，類似度閾値[MATH]が与えられると，この擬似コードは[MATH]との類似度が[MATH]以上の文字列のSIDのリスト[MATH]を返す．
-----------------------------------------------------
  [subsection title : $\tau$オーバーラップ問題のアルゴリズム]
-----------------------------------------------------
  [i:lead, 418] [REF_sec:data-structure]節では，特徴をキーとして，その特徴を含む文字列(SID)のリストを返す転置インデックスを構築した．
.....
  [i:136, score:464] アルゴリズムの2から7行目では，シグニチャの特徴を持つ文字列をデータベース[MATH]から検索し，その転置リストにおける出現回数を連想配列[MATH]に記録する．
  [i:151, score:499] [MATH]では，32個の候補文字列のそれぞれに対して，414個のSIDを含む転置リスト上で二分探索を行い，「＄スパ」というtri-gramを含むかどうか調べている．
  [i:167, score:466] そこで，第[REF_sec:evaluation]節では，CPMergeアルゴリズムが実際のデータセットに対して動作する際の，解の候補数，転置リストに含まれるSIDの数などの統計情報を報告する．
-----------------------------------------------------
  [subsection title : 実装上の工夫]
-----------------------------------------------------
  [i:lead, 328] 図[REF_alg:t-overlap-cpmerge]のアルゴリズムでは，SIDをキーとして頻度を格納する連想配列[MATH]を用いていた．
.....
  [i:179, score:412] もし転置リスト[MATH]のSID ([MATH])が，[MATH]における解候補リスト[MATH]に含まれていない場合（8行目），[MATH]を新しい候補として[MATH]に登録し（9行目），[MATH]をインクリメントする（10行目）．
  [i:180, score:409] もし，[MATH]における解候補リスト[MATH]中のSID ([MATH])が，転置リスト[MATH]に含まれていない場合（11行目），[MATH]を[MATH]にそのまま追加し（12行目），[MATH]をインクリメントする（13行目）．
  [i:183, score:398] CPMerge-optでは，[MATH]における解候補リスト[MATH]に対して，転置リスト[MATH]で検証を行い，枝刈りされなかった候補を一時変数[MATH]に待避し，[MATH]における処理が終わったら[MATH]を[MATH]で上書きしている．

================================================================
[section type  : experiment_result]
[section title : 実験]
================================================================
[i:185, score:0] 
-----------------------------------------------------
  [subsection title : 比較したシステム]
-----------------------------------------------------
  [i:lead, 214] 本節では，大規模な文字列データセットに対して，種々の類似文字列検索アルゴリズムの性能を比較し，提案手法の有用性を示す．
.....
  [i:193, score:495] Signature: [MATH]オーバーラップ問題をCPMerge（図[REF_alg:t-overlap-cpmerge]）で解くが，解候補の枝刈りを行わないもの（図[REF_alg:t-overlap-cpmerge]の17〜18行目を削除）
  [i:206, score:412] 基本的なアイディアは，データベース中の文字列のハッシュ値のビット列を並び替え，検索クエリの（ビット列を並び替えられた）ハッシュ値の近傍を探すという試行を繰り返せば，式[REF_equ:LSH-candidate]の近似解が求まるというものである．
  [i:210, score:363] すると，[MATH]の中でクエリの（置換が適用された）ハッシュ値[MATH]に近い要素を二分探索で求め，その近傍の[MATH]個の文字列の中でハミング距離が[MATH]以内のものを見つけ出すことで，式[REF_equ:LSH-candidate]を近似的に求めることができる．
-----------------------------------------------------
  [subsection title : 実験に用いたデータセット]
-----------------------------------------------------
  [i:lead, 24] 実験に用いたデータセットは，以下の3つである．
.....
  [i:221, score:214] 1つの文字列当たりの文字tri-gramの特徴数は17.2，データセット全体における文字tri-gramの種類数は42,180である．
  [i:224, score:215] 1つの文字列当たりの文字tri-gramの特徴数は20.8，データセット全体における文字tri-gramの種類数は137,675である．
  [i:228, score:212] 一つの文字列当たりの文字tri-gramの特徴数は43.6，データセット全体における文字tri-gramの種類数は171,596である．
-----------------------------------------------------
  [subsection title : 1 クエリあたりの平均レスポンス時間]
-----------------------------------------------------
  [i:lead, 336] 図[REF_fig:query-time]に，各データセットでコサイン係数が0.7以上の類似文字列を検索するときの，1クエリあたりの平均レスポンス時間を示した．
.....
  [i:238, score:575] 一方，LSH以外の手法（総当たり法を除く）は，クエリ文字列に応じて[MATH]の探索範囲が変化し，さらに，クエリ文字列に応じて転置リストのサイズが異なる（つまり，処理すべきSIDの数が変化する）ため，レスポンス時間のばらつきが大きくなる．
  [i:253, score:464] Signatureシステムと提案手法の差は，解候補の枝刈り（図[REF_alg:t-overlap-cpmerge]の17〜18行目）のみであるが，この処理を省くと大幅にレスポンスが低下し，AllScanアルゴリズムよりも遅くなる．
  [i:255, score:511] 先行研究であるMergeOpt，SkipMerge，DivideSkipは，各転置リストの先頭（SIDの小さい方）からSIDを優先順位付きキューに挿入するアルゴリズムを採用しており，[MATH]オーバーラップ問題の解き方が提案手法と全く異なる．
-----------------------------------------------------
  [subsection title : 提案手法の動作統計]
-----------------------------------------------------
  [i:lead, 281] 表[REF_tbl:stats]は，提案手法が各データセットにおいて類似文字列検索を行うときの，様々な統計情報をまとめたものである（類似度にコサイン係数を用い，閾値は0.7とした）．
.....
  [i:276, score:395] 提案手法の候補生成フェーズでは，平均4.6個の転置リストに含まれる279.7個のSIDを走査し，232.5個の解候補を得た．
  [i:278, score:558] これに対し，AllScanアルゴリズムは，17.7個の転置リストに含まれる16,155.1個のSIDを走査しなければならず，平均4.63個の解を求めるのに，9,788.7個の文字列を候補として考慮する必要があった．
  [i:286, score:397] 提案手法は，[MATH]オーバーラップ問題を解くために，8.9 (IMDB)，18.8（日本語ユニグラム），31.7 (UMLS)個の転置リストを使っている．

================================================================
[section type  : related_study]
[section title : 関連研究]
================================================================
[i:311, score:443] SkipMergeアルゴリズムは，全ての転置リストの先頭から順にSIDをヒープに挿入し，ヒープの先頭から同じSIDの要素を取り出したとき，取り出された個数が[MATH]を超えたら，そのSIDを解とするものである．
[i:312, score:465] ただし，ヒープに転置リストからSIDを挿入するときに，[MATH]オーバーラップ問題の解となり得ない要素をスキップするメカニズムが組み込まれており，転置リスト中の全てのSIDをヒープに挿入しなくても，[MATH]オーバーラップ問題が解けるように工夫されている．
[i:320, score:483] MergeOpt，SkipMerge，DivideSkipアルゴリズムは，解候補をヒープに格納するアルゴリズムであり，ヒープに格納される解候補の数は，クエリに対する転置リストの数（すなわち，クエリの特徴集合[MATH]の要素数[MATH]）を超えない．

================================================================
[section type  : conclusion]
[section title : まとめ]
================================================================
[i:333, score:384] CPMergeアルゴリズムは非常にシンプルであるが，類似文字列検索の最近の手法であるLocality Sensitive Hashing (LSH) [CITE]やDivideSkip [CITE]と比べ，高速かつ正確に文字列を検索できることを実証した．
[i:335, score:488] CPMergeアルゴリズムが従来手法（例えばMergeSkip）に対して特に有利なのは，全ての転置リストを主記憶に読み込まなくても，類似文字列検索の解を求めることができる点である．
[i:336, score:579] 表[REF_tbl:stats]に示した通り，CPMergeアルゴリズムはクエリに対して約50%の転置リストを読み込むだけで，類似文字列検索の解を求めることができた（コサイン類似度で閾値が0.7の場合）．

