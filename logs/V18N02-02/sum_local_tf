================================================================
[section type  : abstract]
[section title : abstract]
================================================================
[3757] 実験では，類似文字列検索の最近の手法であるLocality Sensitive HashingやDivideSkip等と提案手法を比較し，提案手法が全てのデータセットにおいて，最も高速かつ正確に文字列を検索できることを実証する．

================================================================
[section type  : intro]
[section title : はじめに]
================================================================
[3775] 次節では，類似文字列検索の必要十分条件，必要条件を導出し，式[REF_equ:approximate-string-retrieval]が[MATH]オーバーラップ問題として正確に解けることを示す．

================================================================
[section type  : proposed_method]
[section title : 類似文字列検索の定式化]
================================================================
[4361] しかし，どのくらいの精度の類似度関数が必要になるかはアプリケーション依存であるため，文字列の特徴や類似度関数の選び方は本論文の対象外とし，与えられた特徴空間と類似度関数に対して，出来るだけ効率よく[MATH]を求めるアルゴリズムを提案することに注力する．

================================================================
[section type  : proposed_method]
[section title : データ構造とアルゴリズム]
================================================================
[0] 
-----------------------------------------------------
  [subsection title : データ構造]
-----------------------------------------------------
  [3659] 文字列のサイズ[MATH]毎に構成された転置インデックスの配列[MATH]に対して，検索文字列[MATH]，類似度閾値[MATH]が与えられると，この擬似コードは[MATH]との類似度が[MATH]以上の文字列のSIDのリスト[MATH]を返す．
-----------------------------------------------------
  [subsection title : $\tau$オーバーラップ問題のアルゴリズム]
-----------------------------------------------------
  [3973] 表[REF_tbl:spaghetti-solutions]は，検索クエリ文字列[MATH]に対して，Web日本語Nグラムコーパスのユニグラムの中で，文字数が7（つまり[MATH]）の文字列を実際に検索するとき，[MATH]の高い文字列10件を示したものである（文字列の特徴はtri-gramで表現）．
-----------------------------------------------------
  [subsection title : 実装上の工夫]
-----------------------------------------------------
  [3454] 2行目では，解候補の頻度を計測する変数[MATH]を初期化しているが，その型は連想配列([MATH])から，可変長配列([MATH])に変更されている．

================================================================
[section type  : experiment_result]
[section title : 実験]
================================================================
[0] 
-----------------------------------------------------
  [subsection title : 比較したシステム]
-----------------------------------------------------
  [3508] すると，[MATH]の中でクエリの（置換が適用された）ハッシュ値[MATH]に近い要素を二分探索で求め，その近傍の[MATH]個の文字列の中でハミング距離が[MATH]以内のものを見つけ出すことで，式[REF_equ:LSH-candidate]を近似的に求めることができる．
-----------------------------------------------------
  [subsection title : 実験に用いたデータセット]
-----------------------------------------------------
  [3164] 完全には一致しない文字列で検索する状況をシミュレートするため，1,000個の文字列のうち，1/3の文字列はそのまま，1/3の文字列には1文字をランダムな文字に置換，残りの1/3の文字列には2文字をランダムな文字に置換している．
-----------------------------------------------------
  [subsection title : 1 クエリあたりの平均レスポンス時間]
-----------------------------------------------------
  [3833] 先行研究であるMergeOpt，SkipMerge，DivideSkipは，各転置リストの先頭（SIDの小さい方）からSIDを優先順位付きキューに挿入するアルゴリズムを採用しており，[MATH]オーバーラップ問題の解き方が提案手法と全く異なる．
-----------------------------------------------------
  [subsection title : 提案手法の動作統計]
-----------------------------------------------------
  [3966] 表[REF_tbl:stats]は，提案手法が各データセットにおいて類似文字列検索を行うときの，様々な統計情報をまとめたものである（類似度にコサイン係数を用い，閾値は0.7とした）．

================================================================
[section type  : related_study]
[section title : 関連研究]
================================================================
[4019] これらの手法と提案手法を解析的に比較するのは難しいが，第[REF_sec:evaluation]節では，SkipMergeとDivideSkipアルゴリズムによる類似文字列検索の性能を測定し，提案手法の方が高速に検索できることを実験的に示した．

================================================================
[section type  : conclusion]
[section title : まとめ]
================================================================
[3709] 表[REF_tbl:stats]に示した通り，CPMergeアルゴリズムはクエリに対して約50%の転置リストを読み込むだけで，類似文字列検索の解を求めることができた（コサイン類似度で閾値が0.7の場合）．

