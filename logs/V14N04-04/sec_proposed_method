格フレームは，ウェブから収集した大規模コーパスを用いて，[CITE]の手法により自動構築を行う．
本節では，格フレーム構築手法の概要を述べる．
人間のもつ常識的知識の重要な部分である格フレームは，様々な言語現象をカバーすることが望ましい．
そのような格フレームを構築するために，大規模コーパスから漸進的に確からしい情報を抽出する．
まず最初に，大規模コーパスを構文解析し，その解析結果から第1段階の格フレームを構築する．
格フレームを構築する際の最大の問題は，用言の用法の曖昧性である．
つまり，同じ表記の用言でも複数の意味，用法をもち，とりうる格や用例が異なる．
例えば，以下の2つの例は，用言は「積む」で同じであるが用法が異なっている．
\head{トラックに荷物を積む} \sent{経験を積む}
用法が異なる格フレームを別々につくるために，我々は，格フレーム収集の単位を用言とその直前の格要素の組とした．
「積む」の例では，「荷物を積む」「経験を積む」を単位として格フレームを収集する．
さらに，「荷物を積む」「物資を積む」などかなり類似している格フレームをマージするためにクラスタリングを行う．
上記の第1段階の構築手法では構文解析を用いているために，基本的に格助詞の付属している格要素を収集している．
このため，得られる格フレームは，二重主語構文，外の関係，格変化のような複雑な言語現象には対処できないという問題がある．
この問題に対処するために，上記で得られた格フレームを用いて再度テキストを解析し，新たな情報を格フレームに与える．
新たに得られる情報は，1回目の格フレーム構築では扱うことができなかった係助詞句（「〜は」や「〜も」）や被連体修飾詞に関する関係である．
\single{この車はエンジンが良い}{ガ２1}
例えば，上例において，構文解析の段階では「車は」は解釈できなかったが，格解析では「｛エンジン｝がよい」という格フレームを用いることによって，格フレームにガ格以外の格がないことから「車は」は2つ目のガ格であり，「｛エンジン｝がよい」は二重主語構文をとることがわかる．
\single{その問題は彼が図書館で調べている}{ガ２2}
この例文の「問題は」は，すでに得られている格フレーム「｛問題，課題｝を｛図書館｝で調べる」のヲ格の用例群に合致するため，格解析ではヲ格と解析されるだけで，新しい情報は得られない．
同様に，被連体修飾詞は構文解析では扱われないが，格解析では，格フレームのガ格，ヲ格などの用例と類似しているかどうか調べることによって解釈される．
例えば，「業務を営む免許」の「免許」は，格フレーム「｛銀行，会社｝が｛業務，ビジネス｝を営む」のどの格の用例とも類似せず，外の関係と呼ばれる関係をもっていると判定され，この情報が格フレームに加えられる．
上記の手法を用いて，ウェブから収集した約5億日本語文から格フレームを構築した．
約350CPUの計算機グリッドを用いてこの処理を行い，約1週間で格フレームを構築することができた．
この格フレームは約90,000用言からなる．
その一部を表[REF_例::格フレーム]に示す．
本論文で提案する構文・格解析統合モデルは，入力文がとりうるすべての構文構造に対して確率的格解析を行い，もっとも確率値の高い格解析結果をもつ構文構造を出力する．
すなわち，入力文[MATH]が与えられたときの構文構造[MATH]と述語項構造[MATH]の同時確率[MATH]を最大にするような構文構造[MATH]と述語項構造[MATH]を出力する．
次のように，[MATH]は一定であるので，本モデルは[MATH]を最大にすることを考える．
(T_{best}, L_{best}) & = \argmax{(T, L)}{P(T,L|S)} \nonumber
& = \argmax{(T, L)}{P(T,L,S)}{P(S)} \nonumber
& = \argmax{(T, L)}{P(T,L,S)}
本論文では，依存構造に基づく確率的生成モデルを提案する．
本モデルは「節」を基本単位とし，主節（文末の節）から順次生成していく．
「節」とは，用言1つと，それと関係をもつ格要素群を意味する．
[MATH]は，文に含まれる節[MATH]を生成する確率の積として次のように定義する．
[MATH]は文[MATH]中に存在する節の数（＝用言数）であり，ここで[MATH]は節[MATH]の係り先文節である．
主節は係り先をもたないが，仮想的な係り先を[MATH]とする．
従来研究のほとんどは，文生成の確率を，2文節間の係り受け確率の積としていたが，本研究では式([REF_Formula::Division])のように，節，つまり用言と格要素群を単位として生成するモデルとしている．
そのため，複数の格要素を考慮して係り受けを決定することができ，例(3)のような文も正しく解析できるようなモデルとなっている．
例えば「弁当は食べて目的地に出発した．
」という文を考える．
「弁当は」が「食べて」に係る場合には，2つの節「弁当は食べて」「目的地に出発した．
」があり，次の確率を考える．
「弁当は」が「出発した．
」に係る場合には，2つの節「食べて」「弁当は目的地に出発した．
」があり，次の確率を考える．
本モデルは，これらのうちもっとも確率の高い構造を採用する．
節[MATH]は，述語項構造[MATH]と用言タイプ[MATH]に分解して考える．
用言タイプとは，用言の活用や付属語列を意味する．
そのため，述語項構造[MATH]に含まれる用言は原型である．
係り先の文節[MATH]も同様に，語[MATH]とタイプ[MATH]に分けて考える．
P(c_i|b_{h}) & = P(\mathit{CS}_i, f_i|w_{h}, f_{h}) \nonumber
& = P(\mathit{CS}_i|f_i,w_{h},f_{h}) \times P(f_i|w_{h},f_{h}) \nonumber
& \approx P(\mathit{CS}_i|f_i,w_{h}) \times P(f_i|f_{h})
この近似は，用言は係り先文節のタイプには依存しない，また用言タイプは係り先の語には依存しないと考えられるからである．
例えば，[MATH]は次のようになる．
ただし，本モデルにおいて，副詞，連体詞，および連体修飾句は述語項構造に入れず，考慮しない．
これらは用言に対して格関係を持たないので，用言格フレームにおいて扱うことができず，生成することができないためである．
これらの係り先は，読点がなければ直近の係りうる文節とするなどといったルールに基づいて決定する[CITE]．
式([REF_Formula::FirstDecomposition])の[MATH]を述語項構造生成確率，[MATH]を用言タイプ生成確率と呼び，これらについて次の2つの節で説明する．
述語項構造の生成モデルは，その述語項構造にマッチする格フレームの選択と，入力側の各格要素の格フレームへの対応付けを同時に行うモデルである．
述語項構造[MATH]は，述語[MATH]，格フレーム[MATH]，格の対応関係[MATH]の3つからなると考える．
格の対応関係[MATH]とは，図[REF_Figure::Correspondence]に示すように，入力側の格要素と格フレームの格との対応付け全体を表す．
対応関係は図示のもの以外にも，「弁当は」をガ格に対応付ける可能性がある．
述語項構造生成確率[MATH]は次のようになる．
P(\mathit{CS}_i|f_i,w_{h}) & = P(v_i,\mathit{CF}_l,\mathit{CA}_k|f_i,w_{h}) \nonumber
& = P(v_i|f_i,w_{h}) \nonumber
& \times P(\mathit{CF}_l|f_i,w_{h},v_i) \nonumber
& \times P(\mathit{CA}_k|f_i,w_{h},v_i,\mathit{CF}_l) \nonumber
& \hbox to105pt{[MATH]}（用言生成確率）
& \hbox to105pt{[MATH]}（格フレーム生成確率）\nonumber
& \hbox to105pt{[MATH]}（格の対応関係生成確率）\nonumber
この近似は，述語[MATH]はその係り先の語[MATH]のみに，格フレーム[MATH]は述語[MATH]のみに，格の対応関係[MATH]は格フレーム[MATH]と付属語列[MATH]に依存すると考えられることによる．
用言生成確率と格フレーム生成確率は大規模コーパスの格解析結果から推定する．
\unskip[MATH]は，格の対応関係生成確率と呼び，以下で詳説する．
格の対応関係[MATH]を，格フレームの格スロット[MATH]ごとに考える．
格スロット[MATH]に入力側の格要素（体言[MATH],格要素タイプ[MATH]）が対応付けられているかどうかで場合分けすると，次のように書き換えることができる．
ただし，[MATH]は，格スロット[MATH]に入力側格要素が対応付けられていれば[MATH]，そうでなければ[MATH]をとる関数である．
式([REF_Formula::CCExample])右辺第1項の各確率は次のように分解できる．
この式の第1項と式([REF_Formula::CCExample])第2項の各確率は，[MATH]には依存しないと考えられるので，それぞれ[MATH]，[MATH]となる．
これらは格スロット生成確率と呼び，大規模コーパスの格解析結果から推定する．
[MATH]は格要素生成確率と呼ぶ．
例えば，[MATH]について考える．
「食べる」のある格フレーム[MATH]がガ格とヲ格をもっているならば，この格フレームを用いたときの述語項構造生成確率としては，「弁当は」をガ格またはヲ格に対応付けるときの2つを考えることになる．
以下に「弁当は」をヲ格に対応付けるときの確率を示す．
P（CS（弁当は食べる）|テ形,出発する）& = P（\mathrm{食べる|出発する}）
& \times P（CF_{食べる1}|\mathrm{食べる}）
& \times P（A（\mathrm{を}）=1|CF_{食べる1},を）
& \times P（A（\mathrm{が}）=0|CF_{食べる1},が）
& \times P（\mathrm{弁当}, \mathrm{は}|CF_{食べる1},テ形,A（\mathrm{を}）=1,を）
格要素の体言[MATH]と格要素タイプ[MATH]を生成する確率は独立であり，表層格の解釈は格フレームに依存しないと考え，格要素生成確率は以下のように近似する．
[MATH]は用例生成確率と呼び，格フレーム自体から推定する．
格要素タイプ[MATH]としては，表層格[MATH]，読点の有無[MATH]，提題助詞「は」の有無[MATH]の3つを考慮する．
P(f_j|s_j, f_i) & = P(c_j,t_j,p_j|s_j,f_i) \nonumber
& = P(c_j|s_j,f_i) \nonumber
& \times P(p_j|s_j,f_i,c_j) \nonumber
& \times P(t_j|s_j,f_i,c_j,p_j) \nonumber
& \hbox to84pt{[MATH]}（表層格生成確率）
& \hbox to84pt{[MATH]}（読点生成確率）\nonumber
& \hbox to84pt{[MATH]}（提題助詞生成確率）\nonumber
この近似は，[MATH]は[MATH]のみに，[MATH]は[MATH]のみに，[MATH]は[MATH]と[MATH]に依存すると考えられるためである．
表層格生成確率は，表層格を解釈した格をタグ付けした京都テキストコーパス[CITE]を用いて推定する．
日本語では，読点や提題助詞はそれらの属する文節が遠くに係る場合に用いられやすいという傾向がある．
このような傾向を考慮して，読点生成確率[MATH]と提題助詞生成確率[MATH]を以下のように定義する．
P(p_j|f_i) & = P(p_j|o_i,u_i)
P(t_j|f_i,p_j) & = P(t_j|o_i,u_i,p_j)
[MATH]は，対象格要素がほかの係り先候補を越えて[MATH]に係る場合に[MATH]をとり，それ以外では[MATH]となる．
[MATH]は，節の区切れとしての強さであり，強い節ほど読点や提題助詞をもつ句を受けやすい．
節の強さとしては，南による節の分類[CITE]を参考にして設定した5段階を考える．
用言タイプ生成確率[MATH]は，文節[MATH]のタイプを条件にしたときに，それに係っている節[MATH]の用言タイプを生成する確率である．
この確率は，節[MATH]が連用節であるか連体節であるかで次のように異なる．
節[MATH]が連用節の場合は，節間の係り受けに大きな影響を及ぼすと考えられる読点の有無と連用節のタイプ（強さ）を考慮する．
これに加えて，[MATH]がほかの係り先候補を越えて[MATH]に係るかどうかを考慮する．
節[MATH]が連体節である場合は，受側すなわち体言のタイプには依存しないと考え，次のように定義する．
