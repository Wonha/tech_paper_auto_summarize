    \documentclass[japanese]{jnlp_1.4}
\usepackage{jnlpbbl_1.1}
\usepackage{amsmath}
\usepackage[dvips]{graphicx}
\usepackage{hangcaption_jnlp}
\usepackage{udline}
\setulminsep{1.2ex}{0.2ex}

\Volume{15}
\Number{2}
\Month{Apr.}
\Year{2008}
\received{2007}{7}{31}
\revised{2007}{11}{20}
\accepted{2007}{12}{25}

\setcounter{page}{39}

\jtitle{同義語辞書作成支援システム}
\jauthor{寺田　　昭\affiref{Author_1} \and 吉田　　稔\affiref{Author_2}
	\and 中川　裕志\affiref{Author_2}}
\jabstract{
同義語の同定は，情報検索，テキストマイニングなどのテキスト処理を行う上で必要な作業である．
同義語辞書を作成することにより，テキスト処理の効率や精度の向上を期待できる．
特定分野における文書には，専門の表現が多く用いられており，
その中には，分野独特の同義語が多量に含まれている．
例えば，日本語の航空分野では，漢字・ひらがなだけでなく，カタカナ，アルファベット，およびそれら
の略語が同義語として用いられている．
この分野の同義語は，汎用の辞書に登録されていないものが多く，
既存の辞書を使用できないので，辞書を新たに作成する必要がある．
また，辞書作成後も常に新しい語が発生するので，辞書の定期的な更新が必要となるが，
それを人手で行うのは大変な作業である．

本論文では，同義語辞書作成を半自動化するシステムを提案する．システムは，クエリが与
えられると意味的に同じ候補語を提示する．辞書作成者は，その中から同義語を選択して，
辞書登録を行うことができる．
候補語のクエリに対する類似度は，同義語の周辺に出現する語の頻度情報を文脈情報とし，
その余弦から計算する．文脈情報のみでは十分な精度が得られない場合，既知の同義語を
知識としてシステムに与えることにより，文脈語の正規化を行い，精度を向上できることを確認した．
実験は，航空分野の日本語のレポートを対象とし，
システムの評価には平均精度を用いて行い，満足できる結果が得られた．
}
\jkeywords{同義語，文脈情報，辞書作成，文脈語の正規化}

\etitle{A System for Constructing a Synonym Dictionary}
\eauthor{Akira Terada\affiref{Author_1} \and Minoru Yoshida\affiref{Author_2}
\and Hiroshi Nakagawa\affiref{Author_2}} 
\eabstract{
To identify a synonym is a necessary procedure for text processing such as information retrieval and text mining.
We can expect to improve the proficiency and performance in text processing by 
constructing a synonym dictionary.
Same words might possibly be used as a different meaning if the target field differs, so a synonym dictionary has to be 
constructed for each field.
In some fields in Japanese, such as in aviation, synonym nouns include kanji/hiragana, katakana, 
alphabet and their abbreviations.
Many of these words are not registerd in a general dictionary. 
In addition, as new words always come to be used, the dictionary update is a big issue.

In this paper, we propose a system for constructing a synonym dictionary. The system will 
return synonym candidates on the descending order of similarity against a query. 
A synonym can be easily registered in a dictionary by 
looking the synonym candidates generated by the proposed system.
We define a context information as words frequency appearing around a target word.
Then a similarity is calculated by cosine measure using context information.
We confirmed that the system performance was remarkably improved by providing 
the system with known synonym set to make context word nominalization, especially when the performance was low.
We experimentally evaluated the system performance by aviation safety reports in Japanese and evaluated it
by average precision, and got promising results.
}
\ekeywords{Synonym，Context information，Constructing a dictionary，Context word nominalization}

\headauthor{寺田，吉田，中川}
\headtitle{同義語辞書作成支援システム}


\affilabel{Author_1}{（株）日本航空}{Japan Airlines Co., Ltd.}
\affilabel{Author_2}{東京大学情報基盤センター}{Information Technology Center, The University of Tokyo}



\begin{document}
\maketitle



\section{類似度と平均精度}

システムは，クエリに対して同義語候補語を順位付けして出力する．
そのためには，クエリに対する同義語候補語の類似度を計算できなければならない．
本節では，同義語候補語，文脈情報を定義し，
提案手法での類似度について説明する．
本節では，単名詞の処理について述べ，複合名詞の処理については，
第 6 節で述べる．



\subsection{同義語候補語}

単名詞の同義語候補語は，テキストを形態素解析し，
形態素解析器が出力した名詞である，漢字・ひらがな，カタカナ，アルファベットとした．
形態素解析器は茶筅\footnote{
	http://chasen.naist.jp/hiki/ChaSen/
} を使用し，
その中で出現頻度が 100 以上のものを使用した．




\subsection{文脈情報}

「同義語は，同じような文脈で使用される」という仮定から，語句の類似度を文脈の類似性から計算
できると考えた．
これは，人間が語の意味を理解するのにその語句が出現する前後の文脈から類推している
というアイデアからである．
文脈は，同義語の近傍の語句（局所的文脈）とした．
人間は，前後の語句の中で，場面に応じて文脈語を選別をしていると考えられるが，
計算機で実現するのは不可能であるので，場面に応じた選別については，この研究では
考慮しないことにした．

クエリを $q$ とし，その前後の語句の並びを，$x_{\alpha} \ldots x_{2}\ x_{1}\ q\ y_{1}\ y_{2} \ldots y_{\beta}$ とする．ここで，前後の語句は，形態素解析器が出力した単語とする．
対象とするクエリの文脈語をクエリの前で $x_{\alpha} \ldots x_{1}$，クエリの後ろで $y_{1} \ldots y_{\beta}$ とすると，
window 幅は $\alpha$, $\beta$ であり，これ以降 window~[$\alpha,\beta$] と表現することとする．
同義語候補語の window 幅についても，同様とする．
window 幅は，クエリ，同義語候補語を含む 1 文の範囲内だけを考慮した．
どのような文脈語を選択するかについては，第 4.3 節で述べる．



\subsection{類似度}

クエリ (query) の文脈情報を $\boldsymbol{c_{q}}$，同義語候補語 (synonym) の文脈情報を $\boldsymbol{c_{s}}$ とする．
$\boldsymbol{c_{q}}$ と $\boldsymbol{c_{s}}$ をベクトル空間モデルで表し，その類似度をベクトルの余弦で表すと，
クエリと同義語候補語の類似度 ($sim$) は，次式で計算される．
\begin{equation}
sim(query,synonym) = \mathbf{\frac{c_{q} \cdot c_{s}}{|c_{q}| \cdot |c_{s}|}}
\end{equation}




\subsection{平均精度}

情報検索の性能評価として精度と再現率がよく用いられるが，これらは，与えられた
クエリに対する検索結果全体に対する性能を表すものである．
同義語の検索結果から辞書作成者が辞書登録することを考えると，検索結果の順位における精度
が重要である．つまり，上位の検索結果ほど評価値は高い必要がある．
このような評価尺度を表すものとして平均精度 (average precision) を用いた．
N 個のクエリの評価をする場合，$i$ 番目のクエリに対する
平均精度は次式で表される:
\begin{equation}
\mathit{Average Precision}[i] = \frac{1}{R[i]}\sum_{j=1}^{N_{s}[i]} (rel[j]\cdot \sum_{k=1}^{j} rel[k]/j)
\end{equation}

\begin{quote}
ここで，\\
$N_{s}[i]$: $i$ 番目のクエリの同義語の候補数．\\
$R[i]$: $i$ 番目のクエリの同義語数．\\
$rel[k]$: システムが順序付けした回答の中で，
$k$ 番目の回答が正解であれば 1，そうでなければ 0．
\end{quote}


$i$ 番目のクエリに対する平均精度は，検索結果の各順位での精度 $\sum_{k=1}^{j} rel[k]/j$ の
同義語 $i$ 番目全体に対する和を同義語数 $R[i]$ で割ったものである．

$N$ 個のクエリ全体の平均精度は，次式のように個々のクエリに対する平均精度の平均として定義する：
\begin{equation}
 \mathit{Average Precision} = \frac{1}{N}\sum_{i=1}^{N} \mathit{Average Precision}[i]
\end{equation}




\section{提案方式の詳細と実験}

第 4.1 節では，実験に使用したコーパスの説明をする．
第 4.2 節では，評価用に人手で作成した辞書について述べ，
第 4.3 節では，提案手法で用いる特徴ベクトルについて述べる．
第 4.4 節では，window 幅等による比較についての実験結果を示す．

\subsection{コーパス}

コーパスとして，日本語の航空分野のレポートを使用した．
個人情報保護の観点から，
事前に名前等の個人情報は削除し，個人を特定できないような処理を行った．
レポートの内容には，出発地・到着地などの定型情報とテキストで自由に記述された表題，
本文が含まれているが，本文を対象とした．
1992 年から 2003 年までのレポートを使用した結果，6,427 件のレポートが対象となり，
そのサイズは，約 6.9~M バイトであった．

同義語候補語は，第 3.1 節で述べたように名詞を対象とし，
その中には，漢字・ひらがな，カタカナ，アルファベット，
およびそれらの略語
があるが，その頻度が 100 以上のものを対象とした．
その結果，同義語候補語の数は，1,343 になった．
同義語抽出のタスクは，クエリに対する同義語をこれらの同義語候補語の中から
選択するものである．


\subsection{評価用辞書}

今回の実験評価のために，4.1 節と同じ条件で出現頻度が 100 以上の候補語の中から，
人手で選んだ 406 個の単語に対する同義語を求めることにより同義語辞書を作成した．
単語には，同義な語句が複数存在する場合があるので，406 個のクエリに対する同義語数は 777 になり，平均同義語数は 1.91 であった．
同義語の中には，「Service」，「SVC」，「サービス」のようにアルファベット（英語）
とその略語およびそのカタカナ表現のほか，「Traffic」，「相手機」のように
ドメイン特有のものも含まれる．


\subsection{特徴ベクトルの定義}
\label{subsec:文脈語の重み付けによる比較}

文脈情報を特徴ベクトルとして表すが，
類似度計算に使用する特徴ベクトルの定義には，様々な方法がある．
本節では，特徴ベクトルの定義が精度にどのような影響を及ぼすかを調査した．
クエリと同義語候補語の文脈語としてそれぞれの前後に出現する
語句を用いるが，
本節では，名詞（漢字・ひらがな，カタカナ，アルファベット），動詞，形容詞という内容語を使用した．
クエリ・同義語候補語の文脈情報は，コーパス全体の中でクエリ・同義語候補語の window 内に出現する文脈語を取得し，その頻度ベクトルとした．

\begin{table}[b]
\begin{center}
\caption{文脈語の頻度の対数による補正の比較}
\label{tblf}
\input{02table01.txt}
\end{center}
\end{table}

類似度は，3.3 節で述べたように余弦で計算する．
クエリの文脈ベクトルを $\boldsymbol{c_{q}}= (q_{1},\ldots , q_{N_{c}})$，
同義語候補語\footnote{
	今後，同義語候補語を候補語と呼ぶこととする．
} の
文脈ベクトルを $\boldsymbol{c_{s}} = (s_{1},\ldots , s_{N_{c}})$ とすると，
類似度 (sim) は次式で表される（$N_{c}$: 文脈語の異なり数）：
\begin{equation}
\mathit{sim}(\mathit{query,synonym}) = \mathbf{\frac{c_{q} \cdot c_{s}}{|c_{q}| \cdot |c_{s}|}}
		= \frac{\sum_{i=1}^{N_{c}} q_{i} s_{i}}{\sqrt{\sum_{i=1}^{N_{c}} q_{i}^2 \sum_{i=1}^{N_{c}} s_{i}^2}}
\end{equation}
ここで，文脈ベクトルの各要素 ($q_{i}$ 又は $s_{i}$) は，文脈語の頻度を対数で補正したものを表す．
表~\ref{tblf} は，頻度の対数による補正の有無の比較を示すが，対数による補正が精度に与える影響が大きいことが分かる．

文脈語として，名詞（漢字・ひらがな，カタカナ，アルファベット），動詞，形容詞
を選択した場合とそれ以外の
文脈語を選択した場合の比較を表~\ref{tblc} に示す．

\begin{table}[t]
\begin{center}
\caption{文脈語の種類による比較 (window~[2,2])}
\label{tblc}
\input{02table02.txt}
\end{center}
\end{table}
\begin{figure} [t]
\begin{minipage}{0.48\textwidth}
\begin{center}
\includegraphics{15-2ia2f1.eps}
\caption{文脈語の最小頻度による平均精度への影響}
\label{fig:minfreq}
\end{center}
\end{minipage}
\hfill
\begin{minipage}{0.48\textwidth}
\begin{center}
\includegraphics{15-2ia2f2.eps}
\caption{文脈語の最大頻度による平均精度への影響}
\label{fig:maxfreq}
\end{center}
\end{minipage}
\end{figure}



文脈語の頻度については，
高頻度の文脈語は，一般的であり同義語の判別に役立たず，
一方，低頻度の文脈語は，特殊すぎてノイズとなることが考えられる．
したがって，中程度の頻度の文脈語を採用するのがよいと考えられるので，
最小頻度 50，最大頻度 600 を使用するものとする（図~\ref{fig:minfreq}, \ref{fig:maxfreq} 参照）．



\subsection{window 幅による比較}
\label{subsec:window幅による比較}

window 幅をどのように設定すれば，平均精度が最適になるかを調査した．
window 幅を大きくすれば，候補語に対する文脈語を多く得られる反面，
候補語から遠い文脈語は，候補語と関連性が
薄くなり，ノイズとして悪影響を及ぼすので同義語の判別能力が弱くなり，
また逆に，window 幅を小さくすれば，候補語に対して得られる文脈語
が少なくなり，判別に使用する情報が少なくなると考えられる．

window 幅を同義語候補語の前 (FWD) に 0〜4 語，後 (AFT) に 0〜4 語，変化させて実験した
結果を表~\ref{window} に示す．
平均精度は，window~[2,2] が 43.1\% で最も高かった．

同義語候補語の前後の window の比較では，
window~[2,0] では 35.5\%, window~[0,2] では 37.8\% であった．
例えば，「Boarding」というクエリに対する正解は「搭乗」であるが，
window~[2,0] では「搭乗」が 1 位になるが，window~[0,2] では 8 位になる．
理由としては，window~[2,0] では「Boarding」と「搭乗」の前に共通の
語である「お客様」が多く出現するが，
window~[0,2] では「Boarding」と「搭乗」の後に共通の文字列（例：「を開始」など）の
出現が少ないためであると考えられる．
つまり window~[2,2] では，window~[2,0] の影響を受けて 1 位になっているといえる．
「CAT\footnote{
	CAT は，Clear Air Turbulence を表す．
}」というクエリに対する正解は
「TURB」と「揺れ」であるが，
window~[2,0] では「TURB」が 2 位，「揺れ」が 9 位になる．
共通に出現する代表的な言葉は「突然の」であるが，その数がそれ程多くないため
だと考えられる．
window~[0,2] では「TURB」が 1 位，「揺れ」が 2 位になる．
その理由として，後に「に遭遇」という表現が多く出現しているからだと考えられる．
window~[2,2] では，window~[0,2] の影響を受けて「TURB」が 1 位，「揺れ」が 2 位になっている．

\begin{table}[t]
\begin{center}
\caption{window 幅による平均精度（\%）の比較}
\label{window}
\input{02table03.txt}
\end{center}
\end{table}

各同義語によりバラツキはあるものの，全体を通して，window~[2,2] では，同義語の前 2 語の window~[2,0] と
同義語の後 2 語の window~[0,2] が補完しあって，よい結果になって
いるものと考えられる．
クエリ・候補語の window 幅内の前と後とでどちらが精度に貢献しているかについては，顕著な差は認められなかった．




\section{議論}

第 4 節での実験結果をもとにして，以下のような考察を行った．
第 5.1 節ではクエリ・候補語の種類による精度の違いを調査した．
第 5.2 節では，文脈情報の正規化による精度変化について述べる．
第 5.3 節では，本手法がクエリ・候補語の近傍の文脈情報を使用しているのに対して，
文書からの大域的情報を用いる手法との精度の比較を行った．
第 5.4 節では関連語の検索について述べる．


\subsection{クエリ・候補語の種類による精度の違い}

本節では，クエリと候補語の種類による精度の違いについて調べる．
同義語の種類として，
「Dispatch」と「DISP」のようなアルファベット同士，
「ベルト」と「Belt」のようなカタカナとアルファベット，
「座席」と「席」のような漢字同士，「Check」と「検査」のような
それ以外のものに分類して，表~\ref{classification} のような基準で平均精度を調べた．
一般に，候補語の頻度が高いほど文脈情報が豊富となり，
平均精度も高くなる傾向にあるため，候補語の頻度に対する閾値を増加させることで
平均精度を上げることができる．このようにして平均精度を上げることで 50\% を超えることができた場合，基準 3 に該当する．
また，10\% 以上 50\% 未満のときを基準 4，10\% 未満のときを基準 5 として分類した．
また，閾値の頻度 100 未満でも 50\% を超えることができた場合を基準 2，
頻度 50 未満でも 50\% を超えることが出来た場合を基準 1 とした．

\begin{table}[b]
\begin{center}
\caption{同義語候補語の頻度による精度の高低の分類基準}
\label{classification}
\input{02table04.txt}
\end{center}
\end{table}
\begin{table}[b]
\begin{center}
\caption{同義語候補語の種類による平均精度（\%）の比較}
\label{variation}
\input{02table05.txt}
\end{center}
\end{table}

表~\ref{variation} にその結果を示すが，横軸の基準の数字は，各分類毎の基準 1〜5 での比率を示す．
各分類の括弧の中の数字は，各分類の全体での比率を示す．
アルファベット同士は，基準 1 と基準 2 の合計で 81\% 以上の平均精度が得られた．
カタカナとアルファベットでは，基準 1 から基準 3 までの合計でも平均精度は 15\% 程度であった．この理由としては，カタカナとアルファベットでは，ごく近傍に出現
する語の種類（カタカナではカタカナが多く，アルファベットではアルファベットが
多い）が異なるためである．
漢字同士の場合には，基準 1 から基準 3 までの合計で平均精度は約 63\% 得られた．
それ以外の場合は，全体の 76\% を占めるが，基準 1 から基準 3 までの合計で
平均精度は約 27\% であった．

この結果から，カタカナとアルファベット及びそれ以外の分類のものの
精度が低いことが分かった．
それに対して，アルファベット同士，漢字同士の同義語の場合には，高い確度
でユーザに同義語を提示できる．




\subsection{文脈語の正規化}
\label{subsec:文脈語の正規化}

第 5.1 節でカタカナとアルファベット及びそれ以外の分類のものの精度が低いことが分かったが，
その解決法を考える．
その方法として，文脈語に出現する同義語を同定することを考え，それによる精度変化を調べた．
同義語同士の周辺に出現する文脈語を観察すると，文脈語の中にも同義語\footnote{
	今後，
	文脈同義語と呼ぶこととする．
} が多く存在する．
例えば，「Cargo」と「貨物」という同義語には，
「Cargo Loading」と「貨物搭載」というように
「Loading」と「搭載」
という文脈同義語が出現する．
しかしながら，「Cargo 搭載」，「貨物 Loading」という使用は，
ほとんどされないので，「Cargo」と「貨物」の
文脈語の中で「Loading」と「搭載」の分布は偏っている．
したがって，特徴ベクトルにおいて別の要素である「Loading」と「搭載」は，
「Cargo」と「貨物」の類似度の向上にあまり寄与しない．
そこで，これらの文脈同義語を正規化\footnote{
	ここで正規化とは，文脈語を既知の同義語に置換することをいう．
例では，「搭載」を「Loading」に置換することである．
	} することにより平均精度の向上が期待できる．

実験として，筆者の 1 人が選択した 25 対の同義語（表~\ref{syn1} 参照）について，
41 個の文脈同義語（表~\ref{syn} 参照）の正規化を行い，個々の同義語の精度変化および評価辞書全体への
影響を調査した．
25 対の同義語の平均精度は，9.6\% で，評価辞書全体の精度 43.1\% と比較して難易度の高いものである．
文脈同義語は，各同義語について特徴的なものを，筆者の 1 人が，
PortableKiwi~\cite{pkiwi} を使用して 1〜4 個
選択した．
PortableKiwi は，対象としているコーパスに対して，ある言語表現を入力すると，その前後に現れる
適当な長さの文字列~\cite{kiwi} のうち，頻度の高いものから順に表示する用例検索システムである．

\begin{table}[b]
\begin{center}
\hangcaption{文脈語の正規化に使用した同義語対（括弧内の数字は，正規化に使用された文脈
同義語の表~\ref{syn} の番号を示す．最初の括弧は文脈語の頻度制限をしたもの，
2 番目の括弧は頻度制限をしないもの．）}
\label{syn1}
\input{02table06.txt}
\end{center}
\end{table}
\begin{table}[t]
\begin{center}
\caption{正規化に使用した文脈同義語（矢印（⇒）は，⇒の左の語句から右の語句に置換したことを示す．）}
\label{syn}
\input{02table07.txt}
\end{center}
\end{table}

最初に文脈語の頻度をこれまで通り 50 から 600 のものに制限すると，表~\ref{syn}の 41 個の文脈同義語の
内，使用されたものは 21 個で，表~\ref{syn1} の 25 対の同義語の中で文脈同義語が使用された
ものは，15 対であった．
ただし，15 対の同義語は，想定していた文脈同義語が 1 個でも使用されたもので，想定していた
文脈同義語が全て使用されていないものを含む．
15 対の同義語について，平均精度の変化を調べたところ，正規化しない場合の 8.4\% から，正規化した場合は 43.0\% に上昇した．その内容は，平均精度が上昇したものが 28 個，精度の低下したものが 2 個であった\footnote{
	1 つの同義語対について，
	左辺から右辺と右辺から左辺で精度が異なるため，
	15 対の同義語では 30 個の精度計算が必要である．
}．
精度の低下した例は，クエリ「Final」に対する「最終」とクエリ「最終」に対する「Final」
である．
両例とも精度の低下した理由は同様なので，クエリ「Final」に対する「最終」の例を
見てみると，
正規化しない場合の順位 203 位から，正規化した場合は 355 位に落ちていた．
理由としては，文脈同義語が想定していた 3 個の内，「搭載」⇒「Load」という 1 個しか使用されず，
その文脈同義語も「Final」と「最終」を同義語として認識させ，
他の候補語の順位は上昇させないような
ものではなかったからであると推定される．

次に，文脈同義語のみ，文脈語の頻度制限（50〜600）を外して実験を行った．
その結果，想定していた全ての文脈同義語が使用され，25 対の同義語について
平均精度が上昇したものが 46 個，低下したものが 2 個，変化しないものが 2 個であった．
25 対の同義語について平均精度の変化を調べたところ，正規化しない場合の 9.6\% から，正規化した場合は 42.9\% に上昇した．

精度の低下した同義語の 1 つの例は，クエリ
「GRP」に対する「グループ」である．
類似度の値は，正規化しない場合の 0.24 から，正規化した場合の 0.32 に上昇していたが，
他の候補語，例えば，「同行」の類似度が 0.21 から 0.39 のようにより上昇した
ために順位が低下したものである（「同行」は不正解である）．
もう 1 つの低下した例は，クエリ「手順」に対する「PROC」であるが，その理由も同様である．

精度の変化しなかった同義語の 1 つ例は，クエリ「PROC」に対する「手順」である．
正規化しない場合の「手順」の順位は 2 位で，1 位は「PROC」の同義語の「Procedure」であったが，
正規化により双方の類似度が上昇し，結果として「手順」の順位は 2 位のままであった．
もう 1 つの精度の変化しなかった例は，クエリ「DEP」に対する「出発」であるが，正規化しない場合の
順位が 2 位はあり，その類似度は 0.42 であった．
「遅延」⇒「Delay」という文脈同義語により正規化すると，
「出発」の類似度は，0.48 に上昇したが，
1 位であった「ARR」も同様に 0.48 から 0.57 に上昇した
（「ARR」は不正解である）．
これは，文脈同義語「遅延」⇒「Delay」が「出発」にも「ARR」にも
関係しているためである．
したがって，正解にのみ関係する文脈同義語を選択できれば，
正解のみ精度を向上させることが期待できるが，どのように選択すればよいかは今後の課題である．

15 対の同義語の文脈語を正規化した場合の評価用辞書全体での平均精度は 45.7\% であり，
文脈語の正規化を行う前の 43.1\% よりも向上していた．
その理由の 1 つは，15 対の同義語の精度が
上がり，その結果として平均精度を向上させたもの（その効果は，1.3\%），
もう 1 つの理由は，それ以外の同義語も文脈語の正規化に
より若干精度が向上したためである．

文脈同義語の頻度制限を外した 25 対の同義語の文脈語を正規化した場合の評価用辞書全体での平均精度は 46.8\% であり，
文脈語の正規化を行う前の 43.1\% よりも向上していた．
25 対の同義語の精度向上による効果は，2.1\% であった．

結論として，文脈同義語は，第 4.3 節で述べたような
高頻度と低頻度の文脈語の制限を外した方がよい結果となった．
尚，頻度制限を外した場合，高頻度側で使用可能となった文脈同義語は 20 個，
低頻度側で使用可能となった文脈同義語は 1 個であった．
高頻度の文脈同義語が圧倒的に多かった．
したがって，高頻度の同義語が既知である場合には，同義語の文字種に拘わらず，正規化することにより
システムの精度を向上できることが分かった．



\subsection{大域的文脈情報との比較}

酒井らは，日本語の略語からその原型語との対応関係を取得するのに
以下のような手法を用いている~\cite{sakai05}. 

略語候補とそれに対応する原型語の候補を，それを構成している文字情報から獲得する．
略語候補と原型語の候補の類似度を計算して，対応関係を取得する．

文脈情報の類似度について第 3 節で提案した手法との比較を行った．
彼らは，漢字・ひらがなの名詞の略語を対象としたが，
それをカタカナ，アルファベットに拡張して提案手法との比較を行った．
彼らの類似度の計算は，
コーパス中の略語候補語を含んでいる文書における略語候補語の出現頻度，全ての名詞の
総出現頻度，文の数，略語候補語が最初に出現する文番号の情報を用いて
重みを付与して順位付けを行い，
その上位 $N_{n}$ 文書を取り出して，略語候補の関連文書としている．
次に，その関連文書に含まれる各名詞に対して
出現頻度，文書頻度などの情報を用いて
重みを付与して順位付けを行い，
上位 $N_{m}$ 個の名詞を取り出し，名詞の重みを付与したベクトルを生成している．
原型語候補に対しても同様のベクトルを生成する．
そして，その余弦により類似度を計算している．
本論文でも酒井ら~\cite{sakai05} と同様に，$N_{n}=20$，$N_{m}=200$ として実験した．

\begin{table}[t]
\begin{center}
\caption{大域的文脈情報と局所的文脈情報の比較}
\label{tbl1}
\input{02table08.txt}
\end{center}
\end{table}

結果は，表~\ref{tbl1} にあるように，提案手法よりも，かなり低い値となった．
その原因として，略語とその原型語の対応関係を求めるのに，関連文書全体から
代表的な名詞を抽出して類似度を計算している（大域的文脈情報）が，
必ずしも，略語に関連する文書があるとは限らないと考えられる．
我々は，局所的な文脈語から類似計算を行っている（局所的文脈情報）が，
この手法の優秀性が証明された．



\subsection{関連語の検索}

語句には，同義であるもの以外に関連性のあるものが存在する．
このような語句の分類も，テキスト処理においては重要である．
例えば，「引き返し」という語句の関連語として
「GTB （Ground Turn Back: 地上引き返し）」，「ATB （Air Turn Back: 空中引き返し）」，
「RTO （Rejected Takeoff: 離陸中止）」，「トラブル」など
がある．

「トラブル」は，「GTB」，「ATB」，「RTO」の上位概念あり，
「GTB」，「ATB」，「RTO」は類義語である．
これらの語句にも，「HYD Failure による GTB」，「HYD Failure による ATB」
のように同じような文脈が現れる場合が多い．
したがって，提案手法で関連語の検索も可能と考えられる．
表~\ref{rel} に，いくつかのクエリに対する回答の中での関連語を示す．

\begin{table}[t]
\begin{center}
\hangcaption{関連語の検索：番号は検索された番号，括弧内の「同」は同義語，「原」は原因
を表す関連語，「結」は結果を表す関連語，括弧無しは類義語を示す．}
\label{rel}
\input{02table09.txt}
\end{center}
\end{table}

事実「RTO」について調べたところ，クエリに対する 50 位までの回答で
類義語が 2 つ，原因を表す関連語が 5 つ，結果を表す関連語が 1 つ含まれていた．
同じような文脈で使用される関連語は，本手法で検索できることが分かる．
関連語によりどのように文脈が違うかについては．今後の研究課題である．

本論文では，精度は計算していないが，関連語の検索にも本手法が適用できる
と考えられる．



\section{複合名詞の処理}

複合名詞の処理については，全ての連接する単名詞の組み合わせを調べると，
その数が多くなり非効率である．
したがって，最初に複合名詞を抽出して，
それを単名詞と同様に扱うことで，これまで述べた処理と同じ
手法を用いることとした．

複合名詞の抽出については，専門用語抽出システム~\cite{termextract} を使用し，
それが抽出したものの中で，
重要度評価値が 3,000 以上の用語の中の複合名詞を使用した．専門用語抽出システムは，単名詞の左右に出現する
単名詞の連接種類数と連接頻度および候補語の出現頻度から専門用語を抽出するものである．
上記の条件で，350 の複合名詞が得られた．人手で複合名詞に対して同義語辞書を
作成した結果，辞書の登録数 73 で，平均同義語数
は 2.00 であった．複合名詞の同義語の中には，複合名詞と単名詞が含まれる．
この複合名詞 350 と単名詞 1,343 に対して window~[2,2] で
文脈語の最小頻度 50，最大頻度 600 で文脈情報を取得した．
実験の結果，平均精度は，44.3\% であった．
辞書登録数が少ないので単純には比較できないものの単名詞と同等の精度が得られた．


\subsection{複合名詞と単名詞の関係}

複合名詞と単名詞について以下のような関係があることが分かった．
\begin{enumerate}
\item 複合名詞の同義語が単名詞の同義語の組み合わせでできているもの：\\
例：\ul{出発}~\ul{遅れ}‐\ul{出発}~\ul{遅延}
\item 複合名詞の基底名詞\footnote{
	複合名詞を単名詞に分解した時に，
	複合名詞の最後に現れる単名詞．例の場合は，「券」．
} と単名詞が同義なもの：\\
例：搭乗~\ul{券}‐\ul{券}
\item 複合名詞の基底名詞以外の語同士が同義なもの：\\
例：\ul{整備}~点検‐\ul{整備}
\item 複合名詞の中で一部の名詞に省略があるもの：\\
例：搭乗~\ul{旅客}~数‐搭乗~数
\item 単名詞同士では，同義でなかったものが複合名詞では同義になるもの：\\
例：\ul{搭乗}~\ul{口}‐\ul{ゲート}，\ul{到着}~地‐\ul{目的}~地\\
\end{enumerate}

以下では，複合名詞を最初に抽出した利点に着目して述べる．
（1）については，複合名詞の処理を行わなくても，単名詞の同義語を置き換えることにより
複合名詞の同義語を得ることが可能であるが，
その場合には，「DEP 遅延」のようにあまり使用されない複合名詞の同義語が得られてしまい，
単名詞の同義語を置き換えだけでは複合名詞の同義語を絞り込むことができない．
したがって，複合名詞抽出の前処理を行うのが効率的である．
（2）と（3）については，複合名詞を構成する名詞の中でより一般的で省略しても意味が変化しないもの
が省略されている．
（4）の日本語の略語ついては，第 6.2 節で述べる．
（5）の関係は，上記 4 種類と異なり，単純に省略や単名詞の置き換え，単名詞の同義語の組み合わせ
だけでは扱えないもので，
複合名詞の前処理を行わないと同義語が得られないものである．


\subsection{日本語の略語}
\label{subsec:日本語の略語}

日本語の略語の平均精度について調査した．
日本語の略語とは，例えば，「整備作業」と「整備」のようなものであり，
略語が原型語に完全に包含されるものである．
したがって，「整備作業」と「整備点検」のようなものは含まれない．
単名詞と複合名詞を合わせた同義語候補語 1,693 個について
日本語の省略語の辞書を人手で作成したところ，エントリー数：92，
項目数：123，平均項目数：1.34 であった．
この辞書を使用して実験したところ，
平均精度で 52.3\% という高い精度が得られた．
これは，日本語の原型語と一部省略されている略語では，その周辺には
同じような文脈語が出現しやすいと考えられ，本手法の得意な
分野だといえる．



\section{同義語辞書作成}

同義語辞書は，表~\ref{dic} のように見出し語に対して 1 語以上の同義語が辞書項目として
登録される．情報検索やテキストマイニングでは，同じ概念をグループ化し
精度を向上させるために見出し語に
対して 1 対 1 で同義語を対応させる必要がある場合がある．
例えば，表~\ref{dic} に対して，同義語リストは
表~\ref{list} のようになる．表~\ref{list} では，「APP」が「進入」に，「Approach」が「進入」に，
「CRZ」が「巡航」
に変換されることを示す．
「進入」，「巡航」は，変換されないでそのまま使用される．
複数の同義語の中からどの語を変換語に選択するかは，専門用語抽出
システムの重要度評価値の最も大きなものを用いた．
つまり，同義語同士の中で最も重要度の高い語に変換するものである．
また，「CRZ」⇒「巡航」と「巡航」⇒「CRZ」の場合には，
「CRZ」と「巡航」の重要度評価値の大きな方に変換した．
この例では，「巡航」の方が重要度評価値が大きく「CRZ」⇒「巡航」という
云い換えになる．
もちろん多義性のある語では，一意に同義語を決定できないので
このようなリストは使用できない．この場合には，個々の語が出ている文脈から判断する
必要があるが，これは今後の課題である．

\begin{table}[t]
\begin{minipage}{0.45\textwidth}
\begin{center}
\caption{同義語辞書}
\label{dic}
\input{02table10.txt}
\end{center}
\end{minipage}
\hfill
\begin{minipage}{0.45\textwidth}
\begin{center}
\caption{同義語リスト}
\label{list}
\input{02table11.txt}
\end{center}
\end{minipage}
\end{table}

次に同義語辞書を作成する際に一度に全て作成するのではなく，以下に示すように同義語辞書を
一部作成した段階で
同義語リストを文脈情報の正規化に使用するために文脈同義語としてシステムに与えることにより，
残りの辞書作成の精度（平均精度）が向上するかを検証した．
例えば，「PAX」を「旅客」に変換することにより，
「PAX Boarding」と「旅客搭乗」の例では，「Boarding」と「搭乗」という
同義語の文脈語が同一になる．
第~\ref{subsec:文脈語の正規化} 節では，筆者の一人が選択した同義語対について，
頻出する 1〜4 個の文脈同義語を選択して使用したが，今回は出現頻度順に自動的にシステムに付与した．

文脈同義語は，第~\ref{subsec:文脈語の正規化} 節の文脈語の正規化で頻度制限をしない方が
精度が良かったので，本節でも頻度制限を行わなかった．出現頻度が 500 以上の同義語リスト
を作成したところ，41 個の同義語リストが得られた．これを文脈同義語とし，正規化した
ものとしないものについて平均精度を比較したところ，それぞれ平均精度は 43.3\%，
41.1\% であり，正規化したものの方が約 2.2\% 精度が向上した（文脈同義語リストに含まれる同義語は評価から
除外した）．
同様に出現頻度が 300 以上，1,000 以上のものについて比較したところ，正規化したものの
平均精度がそれぞれ約 2.2\%，1.8\% 精度が向上した．
出現頻度が 100〜300，300〜500 のものについては，平均精度の変化はなかった．
以上の結果から，同義語の中で頻度の高いものを文脈同義語としてシステムに付与すると，
若干平均精度が向上することが分かった．




\end{document}
