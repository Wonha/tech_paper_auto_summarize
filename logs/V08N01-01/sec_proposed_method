本節では，ランダム・プロジェクションを用いたベクトル空間モデル[CITE][CITE]についての概観を述べる．
ランダム・プロジェクションは，ひとつの文書データを[MATH]次元空間上のベクトル[MATH]として表現するとき，このベクトルを[MATH]次元空間に射影する手法である．
その際，[MATH]個の任意の[MATH]次元ベクトル[MATH]を用意する．
用意したこれらのベクトルと[MATH]次元ベクトル[MATH]の内積，
をそれぞれ計算する．
その結果，[MATH]次元に圧縮した[MATH]を要素とするベクトルが得られる．
次元圧縮に必要なベクトル[MATH]を列ベクトルとする[MATH]の行列[MATH]を用いると，求める[MATH]次元ベクトルは
となり，ランダム・プロジェクションは行列計算のみの簡単な形で表現することができる．
この行列[MATH]が任意の正規直交行列のとき，すなわち，行列[MATH]の列ベクトルがすべて単位ベクトルで，かつ，相異なる列ベクトルが互いに直交していれば，ランダム・プロジェクションは射影前後におけるベクトル間距離を近似的に保存する特性を持っている．
ランダム・プロジェクションに必要な行列[MATH]は，これまでの研究では正規分布などの確率分布をなす任意の行列が用いられている[CITE][CITE][CITE] [CITE][CITE][CITE]．
このような行列を用いて任意の部分空間に射影する場合，次元圧縮を行う前後の任意のベクトル間距離は近似的に保存されることが示されている[CITE][CITE]．
しかし，任意の正規直交行列を用いる場合，次元圧縮を行う前後のベクトル間距離を保存する効果は得られたとしても，LSIのように，ベクトルの要素が抽象的な意味を持つ索引語の生成や内容的に関連のある文書をまとめる効果があるとは考えられない．
このことから，LSIのような，情報検索に有効な索引語を生成するために，ランダム・プロジェクションの改良が課題となる．
このような課題を解決するものとして，ランダム・プロジェクションでベクトルを次元圧縮をした後，さらに特異値分解を行うことにより，LSIの効果を得る手法が提案されている[CITE]．
この手法は，関連文書をまとめる効果を得ると同時に，特異値分解のみを用いた場合に比べ，モデル作成に必要な時間を短縮したものである．
しかし，ランダム・プロジェクションと特異値分解は，共にベクトル間距離を保存する効果を持つ手法であるため，特異値分解が内容的に関連のある文書，あるいはタームをまとめるために適用されているとしても，これらの手法を同時に利用することは，検索モデルを構築する時間に関して，効率の良い手法であるとはいえない．
さらに，非常に大きい次元数をもつ行列について考えた場合，特異値分解に多くの計算量が必要であることも問題となる．
したがって，特異値分解により誤差を最小とする近似行列を得る代わりに，誤差は最小ではないものの，ランダム・プロジェクションのみを用いてLSIの効果を得ることで，より高速に検索モデルが構築できるのではないかと考えられる．
これを実現するために，我々は，ランダム・プロジェクションにおける行列[MATH]に，文書の内容を表現した概念ベクトルを利用することを提案する．
概念ベクトルは，文書ベクトル集合をクラスタリングしてできたクラスタの，各クラスタに属する文書ベクトルの重心を正規化したベクトルとして表される．
この概念ベクトルによる次元圧縮は，単にベクトルを近似するだけではなく，クラスタに属するベクトル集合の重心を求めることにより，ターム間で特徴づけられる隠れた関連性やタームの同義性と多義性を捉えることができる．
クラスタリングにより得られた各クラスタは互いに異なる概念を持ち，これより得られる概念ベクトルが圧縮した空間の軸となるように用いられる．
これにより，次元圧縮された行列は文書と概念ベクトルの類似度を表し，元の空間において内容の近い文書は，圧縮した空間においても近くなる可能性がある．
また，類似しているが，異なるタームを使った文書の場合，元の空間では近くないが，圧縮した空間では近くなる可能性があり，検索性能が改善されると考えられる．
さらに，多義語により元の空間において近いとされる文書どうしが圧縮した空間では遠くに離れ，誤った検索が取り除かれる可能性も期待できる．
このように，これまで単語などが要素であったベクトルが，文書の内容を要素とするようなベクトルに変換され，文書を低い次元で，より検索性能が向上するベクトル表現ができると考えられる．
概念ベクトルからなる行列[MATH]を求めるために，球面[MATH]平均アルゴリズム[CITE]と呼ばれるクラスタリング手法を用いる．
球面[MATH]平均アルゴリズムは，目的関数が局所的に最大となるまで，高い次元でスパースな文書データ集合をクラスタリングする手法である．
球面[MATH]平均アルゴリズムでは，ユークリッド空間内でベクトル間のなす角の余弦を類似度とし，多次元空間の単位円を分割することによりクラスタリングを行う．
これにより，文書ベクトルの集合は指定した数の部分集合に分割され，各クラスタの中心を計算することで，容易に概念ベクトルを作ることができる．
さらに，このアルゴリズムは文書ベクトルのスパースさを逆に利用して高速に収束する利点を持ち，得られる概念ベクトルは特異値分解を用いたものに非常に近いことが示されている[CITE]．
しかし，球面[MATH]平均アルゴリズムにより得られる概念ベクトルは一般的に直交性を満たしているとは限らないため，概念ベクトルをランダム・プロジェクションに適用するには疑問が生じる．
先に述べたように，距離を保存するには正規直交性を満たすベクトルを利用する必要があるが，この概念ベクトルをランダム・プロジェクションに適用する場合，直交性を満たしていないとしても独立であれば，任意の行列においても十分に距離を保存する可能性のあることが示されている[CITE]．
球面[MATH]平均アルゴリズムでは，内容的に似通ったベクトルをクラスタとしてまとめるため，原理的には独立した概念ベクトルを生成すると考えられる．
このため，直交性に関して，概念ベクトルをランダム・プロジェクションに適用するのは問題ないと考えられる．
本節では，まず，球面[MATH]平均アルゴリズムの概要を述べる前に，クラスタリングにより得られる概念ベクトルについて述べる．
ベクトルの集合をベクトル空間にプロットしたとき，同質のベクトルが多く存在する場合を除いて，いくつかのグループに分かれる．
このようなグループはクラスタと呼ばれ，類似した内容をもつベクトルの集合が形成される．
概念ベクトルはクラスタに属するベクトルの重心を求めることにより得られ，そのクラスタの内容を表す代表ベクトルである．
概念ベクトルを求める例として，正規化された[MATH]個のベクトル[MATH]を，異なる[MATH]個のクラスタ[MATH]にクラスタリングすることを考える．
このとき，ひとつのクラスタ[MATH]に含まれるベクトル[MATH]の平均である重心[MATH]は以下のように表される．
ここで[MATH]はクラスタ[MATH]に含まれるベクトルの数を表す．
ベクトルの重心は単位長にはなっていないので，そのベクトルの長さで割ることにより概念ベクトル[MATH]を得る．
[MATH]平均アルゴリズムでは，目的関数は一般的に概念ベクトルとクラスタに属するベクトルとの距離の和
を最小にするような概念ベクトルを求める，最小二乗法が用いられる．
球面[MATH]平均アルゴリズムでは，このような最小化問題ではなく，ミクロ経済学の分野における，生産計画の最適化問題で扱われている目的関数を用いている[CITE]．
これは，各クラスタ[MATH]の密度を
とし，クラスタの結合密度の和を目的関数としている．
クラスタの密度は，以下のコーシー・シュワルツの不等式より，任意の単位ベクトル[MATH]に対して，クラスタ[MATH]に含まれるベクトル[MATH]と概念ベクトルとの内積の総和が最大となる．
また，クラスタの密度は，それに属するベクトル和の距離に等しくなるという特徴を持っている．
[REF_moku]節で示した目的関数[MATH]を最大にするように，ベクトルの集合を反復法によりクラスタリングする．
文書ベクトル[MATH]を[MATH]個のクラスタ[MATH]に分割するためのアルゴリズムを以下に示す．
すべての文書ベクトルを[MATH]個のクラスタに任意に分割する．
これらの部分集合を[MATH]とし，これより求められた概念ベクトルの初期集合を[MATH]とする．
また，[MATH]を繰り返しの回数とし，初期値は[MATH]である．
各文書ベクトル[MATH])に対し，余弦が最も大きい，最も文書ベクトルに近い概念ベクトルを見つける．
このとき，すべての概念ベクトルは正規化されているので，余弦は文書ベクトル[MATH]と概念ベクトル[MATH]の内積を求めることと同値である．
これにより，前回の繰り返しで求めた概念ベクトル[MATH]から，文書ベクトルが新たな部分集合[MATH]に分割される．
ここで，[MATH]は概念ベクトル[MATH]に近いすべての文書ベクトルの集合とする．
新たに導かれた概念ベクトルの長さを正規化する．
ここで，[MATH]はクラスタ[MATH]の文書ベクトルの重心を表す．
目的関数[MATH]の値を求め．
前回の繰り返しにおける目的関数の値[MATH]との差を計算する．
このとき，
を満たす場合，[MATH]，[MATH] ([MATH])とし，アルゴリズムを終了する．
停止基準を超えていない場合は，[MATH]に1を加え，ステップ2に戻る．
ここで，停止基準における目的関数の差は，文書数が約4000で，クラスタの数が8よりも大きい場合，収束した時の目的関数は1000を超えることがこれまでの研究で報告されている[CITE]．
このため，繰り返しでの1以下の差は無視できるとし，便宜的に1という値を設定した．
