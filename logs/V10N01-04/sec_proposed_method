本論文では，検索性能の低下を招く表記の揺れに寛容な類似尺度を提案する．
そのために，まず編集距離を類似尺度に変換し，次に一致した文字の重みを加算する類似尺度に拡張し，最後に一致した文字列の重みを加算する類似尺度に拡張する．
本節では，この三つのステップ毎に定義した類似尺度を示すことで，本論文で提案する類似尺度が考慮する性質を明示する．
情報検索において，検索対象となるデータに存在する表記の揺れは検索性能の低下を招くものである．
そこで，本論文では，表記の揺れに対応することができる尺度としてよく知られている編集距離に基づく類似尺度を考えた．
編集距離（またはレーベンシュタイン距離）は，二つの文字列の距離として，それらを一致させるために必要な文字の削除，挿入，置換操作の回数を距離として考える方法である．
この距離はダイナミックプログラミングを用いて計算できる．
次に，編集距離[MATH]の定義を示す．
編集距離
[MATH]を文字列，[MATH]を異なる文字，``"を空文字列とする．
関数[MATH]は与えられた引数のうちもっとも小さい値を返す関数とする．
両方とも空文字のとき    [MATH]
長さ1文字以下の異なる文字列のとき    [MATH]
先頭の1文字が同じとき
先頭の1文字が異なるとき([MATH])
この定義で示すように，編集距離は不一致な文字を数えることによって二つの文字列の相違度を測っている．
このため，編集距離は相違尺度とみることができる．
定義から，編集距離は相違度が最小になるように，関数[MATH]を用いて不一致な文字の位置を決定している．
この部分が編集距離に表記の揺れに対応できる性質を持たせている．
二つの文字列全体をみて，もっとも相違が小さくなるように試行錯誤することによって，表記の揺れがあっても類似したものとみなせる定義式となっている．
本論文では，情報検索に適した編集距離に基づく類似尺度を提案するための第一ステップとして，この定義を変形して，相違尺度である編集距離を類似尺度に変換する．
具体的には，編集距離とは逆に類似度が最大になるように，関数[MATH]の代わりに関数[MATH]を用いて一致する文字の位置を決定する尺度に変換する．
本論文では，この尺度を「単純編集類似度」と呼ぶことにした．
この尺度と編集距離との違いは類似度を最大にするか相違度を最小にするかの違いだけなので，編集距離の持つ表記の揺れに寛容な性質は損なわれていない．
次に単純編集類似度[MATH]の定義を示す．
単純編集類似度
[MATH]を文字列，[MATH]を異なる文字，``"を空文字列とする．
関数[MATH]は与えられた引数のうちもっとも大きい値を返す関数とする．
両方とも空文字のとき    [MATH]
長さ1文字以下の異なる文字列のとき    [MATH]
先頭の1文字が同じとき
先頭の1文字が異なるとき([MATH])
単純編集類似度はすべての文字を同等に扱うため，一致する文字の重みはすべて1.0である．
しかし，一致した文字が内容語に含まれる文字である場合と機能語に含まれる文字である場合とでは，情報検索においてその文字の貢献度は異なる．
これは，意味に大きく関わる文字と表記の揺れとなりうる文字の貢献度の違いに相当する．
一般に，情報検索の性能を向上させるために機能語を考慮せず，内容語だけを考慮するシステムが多く存在する．
これは，機能語よりも内容語のほうが検索性能に貢献する度合いが高いためである．
日本語における機能語はたとえば，「は」，「が」，「を」，「の」，「では」や「〜する」，「〜である」，「〜した」，「〜でない」，「〜しない」などであり，主にひらがなで構成されている．
一方，内容語は主に漢字やカタカナで構成されている．
カタカナは主に外来語を構成している．
このような背景から，情報検索に適した編集距離に基づく類似尺度を提案するための第二ステップとして，文字が一致した場合，常に1.0を加算するのではなく，一致した文字が持つ重みを加算する類似尺度に単純編集類似度を拡張する．
言い換えると，この類似尺度は単純編集類似度の一般化である．
本論文では，この類似尺度を「文字重み編集類似度」と呼ぶことにした．
また，編集距離（レーベンシュタイン距離）に関して各操作に重みを持たせた重みづきレーベンシュタイン距離がある[CITE]．
この距離では，操作ごとに対象となる文字に関する重みを持つ．
ここで，文字に関して操作ごとに重み付けるのではなく，その文字に対してどの操作が行われても文字が持つ唯一の重みを付けると，編集距離（レーベンシュタイン距離）から単純編集類似度への変形のように，重みづきレーベンシュタイン距離を文字重み編集類似度に変形することができる．
次に文字重み編集類似度[MATH]の定義を示す．
文字重み編集類似度
[MATH]を文字列，[MATH]を異なる文字，``"を空文字列とする．
関数[MATH]は文字[MATH]が持つ重みを返す関数，関数[MATH]は与えられた引数のうちもっとも大きい値を返す関数とする．
両方とも空文字のとき    [MATH]
長さ1文字以下の異なる文字列のとき    [MATH]
先頭の1文字が同じとき
先頭の1文字が異なるとき([MATH])
例を用いて，単純編集類似度と文字重み編集類似度の振る舞いの違いを示す．
文字重みの効果
文[MATH]がそれぞれ
であり，Score関数が次のように与えられたとする．
文字[MATH]がひらがなの場合    [MATH]
文字[MATH]がひらがな以外であった場合    [MATH]
このとき，[MATH]と[MATH]の類似度，[MATH]と[MATH]の類似度は表[REF_tab:character-weight]のようになる．
この例において，[MATH]と[MATH]は人間であれば類似していると判断される文である．
これらの文に対する類似度は一致する文字がすべてひらがな以外であるため，単純編集類似度でも文字重み編集類似度でも同じ類似度となる．
一方，[MATH]と[MATH]は人間であれば類似していないと判断される文である．
これらの文に対して，単純編集類似度は一致する文字がひらがなであっても同じ重みを加算するため，高い類似度を与えてしまう．
しかし，文字重み編集類似度は類似していると判断される[MATH]と[MATH]が持つ類似度よりも低い類似度を与えることができている．
このことより，単純な重み付けでも，二つの文が類似するかしないかの判断に役立つことが予想できる．
例[REF_ex:weight]の[MATH]は「自動翻訳システム」であり，この文は「自動」，「翻訳」，「システム」という三つの内容語で構成されている．
これらの単語のうち，漢字で構成されるものは文字自体が意味を表しているために一文字だけでも検索に貢献する場合があるが，「システム」はほとんどの場合，一文字では意味を表すことができないカタカナで構成されている．
「システム」は構成する文字が連続して現れることによって意味を表す単語となる．
同様に，ひらがなで構成される文字列でも連続して現れることによって貢献する場合がある．
このような場合，情報検索において，構成する文字それぞれの貢献よりも連続して現れることによって構成された文字列のほうが貢献度が高いことが知られている．
言い換えると，一致した文字列を構成する文字毎に重みを加算するのではなく，文字列が持つ重みを加算したほうが検索性能が向上する可能性があるということである．
多くの情報検索システムに用いられている単語を単位とし，一致した単語が持つ重みを加算することによって類似度を求める尺度があるが，この尺度もこの可能性に基づくものとみることができる．
さらに，一単語より長い文字列が検索に大きく貢献するようにngramを単位とし，一致したngramの重みを加算することによって類似度を求める尺度もある．
この尺度は一致する文字列の長さに重きを置く尺度である．
人間は一致する部分が長ければ長いほど，二つの文は類似していると判断することが多い．
このため，一致する文字列の長さに重きを置くことは人間の直感に合致している．
このような背景から，情報検索に適した編集距離に基づく類似尺度を提案するための最終ステップとして，一致した文字ではなく，一致した文字列が持つ重みを加算する類似尺度に文字重み編集類似度を拡張する．
言い換えると，この類似尺度は文字重み編集類似度の一般化である．
本論文では，この類似尺度を「文字列重み編集類似度」と呼ぶことにした．
次に文字列重み編集類似度[MATH]の定義を示す．
文字列重み編集類似度
[MATH]を文字列，[MATH]を長さ1以上の文字列，[MATH]を文字とする．
関数[MATH]は文字列[MATH]が持つ重みを返す関数，関数[MATH]は与えられた引数のうちもっとも大きい値を返す関数とする．
両方とも空文字のとき    [MATH]
それ以外のとき
一致している最大の文字列を[MATH]として
そのような文字列が存在しないとき    [MATH]
任意の文字列について
例[REF_ex:weight]では，ひらがな以外の文字に重みを持たせたが，文字に持たせる重みを調節することによって，検索性能を大きく向上することが容易に予測できる．
情報検索だけでなく他の分野においても，適した重みを決定することは難しく，多くの場合，経験によって決められることが多い．
情報検索においては，検索対象となるデータによって調整することが広く行われている．
本論文では，情報検索において重みの基本とされている文字列が一致したときの情報量に相当する[MATH](Inverse Document Frequency)を用いることにした．
また，通常の[MATH]は単語を対象とするが，文字列を対象とする[MATH]とした．
これは，提案する類似尺度がngramを対象とするためである．
本論文で扱う類似尺度が用いる重みはすべて[MATH]に基づくものとし，類似尺度の定義の違いによる検索性能の比較を行った．
次に本論文で提案する類似尺度に用いた重みを返す関数[MATH]を示す．
ここで，[MATH]は長さ1以上の文字列[MATH]が出現するドキュメントの数，[MATH]はドキュメントの総数とする．
空文字ならば，    [MATH]
それ以外ならば，    [MATH]
本論文の目的は検索性能の低下を招く表記の揺れに寛容な類似尺度を提案することであるため，最適な重みについては今後の課題と考えている．
本節では，単純編集類似度([MATH])，文字重み編集類似度([MATH])，文字列重み編集類似度([MATH])の情報検索における性能を比較し，順に拡張したことによって表記の揺れに寛容な性質を損なうことなく，予想通り性能の向上を計ることができているかを検証する．
実験結果を表[REF_sim-11pt-comp]--表[REF_sim-win-comp]に示す．
まず，情報検索性能について検証する．
表[REF_sim-11pt-comp]は，単純編集類似度，文字重み編集類似度，文字列重み編集類似度をそれぞれ用いたシステムで訓練用30問について情報検索を行った結果の11点平均精度(11 point average precision)に示す．
11点平均精度は情報検索における一般的な評価基準で，再現率(recall)が0 %，10 %，20 %，30 %，40 %，50 %，60 %，70 %，80 %，90 %，100 %の11点における適合率(precision)の平均値である[CITE]．
この表はこの実験における各システムの検索性能を表し，文字列重み編集類似度が単純編集類似度や文字重み編集類似度より情報検索に有効であることを示している．
表[REF_sim-win-comp]は，訓練用30問において一方の編集類似度が他方の編集類似度より検索に有効であった質問を表[REF_sim-each-comp]を用いて数えた結果を示す．
この表は，この実験において，文字重み編集類似度が単純編集類似度よりも多くの質問に対して有効に働き，文字列重み編集類似度が単純編集類似度や文字重み編集類似度よりもさらに多くの質問に対して有効に働くことを示している．
たとえば，「各質問について[MATH]より[MATH]が高い11点平均精度を出す確率が1/2以下のとき，[MATH]が[MATH]より30個のうち22個以上の割合で性能が高い」という仮説を立てた場合，危険率[MATH]以下で仮説は棄却される．
これは，[MATH]が[MATH]より高い性能を出す確率は1/2以上であることを示し，[MATH]と[MATH]には有意な差があることがわかる．
また同様に，[MATH]と[MATH]には危険率[MATH]以下のレベルで有意な差があり，[MATH]と[MATH]には危険率[MATH]以下のレベルで有意な差があることがわかる．
以上のことから，編集距離に基づく類似尺度を拡張することによって情報検索性能を向上していることが確認できる．
次に，表記の揺れに寛容な性質が損なわれていないかを検証する．
例として，図[REF_fig:query]に示す質問20を取り上げる．
検索に使うこの質問の検索要求は「日本語文におけるカタカナ外来語の研究」である．
図[REF_fig:document]に示す文書は質問20に関連する文書である．
まず，単純編集類似度から文字重み編集類似度に拡張した場合，表記の揺れに寛容な性質が損なわれていないかを検証する．
これらの質問と文書において単純編集類似度と文字重み編集類似度は同じ「文，る，カ，タ，カ，ナ，外，来，語，の」の10文字が一致する．
重みが影響するのは，質問に現れる文字が文書ではそれらの文字が質問に現れる順とは異なり，前後に交換されている場合に考えられる．
たとえば，質問に「有無」が現れ，文書に「・・は無いが，・・は有る」と，「有」と「無」が逆順に現れるとき，もし「無」が持つ重みのほうが大きい場合，文字重み編集類似度は前にある「有」ではなく，後ろにある「無」の重みを加算するが，単純編集類似度はどちらを選んでも同じである．
このため，単純編集類似度と文字重み編集類似度において，稀に選択された文字が異なると考えられるが，サンプルで調査したすべての質問においてはすべて同じ文字を選択していた．
これは，単純編集類似度を文字重み編集類似度に拡張しても表記の揺れに寛容な性質を保持しているということを表している．
図[REF_fig:document]の文書を，単純編集類似度は181位，文字重み編集類似度は10位に位置付けている．
表[REF_sim-each-comp]に示す質問20における11点平均精度を見ると，単純編集類似度よりも文字重み編集類似度のほうが精度が高い．
これは，表記の揺れに寛容な性質を持ち，一致した文字の重みを考慮したことによって検索性能が向上したことを示している．
一方，文字列重み編集類似度は「文，る，カタ，カナ，外，来語，の」の7つの文字列が一致する．
これは，単純編集類似度と文字重み編集類似度で選択された10文字と同じである．
これは，文字重み編集類似度を文字列重み編集類似度に拡張しても表記の揺れに寛容な性質を保持しているということを表している．
実際に，図[REF_fig:document]の文書に対して，文字重み編集類似度は4.44，文字列重み編集類似度は12.37を得ている．
また，この文書を文字重み編集類似度は10位に位置付けているが，文字列重み編集類似度は6位に位置付けている．
表[REF_sim-each-comp]に示す質問20における11点平均精度を見ると，文字重み編集類似度よりも文字列重み編集類似度のほうが精度が高い．
これは，表記の揺れに寛容な性質を持ち，一致した文字列の重みを考慮したことによって検索性能が向上したことを示している．
以上のように，類似尺度を拡張しても表記の揺れに寛容な性質を損なっていないことをサンプルで確認した．
[REF_comp-sim]節に示した実験において，本論文で提案する三つの編集類似度のなかで，文字列重み編集類似度がもっとも情報検索において有効であることがわかった．
本節では，提案する文字列重み編集類似度の検索性能を，多くの情報検索システムに用いられる類似尺度の基となっている類似尺度と比較する．
まず，情報検索において基とされる類似尺度を用いたシステムの概要を示す．
本論文では，形態素解析を利用して内容語を抽出し，質問と文書のどちらともに存在する内容語の重みを加算する類似尺度と，質問と文書のどちらともに存在する文字列(ngram)の重みを加算する類似尺度を選び，これらの尺度を用いた二つのシステムをベースラインシステムとした．
本論文では，一つ目のベースラインシステムとして，形態素解析を利用し内容語を抽出し，質問と文書のどちらともに存在する内容語の重みを加算することによって類似度を測るシステムを作成した．
本論文では，このシステムを辞書を用いることから「BD(baseline-dictinary)」と呼ぶことにした．
形態素解析には，日本語形態素解析プログラム「茶筌」[CITE]を用いた．
「茶筌」は大きな日本語の単語辞書を使って文字の列を単語に区切り，品詞を割り当てるシステムである．
BDシステムはまず，質問と文書それぞれに対して形態素解析を行い，そして，解析結果から内容語（名詞，動詞，未定義語）の原形を抽出し，類似度を測るための内容語だけが並ぶ質問集合のファイルと文書集合のファイルを作成する．
BDシステムに原形を採用した理由は，文章に現れる内容語の形そのままを対象とした場合と原形を対象とした場合の検索性能を比較した結果，原形のほうが検索性能が高かったためである．
これらの二つのファイルを用いて，Salton[CITE]が用いている多くの情報検索手法の基となっている内積スコアリング関数を用いて類似度を求める．
内積スコアリング関数は文字列重み編集類似度に用いられる重み関数と同じ[MATH]に基づく重み関数である．
このことから，辞書を用いて形態素解析を行うことに関して比較することにした．
次にBDシステムに用いた類似尺度[MATH]の定義を示す．
[MATH]は比較される各々の文字列両方に現われる単語，[MATH]はそのドキュメントの単語[MATH]の出現頻度(term frequency)，[MATH]は単語[MATH]が出現するドキュメントの数(document frequency)，[MATH]はドキュメントの総数とする．
本論文では，二つ目のベースラインシステムとして，質問と文書のどちらともに存在する文字列(ngram)の重みを加算することによって類似度を測るシステムを作成した．
本論文では，このシステムをngramをマッチングの対象とすることから「BN(baseline-ngram)」と呼ぶことにした．
BNシステムは，質問と文書のどちらともに現れる文字列を検出し，文字列重み編集類似度に用いられるScore関数を用いて類似度を求める．
通常，処理効率を考え，長さ2のバイグラム(bigram)または長さ3のトライグラム(trigram)のような短いngramだけをマッチングの対象とするが，本論文では，[MATH]がすべてのngramを対象としているので，条件をそろえるために，すべてのngramを対象とすることにした．
一般には，[CITE]が示したように，短いngramは日本語にはかなり効果的であることが報告されている．
しかし，実際にNTCIR1において短いngramに制限した場合と制限しない場合の検索性能の比較を行った結果，制限しない場合のほうが高い性能を得たため，バイグラムやトライグラムより長いngramを考慮することにした．
また，提案する文字列重み編集類似度においても扱う文字列の長さを制限していないので，条件は同じである．
実際に長いngramを考慮することは，複合語のマッチングを行う情報検索[CITE]の報告で，共起情報を用いないケースに相当する．
DPも長いngramを検出するので，BNを比較対象とした．
BNシステムはマッチングの対象が文字列重み編集類似度と同じ文章にある部分文字列(ngram)である．
BNシステムと文字列重み編集類似度の唯一の違いは，類似尺度の定義が語順を無視した重みの総和をとるか語順を保存した重みの合計の最大値をとるかの違いである．
このことが表記の揺れに寛容な性質を持つか持たないかの差となっていると予想される．
このため，本論文では，この二つの類似尺度を表記の揺れに対する振る舞いについて比較することにした．
次にBNに用いた類似尺度[MATH]の定義を示す．
[MATH]を文字列とする．
[MATH]を[MATH]番目の文字から[MATH]番目の文字までの[MATH]の部分文字列とし，[MATH]を[MATH]番目の文字から[MATH]番目の文字までの[MATH]の部分文字列とする．
また，[MATH]は[MATH]に基づく文字列から正の実数値を求める関数とする．
ただし，[MATH]は次のように定義され，ここで現れる[MATH]は[REF_sim3]節に示したものと同じである．
[MATH]ならば，    [MATH]
[MATH]ならば，    [MATH]
本節では，本論文で提案する文字列重み編集類似度([MATH])を用いたシステムと，[MATH]を用いたBDシステム，[MATH]を用いたBNシステムの検索性能を比較する．
本論文では，文字列重み編集類似度を用いたシステムをダイナミックプログラミングを用いて計算できることから，「DP」と呼ぶことにした．
表[REF_tab:all-prec]に33万件のドキュメントに対して30個の検索質問を行った場合の11点平均精度を示す．
この表は実験において，DPがBDやBNよりも精度が高かったことを示している．
表[REF_tab:comparison]はそれぞれのシステムを二つずつ各質問について，表[REF_tab:precision]に示す11点平均精度を使って比較し，すべての質問について数値で判定した結果から作成した．
これらの表もまた，DPがBDやBNよりも精度が高いことを示している．
質問1に対して，三つのシステムは同じような性能を示す．
質問1は，用語と用語を構成する単語の多くがそれらの[MATH]重みによって示されるようなよいキーワードである用語を含む質問であり，すべてのシステムにとって簡単な質問である．
図[REF_fig:recall1and12]の左図に上位1000件の文書に関する再現率を示す．
この図から，三つのシステムは比較の条件が揃っていることがわかる．
実験結果において，表[REF_tab:comparison]から[REF_comp-sim]節に示すような仮説を立て，検索性能を検証すると，[MATH]と[MATH]には危険率[MATH]以下のレベルで有意な差があり，[MATH]と[MATH]には危険率[MATH]以下のレベルで有意な差があることがわかる．
本論文の実験において，表[REF_tab:comparison]に示すように，DPはBDと同等以上の性能を持つことを示している．
これは，未知語に対する振る舞いの違いによるものである．
辞書を利用するシステムは解析できない未知語が重要となる質問に対応することが難しい．
たとえば，図[REF_fig:recall1and12]の右図はそのような質問に関する再現率のグラフである．
BDはデータマイニングを「デー」「タマ」「イニング」に分割してしまうため，その結果，情報検索の性能が低い．
NTCIR1において，このように未知語が重要となる質問がこの他にも存在する．
辞書を利用するBDの場合，新しい単語が作成されるたびに辞書に単語を登録すれば語分割の失敗を避けることができるが，新しい単語に対する辞書のメンテナンスが必要である．
一方，BNとDPは辞書を利用しないため，このコストがかからないという利点を持っている．
しかし，未知語を学習することによって検索性能が向上することは明白であるため，システムを相補的に用いることが理想である．
実験における各システムの実行時間を表[REF_tab:cost]に示す．
BDはperlで記述し，他のシステムはCで記述したため，BDシステムの実行時間は参考値であり，前処理となる文書頻度(document frequency)の計算を除いた類似度計算のみの実行時間である．
また，すべてのシステムは文書と質問を一つずつ比較するシステムであるため，インデックスファイルは使用していない．
実験はVine Linux 2.0，CPU800MHz，メモリ1GBの計算機を用いて行った．
この表では，``総実行時間''は33万件のドキュメントに対して30個の質問を検索することにかかった時間，``1質問当たり''は総実行時間を30で割った，1質問当たりにかかる平均実行時間，``1ドキュメント当たり''は1質問当たりの時間を33万で割った，1ドキュメントとの類似度を計算することにかかる平均実行時間である．
[MATH]と[MATH]を比較すると，実際のデータでの計算時間の差は2倍程度であった．
これは，任意の文字列の文書頻度を高速に求められる方法[CITE]を利用した効果である．
そして，文字列重みを利用しても単純な編集距離の計算よりも桁違いに遅くないことがわかる．
しかし，提案する類似尺度を用いたシステムは情報検索システムとして実用的とは言えない．
本論文では，情報検索に利用できる表記の揺れに寛容な類似尺度の提案を目的としているので，インデックスを利用する処理速度の向上は今後の課題と考えている．
