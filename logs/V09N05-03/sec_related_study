任意の区間について，それを含むもっとも下位のクラスが一意に定まることは，計算量を押さえたアルゴリズムを構成するときに必要な性質である．
[MATH]は，後述する頻度を計数するところで使用する．
すべてのクラスについて，それに属する文字列のドキュメント頻度を単純な方法で求めるとすると，通常の計算機では実用上問題がある．
クラスの大きさが高々[MATH]であったとしても，[MATH]，[MATH]，[MATH]のように条件を満たす集合を作って，その大きさを計測すると，各[MATH]の処理に[MATH]時間かかり，[MATH]が[MATH]個あれば，全体では[MATH]時間必要となる．
これは，コーパスの大きさから考えて，通常の計算機では実行できない処理となる．
文字列の出現頻度であれば，クラス階層に従って頻度の合計を求めることができる．
すなわち，下位のクラスの文字列頻度を合計して，上位の文字列頻度とすることができる．
言い換えれば，長い文字列の頻度から，短い文字列の頻度をもとめることができる．
しかし，ドキュメント頻度は，直接寄せ集めることができない．
たとえば，図[REF_chofuku_df]のようなコーパスについて考える．
文字列abcは6回出現し，それが出現するドキュメントの数が4個である．
また，文字列abxは7回出現し，それが出現するドキュメントの数が5個である．
このとき文字列abに続く文字のパターンがabcとabxの2つだけであったとすると，suffixの構造は図[REF_chofuku_df]に示されたような構造になる．
この状況で，abの出現回数は6+7回である．
しかし，この状況で，abが出現するドキュメントの数は9個とはいえない．
abcとabxが両方出現するドキュメントを2個と数えることが間違いだからである．
[CITE]で示されるように，単純なドキュメント頻度の計数であれば，重複して数えているところを差し引くという方法があるが，ドキュメントを計測する条件が，その文字列が2回以上出現するドキュメント数であった場合，クラスの上下によるドキュメント頻度の変化はさらに複雑になり，重複を差し引くという方法は使用できない．
