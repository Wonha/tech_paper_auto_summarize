================================================================
[section type  : abstract]
[section title : abstract]
================================================================
[3516] このアルゴリズムは，前処理として表を作成するために[MATH]の計算時間と[MATH]のメモリを使用し，その表を用いて[MATH]時間で文字列の統計量を取り出すことができる．

================================================================
[section type  : intro]
[section title : はじめに]
================================================================
[4040] また，クラス分けをして，表を作成するならば，重複条件付きのドキュメント頻度は，クラスごと，つまりそのクラスを代表する一つの文字列についてのみ求めればよいが，単純な方法では，代表の文字列の個数が[MATH]，それぞれの計算に[MATH]かかることになり，全体で[MATH]の処理となる．

================================================================
[section type  : proposed_method]
[section title : 記号の定義]
================================================================
[2230] [MATH]を，ドキュメント[MATH]に含まれる文字列[MATH]の個数と定義する．

================================================================
[section type  : proposed_method]
[section title : Suffix Array]
================================================================
[2893] ドキュメント頻度を計算する場合，ドキュメントの長さに上限があればコーパス中の文字列はドキュメント毎に区切られていると見なすことができる．

================================================================
[section type  : proposed_method]
[section title : 文字列のクラス分け]
================================================================
[3199] 文字列の文献[CITE]の文字列のクラス分けの方法を使用するが，この論文では，重複条件付きドキュメント頻度を求める場合にもクラス分けを使用できることを述べる．

================================================================
[section type  : proposed_method]
[section title : クラスの階層関係]
================================================================
[2787] 区間[MATH]がクラス[MATH]を形成し，区間[MATH]がクラス[MATH]を形成していて，区間[MATH]が区間[MATH]に含まれているとき，[MATH]は[MATH]の下位のクラスと定義する．

================================================================
[section type  : proposed_method]
[section title : 重複条件付きドキュメント頻度の計測における問題点]
================================================================
[3821] [CITE]で示されるように，単純なドキュメント頻度の計数であれば，重複して数えているところを差し引くという方法があるが，ドキュメントを計測する条件が，その文字列が2回以上出現するドキュメント数であった場合，クラスの上下によるドキュメント頻度の変化はさらに複雑になり，重複を差し引くという方法は使用できない．

================================================================
[section type  : proposed_method]
[section title : 出現場所の重複条件]
================================================================
[3198] ここで，文字列abxについてdocument#1での文字列abの重複度[MATH]を求めると，ドキュメント中に文字列abc，abd，abxが出現するので，[MATH]である．

================================================================
[section type  : proposed_method]
[section title : 重複条件付き文字列頻度]
================================================================
[3248] 重複度は，場所と文字列に関係するので注意が必要であるが，suffix順で順番をつけるので，[MATH]が定まれば，それぞれの要素についての重複度が一意に定まる．

================================================================
[section type  : proposed_method]
[section title : 重複条件付き文字列頻度とドキュメント頻度の関係]
================================================================
[2986] [MATH]，[MATH]である，ドキュメント#1，#3は，重複度[MATH]となる文字列abが存在しないため，[MATH]の数え上げに関係しない．

================================================================
[section type  : proposed_method]
[section title : 重複度判定のためのデータ構造]
================================================================
[3560] 文字列[MATH]のある出現重複度が[MATH]以上であることの判定は，その出現場所からpreviousリンクを[MATH]回たどれるかどうかと，たどれる場合，その文字列がまだ出現しているかを計測することで判定できる(図[REF_chofuku_struct])．

================================================================
[section type  : proposed_method]
[section title : クラス検出のアルゴリズム]
================================================================
[2756] 2番目のケースで，スタックトップの計算途中のクラスの処理を継続するときには，このクラスがすぐに終了しているかどうかの検査から処理を継続する．

================================================================
[section type  : proposed_method]
[section title : 単純な重複条件付き文字列頻度の計数]
================================================================
[3178] 計数の方法は，ある場所について，そこから始まるクラスの集合を求め，すべてのクラスに対してカウンタを用意し，クラス毎に重複度が[MATH]以上であるかを判定して，カウンタに1を加えるというものである．

================================================================
[section type  : proposed_method]
[section title : 重複条件付き文字列頻度の計数]
================================================================
[3285] [性質12]ある場所が与えられたとき，そこのsuffixの先頭の文字列に対応するクラスのうち，あるクラスの文字列について重複度が[MATH]であったとすると，そのクラスより上位のクラスの重複度は[MATH]以上である．

================================================================
[section type  : proposed_method]
[section title : クラスの発見と頻度計算]
================================================================
[0] 
-----------------------------------------------------
  [subsection title : クラスの始まりを発見したときの処理]
-----------------------------------------------------
  [2605] このとき，現在計測している重複条件付き文字列頻度の情報はほかのクラスの情報と同様にスタックに待避させ，重複条件付き文字列頻度は0に初期化して新たに計数する．
-----------------------------------------------------
  [subsection title : 重複度判定とクラス選択の融合]
-----------------------------------------------------
  [3403] 重複度の判定はpreviousリンクを[MATH]回たどった場所[MATH]と，現在の場所[MATH]の区間が一つのドキュメントに含まれるかどうかで行うので，逆にその区間を含むクラスの集合を求めておき，その中で[MATH]を求めることができる．
-----------------------------------------------------
  [subsection title : クラスの終了を発見したときの処理]
-----------------------------------------------------
  [2648] 下位クラスの計数が終了したときに上位クラスのカウンタに，その計数値を加算することで，結果的にすべてのクラスに加算するのと同じ値を得ることができる．

================================================================
[section type  : proposed_method]
[section title : 実行例]
================================================================
[1414] サンプルとして処理するデータは以下のファイルである．
-----------------------------------------------------
  [subsection title : Suffix Arrayの作成とクラス検出の準備]
-----------------------------------------------------
  [1396] 直後のsuffixと「先頭から一致している文字列」の長さ
-----------------------------------------------------
  [subsection title : 求められたクラスの表の例]
-----------------------------------------------------
  [2743] そのような文字列は，クラスを代表する文字列と先頭から比較していき，最も長く一致するものの中で最も上位のクラスの情報を取り出すことで対処している．
-----------------------------------------------------
  [subsection title : 文字列に対する処理]
-----------------------------------------------------
  [2463] 与えられた任意の文字列に対して，上記の表を二分探索することで[MATH]を求めることができる．

================================================================
[section type  : proposed_method]
[section title : 実行時間の計測]
================================================================
[2186] 実行時間の計測は，どのようなドキュメントを用いても良いが，ここでは，技術用語のアブストラクトの集合を使用した．
-----------------------------------------------------
  [subsection title : ボトムラインシステム]
-----------------------------------------------------
  [3304] 文字列と重複度[MATH]が与えられたときに，[MATH]のドキュメント頻度をは，コーパスの先頭から順番に見るという方針で求めるものである．
-----------------------------------------------------
  [subsection title : ベースラインシステム]
-----------------------------------------------------
  [2782] ベースラインシステムは，クラス分けを使用しているが，表を作成するときにクラスの階層構造を使用しないシステムである．
-----------------------------------------------------
  [subsection title : 提案システム]
-----------------------------------------------------
  [2585] 提案するシステムはこの論文で記述した方法を用いたものであり，クラスの表を作成し，表の数値を計数するときに，クラスの階層の性質を使用したものである．
-----------------------------------------------------
  [subsection title : 計測]
-----------------------------------------------------
  [3100] 重複条件付きドキュメント頻度の分析対象とした文字列は，10ドキュメント，4156バイト，2190文字の部分文字列で，統計的に安定な頻度が3を越える文字列である．
-----------------------------------------------------
  [subsection title : メモリ容量負荷]
-----------------------------------------------------
  [2487] 表を作成するには，クラス検出のためのデータ構造や，重複度判定のためのデータ構造などがあり，分析処理よりもメモリを多く必要とする．

================================================================
[section type  : proposed_method]
[section title : そのほかの応用]
================================================================
[3298] 任意の文字列について，前処理の後に[MATH]で重複条件付きドキュメント頻度の分析を行うことは，文字列の統計処理の基本技術であり，ここで述べた単語の境界の分析以外にも応用範囲がある．
-----------------------------------------------------
  [subsection title : 情報検索への応用]
-----------------------------------------------------
  [3634] [MATH]は，Adaptationと呼ばれる量で，ドキュメントの確率という空間において，ドキュメントにある文字列が出現するということを条件としたとき，そのドキュメントに2回文字列が出現する確率の推定値である．
-----------------------------------------------------
  [subsection title : 遺伝子情報への応用]
-----------------------------------------------------
  [2724] 文献[CITE]は，自然言語で書かれたドキュメントを分析対象として，辞書を使わず，重複条件付きドキュメント頻度からキーワードを抽出していたが，これは「あるドキュメントに繰り返し現れる文字列」を効果的に取り出すシステムと解釈できる．
-----------------------------------------------------
  [subsection title : プログラミングツールへの応用]
-----------------------------------------------------
  [2816] このツールにおいて，使用しているのは文字列の総出現頻度だけであるが，重複条件付きドキュメント頻度はプログラム中の構造がより精密に判定できる情報源である．

================================================================
[section type  : conclusion]
[section title : まとめ]
================================================================
[3312] 最後に，クラス分けの効果とクラスの階層構造の利用が処理に効果があることを，332,918個のドキュメントをもつコーパスで検証し，ドキュメントの長さを[MATH]とするとき，前処理の処理時間が[MATH]であり，表を引く処理が[MATH]であることを確かめた．

