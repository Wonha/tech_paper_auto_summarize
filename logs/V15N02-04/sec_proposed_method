日本語の機能表現が持つ主な特徴の1つは，個々の機能表現に対して，多くの異形が存在することである．
例えば，「なければならない」に対して，「なくてはならない」，「なくてはならず」，「なければなりません」，「なけりゃならない」，「なければならぬ」，「ねばならん」など，多くの異形が存在する．
このような異形をつくり出す過程は，次の7カテゴリーに分類することができる[CITE]．
派生，機能語の交替，音韻的変化，とりたて詞[CITE]の挿入，
活用，「です／ます」の有無，表記のゆれ
松吉らは，これらの言語現象による機能表現の異形を階層構造を用いて分類し，機能表現辞書を編纂した[CITE]．
本論文では，機能表現の形態階層構造として，彼らの階層構造を採用する．
形態階層構造の概要を表[REF_tab:morph]に示す．
この階層構造は9つの階層を持つ．
[MATH]から[MATH]の階層が，上で列挙した異形のカテゴリーのそれぞれに対応する．
これらの階層の上に，見出しレベルとして[MATH]，語義を区別した見出しレベルとして[MATH]が定義されている．
形態階層構造の各階層における機能表現の数を，表[REF_tab:morph]の「表現数」の欄に示す．
見出し語に相当する[MATH]の機能表現の数は341であり，出現形に相当する[MATH]の機能表現の数は16,801である．
機能表現の出現形（[MATH]の機能表現）には，階層構造における位置を表す機能表現IDが付与されている．
この機能表現IDは9つの部分からなる．
IDの各部分は，階層構造のそれぞれの階層における階層IDである．
それぞれの出現形に付与された機能表現IDから，階層構造におけるその出現形の位置や，その上位の階層の機能表現（例えば，[MATH]の機能表現）を容易に知ることができる．
機能表現ID以外に，機能表現の出現形には，文体や左接続・右接続（隣に接続可能な形態素）などの情報も記述されている．
本論文では，機能表現を言い換えるにあたり，これらの情報を利用する．
現在，誰もが言い換えに利用することができる，日本語機能表現の意味的等価クラスの集合は存在しない．
機能表現に関する文献や辞書[CITE]に記述されている意味的等価クラスは，分類の粒度が粗いので，言い換えに直接利用することはできない．
一方，自然言語処理において，言い換えのために定義された機能表現の意味的等価クラスの集合[CITE]が存在するが，これらは一般公開されていない．
言い換えのための機能表現の意味的等価クラスとして，われわれは，形態階層構造における[MATH]の機能表現435表現に対して，3つの階層を持つ意味階層構造を作成した．
この階層構造の作成にあたっては，「日本語表現文型」[CITE]における機能表現に関する説明文と用例を参考にし，言い換え可能性の観点から，[MATH]の機能表現集合にあらかじめ定義されていた89の意味的等価クラス[CITE]を見直し，その再編成を行なった．
主に，次の2つのことを行なった．
下位区分
同じ意味的等価クラスに属する複数の機能表現を，言い換え可能性の観点からいくつかのグループにまとめ，元のクラスに下位クラスを定義した．
例えば，松吉らの機能表現辞書[CITE]において，〈推量〉という意味的等価クラスには，次の15の機能表現が属している．
かもしれない，かもわからない，にちがいない，にきまっている，
にそういない，にほかならない，ところ，ことだろう，のだろう，
みたい，よう，らしい，だろう，う，うる
これらの表現はすべて，推量や推定を意味する機能表現である．
しかしながら，それらの間の言い換え可能性は一様ではない．
例えば，「かもしれない」と「かもわからない」は，ほとんどすべての文脈において言い換え可能であると思われるが，その一方で，「かもしれない」と「にちがいない」は，これらが言い換え可能な文脈は先の2つの表現よりも限られると思われる．
他の表現対に対しても同様の考察を行ない，〈推量〉という意味的等価クラスを，図[REF_fig:class]のように下位区分した．
下位クラス化
属している機能表現の数が少数である意味的等価クラスを，その上位の意味を表す意味的等価クラスの下位クラスとして再定義した．
これは，前者に属する機能表現に対して，それが言い換え可能な機能表現の数を増やすためである．
例えば，松吉らの機能表現辞書において，〈最中〉という意味的等価クラスには，1つの機能表現「つつある」しか属していないので，この機能表現に対して，それと言い換え可能な（[MATH]の）機能表現を得ることはできない．
一方，「つつある」は，〈継続〉という意味的等価クラスに属する「ている」や「ていく」などの機能表現と，多くの文脈において言い換え可能である．
そこで，〈最中〉という意味的等価クラスを，〈継続〉という意味的等価クラスの下位クラスとして再定義した．
これにより，上位のクラスを用いた場合，「つつある」に対して，言い換え可能な機能表現として，「ている」や「ていく」などの表現を提示することができる．
このような再編成を経て，最終的に3階層の意味階層構造を構築した．
意味階層構造の大半において，各階層の1つの意味的等価クラスに属する機能表現は，表[REF_tab:semantic]の「1つのクラスに属する機能表現」の欄に示す性質を持っている．
各階層における意味的等価クラスの数とそれらに付与したクラスIDの形式を，それぞれ，表[REF_tab:semantic]の「クラス数」と「クラスID」の欄に示す．
最も上位の階層(Top)における意味的等価クラスの数は45であり，最も下位の階層(Bottom)における意味的等価クラスの数は199である．
一般に，1つの意味的等価クラスには，異なる難易度を持つ複数の機能表現が属している．
例えば，ある意味的等価クラスには，「とどうじに」や「たとたんに」のようなやさしい機能表現から，「やいなや」や「がはやいか」のような難しい機能表現まで，さまざまな難易度の機能表現が属している．
形態階層構造の[MATH]の機能表現には，「日本語能力試験出題基準」[CITE]の級に基づいた難易度が付与されている[CITE]．
この難易度は，A1，A2，B，C，Fの5段階であり，A1が一番やさしい．
本論文では，難易度指定に応じた機能表現の言い換えを実現するために，この情報を利用する．
形態階層構造と意味階層構造を持つ機能表現辞書を用いると，与えられた機能表現の出現形に対して，文体指定と難易度指定を満たす，意味的に等価な機能表現のすべての出現形を列挙することができる．
この手続きは，次のとおりである．
形態階層構造において，与えられた出現形の上位の[MATH]の機能表現を見つける
意味階層構造において，その機能表現を含む意味的等価クラスを見つけ，そこに属する機能表現の集合を得る
その集合から，難易度指定を満たさない機能表現を排除する
形態階層構造に基づき，集合内の各機能表現に対して，そのすべての異形（出現形）を列挙する
得られた出現形のリストの中から，文体指定を満たさない出現形を排除する
上の(2)の集合には，与えられた出現形の異形を出力するために，その上位の[MATH]の機能表現も含まれる．
計算機上では，上記の手続きは，出現形を表す機能表現IDと意味的等価クラスを表すクラスIDを用いて実行される．
例として，「や否や」と意味的に等価な機能表現の出現形のうち，A1，A2，Bのいずれかの難易度を持つものを列挙する．
まず，形態階層構造において，出現形「や否や」の上位の[MATH]の機能表現『やいなや』を見つける．
次に，意味階層構造において，『やいなや』を含む意味的等価クラスを見つける．
このクラスに属する機能表現の集合は，次のとおりである．
『とどうじに』，『とすぐに』，『たとたんに』，『そばから』，『なり』，『やいなや』，『がはやいか』，『や』
この集合から，設定された難易度指定を満たさない『そばから』，『なり』，『やいなや』，『がはやいか』，『や』を排除する（難易度は，それぞれ，C，C，C，F，F）．
最後に，形態階層構造に基づき，残った『とどうじに』，『とすぐに』，『たとたんに』のすべての出現形計20表現を，次のように列挙する．
「とどうじに」，「と同時に」，「とすぐに」，「とすぐ」，「たとたん」，「だとたん」，「たとたんに」，「た途端に」，[MATH]
本論文では，言い換え元の入力表現の単位として，文節を採用する．
その理由は，文節は，機能表現を含む最も基本的な文構成単位であるからである．
本論文で扱う文節は，いわゆる形式文節ではなく，機能表現を考慮して拡張された文節であり，以下のように定義する．
[MATH]を内容語，[MATH]を機能表現とおく．
このとき，文節を次のように定式化する．
文節内の[MATH]を文節の内容語部，[MATH]を文節の機能語部と呼ぶ．
例えば，「決定せざるをえないので」は，1つの文節である．
このとき，[MATH]「決定」，[MATH]「せ」，[MATH]「ざるをえない」，[MATH]「ので」であり，内容語部は「決定せ」，機能語部は「ざるをえないので」である．
本論文では，入力文節の機能語部に存在する機能表現を言い換えることにより，入力文節に対する代替表現を生成する．
機能語部の機能表現の言い換えは，原理的に，次の5種類の言い換えの組み合わせによって達成される（以下，文節例において，内容語部と機能語部の境界，および，機能表現と機能表現の境界に``／''を挿入する）．
機能表現を別の機能表現に置換する([MATH])
例）「聞く／や否や」[MATH]「聞く／とすぐに」
機能表現を機能表現列に置換する([MATH])
例）「雨／にもかかわらず」[MATH]「雨／な／のに」
機能表現列を1つの機能表現に置換する([MATH])
例）「行か／なければならない／ことはない」[MATH]「行か／なくてよい」
機能表現列を別の機能表現列に置換する([MATH])
例）「会っ／た／わけではない」[MATH]「会わ／なかっ／た」
機能表現（列）を内容語を含む表現に置換する
例）「行く／までもない」[MATH]「行く／-0.5zw／必要／は／-0.5zw／ない」（``／-0.5zw／''は，文節境界を表す）
機能表現の言い換えを定式化するにあたり，予備調査として，人間が機能表現を言い換える場合，これらの5種類の言い換えがどのように用いられるのか調査した．
調査方法としては，作業者に文節のリストを与え，文節の機能語部を自由に言い換えてもらった．
作業者には次の3つのことを指示した．
機能語部を言い換えてください．
内容語は言い換えないでください
思い付くまま，自由に言い換えてください．
やさしく言い換えなければならない，短くしなければならないといった制約はありません
1つの文節に対して複数の代替表現を思い付いた場合，そのすべてを記述してください．
どうしても代替表現が思い浮かばない文節に対しては，代替表現を記述しなくても構いません
文節リストとしては，「日本語能力試験出題基準」[CITE]における``〈機能語〉の類''のリストに付記されている用例を用いた．
``〈機能語〉の類''のリストの一部を表[REF_tab:jpt]に示す．
この文献には，269項目の``〈機能語〉の類''が収録されている．
この調査では，これらのうち，日本語機能表現辞書[CITE]にも収録されている140項目を対象とした．
``〈機能語〉の類''のリストにおいては，各``〈機能語〉の類''に対して，1つ以上の用例が記述されている．
本論文における言い換え元の入力表現の単位は，文節であるので，節単位や文単位の用例に対しては，そこから文節単位の用例を人手で抽出した．
``〈機能語〉の類'' 140項目に対する用例のうち，日本語機能表現辞書に収録されている機能表現の用例であるとわれわれが判断した238の用例を，言い換え元の文節リストとして用いた．
作業者は，238の文節のうち226の文節に対して，410の代替表現を作成した．
これらの代替表現が適切であるかどうかを，作業者とは異なる2人の判定者が独立に判定した．
適切さの判定基準は，「言い換え元の文節と作業者が作成した表現が，ある文脈において置換可能であるならば，後者は，代替表現として適切であると判定する」と定めた．
判定結果の分割表を表[REF_judge]に示す．
表の「[MATH]」の欄に，判定者が適切であると判定した代替表現の数を，「[MATH]」の欄に，判定者が適切でないと判定した代替表現の数を示す．
この表から，作業者が作成した表現の86%(353/410)が，2人の判定者に，代替表現として適切であると判定されたことが分かる．
作業者が作成し，2人の判定者が適切であると判定した353の代替表現が，上記の5種類の言い換えのどのような組み合わせによって実現されているか分析した．
分析結果を表[REF_tab:native]に示す．
この表から，353の代替表現のうち，その61%(215/353)が，``1[MATH]1''のみで実現されたことが分かる．
したがって，機能表現を類義表現に置換するという``1[MATH]1''は，人間が行なう機能表現の言い換えの過半数をカバーすると言うことができる．
前節の調査結果に基づき，本研究が対象とする言い換えの入出力を，次のように定めた．
入力は1つの文節であり，出力は，入力文節に対する代替表現である．
入力：文節 &= c_1 c_2 \cdots c_{m-1} c_m f_1 f_2 \cdots f_n \nonumber
出力：代替表現&= c_1 c_2 \cdots c_{m-1} c_m^ w f_1^ f_2^ \cdots f_n^
ここで，[MATH]は，内容語[MATH]かもしくはそれを活用させた語であり，[MATH]は，機能表現[MATH]と意味的に等価な機能表現である．
[MATH]は，空文字列か，もしくは，[MATH]と[MATH]を適切に接続するために挿入される語である．
本研究では，入力文節の機能語部に存在する各々の機能表現を，それと意味的に等価な機能表現に置換することにより，入力文節に対する代替表現を生成する．
一般に，機能表現[MATH]の左接続と機能表現[MATH]の左接続は，たとえそれらが意味的に等価であったとしても異なる．
例えば，「や否や」と「たとたん」は意味的に等価であるが，前者の左接続は動詞の基本形であるのに対し，後者の左接続は動詞の連用タ接続である．
同様に，「にあたって」と「際に」は，同じ〈状況〉という意味を持っているが，前者の左接続は動詞の基本形と名詞であるのに対し，後者の左接続は動詞の基本形とタ形および助詞「の」である．
このような場合，[MATH]を[MATH]に置換した後，[MATH]と[MATH]を適切に接続する必要がある．
内容語と機能表現の接続には次の4種類があり，それぞれに応じて異なる手続きを行なう．
内容語[MATH]が機能表現[MATH]の左接続に含まれる場合，それらを単純に接続する．
例えば，「聞く」と「とすぐに」は，単純接続可能である．
活用形を除いて，内容語[MATH]が機能表現[MATH]の左接続に含まれる場合，[MATH]の活用形を変更することにより，それらを接続する．
例えば，「聞く」と「たとたん」を接続するには，活用形の変更が必要であり，まず，活用形変化表を参照して「聞く」を「聞い」に活用させた後，それらを接続する．
内容語[MATH]と機能表現[MATH]が，間に語[MATH]を介せば接続可能である場合，必要に応じて[MATH]の活用形を変更した後，[MATH]を挿入して全体を接続する．
例えば，「子供」と「からといって」を接続するには，語の挿入が必要である．
「子供」の品詞情報と「からといって」の左接続から，挿入語選択表を参照して「だ」を得，それを介して全体を接続する．
挿入語の一覧を表[REF_tab:inserted]に，[MATH]の左接続を少し簡略化してまとめた挿入語選択表を表[REF_tab:inserted_select]に示す．
上のいずれにも当てはまらない場合，内容語[MATH]と機能表現[MATH]は接続不可能であると判定し，これらを含む代替表現候補を棄却する．
例えば，「聞く」と「だとたん」（「たとたん」の「た」が有声化した表現）は，接続不可能である．
機能表現[MATH]と機能表現[MATH]の接続の可否は，それらが単純接続可能であるかどうかにより判定し，前者の活用形の変更は行なわない．
その理由は，[REF_subsec:enumerate]節で説明した方法によって，すべての活用形が展開された形で，意味的に等価な機能表現の出現形のリストが与えられるからである．
[MATH]と[MATH]が単純接続可能でない場合，これらを含む代替表現候補を棄却する．
例えば，「なければならない」と「にちがいない」は単純接続可能である．
一方，「なければならなく」と「にちがいない」は，単純接続可能ではないので，これらを含む代替表現候補を棄却する．
単純な置換と語の挿入を組み合わせた，本論文で提案する言い換え手法は，表[REF_tab:native]における「1[MATH]1のみ」のすべてと，「1[MATH]N（と1[MATH]1）」の22%(15/68)をカバーする．
したがって，この言い換え手法は，理論上，表[REF_tab:native]の65%(230/353)をカバーする．
前章で述べた手法により，文体と難易度を制御しつつ，機能表現を言い換えるシステムを実装した．
このシステムの入力は文節（と文体指定・難易度指定）であり，出力は，代替表現の順位付きリストである．
代替表現を生成するにあたり，このシステムは，[REF_sec:dic]章で説明した機能表現辞書を用いる．
実装した言い換えシステムの全体像を図[REF_fig:system]に示す．
このシステムは，次の3つのモジュールからなる．
文節解析
言い換え生成
順位付け
文節解析モジュールは，与えられた文節を，式([REF_eq:phrase])に示されるように内容語と機能表現の列に分割する．
日本語機能表現を検出する手法は，これまでにいくつか提案されており，例えば，半自動的に作成した規則に基づく手法[CITE]や機械学習に基づくチャンキング手法[CITE]などがある．
しかしながら，これらの手法が検出対象としている機能表現とその異形の数は，限られているため，本研究では，これらの手法を文節解析に利用することはできない．
別の手法として，既存の形態素解析器の辞書に約17,000の機能表現の出現形を追加し，機械学習により種々のコストを決定することが考えられる．
しかしながら，現在のところ，これらすべての出現形に対してタグ付けを行なった大規模なコーパスは存在しないので，この手法は実行可能ではない．
本システムでは，これらの手法とは異なる方法を用いて，与えられた文節を内容語と機能表現の列に分割する．
このシステムの文節解析モジュールは，2種類の解析器を用いる．
1つめの解析器は，文節の機能語部の解析に特化した解析器（以下，機能語部解析器）である．
この解析器は，辞書エントリーとして約17,000の機能表現の出現形のみを持つ形態素解析器MeCabで実装されている．
実装においては，機能表現間の接続は，[REF_subsec:morph]節で述べた，機能表現辞書に記述されている接続条件を用いず，すべての組み合わせが可能であるとし，連接コストはすべて1と定めた．
その理由は，機能表現辞書の接続条件は，解析に用いるには少し厳しすぎるのではないかと考えたからである．
なお，単語コストはすべて0と定めた．
この機能語部解析器は，機能語部をなす文字列を機能表現の列に分割することができる．
その一方で，文字列に，内容語と解析されるべき要素が含まれている場合，文字列の分割に失敗する．
与えられた文字列から機能語部を抽出するために，文節解析モジュールは，2つめの解析器として，IPA辞書を組み込んだ通常のMeCabを用いる．
以下に，文節解析の手順を述べる．
まず，通常のMeCabを用いて，入力文節を形態素列[MATH]に分割する．
次に，[MATH]を内容語部，[MATH]を機能語部であると仮定する．
機能語部解析器が，[MATH]の表層形をまとめた文字列を機能表現の列[MATH]に分割することができたならば，文節解析モジュールは，解析結果として，[MATH]を出力する．
ここで，[MATH]である．
機能語部解析器が分割に失敗した場合，[MATH]を内容語部，[MATH]を機能語部であると仮定する．
機能語部解析器が，[MATH]の表層形をまとめた文字列を機能表現の列[MATH]に分割することができたならば，文節解析モジュールは，解析結果として，[MATH]を出力する．
ここで，[MATH]，[MATH]である．
以下同様に，機能語部解析器が分割に成功するまで，この手続きを続ける．
例として，文節「決定せざるをえないので」を解析する．
まず，この文節は，通常のMeCabにより，「決定／せ／ざる／を／え／ない／ので」と，7つの形態素に分割される．
次に，「決定」を内容語部，「せ／ざる／を／え／ない／ので」を機能語部と仮定する．
機能語部解析器は，文字列「せざるをえないので」の分割に失敗するので，今度は，「決定／せ」を内容語部，「ざる／を／え／ない／ので」を機能語部と仮定する．
この場合，機能語部解析器は，文字列「ざるをえないので」の分割に成功し，この文字列を「ざるをえない」と「ので」に分割する．
これにより，解析結果として，[MATH]「決定」，[MATH]「せ」，[MATH]「ざるをえない」，[MATH]「ので」が出力される．
内容語の場合と同様に，2つ以上の意味を持つ機能表現も存在する．
例えば，「によって」は，次の3つの意味を持つ．
その病気は，ウイルスによって伝染していく．
民法によって，そのように定められている．
季節によって見える星座が異なる．
機能語部解析器が分割した機能語部に，複数の意味を持つ機能表現が存在した場合，文節解析モジュールは，それらに対応する複数の解析結果を出力する．
例えば，機能語部解析器が分割した機能語部に，2つの意味（[MATH]と[MATH]）を持つ機能表現[MATH]が存在した場合，文節解析モジュールは，次の2つの解析結果を出力する．
[MATH]，[MATH]
言い換え生成モジュールは，入力文節の解析結果[MATH]を受け取り，文体指定と難易度指定を満たす代替表現のリストを生成する．
まず，言い換え生成モジュールは，[REF_subsec:enumerate]節で述べた方法を用いて，[MATH]と意味的に等価であり，かつ，文体指定と難易度指定を満たす機能表現の出現形[MATH]を得る．
次に，[REF_subsec:alternative]節で述べた方法により，[MATH]を[MATH]に接続させ，[MATH]を構築する．
今度は，[MATH]に対して同様のことを行ない，[MATH]を得て[MATH]を構築する．
以下，同様にこの過程を続け，最終的に，入力文節の代替表現として，[MATH]を構築する．
各々の[MATH]に対して，[REF_subsec:enumerate]節で述べた方法によって実際に得られるのは，類義表現のリストである．
言い換え生成モジュールは，[MATH]に対して，これらのすべての組み合わせを試行し，接続し得ない2つの隣り合う要素を含む代替表現候補を棄却することによって，代替表現のリストを生成する．
難易度指定が厳しすぎるなどの理由により，代替表現が1つも生成されない場合，言い換え生成モジュールは，上位の階層の意味的等価クラスを用いて代替表現のリストを生成する．
機能語部の機能表現に意味的曖昧性があり，2つ以上の解析結果が存在する場合，言い換え生成モジュールは，各解析結果に対して独立に代替表現を生成し，最後に，それらを1つのリストにまとめて出力する．
機能表現の言い換えにおいて，実際の応用を考慮した場合，出力される代替表現のリストに，なんらかの尺度に基づく順位が付いていることが望ましい．
なぜならば，機能表現には数多くの異形が存在するため，代替表現が数百も出力されることがあるからである．
順位付けモジュールは，生成された代替表現のリストを，コーパス中の頻度に基づくスコアにより順位付けする．
コーパス中の頻度を利用する理由は，コーパスによく現れる機能表現は，より標準的で一般に使われているものだと考えることができるからである．
しかしながら，現在のところ，約17,000の機能表現の出現形に対してタグ付けを行なった大規模なコーパスは存在しないので，コーパス中の機能表現の頻度を直接利用することはできない．
そこで，本研究では，コーパス中の機能表現の頻度の近似値として，コーパスから単純な文字列照合によって得られる，「機能表現を構成する文字列」の出現回数を用いる．
スコア関数としては，代替表現に含まれる各機能表現の構成文字列の出現回数の積を用いる．
入力された代替表現のリストに，構成文字列が全く同じ代替表現が複数存在する場合，それらの表現には同じスコアが付くので，順位付けモジュールは，それらを1つにまとめて出力する．
入力文節「見てくれるか」に対する，言い換えシステムの出力を表[REF_tab:mite]に示す．
i欄に指定なしの場合の順位を，j欄に「敬体のみ」という文体指定を行なった場合の順位を示す．
入力文節「聞くや否や」に対する，言い換えシステムの出力を表[REF_tab:ya]に示す．
i欄に指定なしの場合の順位を，j欄に「A1，A2，Bのいずれかの難易度」という難易度指定を行なった場合の順位を示す．
これらの出力結果より，提案システムが，入力文節に対して適切な代替表現を生成できること，および，文体指定や難易度指定に従って，その出力を制御できることが分かる．
日本語の機能表現が持つ主な特徴の1つは，個々の機能表現に対して，多くの異形が存在することである．
例えば，「なければならない」に対して，「なくてはならない」，「なくてはならず」，「なければなりません」，「なけりゃならない」，「なければならぬ」，「ねばならん」など，多くの異形が存在する．
このような異形をつくり出す過程は，次の7カテゴリーに分類することができる[CITE]．
派生，機能語の交替，音韻的変化，とりたて詞[CITE]の挿入，
活用，「です／ます」の有無，表記のゆれ
松吉らは，これらの言語現象による機能表現の異形を階層構造を用いて分類し，機能表現辞書を編纂した[CITE]．
本論文では，機能表現の形態階層構造として，彼らの階層構造を採用する．
形態階層構造の概要を表[REF_tab:morph]に示す．
この階層構造は9つの階層を持つ．
[MATH]から[MATH]の階層が，上で列挙した異形のカテゴリーのそれぞれに対応する．
これらの階層の上に，見出しレベルとして[MATH]，語義を区別した見出しレベルとして[MATH]が定義されている．
形態階層構造の各階層における機能表現の数を，表[REF_tab:morph]の「表現数」の欄に示す．
見出し語に相当する[MATH]の機能表現の数は341であり，出現形に相当する[MATH]の機能表現の数は16,801である．
機能表現の出現形（[MATH]の機能表現）には，階層構造における位置を表す機能表現IDが付与されている．
この機能表現IDは9つの部分からなる．
IDの各部分は，階層構造のそれぞれの階層における階層IDである．
それぞれの出現形に付与された機能表現IDから，階層構造におけるその出現形の位置や，その上位の階層の機能表現（例えば，[MATH]の機能表現）を容易に知ることができる．
機能表現ID以外に，機能表現の出現形には，文体や左接続・右接続（隣に接続可能な形態素）などの情報も記述されている．
本論文では，機能表現を言い換えるにあたり，これらの情報を利用する．
現在，誰もが言い換えに利用することができる，日本語機能表現の意味的等価クラスの集合は存在しない．
機能表現に関する文献や辞書[CITE]に記述されている意味的等価クラスは，分類の粒度が粗いので，言い換えに直接利用することはできない．
一方，自然言語処理において，言い換えのために定義された機能表現の意味的等価クラスの集合[CITE]が存在するが，これらは一般公開されていない．
言い換えのための機能表現の意味的等価クラスとして，われわれは，形態階層構造における[MATH]の機能表現435表現に対して，3つの階層を持つ意味階層構造を作成した．
この階層構造の作成にあたっては，「日本語表現文型」[CITE]における機能表現に関する説明文と用例を参考にし，言い換え可能性の観点から，[MATH]の機能表現集合にあらかじめ定義されていた89の意味的等価クラス[CITE]を見直し，その再編成を行なった．
主に，次の2つのことを行なった．
下位区分
同じ意味的等価クラスに属する複数の機能表現を，言い換え可能性の観点からいくつかのグループにまとめ，元のクラスに下位クラスを定義した．
例えば，松吉らの機能表現辞書[CITE]において，〈推量〉という意味的等価クラスには，次の15の機能表現が属している．
かもしれない，かもわからない，にちがいない，にきまっている，
にそういない，にほかならない，ところ，ことだろう，のだろう，
みたい，よう，らしい，だろう，う，うる
これらの表現はすべて，推量や推定を意味する機能表現である．
しかしながら，それらの間の言い換え可能性は一様ではない．
例えば，「かもしれない」と「かもわからない」は，ほとんどすべての文脈において言い換え可能であると思われるが，その一方で，「かもしれない」と「にちがいない」は，これらが言い換え可能な文脈は先の2つの表現よりも限られると思われる．
他の表現対に対しても同様の考察を行ない，〈推量〉という意味的等価クラスを，図[REF_fig:class]のように下位区分した．
下位クラス化
属している機能表現の数が少数である意味的等価クラスを，その上位の意味を表す意味的等価クラスの下位クラスとして再定義した．
これは，前者に属する機能表現に対して，それが言い換え可能な機能表現の数を増やすためである．
例えば，松吉らの機能表現辞書において，〈最中〉という意味的等価クラスには，1つの機能表現「つつある」しか属していないので，この機能表現に対して，それと言い換え可能な（[MATH]の）機能表現を得ることはできない．
一方，「つつある」は，〈継続〉という意味的等価クラスに属する「ている」や「ていく」などの機能表現と，多くの文脈において言い換え可能である．
そこで，〈最中〉という意味的等価クラスを，〈継続〉という意味的等価クラスの下位クラスとして再定義した．
これにより，上位のクラスを用いた場合，「つつある」に対して，言い換え可能な機能表現として，「ている」や「ていく」などの表現を提示することができる．
このような再編成を経て，最終的に3階層の意味階層構造を構築した．
意味階層構造の大半において，各階層の1つの意味的等価クラスに属する機能表現は，表[REF_tab:semantic]の「1つのクラスに属する機能表現」の欄に示す性質を持っている．
各階層における意味的等価クラスの数とそれらに付与したクラスIDの形式を，それぞれ，表[REF_tab:semantic]の「クラス数」と「クラスID」の欄に示す．
最も上位の階層(Top)における意味的等価クラスの数は45であり，最も下位の階層(Bottom)における意味的等価クラスの数は199である．
一般に，1つの意味的等価クラスには，異なる難易度を持つ複数の機能表現が属している．
例えば，ある意味的等価クラスには，「とどうじに」や「たとたんに」のようなやさしい機能表現から，「やいなや」や「がはやいか」のような難しい機能表現まで，さまざまな難易度の機能表現が属している．
形態階層構造の[MATH]の機能表現には，「日本語能力試験出題基準」[CITE]の級に基づいた難易度が付与されている[CITE]．
この難易度は，A1，A2，B，C，Fの5段階であり，A1が一番やさしい．
本論文では，難易度指定に応じた機能表現の言い換えを実現するために，この情報を利用する．
形態階層構造と意味階層構造を持つ機能表現辞書を用いると，与えられた機能表現の出現形に対して，文体指定と難易度指定を満たす，意味的に等価な機能表現のすべての出現形を列挙することができる．
この手続きは，次のとおりである．
形態階層構造において，与えられた出現形の上位の[MATH]の機能表現を見つける
意味階層構造において，その機能表現を含む意味的等価クラスを見つけ，そこに属する機能表現の集合を得る
その集合から，難易度指定を満たさない機能表現を排除する
形態階層構造に基づき，集合内の各機能表現に対して，そのすべての異形（出現形）を列挙する
得られた出現形のリストの中から，文体指定を満たさない出現形を排除する
上の(2)の集合には，与えられた出現形の異形を出力するために，その上位の[MATH]の機能表現も含まれる．
計算機上では，上記の手続きは，出現形を表す機能表現IDと意味的等価クラスを表すクラスIDを用いて実行される．
例として，「や否や」と意味的に等価な機能表現の出現形のうち，A1，A2，Bのいずれかの難易度を持つものを列挙する．
まず，形態階層構造において，出現形「や否や」の上位の[MATH]の機能表現『やいなや』を見つける．
次に，意味階層構造において，『やいなや』を含む意味的等価クラスを見つける．
このクラスに属する機能表現の集合は，次のとおりである．
『とどうじに』，『とすぐに』，『たとたんに』，『そばから』，『なり』，『やいなや』，『がはやいか』，『や』
この集合から，設定された難易度指定を満たさない『そばから』，『なり』，『やいなや』，『がはやいか』，『や』を排除する（難易度は，それぞれ，C，C，C，F，F）．
最後に，形態階層構造に基づき，残った『とどうじに』，『とすぐに』，『たとたんに』のすべての出現形計20表現を，次のように列挙する．
「とどうじに」，「と同時に」，「とすぐに」，「とすぐ」，「たとたん」，「だとたん」，「たとたんに」，「た途端に」，[MATH]
本論文では，言い換え元の入力表現の単位として，文節を採用する．
その理由は，文節は，機能表現を含む最も基本的な文構成単位であるからである．
本論文で扱う文節は，いわゆる形式文節ではなく，機能表現を考慮して拡張された文節であり，以下のように定義する．
[MATH]を内容語，[MATH]を機能表現とおく．
このとき，文節を次のように定式化する．
文節内の[MATH]を文節の内容語部，[MATH]を文節の機能語部と呼ぶ．
例えば，「決定せざるをえないので」は，1つの文節である．
このとき，[MATH]「決定」，[MATH]「せ」，[MATH]「ざるをえない」，[MATH]「ので」であり，内容語部は「決定せ」，機能語部は「ざるをえないので」である．
本論文では，入力文節の機能語部に存在する機能表現を言い換えることにより，入力文節に対する代替表現を生成する．
機能語部の機能表現の言い換えは，原理的に，次の5種類の言い換えの組み合わせによって達成される（以下，文節例において，内容語部と機能語部の境界，および，機能表現と機能表現の境界に``／''を挿入する）．
機能表現を別の機能表現に置換する([MATH])
例）「聞く／や否や」[MATH]「聞く／とすぐに」
機能表現を機能表現列に置換する([MATH])
例）「雨／にもかかわらず」[MATH]「雨／な／のに」
機能表現列を1つの機能表現に置換する([MATH])
例）「行か／なければならない／ことはない」[MATH]「行か／なくてよい」
機能表現列を別の機能表現列に置換する([MATH])
例）「会っ／た／わけではない」[MATH]「会わ／なかっ／た」
機能表現（列）を内容語を含む表現に置換する
例）「行く／までもない」[MATH]「行く／-0.5zw／必要／は／-0.5zw／ない」（``／-0.5zw／''は，文節境界を表す）
機能表現の言い換えを定式化するにあたり，予備調査として，人間が機能表現を言い換える場合，これらの5種類の言い換えがどのように用いられるのか調査した．
調査方法としては，作業者に文節のリストを与え，文節の機能語部を自由に言い換えてもらった．
作業者には次の3つのことを指示した．
機能語部を言い換えてください．
内容語は言い換えないでください
思い付くまま，自由に言い換えてください．
やさしく言い換えなければならない，短くしなければならないといった制約はありません
1つの文節に対して複数の代替表現を思い付いた場合，そのすべてを記述してください．
どうしても代替表現が思い浮かばない文節に対しては，代替表現を記述しなくても構いません
文節リストとしては，「日本語能力試験出題基準」[CITE]における``〈機能語〉の類''のリストに付記されている用例を用いた．
``〈機能語〉の類''のリストの一部を表[REF_tab:jpt]に示す．
この文献には，269項目の``〈機能語〉の類''が収録されている．
この調査では，これらのうち，日本語機能表現辞書[CITE]にも収録されている140項目を対象とした．
``〈機能語〉の類''のリストにおいては，各``〈機能語〉の類''に対して，1つ以上の用例が記述されている．
本論文における言い換え元の入力表現の単位は，文節であるので，節単位や文単位の用例に対しては，そこから文節単位の用例を人手で抽出した．
``〈機能語〉の類'' 140項目に対する用例のうち，日本語機能表現辞書に収録されている機能表現の用例であるとわれわれが判断した238の用例を，言い換え元の文節リストとして用いた．
作業者は，238の文節のうち226の文節に対して，410の代替表現を作成した．
これらの代替表現が適切であるかどうかを，作業者とは異なる2人の判定者が独立に判定した．
適切さの判定基準は，「言い換え元の文節と作業者が作成した表現が，ある文脈において置換可能であるならば，後者は，代替表現として適切であると判定する」と定めた．
判定結果の分割表を表[REF_judge]に示す．
表の「[MATH]」の欄に，判定者が適切であると判定した代替表現の数を，「[MATH]」の欄に，判定者が適切でないと判定した代替表現の数を示す．
この表から，作業者が作成した表現の86%(353/410)が，2人の判定者に，代替表現として適切であると判定されたことが分かる．
作業者が作成し，2人の判定者が適切であると判定した353の代替表現が，上記の5種類の言い換えのどのような組み合わせによって実現されているか分析した．
分析結果を表[REF_tab:native]に示す．
この表から，353の代替表現のうち，その61%(215/353)が，``1[MATH]1''のみで実現されたことが分かる．
したがって，機能表現を類義表現に置換するという``1[MATH]1''は，人間が行なう機能表現の言い換えの過半数をカバーすると言うことができる．
前節の調査結果に基づき，本研究が対象とする言い換えの入出力を，次のように定めた．
入力は1つの文節であり，出力は，入力文節に対する代替表現である．
入力：文節 &= c_1 c_2 \cdots c_{m-1} c_m f_1 f_2 \cdots f_n \nonumber
出力：代替表現&= c_1 c_2 \cdots c_{m-1} c_m^ w f_1^ f_2^ \cdots f_n^
ここで，[MATH]は，内容語[MATH]かもしくはそれを活用させた語であり，[MATH]は，機能表現[MATH]と意味的に等価な機能表現である．
[MATH]は，空文字列か，もしくは，[MATH]と[MATH]を適切に接続するために挿入される語である．
本研究では，入力文節の機能語部に存在する各々の機能表現を，それと意味的に等価な機能表現に置換することにより，入力文節に対する代替表現を生成する．
一般に，機能表現[MATH]の左接続と機能表現[MATH]の左接続は，たとえそれらが意味的に等価であったとしても異なる．
例えば，「や否や」と「たとたん」は意味的に等価であるが，前者の左接続は動詞の基本形であるのに対し，後者の左接続は動詞の連用タ接続である．
同様に，「にあたって」と「際に」は，同じ〈状況〉という意味を持っているが，前者の左接続は動詞の基本形と名詞であるのに対し，後者の左接続は動詞の基本形とタ形および助詞「の」である．
このような場合，[MATH]を[MATH]に置換した後，[MATH]と[MATH]を適切に接続する必要がある．
内容語と機能表現の接続には次の4種類があり，それぞれに応じて異なる手続きを行なう．
内容語[MATH]が機能表現[MATH]の左接続に含まれる場合，それらを単純に接続する．
例えば，「聞く」と「とすぐに」は，単純接続可能である．
活用形を除いて，内容語[MATH]が機能表現[MATH]の左接続に含まれる場合，[MATH]の活用形を変更することにより，それらを接続する．
例えば，「聞く」と「たとたん」を接続するには，活用形の変更が必要であり，まず，活用形変化表を参照して「聞く」を「聞い」に活用させた後，それらを接続する．
内容語[MATH]と機能表現[MATH]が，間に語[MATH]を介せば接続可能である場合，必要に応じて[MATH]の活用形を変更した後，[MATH]を挿入して全体を接続する．
例えば，「子供」と「からといって」を接続するには，語の挿入が必要である．
「子供」の品詞情報と「からといって」の左接続から，挿入語選択表を参照して「だ」を得，それを介して全体を接続する．
挿入語の一覧を表[REF_tab:inserted]に，[MATH]の左接続を少し簡略化してまとめた挿入語選択表を表[REF_tab:inserted_select]に示す．
上のいずれにも当てはまらない場合，内容語[MATH]と機能表現[MATH]は接続不可能であると判定し，これらを含む代替表現候補を棄却する．
例えば，「聞く」と「だとたん」（「たとたん」の「た」が有声化した表現）は，接続不可能である．
機能表現[MATH]と機能表現[MATH]の接続の可否は，それらが単純接続可能であるかどうかにより判定し，前者の活用形の変更は行なわない．
その理由は，[REF_subsec:enumerate]節で説明した方法によって，すべての活用形が展開された形で，意味的に等価な機能表現の出現形のリストが与えられるからである．
[MATH]と[MATH]が単純接続可能でない場合，これらを含む代替表現候補を棄却する．
例えば，「なければならない」と「にちがいない」は単純接続可能である．
一方，「なければならなく」と「にちがいない」は，単純接続可能ではないので，これらを含む代替表現候補を棄却する．
単純な置換と語の挿入を組み合わせた，本論文で提案する言い換え手法は，表[REF_tab:native]における「1[MATH]1のみ」のすべてと，「1[MATH]N（と1[MATH]1）」の22%(15/68)をカバーする．
したがって，この言い換え手法は，理論上，表[REF_tab:native]の65%(230/353)をカバーする．
前章で述べた手法により，文体と難易度を制御しつつ，機能表現を言い換えるシステムを実装した．
このシステムの入力は文節（と文体指定・難易度指定）であり，出力は，代替表現の順位付きリストである．
代替表現を生成するにあたり，このシステムは，[REF_sec:dic]章で説明した機能表現辞書を用いる．
実装した言い換えシステムの全体像を図[REF_fig:system]に示す．
このシステムは，次の3つのモジュールからなる．
文節解析
言い換え生成
順位付け
文節解析モジュールは，与えられた文節を，式([REF_eq:phrase])に示されるように内容語と機能表現の列に分割する．
日本語機能表現を検出する手法は，これまでにいくつか提案されており，例えば，半自動的に作成した規則に基づく手法[CITE]や機械学習に基づくチャンキング手法[CITE]などがある．
しかしながら，これらの手法が検出対象としている機能表現とその異形の数は，限られているため，本研究では，これらの手法を文節解析に利用することはできない．
別の手法として，既存の形態素解析器の辞書に約17,000の機能表現の出現形を追加し，機械学習により種々のコストを決定することが考えられる．
しかしながら，現在のところ，これらすべての出現形に対してタグ付けを行なった大規模なコーパスは存在しないので，この手法は実行可能ではない．
本システムでは，これらの手法とは異なる方法を用いて，与えられた文節を内容語と機能表現の列に分割する．
このシステムの文節解析モジュールは，2種類の解析器を用いる．
1つめの解析器は，文節の機能語部の解析に特化した解析器（以下，機能語部解析器）である．
この解析器は，辞書エントリーとして約17,000の機能表現の出現形のみを持つ形態素解析器MeCabで実装されている．
実装においては，機能表現間の接続は，[REF_subsec:morph]節で述べた，機能表現辞書に記述されている接続条件を用いず，すべての組み合わせが可能であるとし，連接コストはすべて1と定めた．
その理由は，機能表現辞書の接続条件は，解析に用いるには少し厳しすぎるのではないかと考えたからである．
なお，単語コストはすべて0と定めた．
この機能語部解析器は，機能語部をなす文字列を機能表現の列に分割することができる．
その一方で，文字列に，内容語と解析されるべき要素が含まれている場合，文字列の分割に失敗する．
与えられた文字列から機能語部を抽出するために，文節解析モジュールは，2つめの解析器として，IPA辞書を組み込んだ通常のMeCabを用いる．
以下に，文節解析の手順を述べる．
まず，通常のMeCabを用いて，入力文節を形態素列[MATH]に分割する．
次に，[MATH]を内容語部，[MATH]を機能語部であると仮定する．
機能語部解析器が，[MATH]の表層形をまとめた文字列を機能表現の列[MATH]に分割することができたならば，文節解析モジュールは，解析結果として，[MATH]を出力する．
ここで，[MATH]である．
機能語部解析器が分割に失敗した場合，[MATH]を内容語部，[MATH]を機能語部であると仮定する．
機能語部解析器が，[MATH]の表層形をまとめた文字列を機能表現の列[MATH]に分割することができたならば，文節解析モジュールは，解析結果として，[MATH]を出力する．
ここで，[MATH]，[MATH]である．
以下同様に，機能語部解析器が分割に成功するまで，この手続きを続ける．
例として，文節「決定せざるをえないので」を解析する．
まず，この文節は，通常のMeCabにより，「決定／せ／ざる／を／え／ない／ので」と，7つの形態素に分割される．
次に，「決定」を内容語部，「せ／ざる／を／え／ない／ので」を機能語部と仮定する．
機能語部解析器は，文字列「せざるをえないので」の分割に失敗するので，今度は，「決定／せ」を内容語部，「ざる／を／え／ない／ので」を機能語部と仮定する．
この場合，機能語部解析器は，文字列「ざるをえないので」の分割に成功し，この文字列を「ざるをえない」と「ので」に分割する．
これにより，解析結果として，[MATH]「決定」，[MATH]「せ」，[MATH]「ざるをえない」，[MATH]「ので」が出力される．
内容語の場合と同様に，2つ以上の意味を持つ機能表現も存在する．
例えば，「によって」は，次の3つの意味を持つ．
その病気は，ウイルスによって伝染していく．
民法によって，そのように定められている．
季節によって見える星座が異なる．
機能語部解析器が分割した機能語部に，複数の意味を持つ機能表現が存在した場合，文節解析モジュールは，それらに対応する複数の解析結果を出力する．
例えば，機能語部解析器が分割した機能語部に，2つの意味（[MATH]と[MATH]）を持つ機能表現[MATH]が存在した場合，文節解析モジュールは，次の2つの解析結果を出力する．
[MATH]，[MATH]
言い換え生成モジュールは，入力文節の解析結果[MATH]を受け取り，文体指定と難易度指定を満たす代替表現のリストを生成する．
まず，言い換え生成モジュールは，[REF_subsec:enumerate]節で述べた方法を用いて，[MATH]と意味的に等価であり，かつ，文体指定と難易度指定を満たす機能表現の出現形[MATH]を得る．
次に，[REF_subsec:alternative]節で述べた方法により，[MATH]を[MATH]に接続させ，[MATH]を構築する．
今度は，[MATH]に対して同様のことを行ない，[MATH]を得て[MATH]を構築する．
以下，同様にこの過程を続け，最終的に，入力文節の代替表現として，[MATH]を構築する．
各々の[MATH]に対して，[REF_subsec:enumerate]節で述べた方法によって実際に得られるのは，類義表現のリストである．
言い換え生成モジュールは，[MATH]に対して，これらのすべての組み合わせを試行し，接続し得ない2つの隣り合う要素を含む代替表現候補を棄却することによって，代替表現のリストを生成する．
難易度指定が厳しすぎるなどの理由により，代替表現が1つも生成されない場合，言い換え生成モジュールは，上位の階層の意味的等価クラスを用いて代替表現のリストを生成する．
機能語部の機能表現に意味的曖昧性があり，2つ以上の解析結果が存在する場合，言い換え生成モジュールは，各解析結果に対して独立に代替表現を生成し，最後に，それらを1つのリストにまとめて出力する．
機能表現の言い換えにおいて，実際の応用を考慮した場合，出力される代替表現のリストに，なんらかの尺度に基づく順位が付いていることが望ましい．
なぜならば，機能表現には数多くの異形が存在するため，代替表現が数百も出力されることがあるからである．
順位付けモジュールは，生成された代替表現のリストを，コーパス中の頻度に基づくスコアにより順位付けする．
コーパス中の頻度を利用する理由は，コーパスによく現れる機能表現は，より標準的で一般に使われているものだと考えることができるからである．
しかしながら，現在のところ，約17,000の機能表現の出現形に対してタグ付けを行なった大規模なコーパスは存在しないので，コーパス中の機能表現の頻度を直接利用することはできない．
そこで，本研究では，コーパス中の機能表現の頻度の近似値として，コーパスから単純な文字列照合によって得られる，「機能表現を構成する文字列」の出現回数を用いる．
スコア関数としては，代替表現に含まれる各機能表現の構成文字列の出現回数の積を用いる．
入力された代替表現のリストに，構成文字列が全く同じ代替表現が複数存在する場合，それらの表現には同じスコアが付くので，順位付けモジュールは，それらを1つにまとめて出力する．
入力文節「見てくれるか」に対する，言い換えシステムの出力を表[REF_tab:mite]に示す．
i欄に指定なしの場合の順位を，j欄に「敬体のみ」という文体指定を行なった場合の順位を示す．
入力文節「聞くや否や」に対する，言い換えシステムの出力を表[REF_tab:ya]に示す．
i欄に指定なしの場合の順位を，j欄に「A1，A2，Bのいずれかの難易度」という難易度指定を行なった場合の順位を示す．
これらの出力結果より，提案システムが，入力文節に対して適切な代替表現を生成できること，および，文体指定や難易度指定に従って，その出力を制御できることが分かる．
