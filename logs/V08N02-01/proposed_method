決定リストによる単語分割


\subsection{単語分割と分類問題}

\( n \)文字からなる入力文を \( s = c_1 c_2 \cdots c_n \) （各\( c_i \)は文字を表す）とすると，
日本語単語分割は文字\( c_{i} \) と \( c_{i+1} \) 
の間（\( b_{i} \) と名付ける）に
単語境界がある(\(+1\)) かない(\(-1\)) かを与えることによって行える。
つまり\( b_{i} \) （ \( i = 1,2, \cdots, n-1 \) ）に\( +1 \)か\( -1 \)を
与える分類問題としてとらえられる.
例えば，「太郎は海でアイスクリームを食べた。」という文に対しては，
\mbox{図\ref{zu1}} のように各文字間にクラス\( +1 \)あるいは\( -1 \)を付与し，
\( +1 \)の部分を単語境界に置き換えることにより単語分割が行える．

\begin{figure*}[htbp]
\begin{center}
\atari(116.3,42.2)
\end{center}
\caption{クラスの付与による単語分割}
\ecaption{Word segmentation by class assignment}\label{zu1}
\end{figure*}

分類問題を解く手法は様々なものがある．どの手法が優れているかは問題に依存するために
一概には言えない．本論文では決定リストを利用して上記の分類問題を解く．

\subsection{決定リストの構築}

決定リストは帰納学習手法の一種であり，正解付きの訓練データから，
分類規則を学習する．決定リストの場合，分類規則は
証拠とクラスの組の順序付きの表となる．
ここで証拠とは属性とその属性の値の組である．
実際の分類はリストの上位のものから順に，その証拠があるかどうかを
調べ，その証拠があれば，それに対応するクラスを出力する．

決定リストの作成は概ね以下の手順による．

\begin{description}
\item[step 1] 属性を設定する．

例えば\( n \)個の属性を\( att_{1} , att_{2} , \cdots , att_{n} \)とする。

\item[step 2] 訓練データから証拠とクラスの組の頻度を調べる．

訓練データ中のあるデータの属性\( att \) の値が \( a \) で
あるとし，そのデータのクラスが\( C \) だとする．
その場合，\( (att,a) \) という証拠とクラス\( C \) の組
\( ((att,a),C) \) の頻度に 1 を足す．
これを訓練データ中の全データに対する全属性について行う．

\item[step 3] 証拠の判別力と分類クラスを導く．

\( ((att,a),C) \) の頻度が\( f_{C} \) であった場合，
\( f_{C} \) の最大値を与える\( \hat{C} \) が
証拠 \( (att,a) \) に対する分類クラスとなる．
またそのときの判別力\( pw(att,a) \)は以下で定義される．
\[
pw((att,a)) = \log \frac{f_{\hat{C}}}{\sum_{C \neq \hat{C}} f_{C}}
\]

\item[step 4] 判別力の順に並べる．

全ての証拠と分類クラスの組を判別力の大きい順に並べる．
これによって作成できた表が決定リストである．

\end{description}

\subsection{属性の設定}

各文字間\( b_i \)がどのクラスに属するかを判断する材料が属性である．
本論文では\( b_i \)の属性として，\mbox{表\ref{attribute}}の 7 種類を用意した．

\begin{table}[h]
  \begin{center}
    \leavevmode \small
    \caption{設定した属性}
    \ecaption{Setting attributes}  \label{attribute}
    \begin{tabular}{|c|cc|} \hline
属性           &     値    &   \\ \hline
\( att_{1} \)  &  文字列 & \( c_{i-1}c_{i}c_{i+1} \)      \\ \hline
\( att_{2} \)  &  文字列 & \( c_{i}c_{i+1}c_{i+2} \)      \\ \hline

\( att_{3} \)  &  文字列 & \( c_{i-1}c_{i} \)          \\ \hline
\( att_{4} \)  &  文字列 & \( c_{i}c_{i+1} \)            \\ \hline
\( att_{5} \)  &  文字列 & \( c_{i+1}c_{i+2} \)           \\ \hline
\( att_{6} \)  &  字種の接続関係1 & \( ((c_{i}の大分類字種), (c_{i+1}の大分類字種)) \)  \\ \hline
\( att_{7} \)  &  字種の接続関係2 & \( ((c_{i}の細分類字種), (c_{i+1}の細分類字種)) \)  \\ \hline
    \end{tabular}
  \end{center}
\end{table}

6，7番目の属性として，字種の情報を利用している形になっている．
ここでは字種を大分類と細分類の二つの観点から分類した．
字種の大分類は6番目の属性，字種の細分類は7番目の属性で利用した．

字種の大分類は\mbox{表\ref{dai-bunrui}}に示した 9種類である．

\newpage

\begin{table}[h]
  \begin{center}
    \leavevmode \small
    \caption{大分類字種}
    \ecaption{Classification of character types}\label{dai-bunrui}
    \begin{tabular}{|c|c|c|} \hline
字種  & 意味    & 例 \\ \hline
平    &  平仮名 & あ，い，う， … \\ \hline
カ    & カタカナ   & ア，イ，ウ， … \\ \hline
数    & 漢数字    & 一，二，…，百，千，… \\ \hline
漢    & 漢字      & 亜，位，卯， … \\ \hline
Ｎ    & 英数字    & ０，１，２，… \\ \hline
ア    & アルファベット & Ａ，Ｂ，Ｃ，… \\ \hline
記    & 記号     & 、，。，「，… \\ \hline
〇    & 小丸かゼロ &  〇 \\ \hline
○    & 大丸かゼロ &  ○ \\ \hline
    \end{tabular}
  \end{center}
\end{table}

字種の細分類は大分類の平仮名の部分をその文字自身にしたものである．

また注意として，本論文の決定リストでは \( default \) の証拠を導入していない．
決定リストでは通常\( default \)という証拠を設けて，それ以下の判別力の
証拠は表には入れない．\( default \)は文脈上の証拠が決定リストに存在しない場合の
処理ととらえられるが，ここでは大分類の字種の情報が必ずヒットするので，
\( default \)の証拠を含める必要がない．
6番目の属性からの証拠の最下位のものが，決定リストの最下位の証拠となる．

\subsection{利用例}

決定リストの利用例を示す．例えば「太郎は海でアイスクリームを食べた。」という入力文の
5番目の文字 ``で'' と 6 番目の文字 ``ア'' の間，つまり \( b_5 \) にクラス
\( +1 \)あるいは\( -1 \)を与えてみる．
\( b_5 \)の持つ証拠は以下の 7 種である．

\bigskip
\begin{center}
\( (att_{1}, "海でア") \)，\( (att_{2}, "でアイ") \)，\( (att_{3}, "海で") \)，\\
\( (att_{4}, "でア") \)，\( (att_{5}, "アイ") \)，\( (att_{6}, "平カ") \)，\( (att_{7}, "でカ") \)  
\end{center}
\bigskip

後述する実験で得られた決定リストを用いると，各証拠の分類クラスと判別力は以下の通りである．

\newpage

\begin{table}[h]
  \begin{center}
    \leavevmode \small
    \caption{クラス判別の例}
    \ecaption{Example of class judgement}\label{class-hanbetu}
    \begin{tabular}{|c|cc|} \hline
証拠           &  分類クラス & 判別力  \\ \hline
\( (att_{1}, "海でア") \)  &   --  &  --    \\ \hline
\( (att_{2}, "でアイ") \)  &   --  &  --    \\ \hline
\( (att_{3}, "海で") \)  &   +1  & 2.74377     \\ \hline
\( (att_{4}, "でア") \)  &   +1  & 5.83188     \\ \hline
\( (att_{5}, "アイ") \)  &   +1  & 1.64565     \\ \hline
\( (att_{6}, "平カ") \)  &   +1  & 6.33293     \\ \hline
\( (att_{7}, "でカ") \)  &   +1  & 8.64488     \\ \hline
    \end{tabular}
  \end{center}
\end{table}

表の中で ``--'' の記号のものは，決定リスト中にその証拠がないことをあらわす．
また本来ならば，決定リスト中の順位を求めなければならないが，
ここでは相対的な順位関係だけが必要であり，
順位の値自体は必要でない．判別力の最も大きなものが最上位の順位になるはずである．
この場合，証拠 \((att_{7},"でカ") \) が最も大きな判別力を持つので，
この証拠の分類クラス +1 が判定結果となる．
つまり\( b_5 \) には単語境界を置くと判定する．


アダブーストの利用


精度の低い分類規則を組み合わせて精度の高い分類規則を得る方式をブースティングという．
アダブーストはブースティング方式の一つであり，
現在まで多くの理論的検証と実験的実証から有効性が示されている．

アダブーストのアルゴリズムを\mbox{図\ref{algo}} に示す．
分類クラス(\mbox{図\ref{algo}} の \( Y \) )をここでは\( \{ +1, -1 \} \) の 2値とする．
また訓練データを\( (x_1,y_1),(x_2,y_2),\cdots,(x_m,y_m) \) で表す．
ここで各\( x_i \) はデータを表し，\( y_i \) はデータ\( x_i \) のクラスである．
具体的に\( y_i \) は\( +1 \) あるいは\( -1 \)の値である．
この訓練データに対して，分類問題に対する学習アルゴリズム，
例えば，決定木や決定リストなどを適用して，分類規則\( h_1 \)を学習する．
得られた分類規則\( h_1 \)を訓練データに適用すると，\( h_1 \)によって
各\( x_i \)の判定クラスが得られる．今，\( x_i \)の実際のクラス\( y_i \) は
与えられているので，分類規則\( h_1 \)が各\( x_i \)に対して正しい判定を行ったかどうかを
調べられる．これによって不正解のデータを集め，それら不正解のデータに対してある重みを付加して，
訓練データ\( (x_1,y_1),(x_2,y_2),\cdots,(x_m,y_m) \)を再構成する．
そしてこの再構成された訓練データに対して，
再び学習アルゴリズムを適用して，分類規則\( h_2 \)を学習する．
これを\( T \)回繰り返す．
この繰り返しによって，\( T \)組の分類規則\( h_1, h_2, \cdots, h_T \) が得られる．
実際の判定は入力データに対して各分類規則が出力するクラスの重み付き多数決により行われる．

例えば，\( T = 3 \) とし，入力データ\( x \) に対して，分類器\( h_1 \) による
判定クラスが\( +1 \)，\( h_2 \) による判定クラスが\( -1 \)，
\( h_3 \) による判定クラスが\( +1 \) であり，各重みが 1 ， 2.0 ，2.2 であった場合，
重み付き多数決の結果は \( +1.2 \) である．
最終的な判定クラスは総和の符合により求まる．この例の場合，符合は正であるので，
\( +1 \) が判定クラスになる．

アダブーストのポイントは不正解のデータに課す重みの与え方である．
概略，得られた分類規則の誤り確率（ \mbox{図\ref{algo}}における \( \epsilon_{t} \) ) が
小さいほど重みが大きくなるように設定している．

\begin{figure*}[htbp]
\begin{center}
\atari(120.5,128)
\end{center}
\caption{アダブースト}
\ecaption{AdaBoost}\label{algo}
\end{figure*}

本論文では．分類問題に対する学習アルゴリズムを決定リストに設定する．
不正解データに与える重みをどのように反映させるかが問題である．
ここでは，重みを頻度として与えることにした．
例えば，「太郎が東京へ行く。」という文に
以下のように単語境界 ``/'' が置かれたものが訓練データである．

\begin{verbatim}
                         太郎/が/東京/へ/行く/。
\end{verbatim}

今，4番目の文字 ``東'' と 5 番目の文字 ``京'' の間，つまり \( b_4 \) に対する証拠は
以下の通りである．

\bigskip
\begin{center}
\( (att_{1}, "が東京") \)，\( (att_{2}, "東京へ") \)，\( (att_{3}, "が東") \)，\\
\( (att_{4}, "東京") \)，\( (att_{5}, "京へ") \)，\( (att_{6}, "漢漢") \)，\( (att_{7}, "漢漢") \)
\end{center}
\bigskip

``東'' と ``京'' の間には，単語境界がないので，クラスは\( -1 \)である．
そして，決定リスト作成の step 2 で示したように，以下の証拠の頻度に 1 が足される．

\bigskip
\begin{center}
\( ((att_{1},"が東京"),-1) \)，\( ((att_{2},"東京へ"),-1) \)，\( ((att_{3},"が東"),-1) \)，\\
\( ((att_{4},"東京"),-1) \)，\( ((att_{5},"京へ"),-1) \)，\( ((att_{6},"漢漢"),-1) \)，\( ((att_{7},"漢漢"),-1) \)
\end{center}
\bigskip

この頻度に加算される 1 という数値に重みを反映させる．

例えば，決定リスト\( h_k \) により上記例文の4番目の文字 ``東'' と 5 番目の文字 ``京'' の間
の判定クラスが\( +1 \)と判定された場合，この判定は不正解である．
そこで次の決定リスト\( h_{k+1} \)を作成するときに，上記の７つの各証拠の頻度に 1 ではなく，
重み自身を加える．

つまり決定リストを作成する際には各訓練データには重みがついているとして，
その重みが決定リスト作成の step 2 で各証拠と正解の組に付加する数値とする．
\mbox{図\ref{algo}}のアルゴリズムでは正規化するために重みの総和が１になっているが，
ここでは重みの最小値が１となるようにして計算を簡単にした．
このため最初の決定リストを作成する際の各訓練データの重みは１であり，
２回目では正解のデータの重みは１で変化せず，不正解の部分の重みが大きくなる．


