================================================================
[section type  : abstract]
[section title : abstract]
================================================================
[i:0, score:0.32551] 本論文では，構文木をクエリとして与え，構文木付きコーパスからクエリと同じ構文木を部分木として含む文を検索する手法を提案する．
[i:2, score:0.41630] このような構造検索の過去の研究では，クエリの節点数が増加すると，検索時間が大幅に増加する問題があった．
[i:3, score:0.46427] 本論文で提案する手法は，節点数が多いクエリを部分木に分割し，漸進的に検索することで検索を効率化する．

================================================================
[section type  : intro]
[section title : はじめに]
================================================================
[i:24, score:0.47393] クエリの節点数が多い場合，クエリを分割し，それぞれのクエリを別のSQL文で漸進的に検索する．
[i:25, score:0.34334] クエリを分割すべきかどうか，分割するクエリの大きさや検索順序は，構文木付きコーパス中の規則の出現頻度を用いて自動的に決定する．
[i:28, score:0.49052] そして，クエリの分割が検索時間の短縮に効果があった4種類のコーパスと分割の効果がなかった3種類のコーパスの違いについて，コーパスに含まれる文数，ラベルの頻度，節点の平均分岐数の観点から考察を行い，節点の平均分岐数がその一因であることを確認した．

================================================================
[section type  : proposed_method]
[section title : 構文木付きコーパスのデータベース化]
================================================================
[i:30, score:0.24838] 吉川らの手法は，クエリとしてXPathを用い，XML文書を関係データベースに格納する．
[i:32, score:0.32653] XML文書を検索する場合，クエリであるXPathをSQL文に変換し，クエリを含むXML文書を検索する．
[i:34, score:0.29145] その理由は，XML文書の木構造の各節点を出現位置という2つの数字で表現し，その大小関係により，節点の親子関係や兄弟関係を表現する点にある．
-----------------------------------------------------
  [subsection title : 出現位置]
-----------------------------------------------------
  [i:lead, score:0.30679] 構文木をデータベースに格納するにあたり，構文木中の各節点対して，出現位置と呼ばれる節点間の関係を計算するための2つの数字を与える．
.....
  [i:36, score:0.30679] 構文木をデータベースに格納するにあたり，構文木中の各節点対して，出現位置と呼ばれる節点間の関係を計算するための2つの数字を与える．
  [i:42, score:0.24859] 根から深さ優先探索で辿り，節点を辿るときに[MATH]をpositionに加算し，葉を辿るきに葉のleft_positionまたはright_positionの値を代入する．
  [i:46, score:0.28913] また，このように各節点に出現位置を与えることで，\figurename[REF_fig:yoshikawa-hougan]のように節点間の関係を出現位置の大小関係で表現することができる．
-----------------------------------------------------
  [subsection title : 関係データベースへの格納]
-----------------------------------------------------
  [i:lead, score:0.23059] 前節で計算した出現位置とともに各節点の情報を関係データベースに格納する．
.....
  [i:47, score:0.23059] 前節で計算した出現位置とともに各節点の情報を関係データベースに格納する．
  [i:50, score:0.29532] Node Tableは，構文木を構成する各節点に関する情報を格納する．
  [i:51, score:0.33399] 各項目は，IDが節点固有の値，parentIDが節点の親のID，docIDが節点を含む構文木のID，labelIDが節点のラベルのID，nextSibIDが節点の右隣の兄弟のID，l_pos, r_posが節点の出現位置を表す．

================================================================
[section type  : proposed_method]
[section title : 構文木付きコーパスの検索手法]
================================================================
[i:56, score:0.00000] 
-----------------------------------------------------
  [subsection title : クエリの定義]
-----------------------------------------------------
  [i:lead, score:0.14241] 前節では，構文木付きコーパスを関係データベースに格納する方法について述べた．
.....
  [i:62, score:0.38038] 完全一致は，クエリの各節点の分岐数とコーパス内の対応する節点の分岐数が一致しなければならない．
  [i:64, score:0.54208] 例えば，\figurename[REF_fig:query]において，完全一致で検索した場合，(a)の木は，各節点の分岐数，ラベルが一致するためにクエリと一致すると見なす．
  [i:66, score:0.46109] しかし，部分一致で検索した場合，節点の分岐数は一致する必要がないため，両方の木がクエリと一致すると見なす．
-----------------------------------------------------
  [subsection title : 構文木をクエリとした検索手法]
-----------------------------------------------------
  [i:lead, score:0.38350] 本手法は，吉川らの手法と同様に検索を行うためにクエリである部分木を関係データベースのデータの操作，定義，検索などを行う言語SQLの文へ変換する．
.....
  [i:67, score:0.38350] 本手法は，吉川らの手法と同様に検索を行うためにクエリである部分木を関係データベースのデータの操作，定義，検索などを行う言語SQLの文へ変換する．
  [i:68, score:0.37472] そして，変換したSQL文により該当した構文木をデータベース内から検索し，クエリを部分木として含む構文木を得る．
  [i:70, score:0.36921] \figurename[REF_fig:sql]中のSQL文のwhere構文以降が各節点の条件式となっている．
-----------------------------------------------------
  [subsection title : 予備実験]
-----------------------------------------------------
  [i:lead, score:0.17142] 吉川らは，シュークスピアの戯曲をJon Bosakがタグ付けしたXML文書[CITE]を用いた評価実験により，検索手法が高速であることを示した[CITE]．
.....
  [i:76, score:0.44707] そして，4文から節点数が2から20の抽出可能なすべての部分木をクエリとして，部分一致により検索を行った．
  [i:78, score:0.43178] 実験結果より，クエリの節点数が7から12の間は，高速に検索を行っているが，節点数が7以下，12以上の場合，検索時間が非常に増加している．
  [i:80, score:0.48034] 一方，クエリの節点数が12以上の場合は，クエリと一致する文かどうかの判定，つまりSQL文の条件判定に検索時間を要していると考えられる．
-----------------------------------------------------
  [subsection title : 漸進的検索]
-----------------------------------------------------
  [i:lead, score:0.41184] 予備実験の結果から，クエリの節点数が7から12の間は，高速に検索が可能であることがわかった．
.....
  [i:104, score:0.45760] コーパスが与えられたとき，コーパスから最大検索単位節点数を計算し，ノード数が多いクエリは最大検索単位節点数をもとに分割して，漸進的に検索を行う．
  [i:122, score:0.48784] \hangafter=1\hangindent=\StepW Step 2　クエリ内の最小頻度の節点を検索単位[MATH]とする．
  [i:132, score:0.48663] クエリとして，\figurename[REF_fig:divide]の(1)が与えられ，最大検索単位節点数が5であると仮定する．

================================================================
[section type  : experiment_result]
[section title : 評価実験]
================================================================
[i:154, score:0.40051] クエリは，コーパスからランダムに抽出した部分木を用い，節点数1から31までの各50個を用いた．
[i:157, score:0.59504] Penn Treebank Corpus，TIGER Corpus，Penn Korean Treebank Corpus，FLOREST sinta(c)ticaの4つコーパスにおいては，完全一致による検索では節点数16以上，部分一致による検索では節点数11から13以上のクエリに対して，クエリの分割を行わずに検索を行った場合，急激に検索時間が増大することがわかる．
[i:159, score:0.47564] また，対照的にPenn Chinese Treebank Corpus，東工大コーパス(RWC),東工大コーパス(EDR)では，完全一致と部分一致ともに許容検索時間を越えることがなく，最大検索単位節点数は最大の31と計算された．

================================================================
[section type  : conclusion]
[section title : 考察]
================================================================
[i:162, score:0.42167] 1つは，分割せずに検索した場合，クエリを構成する節点数が増えると検索時間が非常に遅くなるものである．
[i:164, score:0.40778] もう1つは，クエリの節点数が増えても検索時間に影響を与えないものである．
[i:169, score:0.21827] 節点の平均分岐数
-----------------------------------------------------
  [subsection title : コーパスの文数]
-----------------------------------------------------
  [i:lead, score:0.11808] コーパスの文数が検索時間に影響を与えることが考えられる．
.....
  [i:172, score:0.59719] しかし，\tablename[REF_tbl:corpora]からわかるようにPenn Korean Treebank Corpus（5,083文），FLOREST sinta(c)tica（8,307文）は，比較的コーパスに含まれる文数が少ないが，クエリの節点数が増加するとともに検索時間が大幅に増加している．
  [i:173, score:0.37433] また，Penn Chinese Treebank（15,168文）は文数が多いにも関わらず，節点数が増加しても検索時間は増加していない．
  [i:177, score:0.31671] この結果からコーパスに含まれる文数が減少しても，節点数が増加するとともに検索時間が増大していることがわかった．
-----------------------------------------------------
  [subsection title : ラベルの頻度]
-----------------------------------------------------
  [i:lead, score:0.25196] クエリ内のラベルが検索時間に影響を与えることが考えられる．
.....
  [i:181, score:0.27221] しかし，\tablename[REF_tbl:corpora]からわかるように，Penn Treebank Corpusはラベル（非終端記号）の異なり数が多いが検索時間が急激に増加している．
  [i:183, score:0.33280] Penn Treebank Corpus，東工大コーパス(RWC)を用いて，ラベルを``[MATH]''で置き換えたクエリを用いて，実験を行った．
  [i:186, score:0.30474] ラベルの情報がなくなったため，双方ともに評価実験よりも検索時間を要しているが，節点数と検索時間との関係に変化はなかった．
-----------------------------------------------------
  [subsection title : 節点の平均分岐数]
-----------------------------------------------------
  [i:lead, score:0.24106] 次に，コーパスの特徴として節点の平均分岐数に注目した．
.....
  [i:188, score:0.24106] 次に，コーパスの特徴として節点の平均分岐数に注目した．
  [i:189, score:0.19817] 分岐数が多くなれば，構文木は複雑になり，検索に時間を要することが考えられる．
  [i:190, score:0.24156] そこで，全てのコーパスについて，それぞれの節点の平均分岐数を調べた．

================================================================
[section type  : conclusion]
[section title : まとめ]
================================================================
[i:196, score:0.44735] 構文木付きコーパスのデータベース化は，木構造を持つXML文書を格納・検索する手法を用い，部分木で表現されたクエリをSQL文に変換して検索を行う．
[i:198, score:0.44327] クエリの分割は，まずコーパスから最大検索単位節点数を計算し，最大検索単位節点数をもとに，効率的に検索できるようクエリを分割し，検索を行う．
[i:200, score:0.43785] また，評価実験で用いたコーパスには，クエリの節点数が増加すると検索時間が非常に遅くなるものと，そうでないものの2種類が存在した．

