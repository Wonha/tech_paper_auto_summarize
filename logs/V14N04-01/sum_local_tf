================================================================
[section type  : abstract]
[section title : abstract]
================================================================
[1707] 本論文で提案する手法は，節点数が多いクエリを部分木に分割し，漸進的に検索することで検索を効率化する．

================================================================
[section type  : intro]
[section title : はじめに]
================================================================
[2149] そして，クエリの分割が検索時間の短縮に効果があった4種類のコーパスと分割の効果がなかった3種類のコーパスの違いについて，コーパスに含まれる文数，ラベルの頻度，節点の平均分岐数の観点から考察を行い，節点の平均分岐数がその一因であることを確認した．

================================================================
[section type  : proposed_method]
[section title : 構文木付きコーパスのデータベース化]
================================================================
[1561] その理由は，XML文書の木構造の各節点を出現位置という2つの数字で表現し，その大小関係により，節点の親子関係や兄弟関係を表現する点にある．
-----------------------------------------------------
  [subsection title : 出現位置]
-----------------------------------------------------
  [1492] また，このように各節点に出現位置を与えることで，\figurename[REF_fig:yoshikawa-hougan]のように節点間の関係を出現位置の大小関係で表現することができる．
-----------------------------------------------------
  [subsection title : 関係データベースへの格納]
-----------------------------------------------------
  [1322] 前節で計算した出現位置とともに各節点の情報を関係データベースに格納する．

================================================================
[section type  : proposed_method]
[section title : 構文木付きコーパスの検索手法]
================================================================
[1342] 本論文では，構文木をクエリとして与え，構文木付きコーパスからクエリと同じ構文木を部分木として含む文を検索する手法を提案する．
-----------------------------------------------------
  [subsection title : クエリの定義]
-----------------------------------------------------
  [1926] 例えば，\figurename[REF_fig:query]において，完全一致で検索した場合，(a)の木は，各節点の分岐数，ラベルが一致するためにクエリと一致すると見なす．
-----------------------------------------------------
  [subsection title : 構文木をクエリとした検索手法]
-----------------------------------------------------
  [1781] 本手法は，吉川らの手法と同様に検索を行うためにクエリである部分木を関係データベースのデータの操作，定義，検索などを行う言語SQLの文へ変換する．
-----------------------------------------------------
  [subsection title : 予備実験]
-----------------------------------------------------
  [1927] 一方，クエリの節点数が12以上の場合は，クエリと一致する文かどうかの判定，つまりSQL文の条件判定に検索時間を要していると考えられる．
-----------------------------------------------------
  [subsection title : 漸進的検索]
-----------------------------------------------------
  [1947] \hangafter=1\hangindent=\StepW Step 4　検索単位[MATH]に含まれる節点を持ち，検索単位[MATH]に加えても最大検索単位節点数を越えない部分木があれば，根の頻度が最小である部分木の節点を検索単位[MATH]へ追加する．

================================================================
[section type  : experiment_result]
[section title : 評価実験]
================================================================
[2212] Penn Treebank Corpus，TIGER Corpus，Penn Korean Treebank Corpus，FLOREST sinta(c)ticaの4つコーパスにおいては，完全一致による検索では節点数16以上，部分一致による検索では節点数11から13以上のクエリに対して，クエリの分割を行わずに検索を行った場合，急激に検索時間が増大することがわかる．

================================================================
[section type  : conclusion]
[section title : 考察]
================================================================
[1762] 1つは，分割せずに検索した場合，クエリを構成する節点数が増えると検索時間が非常に遅くなるものである．
-----------------------------------------------------
  [subsection title : コーパスの文数]
-----------------------------------------------------
  [1880] しかし，\tablename[REF_tbl:corpora]からわかるようにPenn Korean Treebank Corpus（5,083文），FLOREST sinta(c)tica（8,307文）は，比較的コーパスに含まれる文数が少ないが，クエリの節点数が増加するとともに検索時間が大幅に増加している．
-----------------------------------------------------
  [subsection title : ラベルの頻度]
-----------------------------------------------------
  [1749] ラベルの情報がなくなったため，双方ともに評価実験よりも検索時間を要しているが，節点数と検索時間との関係に変化はなかった．
-----------------------------------------------------
  [subsection title : 節点の平均分岐数]
-----------------------------------------------------
  [1233] 分岐数が多くなれば，構文木は複雑になり，検索に時間を要することが考えられる．

================================================================
[section type  : conclusion]
[section title : まとめ]
================================================================
[2064] 構文木付きコーパスのデータベース化は，木構造を持つXML文書を格納・検索する手法を用い，部分木で表現されたクエリをSQL文に変換して検索を行う．

