コーパス作成中には，文法や品詞体系の変更など，コーパス作成方針の変更により，コーパスへの修正が必要になることもあり，継続的な修正作業や不整合の除去などの機能を持った構文木付きコーパスの作成を支援するシステムが必要になる[CITE][CITE]．
このようなシステムの多くは，GUIツールを用いて，構文木付けをするコーパスのファイル形式や品詞ラベルの不整合を防ぐことにより，コーパス作成者を支援するのが主な機能である．
しかし，それだけでは，正しい構文木付きコーパスの作成には，不十分であり，構文木の一貫性を保つための支援が必要となる．
構文木の一貫性を保つための支援として，過去の事例を参照することは有効である．
複数の構文木候補のうち，正しい木の選択を迷った場合に，すでに構文木を付与されたコーパス中から，作業中の構文木と類似した部分を持つ構文木を参照できれば，正しい構文木付けが容易になり，一貫性を保つための支援ができる．
このためには，構文木付きコーパスを検索対象とし，木構造の検索が可能な構文木付きコーパス検索システムが必要となる．
構文木付きコーパス検索システムは，木構造検索を行うことになるため，UNIXの文字列検索コマンド[MATH]などの文字列検索よりも検索に時間を要することが多い．
既存の構文木付きコーパス検索システム[CITE]においても，主な課題として，検索時間の高速化が挙げられているが，検索時間を高速化する優れた手法はまだ提案されていない．
今後，コーパスの規模が更に大きくなると，検索時間の高速化は不可欠な技術となる．
本論文では，高速な構文木付きコーパス検索手法を提案する．
本論文で提案する検索手法は，構文木付きコーパスを関係データベースに格納し，検索にはSQLを用いる．
部分木を検索のクエリとして与え，クエリと同じ構造を含む構文木を検索結果として出力する．
クエリの節点数が多い場合，クエリを分割し，それぞれのクエリを別のSQL文で漸進的に検索する．
クエリを分割すべきかどうか，分割するクエリの大きさや検索順序は，構文木付きコーパス中の規則の出現頻度を用いて自動的に決定する．
6言語，7種類のコーパスを用いて評価実験を行い，4種類のコーパスにおいて，漸進的に検索を行う本手法により検索時間が短縮され，本手法の有効性を確認した．
また，残りの3種類のコーパスにおいては，漸進的に検索を行わなくても多大な検索時間を要しないことを本手法で判定することができた．
そして，クエリの分割が検索時間の短縮に効果があった4種類のコーパスと分割の効果がなかった3種類のコーパスの違いについて，コーパスに含まれる文数，ラベルの頻度，節点の平均分岐数の観点から考察を行い，節点の平均分岐数がその一因であることを確認した．
