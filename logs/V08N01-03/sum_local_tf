================================================================
[section type  : abstract]
[section title : abstract]
================================================================
[2979] 本論文では，文法構造があらかじめ与えられていることを前提に，訓練過程を構文解析とEM学習に分離した高速EM学習法を提案する．

================================================================
[section type  : intro]
[section title : はじめに]
================================================================
[3816] 先述したように，I-OアルゴリズムはCYK法のWFSTである三角行列を利用して効率的に訓練を行なう手法と捉えることができ，提案手法のCYK法とgEMアルゴリズムを組み合わせた場合がI-Oアルゴリズムに対応する．

================================================================
[section type  : proposed_method]
[section title : 準備]
================================================================
[0] 
-----------------------------------------------------
  [subsection title : 確率文脈自由文法]
-----------------------------------------------------
  [3965] ChiとZemanは，2番目の条件を満たす文法構造[MATH]と有限長の文から成る括弧なしコーパス[MATH]が与えられたとき，I-Oアルゴリズムで得られる訓練パラメタ[MATH]の下でのPCFG [MATH]が整合的であることを示した[CITE]．
-----------------------------------------------------
  [subsection title : コーパス・構文木]
-----------------------------------------------------
  [3717] 我々は訓練法として最尤推定法(maximum likelihood estimation)を考えており，[MATH]文を含むコーパス[MATH]はPCFG [MATH]に基づく独立な[MATH]回のサンプリング導出の結果であると仮定する．
-----------------------------------------------------
  [subsection title : CYKパーザ]
-----------------------------------------------------
  [3239] 対角要素から順に部分木を組み上げ（行[REF_list:CYK:fill-diagonal:begin]--[REF_list:CYK:fill-non-diag:end]），[MATH]に[MATH]が含まれていたら解析が成功したものとし，含まれていなかったら失敗したものとする（行[REF_list:CYK:accept]）．
-----------------------------------------------------
  [subsection title : Inside-Outside アルゴリズム]
-----------------------------------------------------
  [3787] [CITE]をはじめとする多くの文献の記述では，文法構造[MATH]のうち規則集合[MATH]を明示的に与えず，終端記号集合[MATH]と非終端記号集合[MATH]を与えた場合を考えている．
-----------------------------------------------------
  [subsection title : Inside-Outside アルゴリズムに関する考察]
-----------------------------------------------------
  [3869] 式[REF_eq:with-position]の変形は入力文[MATH]や実際の構文木[MATH]とは無関係に行なわれており，I-Oアルゴリズムが仮説駆動型であるというのはこの点に由来する．

================================================================
[section type  : proposed_method]
[section title : 提案手法]
================================================================
[3621] この例から分かるように，文法によってはgEMアルゴリズムで参照する支持グラフは三角行列全体に比べて非常に小さくなる可能性があり，その場合は三角行列全体を走査しなければならないI-Oアルゴリズムに比べ大幅な速度向上が得られる（提案手法の特長2）．
-----------------------------------------------------
  [subsection title : 準備]
-----------------------------------------------------
  [3670] に対しては，「[MATH]に対して部分木[MATH]を作るためには，規則[MATH]を適用し，部分木[MATH]と部分木[MATH]を作る，もしくは規則[MATH]を適用し，部分木[MATH]と部分木[MATH]を作る，のいずれかである（他の場合はあり得ない）」と解釈する．
-----------------------------------------------------
  [subsection title : 支持グラフ]
-----------------------------------------------------
  [4543] また，[MATH]は開始ノード，終了ノードと呼ばれる2つの特殊なノードをもち（図[REF_fig:support-graph-ichiro]では各々start, endと書かれている），各[MATH]に対して開始ノード，[MATH]の各要素（規則[MATH]または部分木ラベル[MATH]）が付与されたノード，終了ノードが一列に連結されている．
-----------------------------------------------------
  [subsection title : 支持グラフの獲得]
-----------------------------------------------------
  [3890] 我々は大域的にスタック[MATH]とフラグ[MATH]を用意し，再帰的手続き[MATH]で三角行列（CYKのWFST）の右上隅から部分木[MATH]を次々に訪問する（[MATH]行[REF_list:preproc-CYK:call-visit]）．
-----------------------------------------------------
  [subsection title : グラフィカルEMアルゴリズム]
-----------------------------------------------------
  [4063] 最も簡便な解決法としては，初期パラメタをランダムに設定することとEMアルゴリズムを動作させることを[MATH]回繰り返し，その中で収束時の対数尤度が最も高かった回の収束パラメタ値を訓練パラメタ値とする．
-----------------------------------------------------
  [subsection title : 予測構文木の計算]
-----------------------------------------------------
  [3498] 再帰手続き[MATH]では，支持グラフ[MATH]の再帰的巡回に基づき，[MATH]中のラベル[MATH]を[MATH]に追加する（行[REF_line:const-pred-tree:add]）ことで予測木を構築する．
-----------------------------------------------------
  [subsection title : 計算量]
-----------------------------------------------------
  [4453] また，式[REF_eq:parent-children]の形をした部分木の親子対を構成要素とするWFSTをもつパーザ（例えばCYKやGLR）では，抽出される[MATH], [MATH]は全く同じになるので，提案手法の計算量は組み合わせたパーザによる差はない．

================================================================
[section type  : experiment_result]
[section title : 訓練時間に関する実験]
================================================================
[4228] ただし，I-Oアルゴリズムにおいては節[REF_sec:PCFG:IO]で記述したものを用い，そこで参照される規則集合[MATH]には，全ての終端・非終端記号の組合せから成るChomsky標準形の規則集合[MATH]ではなく，[MATH]の規則集合[MATH]を用いる点に注意する．

================================================================
[section type  : proposed_method]
[section title : PCFGの拡張文法のEM学習]
================================================================
[3413] これまでPCFGに文脈依存性を採り入れたモデル（PCFGの拡張文法と呼ぶ）が数多く提案されているが，Charniakらの疑似確率文脈依存文法(pseudo probabilistic context-sensitive grammars) [CITE]を除けばEMアルゴリズムを具体的に記述した文献は見当たらない．
-----------------------------------------------------
  [subsection title : 規則バイグラムモデルとそのEMアルゴリズム]
-----------------------------------------------------
  [3723] 式[REF_eq:RB-derivation]において[MATH]は[MATH]を展開する直前に適用された規則，[MATH]は導出[MATH]で用いられた最後の規則である．
-----------------------------------------------------
  [subsection title : グラフィカルEMアルゴリズムの適用]
-----------------------------------------------------
  [3929] 実際森らは，節[REF_sec:experiment]の実験で用いたCFG [MATH]に対し本節で述べた方法を適用した結果，規則バイグラムのEM学習におけるパラメタ更新時間がPCFG（図[REF_graph:1]右）の1.5倍程度で収まることを報告している[CITE]．

================================================================
[section type  : related_study]
[section title : 関連研究]
================================================================
[3671] しかし，それらの多くは文法構造[MATH]とパラメタ[MATH]が与えられていることを前提としており，Stolckeを除けばPCFG（もしくはその拡張文法）のEM学習について具体的に記述しているものは少ない．

================================================================
[section type  : conclusion]
[section title : まとめ]
================================================================
[3812] 文法構造が与えられていることを前提に，確率文脈自由文法(PCFG)を括弧なしコーパスから訓練するための一般的な枠組を提案し，従来法であるInside-Outsideアルゴリズムの一般化と（現実文法における）高速化を同時に実現した．

