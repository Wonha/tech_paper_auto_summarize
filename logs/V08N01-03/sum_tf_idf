================================================================
[section type  : abstract]
[section title : abstract]
================================================================
[i:1, score:0.51132] また，括弧なしコーパスからPCFGを訓練する方法としてInside-Outside (I-O)アルゴリズムが知られてきた．
[i:2, score:0.51531] I-OアルゴリズムはPCFG用に効率化を施したEM (expectation-maximization)アルゴリズムだが，依然その計算速度に問題があることが知られている．
[i:8, score:0.37466] 更に，文脈依存性を取り入れたPCFGの拡張モデルに対する多項式オーダのEM学習法を示す．

================================================================
[section type  : intro]
[section title : はじめに]
================================================================
[i:16, score:0.64730] I-OアルゴリズムはCYK (Cocke-Younger-Kasami)パーザで用いられる三角行列の上に構築された，PCFG用のEM (expectation-maximization)アルゴリズム[CITE]と特徴づけることができる．
[i:35, score:0.60648] 先述したように，I-OアルゴリズムはCYK法のWFSTである三角行列を利用して効率的に訓練を行なう手法と捉えることができ，提案手法のCYK法とgEMアルゴリズムを組み合わせた場合がI-Oアルゴリズムに対応する．
[i:43, score:0.58570] I-Oアルゴリズムと対比させるため，提案手法をCYKパーザとgEMアルゴリズムの組合せを対象にした場合を節[REF_sec:GEM]で記述した．

================================================================
[section type  : proposed_method]
[section title : 準備]
================================================================
[i:56, score:0.00000] 
-----------------------------------------------------
  [subsection title : 確率文脈自由文法]
-----------------------------------------------------
  [i:lead, score:0.09128] はじめに，文脈自由文法[MATH]を4つ組[MATH]で定義する．
.....
  [i:67, score:0.27475] 逆に[MATH]を「PCFG [MATH]の文法構造」と呼ぶ．
  [i:80, score:0.30043] 先述した規則適用の独立性に加え，以降で考えるPCFG [MATH]は次を満たすとする．
  [i:84, score:0.62277] ChiとZemanは，2番目の条件を満たす文法構造[MATH]と有限長の文から成る括弧なしコーパス[MATH]が与えられたとき，I-Oアルゴリズムで得られる訓練パラメタ[MATH]の下でのPCFG [MATH]が整合的であることを示した[CITE]．
-----------------------------------------------------
  [subsection title : コーパス・構文木]
-----------------------------------------------------
  [i:lead, score:0.04398] 平文[MATH]に対して個々の[MATH]は単語である([MATH], [MATH])．
.....
  [i:92, score:0.31146] 先に我々は対象とするPCFGが[MATH]規則をもたないこと，[MATH]という導出が起こらないと仮定した．
  [i:104, score:0.36227] PCFGの訓練用のコーパスとして我々は(1)構造つきコーパス(labeled corpus)，(2)完全括弧つきコーパス(fully bracketed corpus)，(3)部分括弧つきコーパス(partially bracketed corpus)，(4)括弧なしコーパス(unbracketed corpus)の4つを考える．
  [i:105, score:0.38356] 我々は訓練法として最尤推定法(maximum likelihood estimation)を考えており，[MATH]文を含むコーパス[MATH]はPCFG [MATH]に基づく独立な[MATH]回のサンプリング導出の結果であると仮定する．
-----------------------------------------------------
  [subsection title : CYKパーザ]
-----------------------------------------------------
  [i:lead, score:0.28645] CYKパーザはChomsky標準形であるCFGに適用可能なパーザである．
.....
  [i:113, score:0.38755] 対角要素から順に部分木を組み上げ（行[REF_list:CYK:fill-diagonal:begin]--[REF_list:CYK:fill-non-diag:end]），[MATH]に[MATH]が含まれていたら解析が成功したものとし，含まれていなかったら失敗したものとする（行[REF_list:CYK:accept]）．
  [i:115, score:0.32227] 図[REF_gram:ichiro-CNF]に示したCFG [MATH]において文[MATH]に対する三角行列を図[REF_fig:CYK-table]に示す．
  [i:116, score:0.36861] 図[REF_fig:CYK-table]の○印のついた部分木の親子から図[REF_fig:parse-tree-ichiro-CNF]の構文木[MATH]が取り出され，●印のついた部分木の親子から[MATH]が取り出される．
-----------------------------------------------------
  [subsection title : Inside-Outside アルゴリズム]
-----------------------------------------------------
  [i:lead, score:0.40708] 先にも述べたように，我々はPCFGのパラメタをコーパス[MATH]から最尤推定法に基づき訓練することを考えている．
.....
  [i:120, score:0.56496] 括弧なしコーパスでは構文構造が明らかでないため，相対頻度法が適用できず，代わりにI-OアルゴリズムというPCFGに特化された形のEMアルゴリズムが広く知られている．
  [i:140, score:0.43708] I-Oアルゴリズムでは，まず[MATH]を適当な値に初期化し，次いで手続き[MATH], [MATH]および式[REF_eq:eta-ABC], [REF_eq:eta-Aa], [REF_eq:update]によって[MATH]を更新する．
  [i:148, score:0.45834] 手続き[MATH], [MATH]（図[REF_alg:get-beta-alpha]）中のfor, foreachループと[MATH]の引数に注目すれば，I-Oアルゴリズムの最悪計算量は[MATH]であることが容易に分かる．
-----------------------------------------------------
  [subsection title : Inside-Outside アルゴリズムに関する考察]
-----------------------------------------------------
  [i:lead, score:0.45635] アルゴリズム中で最もコストが高いのは，[MATH]行[REF_list:get-beta:calc-beta]における内側確率の計算，[MATH]行[REF_list:get-alpha:calc-op:begin]--[REF_list:get-alpha:calc-op:end]における外側確率の計算である．
.....
  [i:149, score:0.45635] アルゴリズム中で最もコストが高いのは，[MATH]行[REF_list:get-beta:calc-beta]における内側確率の計算，[MATH]行[REF_list:get-alpha:calc-op:begin]--[REF_list:get-alpha:calc-op:end]における外側確率の計算である．
  [i:160, score:0.41929] 式[REF_eq:with-position]の変形は入力文[MATH]や実際の構文木[MATH]とは無関係に行なわれており，I-Oアルゴリズムが仮説駆動型であるというのはこの点に由来する．
  [i:166, score:0.52107] 提案手法ではI-Oアルゴリズムのように再計算を防ぐ仕組みを取り入れ，パーザのもつWFSTを利用して式[REF_eq:naive-eta3]を効率的に計算する．

================================================================
[section type  : proposed_method]
[section title : 提案手法]
================================================================
[i:175, score:0.37129] 次に，支持グラフに基づきgEMアルゴリズムを動作させ[MATH]を得る．
[i:176, score:0.46881] 図[REF_gram:ichiro-CNF]のCFG [MATH]と文[MATH]の例を考えると，支持グラフは図[REF_fig:CYK-table]において○印と●印がついた部分木の親子から得られる．
[i:177, score:0.56796] この例から分かるように，文法によってはgEMアルゴリズムで参照する支持グラフは三角行列全体に比べて非常に小さくなる可能性があり，その場合は三角行列全体を走査しなければならないI-Oアルゴリズムに比べ大幅な速度向上が得られる（提案手法の特長2）．
-----------------------------------------------------
  [subsection title : 準備]
-----------------------------------------------------
  [i:lead, score:0.01827] 提案手法を記述する前に形式化を行なう．
.....
  [i:183, score:0.16533] [MATH]はコーパス中の文[MATH]の構文木のいずれかに現れる部分木の親子対の集合である．
  [i:190, score:0.16471] [MATH]と[MATH]は次節で説明する支持グラフを構成する．
  [i:191, score:0.27495] 例として，図[REF_gram:ichiro-CNF]のCFG [MATH]と[MATH]に対して図[REF_fig:parse-tree-ichiro-CNF]の2つの構文木[MATH], [MATH]を考える．
-----------------------------------------------------
  [subsection title : 支持グラフ]
-----------------------------------------------------
  [i:lead, score:0.37356] [MATH]という組を支持グラフ[MATH]というデータ構造で捉えるとgEMアルゴリズムが理解しやすくなる．
.....
  [i:220, score:0.39869] また，局所パス中のノードの順序を図[REF_fig:support-graph-ichiro]のようにして，巡回中に基本ノードに付与されている規則を順に集めると[MATH]の最左導出における適用規則列[MATH]が一つ得られる．
  [i:225, score:0.40023] このような共有構造により支持グラフのサイズが圧縮され，我々はgEMアルゴリズムを支持グラフの上で動作させることによって効率的な確率計算を実現する．
  [i:228, score:0.64677] この事実に基づき，I-Oアルゴリズムの内側・外側確率計算における動的計画法（節[REF_sec:PCFG:IO]）の考えを一般化したものがgEMアルゴリズムに導入されている．
-----------------------------------------------------
  [subsection title : 支持グラフの獲得]
-----------------------------------------------------
  [i:lead, score:0.34457] 次に，支持グラフ[MATH]をパーザがもつWFSTから効率的に抽出する方法を説明する．
.....
  [i:238, score:0.52652] 我々は大域的にスタック[MATH]とフラグ[MATH]を用意し，再帰的手続き[MATH]で三角行列（CYKのWFST）の右上隅から部分木[MATH]を次々に訪問する（[MATH]行[REF_list:preproc-CYK:call-visit]）．
  [i:241, score:0.41363] フラグ[MATH]に訪問したことを記録し，一度訪問した部分木には行かない（[MATH]行[REF_list:visit-RB:mark], [REF_list:visit-CYK:recursion:begin]--[REF_list:visit-CYK:recursion:end]）．
  [i:242, score:0.38054] 最後にスタック[MATH]に積んであった部分木ラベルを順に取り出せば（[MATH]行[REF_list:preproc-CYK:pop:begin]--[REF_list:preproc-CYK:pop:end]），それが[MATH]になっている．
-----------------------------------------------------
  [subsection title : グラフィカルEMアルゴリズム]
-----------------------------------------------------
  [i:lead, score:0.37052] 提案手法によるPCFG訓練のメインルーチン[MATH]は図[REF_alg:learn-PCFG]のようになる．
.....
  [i:264, score:0.55701] [MATH]の部分支持グラフ[MATH] ([MATH])の各局所パス[MATH]ではパス中の各ノードの確率積を計算し，[MATH]に格納する（行[REF_list:get-ip:for-tau:begin]--[REF_list:get-ip:for-tau:end],図[REF_fig:GEM-sub] (1)）．
  [i:273, score:0.47870] また，行[REF_list:get-exp:updateON]において，基本ノード[MATH]に対しては局所パスの確率[MATH]と親部分木[MATH]の外側確率[MATH]の積を文[MATH]の生起確率[MATH]で割って[MATH]に足し込む（図[REF_fig:GEM-sub] (5)）．
  [i:275, score:0.55216] gEMアルゴリズムの計算は支持グラフの1つ目の特徴である支持グラフ[MATH]の再帰的巡回（節[REF_sec:GEM:support-graph]）に基づいて正当化される．
-----------------------------------------------------
  [subsection title : 予測構文木の計算]
-----------------------------------------------------
  [i:lead, score:0.24475] いったんパラメタ[MATH]が訓練されたら，括弧なしであるテストコーパスの各文[MATH]に対して[MATH]なる[MATH]を計算することができる．
.....
  [i:282, score:0.24475] いったんパラメタ[MATH]が訓練されたら，括弧なしであるテストコーパスの各文[MATH]に対して[MATH]なる[MATH]を計算することができる．
  [i:288, score:0.43540] [MATH]では，はじめにパーザ，支持グラフ抽出ルーチン，内側確率計算ルーチン[MATH]の3つを走らせる（行[REF_line:predict-tree:parser]）．
  [i:290, score:0.37958] 再帰手続き[MATH]では，支持グラフ[MATH]の再帰的巡回に基づき，[MATH]中のラベル[MATH]を[MATH]に追加する（行[REF_line:const-pred-tree:add]）ことで予測木を構築する．
-----------------------------------------------------
  [subsection title : 計算量]
-----------------------------------------------------
  [i:lead, score:0.67261] 節[REF_sec:PCFG:IO]のI-Oアルゴリズムの計算量評価で述べたように，収束までのパラメタ更新回数は初期値に依存するため，1回のパラメタ更新に要する計算量をgEMアルゴリズムの計算量とする．
.....
  [i:292, score:0.67261] 節[REF_sec:PCFG:IO]のI-Oアルゴリズムの計算量評価で述べたように，収束までのパラメタ更新回数は初期値に依存するため，1回のパラメタ更新に要する計算量をgEMアルゴリズムの計算量とする．
  [i:307, score:0.56129] Chomsky標準形を仮定したとき，CYKパーザ[MATH]と支持グラフ抽出ルーチン[MATH]の最悪計算量はEMの一更新ステップの最悪計算量と同じ[MATH]である．
  [i:310, score:0.49182] また，式[REF_eq:parent-children]の形をした部分木の親子対を構成要素とするWFSTをもつパーザ（例えばCYKやGLR）では，抽出される[MATH], [MATH]は全く同じになるので，提案手法の計算量は組み合わせたパーザによる差はない．

================================================================
[section type  : experiment_result]
[section title : 訓練時間に関する実験]
================================================================
[i:312, score:0.57243] 我々は現実的な文法に対してはI-Oアルゴリズムに比べてEM学習が大幅に高速化される（提案手法の特長2）ことを示すため，ATR対話コーパス(SLDB)でパラメタ推定に要する計算時間（訓練時間と呼ぶ）を計測した．
[i:321, score:0.62345] ただし，I-Oアルゴリズムにおいては節[REF_sec:PCFG:IO]で記述したものを用い，そこで参照される規則集合[MATH]には，全ての終端・非終端記号の組合せから成るChomsky標準形の規則集合[MATH]ではなく，[MATH]の規則集合[MATH]を用いる点に注意する．
[i:334, score:0.52323] 図[REF_graph:1]左のグラフから分かるように，gEMアルゴリズムはI-Oアルゴリズムやその枝刈り版に比べてはるかに高速な計算が行なわれていることが分かる．

================================================================
[section type  : proposed_method]
[section title : PCFGの拡張文法のEM学習]
================================================================
[i:353, score:0.53393] 本節では，提案手法がPCFGの拡張文法に対する多項式オーダのEMアルゴリズムを包含する（提案手法の特長3）ことを示すため，一例としてKitaらの規則バイグラムモデル[CITE]を取り上げ，その多項式オーダのEMアルゴリズムを導出する．
-----------------------------------------------------
  [subsection title : 規則バイグラムモデルとそのEMアルゴリズム]
-----------------------------------------------------
  [i:lead, score:0.26632] まず，我々はPCFGのときと同様に導出戦略は最左導出に固定する．
.....
  [i:364, score:0.36076] ところが式[REF_eq:update], [REF_eq:naive-eta3]から類推できるように，EMアルゴリズムの考えに基づく更新式は次のようになる([MATH])．
  [i:366, score:0.35963] 式[REF_eq:kita:EM]の更新式により（局所）最尤推定は実現されるが，これまで述べてきたように一般に[MATH]は文長[MATH]に対して指数オーダになるため，式[REF_eq:kita:EM]は現実時間で計算できない．
  [i:367, score:0.37968] 一方，提案手法に基づき，式[REF_eq:kita:EM]と等価な規則バイグラムモデルの多項式オーダのEMアルゴリズムを導出することができる．
-----------------------------------------------------
  [subsection title : グラフィカルEMアルゴリズムの適用]
-----------------------------------------------------
  [i:lead, score:0.34538] ここではCYKパーザと組み合わせた場合の規則バイグラムモデルのEM学習法を示す．
.....
  [i:381, score:0.48613] 節[REF_sec:GEM:preliminary]で示したPCFGの場合に比べて，部分木ラベル[MATH]が，その導出直前に適用された規則と自身の導出において最後に適用された規則の組（``[MATH]''記号の後ろ）によって細分化されており，この細分化によって文脈依存性が表現される．
  [i:384, score:0.59991] 後はgEMアルゴリズム（手続き[MATH], [MATH], [MATH]）において[MATH], [MATH], [MATH]を各々[MATH], [MATH], [MATH]といった規則バイグラム用の確率値，期待値に書き換え，[MATH]行[REF_list:gEM:update:begin]--[REF_list:gEM:update:end]と[MATH]行[REF_list:get-exp:init:eta]の\rw{foreach}ループに``\rw{foreach} [MATH]''ループを重ねるだけでよい．
  [i:389, score:0.58955] 実際森らは，節[REF_sec:experiment]の実験で用いたCFG [MATH]に対し本節で述べた方法を適用した結果，規則バイグラムのEM学習におけるパラメタ更新時間がPCFG（図[REF_graph:1]右）の1.5倍程度で収まることを報告している[CITE]．

================================================================
[section type  : related_study]
[section title : 関連研究]
================================================================
[i:396, score:0.58125] 一方，[MATH]規則やサイクル[MATH]が存在しないPCFGに対して，Stolckeの方法は我々の枠組でEarleyパーザとgEMアルゴリズムを組み合わせた場合と等価である．
[i:402, score:0.59558] 我々の枠組でも，括弧づけされた文に対し，括弧の制約を満たす構文木のみを出力する機能をもつパーザを用意すれば，支持グラフ抽出ルーチン，gEMアルゴリズムに何の変更も加えることなく括弧つきコーパスからの訓練が可能になる．
[i:412, score:0.52407] そこではOLDT探索[CITE]とgEMアルゴリズムを連結するが，本論文の手法はPCFGおよびその拡張文法用にOLDTをパーザに置き換えて特殊化を図ったものである．

================================================================
[section type  : conclusion]
[section title : まとめ]
================================================================
[i:416, score:0.66103] 提案手法ではPCFGの訓練過程を構文解析とEM学習を分離し，パーザが記録するWFSTから訓練文と関係のある部分木構造のみを抽出してからEM学習することにより，仮説駆動型であったInside-Outsideアルゴリズムの計算効率上の欠点を克服した．
[i:419, score:0.51957] また，提案手法の一般性に基づき，文脈依存性を考慮したPCFGの拡張文法（北らの規則バイグラムモデル）の多項式オーダのEMアルゴリズムを導出した．
[i:421, score:0.67189] 今後の課題としては，PCFGの拡張文法を用いた実験や文法構造の学習，また支持グラフとgEMアルゴリズムの一般性を利用して，Inuiらによって再定式化された確率GLRモデル[CITE]の効率的なEMアルゴリズムの導出を試みるのも興味深い．

