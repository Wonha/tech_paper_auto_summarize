まず，Magermanらの[MATH]earl [CITE]およびその後継である[MATH]icky [CITE],またStolckeの確率的Earleyパーザ[CITE]をはじめ，確率的パーザが多く提案されている．
しかし，それらの多くは文法構造[MATH]とパラメタ[MATH]が与えられていることを前提としており，Stolckeを除けばPCFG（もしくはその拡張文法）のEM学習について具体的に記述しているものは少ない．
Chomsky標準形でないPCFGの訓練法としては，Kupiecの方法[CITE]と先述のStolckeの確率的Earleyパーザによる訓練が挙げられる．
Kupiecの方法はPCFGを再帰遷移ネットワークと捉え，拡張したtrellis図に基づき訓練を行なうものである．
しかし，仮説駆動型である点はI-Oアルゴリズムと変わらない．
また，提案手法で用いるWFSTは，CFGに基づく構文解析にとって本質的なデータ構造であることから，本手法はtrellis図に基づくKupiecの方法よりも簡潔で理解しやすいものと考える．
一方，[MATH]規則やサイクル[MATH]が存在しないPCFGに対して，Stolckeの方法は我々の枠組でEarleyパーザとgEMアルゴリズムを組み合わせた場合と等価である．
すなわち，このようなPCFGに対して我々の枠組はStolckeの方法の一般化になっている．
Stolckeの方法との対応づけを付録[REF_sec:Stolcke]に示す．
また，StolckeはPCFGの拡張文法については言及していない．
[MATH]規則やサイクル[MATH]をもつPCFGに対する訓練法を考えるのは今後の課題であるが，提案手法は現段階においても充分実用的である．
PerairaとSchabesは部分もしくは完全括弧コーパスからPCFGの文法構造を学習する方法を提案し，学習された文法構造とパラメタの質が括弧なしコーパスからの学習に比べ大きく向上することを実験的に示した[CITE]．
我々の枠組でも，括弧づけされた文に対し，括弧の制約を満たす構文木のみを出力する機能をもつパーザを用意すれば，支持グラフ抽出ルーチン，gEMアルゴリズムに何の変更も加えることなく括弧つきコーパスからの訓練が可能になる．
変更の必要がないのは，我々が最終的な構文木情報（すなわちWFST）のみを参照するためである．
また，完全に括弧づけされた訓練コーパスに対しgEMアルゴリズムの計算量はPereiraとSchabesの方法と同じオーダ[MATH]であることも容易に分かる．
本論文の手法は文法構造(CFG)が与えられていることを前提としているが，人間が精密な文法を記述するのに多くの手間を費やすことを考えると，文法構造の自動学習は重要な課題である．
先述したように，LariとYoungは非終端記号集合[MATH]と終端記号集合[MATH]をあらかじめ定めた上で先述した[MATH]を考え，I-Oアルゴリズムを走らせ，推定後にパラメタ値が小さい規則を除去する方法を提案した[CITE]．
また，先述したPereira & Schabesの学習法[CITE]も括弧づけコーパスからの文法学習と捉えることができる．
しかし，一般にEMアルゴリズムは局所的な最尤推定値しか保証しないため，学習される文法の質はパラメタの初期値に大きく依存し，文法学習を困難にしている．
それに対し，HMMでは逐次状態分割(SSS)法[CITE]やモデル選択規準に基づくHMMの構造探索法[CITE]のように，パラメタ訓練と構造探索を分離し，これらを交互に繰り返して良質なモデル構造を得る方法が提案されている．
どちらの手法もパラメタ訓練ステップではモデル（文法）構造が与えられるので，上記手法をPCFGの構造学習に一般化したとき，本論文で示した高速化が有効に働くものと期待する．
本論文で示したgEMアルゴリズムは最小モデル意味論の確率的一般化である分布意味論[CITE]に基づく確率的な論理プログラミング言語PRISM [CITE]における高速EM学習のために提案されたものである[CITE]．
そこではOLDT探索[CITE]とgEMアルゴリズムを連結するが，本論文の手法はPCFGおよびその拡張文法用にOLDTをパーザに置き換えて特殊化を図ったものである．
OLDT探索を構文解析に用いることも可能だが，OLDT探索はトップダウン（仮説駆動）探索であるので，LR表へのコンパイル・ボトムアップ探索を利用するGLRパーザの方が現実文法ではより高速である．
得られる支持グラフはまったく同じなのでgEMアルゴリズムの計算時間は変わらない．
まず，Magermanらの[MATH]earl [CITE]およびその後継である[MATH]icky [CITE],またStolckeの確率的Earleyパーザ[CITE]をはじめ，確率的パーザが多く提案されている．
しかし，それらの多くは文法構造[MATH]とパラメタ[MATH]が与えられていることを前提としており，Stolckeを除けばPCFG（もしくはその拡張文法）のEM学習について具体的に記述しているものは少ない．
Chomsky標準形でないPCFGの訓練法としては，Kupiecの方法[CITE]と先述のStolckeの確率的Earleyパーザによる訓練が挙げられる．
Kupiecの方法はPCFGを再帰遷移ネットワークと捉え，拡張したtrellis図に基づき訓練を行なうものである．
しかし，仮説駆動型である点はI-Oアルゴリズムと変わらない．
また，提案手法で用いるWFSTは，CFGに基づく構文解析にとって本質的なデータ構造であることから，本手法はtrellis図に基づくKupiecの方法よりも簡潔で理解しやすいものと考える．
一方，[MATH]規則やサイクル[MATH]が存在しないPCFGに対して，Stolckeの方法は我々の枠組でEarleyパーザとgEMアルゴリズムを組み合わせた場合と等価である．
すなわち，このようなPCFGに対して我々の枠組はStolckeの方法の一般化になっている．
Stolckeの方法との対応づけを付録[REF_sec:Stolcke]に示す．
また，StolckeはPCFGの拡張文法については言及していない．
[MATH]規則やサイクル[MATH]をもつPCFGに対する訓練法を考えるのは今後の課題であるが，提案手法は現段階においても充分実用的である．
PerairaとSchabesは部分もしくは完全括弧コーパスからPCFGの文法構造を学習する方法を提案し，学習された文法構造とパラメタの質が括弧なしコーパスからの学習に比べ大きく向上することを実験的に示した[CITE]．
我々の枠組でも，括弧づけされた文に対し，括弧の制約を満たす構文木のみを出力する機能をもつパーザを用意すれば，支持グラフ抽出ルーチン，gEMアルゴリズムに何の変更も加えることなく括弧つきコーパスからの訓練が可能になる．
変更の必要がないのは，我々が最終的な構文木情報（すなわちWFST）のみを参照するためである．
また，完全に括弧づけされた訓練コーパスに対しgEMアルゴリズムの計算量はPereiraとSchabesの方法と同じオーダ[MATH]であることも容易に分かる．
本論文の手法は文法構造(CFG)が与えられていることを前提としているが，人間が精密な文法を記述するのに多くの手間を費やすことを考えると，文法構造の自動学習は重要な課題である．
先述したように，LariとYoungは非終端記号集合[MATH]と終端記号集合[MATH]をあらかじめ定めた上で先述した[MATH]を考え，I-Oアルゴリズムを走らせ，推定後にパラメタ値が小さい規則を除去する方法を提案した[CITE]．
また，先述したPereira & Schabesの学習法[CITE]も括弧づけコーパスからの文法学習と捉えることができる．
しかし，一般にEMアルゴリズムは局所的な最尤推定値しか保証しないため，学習される文法の質はパラメタの初期値に大きく依存し，文法学習を困難にしている．
それに対し，HMMでは逐次状態分割(SSS)法[CITE]やモデル選択規準に基づくHMMの構造探索法[CITE]のように，パラメタ訓練と構造探索を分離し，これらを交互に繰り返して良質なモデル構造を得る方法が提案されている．
どちらの手法もパラメタ訓練ステップではモデル（文法）構造が与えられるので，上記手法をPCFGの構造学習に一般化したとき，本論文で示した高速化が有効に働くものと期待する．
本論文で示したgEMアルゴリズムは最小モデル意味論の確率的一般化である分布意味論[CITE]に基づく確率的な論理プログラミング言語PRISM [CITE]における高速EM学習のために提案されたものである[CITE]．
そこではOLDT探索[CITE]とgEMアルゴリズムを連結するが，本論文の手法はPCFGおよびその拡張文法用にOLDTをパーザに置き換えて特殊化を図ったものである．
OLDT探索を構文解析に用いることも可能だが，OLDT探索はトップダウン（仮説駆動）探索であるので，LR表へのコンパイル・ボトムアップ探索を利用するGLRパーザの方が現実文法ではより高速である．
得られる支持グラフはまったく同じなのでgEMアルゴリズムの計算時間は変わらない．
