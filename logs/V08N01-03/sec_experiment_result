我々は現実的な文法に対してはI-Oアルゴリズムに比べてEM学習が大幅に高速化される（提案手法の特長2）ことを示すため，ATR対話コーパス(SLDB)でパラメタ推定に要する計算時間（訓練時間と呼ぶ）を計測した．
対象PCFGの元になるCFGは860規則から成る，田中らが開発した音声認識用日本語文法[CITE]に手が加えられたものである．
以降ではこのCFGを[MATH]で参照する．
ATR対話コーパスもこの文法に対応して手が加えられている．
[MATH]は品詞を細分化したカテゴリを終端記号としたCFGであり，非終端記号数173,終端記号数441である．
ATR対話コーパス中の文では，（実際の単語ではなく）上記カテゴリの列を対象とした．
文長は平均9.97,最短2,最長49である．
また，[MATH]の規則集合[MATH]はChomsky標準形ではないので，GLRパーザとの組合せを採用した．
本論文の実験では[MATH]が与えられた場合の訓練時間を提案手法とI-Oアルゴリズムの間で比較する．
ただし，I-Oアルゴリズムにおいては節[REF_sec:PCFG:IO]で記述したものを用い，そこで参照される規則集合[MATH]には，全ての終端・非終端記号の組合せから成るChomsky標準形の規則集合[MATH]ではなく，[MATH]の規則集合[MATH]を用いる点に注意する．
我々は文長[MATH]を変化させたときにパラメタを一回更新するのに要する計算時間（更新時間と呼ぶ）が変化する様子を比較する．
まず，我々はATRコーパス[MATH]の中で文長[MATH]と[MATH]の文をグループ化し，各々から無作為に取り出した100文を[MATH]とする([MATH])．
そして，各[MATH]を一つの訓練コーパスとし，各々に対して更新時間を計測する．
I-OアルゴリズムはChomsky標準形でしか動作しないので，あらかじめ[MATH]をChomsky標準形に変換した．
その結果860規則が2,308規則（非終端記号数210,終端記号数441）の文法になった．
更新時間を計測した結果を図[REF_graph:1]左に示す．
縦軸が更新時間(sec)，横軸[MATH]が使用した訓練コーパス[MATH]を表す．
``Inside-Outside''はI-Oアルゴリズムの更新時間，``IO with pruning''は[CITE]で説明されている，I-Oアルゴリズムの外側確率の計算において無駄な計算部分を枝刈りするように改良したものである．
これを以下では枝刈り版I-Oアルゴリズムと呼ぶ．
``Graphical EM''はgEMアルゴリズムの更新時間を示す．
また，変化の様子を見やすくするために，図[REF_graph:1]左の縦軸を拡大，縮小したものをそれぞれ図[REF_graph:1]中央，図[REF_graph:1]右に示す．
図[REF_graph:1]中央においてgEMアルゴリズムの更新時間は見にくいため省略した．
図[REF_graph:1]左のグラフから分かるように，gEMアルゴリズムはI-Oアルゴリズムやその枝刈り版に比べてはるかに高速な計算が行なわれていることが分かる．
また，図[REF_graph:1]中央のグラフから分かるようにI-Oアルゴリズムは理論値どおり[MATH]の曲線を描く．
枝刈り版I-Oアルゴリズムは枝刈りした分高速であるものの，仮説駆動型である（[MATH]の三角行列の全要素を走査する）点は変わらないので，枝刈りが最も効率良く行なわれた場合でも[MATH]を下回ることはない．
収束まで数100回の更新を要すること，および再出発法を採用することを考慮すると，[MATH]を越える訓練コーパス[MATH]に対してI-Oアルゴリズムおよびその枝刈り版を収束するまで動作させるのは現実的ではない．
それに対し，提案手法では[MATH]の範囲では[MATH]に対してほぼ線形に計算できており（図[REF_graph:1]右），最悪計算量[MATH]とは大きな差があることが分かった．
これは文法の制約により，WFSTに格納される部分木の数が抑えられたためと考えられる．
ATRコーパスにおける文長平均9.97に近い[MATH]ではI-Oアルゴリズムに対しておよそ1,000倍（枝刈り版に対してはおよそ700倍）の速度向上が得られた．
良質なパラメタを得る目的で再出発法（節[REF_sec:GEM:GEM]）を採用すると，訓練時間の内訳は
となる．
先に述べた文長毎の訓練コーパス[MATH] ([MATH])を使って，訓練時間の内訳（構文解析時間，支持グラフ抽出時間，gEM実行時間）を計測した．
その結果を図[REF_graph:2]に示す．
横軸が[MATH],縦軸が処理時間(sec)である．
図[REF_graph:2]（左）は再出発なし[MATH]の場合，図[REF_graph:2]（右）は再出発回数[MATH]の場合である．
また，収束までの更新回数はコーパス[MATH]によって異なるため，ここでは100に固定した．
構文解析時間(``Parsing'')，支持グラフ抽出時間(``Support graph'')，gEM実行時間(``Graphical EM'')はいずれも文長[MATH]に対してほぼ線形になっていることが分かる．
更に図[REF_graph:2]（右）より，再出発法を採用した場合は構文解析時間と支持グラフ抽出時間が訓練時間全体に占める割合は非常に小さい．
構文解析と支持グラフ抽出は再出発の度に繰り返す必要がないからである．
構文解析と支持グラフ抽出をgEMアルゴリズムの前処理と捉えれば，わずかな前処理（図[REF_graph:2]）で大きな速度向上（図[REF_graph:1]）が得られているということができ，構文解析とEM学習を分離したメリットが現れている．
我々は現実的な文法に対してはI-Oアルゴリズムに比べてEM学習が大幅に高速化される（提案手法の特長2）ことを示すため，ATR対話コーパス(SLDB)でパラメタ推定に要する計算時間（訓練時間と呼ぶ）を計測した．
対象PCFGの元になるCFGは860規則から成る，田中らが開発した音声認識用日本語文法[CITE]に手が加えられたものである．
以降ではこのCFGを[MATH]で参照する．
ATR対話コーパスもこの文法に対応して手が加えられている．
[MATH]は品詞を細分化したカテゴリを終端記号としたCFGであり，非終端記号数173,終端記号数441である．
ATR対話コーパス中の文では，（実際の単語ではなく）上記カテゴリの列を対象とした．
文長は平均9.97,最短2,最長49である．
また，[MATH]の規則集合[MATH]はChomsky標準形ではないので，GLRパーザとの組合せを採用した．
本論文の実験では[MATH]が与えられた場合の訓練時間を提案手法とI-Oアルゴリズムの間で比較する．
ただし，I-Oアルゴリズムにおいては節[REF_sec:PCFG:IO]で記述したものを用い，そこで参照される規則集合[MATH]には，全ての終端・非終端記号の組合せから成るChomsky標準形の規則集合[MATH]ではなく，[MATH]の規則集合[MATH]を用いる点に注意する．
我々は文長[MATH]を変化させたときにパラメタを一回更新するのに要する計算時間（更新時間と呼ぶ）が変化する様子を比較する．
まず，我々はATRコーパス[MATH]の中で文長[MATH]と[MATH]の文をグループ化し，各々から無作為に取り出した100文を[MATH]とする([MATH])．
そして，各[MATH]を一つの訓練コーパスとし，各々に対して更新時間を計測する．
I-OアルゴリズムはChomsky標準形でしか動作しないので，あらかじめ[MATH]をChomsky標準形に変換した．
その結果860規則が2,308規則（非終端記号数210,終端記号数441）の文法になった．
更新時間を計測した結果を図[REF_graph:1]左に示す．
縦軸が更新時間(sec)，横軸[MATH]が使用した訓練コーパス[MATH]を表す．
``Inside-Outside''はI-Oアルゴリズムの更新時間，``IO with pruning''は[CITE]で説明されている，I-Oアルゴリズムの外側確率の計算において無駄な計算部分を枝刈りするように改良したものである．
これを以下では枝刈り版I-Oアルゴリズムと呼ぶ．
``Graphical EM''はgEMアルゴリズムの更新時間を示す．
また，変化の様子を見やすくするために，図[REF_graph:1]左の縦軸を拡大，縮小したものをそれぞれ図[REF_graph:1]中央，図[REF_graph:1]右に示す．
図[REF_graph:1]中央においてgEMアルゴリズムの更新時間は見にくいため省略した．
図[REF_graph:1]左のグラフから分かるように，gEMアルゴリズムはI-Oアルゴリズムやその枝刈り版に比べてはるかに高速な計算が行なわれていることが分かる．
また，図[REF_graph:1]中央のグラフから分かるようにI-Oアルゴリズムは理論値どおり[MATH]の曲線を描く．
枝刈り版I-Oアルゴリズムは枝刈りした分高速であるものの，仮説駆動型である（[MATH]の三角行列の全要素を走査する）点は変わらないので，枝刈りが最も効率良く行なわれた場合でも[MATH]を下回ることはない．
収束まで数100回の更新を要すること，および再出発法を採用することを考慮すると，[MATH]を越える訓練コーパス[MATH]に対してI-Oアルゴリズムおよびその枝刈り版を収束するまで動作させるのは現実的ではない．
それに対し，提案手法では[MATH]の範囲では[MATH]に対してほぼ線形に計算できており（図[REF_graph:1]右），最悪計算量[MATH]とは大きな差があることが分かった．
これは文法の制約により，WFSTに格納される部分木の数が抑えられたためと考えられる．
ATRコーパスにおける文長平均9.97に近い[MATH]ではI-Oアルゴリズムに対しておよそ1,000倍（枝刈り版に対してはおよそ700倍）の速度向上が得られた．
良質なパラメタを得る目的で再出発法（節[REF_sec:GEM:GEM]）を採用すると，訓練時間の内訳は
となる．
先に述べた文長毎の訓練コーパス[MATH] ([MATH])を使って，訓練時間の内訳（構文解析時間，支持グラフ抽出時間，gEM実行時間）を計測した．
その結果を図[REF_graph:2]に示す．
横軸が[MATH],縦軸が処理時間(sec)である．
図[REF_graph:2]（左）は再出発なし[MATH]の場合，図[REF_graph:2]（右）は再出発回数[MATH]の場合である．
また，収束までの更新回数はコーパス[MATH]によって異なるため，ここでは100に固定した．
構文解析時間(``Parsing'')，支持グラフ抽出時間(``Support graph'')，gEM実行時間(``Graphical EM'')はいずれも文長[MATH]に対してほぼ線形になっていることが分かる．
更に図[REF_graph:2]（右）より，再出発法を採用した場合は構文解析時間と支持グラフ抽出時間が訓練時間全体に占める割合は非常に小さい．
構文解析と支持グラフ抽出は再出発の度に繰り返す必要がないからである．
構文解析と支持グラフ抽出をgEMアルゴリズムの前処理と捉えれば，わずかな前処理（図[REF_graph:2]）で大きな速度向上（図[REF_graph:1]）が得られているということができ，構文解析とEM学習を分離したメリットが現れている．
