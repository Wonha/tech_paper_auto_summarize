評価実験\label{sec:eval}

引用節・挿入節の自動認定および係り受け解析の評価実験を行なった．
実験に用いたコーパスはCSJのコア188講演（模擬講演111講演と学会講演77講演）の書き起こしである．
この中には6,148個の引用節と818個の挿入節が含まれている．
このうち168講演を学習データ，20講演（模擬講演11講演と学会講演9講演）をテストデータとして用いた．

まず，下岡らの手法\cite{shitaoka_2005}に従い，単語情報とポーズ長を用いて文境界を推定した後で，
得られた文ごとに係り受け解析を行ない，ベースライン精度を求めた．
文境界推定のF値は85.6で，
係り受け解析精度は，openテストで77.7\%, closedテストで86.6\% であった．
closedテストでは，188講演のすべてを学習に利用している．


\subsection{引用節・挿入節の自動認定結果}\label{sec:eval_cb}

\ref{sec:method_cb}節で述べた手法を用いて，引用節・挿入節の自動認定を行った．
その結果を表\ref{result_yamcha}に示す．
表\ref{result_yamcha}には以下の5種類の実験結果を示している．

\begin{table}[b]
\caption{引用節・挿入節の認定精度（文境界が未知の場合）}
\label{result_yamcha}
\begin{center}
\input{01table02.txt}
\end{center}
\end{table}

\begin{itemize}
\item 係り受けを用いない場合（1回目のチャンキング：図\ref{flow}の境界推定（1回目））
の認定精度
\item openテストで得られた係り受けを用いた場合
（2回目のチャンキング：図\ref{flow}の境界推定（2回目））の認定精度
\item closedテストで得られた係り受けを用いた場合
（2回目のチャンキング：図\ref{flow}の境界推定（2回目）の認定精度
\item 正解の係り受けを用いた場合
（2回目のチャンキング：図\ref{flow}の境界推定（2回目））の認定精度
（係り受け確率はすべて1.0とする）
\item 1回目のチャンキング
（図\ref{flow}の境界推定（1回目））における終端のみについての認定精度
\end{itemize}

表\ref{result_yamcha}によると，引用節の終端のおよそ9割は正しく検出できている．
検出できなかったものの中には「〜と」で終わる文末や，
「〜っちゅう」「〜みたいな」など，使われる頻度が比較的少ない表層表現があった．
始端とともに正解した精度は，
openテストで自動推定された係り受けを利用することによって向上した．
個々の文節における引用節のチャンクタグの推定結果についてマクネマー検定を行なったところ，
$p<0.01$で有意な改善が得られていることが分かった．
これは，本手法で素性として利用した係り受け情報が有効に作用したことを表わしている．
例えば，以下の例文\ref{improve_yamcha}では，
1回目のチャンキングでは「多分私が飼っていたさくらの方だった」の部分が
引用節だと誤って自動認定されたものの，2回目のチャンキングで係り受けを利用することにより，
「逃げたのは多分私が飼っていたさくらの方だった」
の範囲が引用節であると正しく自動認定されるようになった．

\noindent
（例文\prob{\label{improve_yamcha}}）\\[0.5zw]
\begin{picture}(380,112)(-20,0)
\linethickness{0.25pt}
\put(0,102){｛逃げたのは}
	\put(60,106){\line(1,0){105}}\put(165,106){\line(0,-1){93.5}}
\put(20,85){多分}
	\put(40,89){\line(1,0){125}}
\put(30,68){私が}
	\put(50,72){\line(1,0){15}}\put(65,72){\line(0,-1){8.5}}
\put(40,51){飼っていた}
	\put(90,55){\line(1,0){15}}\put(105,55){\line(0,-1){8.5}}
\put(80,34){さくらの}
	\put(120,38){\line(1,0){15}}\put(135,38){\line(0,-1){8.5}}
\put(90,17){方だった｝と}
	\put(150,21){\line(1,0){15}}
\put(100,0){思うんですけれども}
\end{picture}

さらに，closedテストで得られた係り受けや正解の係り受けを用いた場合は，
引用節の認定精度は大きく向上している．
このことから，係り受け解析精度が改善されるのに伴って，
引用節の認定精度も向上することが分かる．

一方，挿入節については，係り受けを利用してもほとんど検出できず，
挿入節の終端の大半は文境界であると推定されていた．
挿入節は，文末表現としてもよく用いられる「〜けれども」「〜ですが」の形で終わるものが多く，
文境界との区別が難しいことが原因であると考えられる．
これらの区別は，本手法で用いた素性だけでは困難である．
そこで，\ref{sec:additional_features}節に述べるように，
フィラーの有無や話速，韻律情報などを素性として用いてみたが，
有意な精度向上は見られなかった．
今後，より広範な素性を検討する必要があると考える．


\subsection{節の自動認定結果を用いた係り受け解析結果}\label{sec:eval_db}

\begin{table}[b]
\caption{係り受け解析精度（文境界が未知の場合）}
\label{result_pepp}
\begin{center}
\input{01table03.txt}
\end{center}
\end{table}

次に，自動認定された引用節・挿入節を用いて，
\ref{sec:method_ds}節の手法で係り受け解析（図\ref{flow}の係り受け解析（2回目））を行なったところ，
表\ref{result_pepp}に示す結果となった．
ここで用いる引用節・挿入節の自動認定結果は，
表\ref{result_yamcha}においてopenテストで得られた係り受けを利用したものである．
学習データにおいても同様に，
2-fold cross validationによって引用節・挿入節の自動認定を行なった．
引用節・挿入節の自動認定結果を利用することで，
openテストにおける係り受け解析精度は1.0\% 向上した．
マクネマー検定を行なったところ，本手法を用いた係り受け解析精度は
ベースラインの精度より$p<0.01$で有意
に上回っていることがわかった．
この結果は，引用節・挿入節の推定に誤りがある場合でも，
係り受け解析モデルが頑健に作用したことを示唆している．

\begin{table}[t]
\caption{引用節・挿入節の境界と交差する係り受けの数（文境界が未知の場合）}
\label{result_cross}
\begin{center}
\input{01table04.txt}
\end{center}
\end{table}

そこで次に，引用節・挿入節を含む文の係り受け解析における解析誤りの数の変化について考察した．
表\ref{result_cross}に，引用節・挿入節の内部と外部を結ぶ誤った係り受けが推定された数を示す．
このような係り受け解析誤りの数は，引用節・挿入節の推定結果を利用することで，
639個から572個に削減された．
特に，引用節の内部から外部へと係る解析誤りの数が，217個から128個へと大きく削減された．
その理由は次のように考えられる．
一般に，引用節や挿入節がある場合は，
その前方にある文節は引用節や挿入節を越えて遠くの文節に係ることが多い．
その結果，従来の係り受けモデルでは，遠くに係る係り受けが誤って優先され，
引用節・挿入節の内部から終端を越えて節の後方に係るような係り受け解析の誤りが多く発生していた．
しかし，本手法によって，引用節については，認定精度の高かった終端の情報を活用することで，
このような解析誤りを削減することができるようになったと考えられる．
例えば，以下の例文\ref{improve_depend}では，
引用節・挿入節の情報を利用せずに係り受け解析を行なった場合には，
「挟んで」（引用節内部）が「覚えてきて」（引用節外部）に係ると誤って推定されていたものの，
「顔挟んで外に出てしまう」の部分を引用節として自動認定できたことにより，
「挟んで」（引用節内部）が「出てしまうという」（引用節内部）に係るように修正された．

\noindent
（例文\prob{\label{improve_depend}}）\\[0.5zw]
\begin{picture}(380,112)(-20,0)
\linethickness{0.25pt}
\put(0,102){｛顔}
	\put(20,106){\line(1,0){15}}\put(35,106){\line(0,-1){8.5}}
\put(20,85){挟んで}
	\put(50,89){\line(1,0){25}}\put(75,89){\line(0,-1){25.5}}
\put(40,68){外に}
	\put(60,72){\line(1,0){15}}
\put(50,51){出てしまう｝という}
	\put(140,55){\line(1,0){15}}\put(155,55){\line(0,-1){8.5}}
\put(140,34){芸を}
	\put(160,38){\line(1,0){55}}\put(215,38){\line(0,-1){25.5}}
\put(150,17){どこからか}
	\put(200,21){\line(1,0){15}}
\put(180,0){覚えてきて}
\end{picture}

また，表\ref{result_pepp}には，引用節・挿入節の正解を与えた場合，すなわち認定精度が
100\% だったと仮定した場合の係り受け解析の結果も示す．
この場合，係り受け解析精度はさらに改善されており，
引用節・挿入節の認定精度の向上に伴って係り受け解析精度も改善されることが分かる．


\subsection{節の自動認定と係り受け解析の相互作用に関する考察}\label{sec:eval_interact}

上述の実験結果から，引用節・挿入節の自動認定および係り受け解析の精度は，
相互の情報を利用することにより高精度化されることが確認できた．
単純には，同様のサイクルを繰り返すことにより，さらなる精度向上が期待される．
そこで，引用節・挿入節の自動認定結果と係り受け解析の結果を再度相互に利用して，
それぞれの精度がさらに改善されるかどうか調べた．
しかしながら，引用節の認定精度および係り受け解析精度に有意な変化は見られなかった．
これは，一度引用節・挿入節の情報を利用して推定した係り受けは，
現在得られている節の認定範囲に対して最適な状態になっており，
その結果を用いても始端の位置はほとんど修正できないためと考えられる．

逆に，再度相互に推定結果を利用することで，
引用節の外部から内部へと係る解析誤りがわずかに増加する結果となった．
これは，2回目のチャンキングで引用節の始端を再推定する際に，
誤った係り受けの情報が優先され，
始端の位置が誤って文頭側にずれたことが原因と推測される．
今後の課題として，特に引用節の始端付近について係り受けの傾向を詳細に分析し，
より適切な係り受けの利用法を検討したい．


\subsection{文境界が既知の場合の実験結果}\label{sec:known_sb}

\begin{table}[b]
\caption{引用節・挿入節の認定精度（文境界が既知の場合）}
\label{result_yamcha2}
\begin{center}
\input{01table05.txt}
\end{center}
\end{table}

次に，文境界推定の誤りの影響を調べるために，
正解の文境界を与えて，引用節・挿入節の自動認定および係り受け解析を行なった．
評価結果を表\ref{result_yamcha2} $\sim$表\ref{result_cross2}に示す．

結果として，文境界を与えることにより，
引用節・挿入節の認定精度，係り受け解析精度ともに大きく上昇した．
表\ref{result_yamcha2}からは，
引用節だけでなく挿入節についても係り受けを利用することで認定精度が向上すること，
表\ref{result_pepp2}からは，
引用節・挿入節の自動認定結果を用いることでopenテストでの係り受け解析精度が0.6\% 向上することなど
が分かる．
また，引用節・挿入節の正解を与えた場合，係り受け解析精度はさらに改善されることも分かる．
これらの結果は，文境界推定の誤りの影響がいかに大きいかを示している．

\begin{table}[t]
\caption{係り受け解析精度（文境界が既知の場合）}
\label{result_pepp2}
\begin{center}
\input{01table06.txt}
\end{center}
\end{table}
\begin{table}[t]
\caption{引用節・挿入節の境界と交差する係り受けの数（文境界が既知の場合）}
\label{result_cross2}
\begin{center}
\input{01table07.txt}
\end{center}
\end{table}

しかしながら，話し言葉において曖昧となる引用節・挿入節および文境界の情報をすべて与えても，
書き言葉における係り受け解析精度と比べると依然として大きな差がみられる．
話し言葉における係り受け解析精度をさらに向上させるためには，
話し言葉特有の問題点について，さらに調査を行なう必要がある．
これは今後の課題である．


\subsection{その他の素性を追加した場合の実験結果}\label{sec:additional_features}

\ref{sec:method_cb}節で述べた素性(1)と(2)に下記の素性を加え，
それぞれの素性の組み合わせを用いて
\ref{sec:eval_cb}節や\ref{sec:eval_db}節と同様の実験を行なった．

\begin{description}
\item[文節の前後のフィラーの有無]　　\\
引用節や挿入節の前後にはポーズだけでなくフィラーも入りやすいと考えられる．
そこで，文節の前後のフィラーの有無も素性として利用する．

\item[文節の話速]　　\\
挿入節では，話者が早口になると考えられるため，
各文節の話速をポーズ長と同様に正規化してから用いる．
話速は，モーラあたりの平均発声時間によって定義する．すなわち
文節$b$の話速$rate(b)$は，文節$b$が転記単位$u$に含まれるとき，次式で計算できる．
\[
rate(b) = \frac{t_{end}(u) - t_{begin}(u)}{mora(u)} 
\]
ここで$t_{begin}(u)$, $t_{end}(u)$は転記単位$u$の開始・終了時刻を表わし，
$mora(u)$は転記単位$u$に含まれるモーラ数である．

\item[文節内の基本周波数の最大値]　　\\
引用節・挿入節の境界の前後では，基本周波数(F0)の上昇や下降が起こることが予想される．
そこで，各文節における基本周波数の最大値を講演ごとに正規化したものを素性として用いる．
CSJでは，F0曲線の頂点や，曲線の変化率が大きく変わる点（屈曲点）に対して，
自動抽出されたF0値が付与されており，素性としてはその値を用いる．

\item[文節の先頭・末尾の韻律ラベル]　　\\
CSJでは，韻律の変化に関するラベリングが行なわれている．
ラベリング体系には，日本語の韻律ラベリング法として従来用いられてきたJ\_ToBI
(Japanese Tones and Break Indices) \cite{JToBI}を自発音声に適用するための拡張が施された
X-JToBI (eXtended J\_ToBI) \cite{X-JToBI}が用いられている．
これらのラベルは，音声の基本周波数のパターンや，音韻の時間長変化によるリズムを考慮して定義されたものである．

引用節・挿入節の始端や終端では，これらの韻律特徴に変化が起こることが考えられる．
そこで，各文節の先頭および末尾に付与されているX-JToBIのトーン層ラベルを素性として用いる．
X-JToBIで定義されているトーン層ラベルの例を表\ref{table:XJToBI}に示す．

\begin{table}[b]
\caption{X-JToBIトーン層ラベルの例}
\label{table:XJToBI}
\begin{center}
\input{01table08.txt}
\end{center}
\end{table}

\end{description}

それぞれの素性の組み合わせに対し，
個々のチャンクラベルの推定結果についてマクネマー検定を行なったところ，
単語情報とポーズ長以外の素性，
すなわち，フィラーの有無・話速・基本周波数・韻律ラベルを用いても，
有意水準$p=0.01$とした場合，有意な改善は得られなかった．
これは，話速・基本周波数・韻律ラベルといった音響的特徴の現れ方が，
引用節・挿入節において不安定であることや，
上記の素性から得られる情報がすでに単語情報やポーズ長から得られていることなどが原因と考えられる．


