提案手法の評価と考察\label{sec:EVAL}
提案手法を評価するために，提案手法を「ソフトウェアロボットとの疑似対話
コーパス\cite{QDC}」(以後，疑似対話コーパス)に人手で適用した．
その結果に基づいて，定性的な考察を行う．

\subsection{疑似対話コーパスへの提案手法の適用}
「ソフトウェアロボットとの疑似対話コーパス」
は，全15対話，532発話を含む．
疑似対話コーパスは，「仮想世界内にある2体のロボットを操作して，同じく仮
想世界内にある4つの球をあらかじめ指定された位置に配置する」という課
題で収集された．
収集に参加したのは，1対話につき5人である．
5人の参加者の内訳は，
\begin{itemize}
\item ロボットに音声言語で指示を与える者(指示者)
\item 指示者の指示にしたがってロボットを操作する者(ロボット操作者)
\item 仮想世界の様子を映すカメラを操作する者(カメラ操作者)
\item 仮想世界を管理するシステムを担う者(システム管理者)
\item タスクの終了を判断する者(終了判定者)
\end{itemize}
である．
参加者は対話毎に役割を交替した．
指示者はモニタに映されるカメラの映像を通して仮想世界内の様子を知り，球を操作する2体の
ロボットに加えて，カメラの位置も言語によって操作する．
また，指示者は自分や球の位置などをシステム管理者に質問することができる．
1対話の収集は，ロボットや球がランダムに配置された状態から始まり，
指示者が指定された配置を完了したと終了判定者が判断した所で終る．
コーパスの収集は，「発話者が指示を与え，それに対してロボットが動作する」
といサイクルの繰り返しによって採集された．
また，収集経過は市販のビデオカメラで撮影された．

このコーパスを調べた結果，今回対象とした不適格性の内，助詞落ち以外のものは99個所あった．
この内，単純な倒置15個を除いた84個所が冗長表現で，14個所の言い淀みを除く70個所が，
単語断片ではないはっきりとした単語で構成される自己修復であった．
70個の自己修復を図\ref{fig:SC_CLASS}の分類に従って分類した結果は以下の
通りである．
\begin{center}
\begin{tabular}{ll}
  言い足し: & 構造隣接 37個(52.9\,\%)，構造非隣接 16個(22.9\,\%) \\
  言い直し: & 明示的構造隣接 1個(1.4\,\%)，明示的構造非隣接 0個(0\,\%) \\
            & 非明示的構造隣接 10個(14.3\,\%)，非明示的構造非隣接 0個(0\,\%) \\
  リスタート: & 明示的 0個(0\,\%)，非明示的 1個(2.9\,\%) \\
  分類不能: & 5個(5.7\,\%) \\
\end{tabular}
\end{center}
RPが文頭から始まっていて，言い足し／言い直しともリスタートとも解釈でき
る場合には，言い足し／言い直しとした．
分類不能の5個は後で説明する挿入表現に該当する．

提案手法をこれらの自己修復に適用した場合，
提案手法で解決できるものが53個，解決できないものが17個であった．
疑似対話コーパスの調査，及び手法の適用に際しては，
「ねえ」，「ですねえ」，「さあ」，「下さい」等の，間投詞的あるいは定型的な接尾表現は無視した．

コーパスの規模が小さいことと，人手での作業であることから，
本論文ではこれ以上の定量的な評価は行わない．
かわりにこのコーパスを用いて定性的な考察を行う．

\subsection{考察}

図\ref{fig:successful}に，今回使用した疑似対話コーパス中のデータで，
提案手法が有効に動作する例を示す．
今回使用した疑似対話コーパスに現れた自己修復を含む発話には，
図\ref{fig:successful}の例(I)のような単純なものから，
例(VI)，(VII)のような複数の自己修復を含むものまであった．

例(V)では構造非隣接の言い足しが起きているが，提案手法により問題なく対
処できている．
また，例(IV)，(V)，(VI)，(VII)では修正処理によってRPDからRPへ適切に情報が
残されている．
例(V)，(VI)では「その」という連体詞が，RPDにしか現れていない．
「その」という連体詞は具体的な情報を与えるものではないが，「その」という
語が発話されたということを意味解析以降の処理に伝えることで，対象の
特定などにおいてある種の絞り込みを行なうことができる可能性がある．
従って，このような語を削除せずに残しておけることにも意義がある．
また，本手法は漸進的に処理を行なっていくので，例(VII)のように
自己修復が入れ子になっている場合でも問題なく処理できる．

\begin{figure}
\footnotesize
 \begin{enumerate}

\item[例] (I)
  \begin{enumerate}
  \item[修正前 ] [もう]$_{RPD}$，[もう]$_{RP}$ 90度回り込む
  \item[修正後 ] もう90度回り込む
  \end{enumerate}

\item[例] (II)
  \begin{enumerate}
  \item[修正前 ]  そうじゃなくて[反対側で]$_{RPD}$，[反対側に]$_{RP}$できるだけ回り込んで
  \item[修正後 ]  そうじゃなくて反対側にできるだけ回り込んで
  \end{enumerate}


\item[例] (III)
  \begin{enumerate}
  \item[修正前 ] [ザクは]$_{RPD}$，[ごめんなさい]$_{DF}$，[カメラは]$_{RP}$斜め45度くらいから映して
  \item[修正後 ] カメラは斜め45度くらいから映して
  \end{enumerate}

\item[例] (IV)
  \begin{enumerate}
  \item[修正前 ]  [青い玉の近くまで押して]$_{RPD}$，[まっすぐ押して]$_{RP}$
  \item[修正後 ]  青い玉の近くまでまっすぐ押して
  \end{enumerate}

\item[例] (V)
  \begin{enumerate}
  \item[修正前 ] どっちか手の空いてる方が，[その赤いやつを]$_{RPD}$カメラのすぐ手前あたりまで持ってくる，[カメラのすぐ前の赤いやつを]$_{RP}$
  \item[修正後 ]  どっちか手の空いている方が，カメラのすぐ前のその赤いやつをカメラのすぐ手前あたりまで持ってくる
  \end{enumerate}

\item[例] (VI)
  \begin{enumerate}
  \item[修正前 ] ザクは，[その青いやつを]$_{RPD1}$，[さっきのやつを]$_{RP1}$，
  [もうちょっとカメラから見て]$_{RPD2}$，[見て]$_{RP2}$右に押す 
  \item[修正後 ] ザクは，その青いさっきのやつを，もうちょっとカメラから見て右に押す
  \end{enumerate}

\item[例] (VII)
  \begin{enumerate}
  \item[修正前 ]  [[[右の]$_{RPD1}$，[右の]$_{RP1}$青を]$_{RPD2}$，[カメラから見て右の青を]$_{RP2}$，白から見て赤の反対側に置いて]$_{RPD3}$，[押して]$_{RP3}$
  \item[修正後 ]  カメラから見て右の青を，白から見て赤の反対側に押して
 \end{enumerate}

\end{enumerate}
\caption{処理可能な発話の例}
\label{fig:successful}
\end{figure}



次に提案手法では対処できなかった表現をタイプ別に分類し，
それぞれに必要な処理について述べる．

\paragraph*{$\bullet$ 挿入表現}
このタイプの自己修復は\cite{NM1998}では分類Aの(II)
\footnote{\label{NM1998_CAT:A-II}
\cite{NM1998}では「X(RPDに相当)の単語列が，
Z(RPに相当)の単語列の部分列になっている場合」と定義され
(()内は著者の注)，
「[二十分]$_{X}$[愛甲石田まで二十分もかからない]$_{Z}$から」という例が挙げられている．
}
に分類され，\cite{TH1999}では挿入と呼ばれている．
これには5つ該当する例があった．
その内の1つとして，
\begin{quote}
「{\bf 黒の}，ガンダムが{\bf 黒の}後ろに行って」
\end{quote}
が挙げられる(ここで，「黒」は「黒いブロック」をさしている)．
\cite{DY1997}のように係り受け解析を基本とする場合，このタイプのものが
解決できないことは\cite{NM1998}で指摘されている．
しかし，読み飛ばしや非明示的なリスタートの処理をポーズの情報などを用い
て高い確信度で行うことができれば，うまく解決出来る可能性がある．
また，構造非隣接の扱いを拡張するか，パターンマッチングによる対応付けを
別に導入することによって解決することも可能である．
\cite{NM1998}は，\cite{HP1997}の様な手法は漸進的な処理に用いられないと
述べているが，その理由は不明である．
\cite{NM1998}は音声認識器の出力を解析することを前提にしており，
そうであるならばパターンマッチング手法を併用することも
(その結果を必ず信用するかどうか，あるいは修正処理までを行わせるかどう
かは別として)可能なはずである．
\cite{NM1998}の手法自体も，挿入表現を扱う規則の条件から(脚注\ref{NM1998_CAT:A-II}参照)，読み飛ばし以上の事はできず，例えば，
\begin{quote}
「私は[あの分厚い本を]$_{X}$，[図書館からご注文の本を運んできました]$_{Z}$」
\end{quote}
というような発話は扱えない．

\paragraph*{$\bullet$ 単純な置き換えによる情報の損失}
これに含まれるものは1つであった．
本手法では，RPDの単純な削除は情報の損失を招くとして，付け替えによる情報の保存を考えた自己修復の
処理手法を提案した．
しかし，本手法で提案した情報の保存はRPで省略された係り受け関係の移し替えのみを考慮していて，
言い直された単語自体は単純に置き換えている．
このままでは，次のような例で情報の損失を起こす．
\begin{quote}
「{\bf 青を}，その{\bf ブロックを}押して」
\end{quote}
この例では，「青」は青いものを示す代名詞として使われている．
この「青」を単純に「ブロック」で置き換えてしまうと，折角話者が提供した「青色」という情報を失い，
システムは曖昧性を正しく解決できない恐れがある．
これを防ぐためには，単純に表層のシンボルの操作として自己修復を扱うのではなく，本論文で提案した
手法よりもより深い意味の操作として自己修復を扱う必要がある．
この例であれば，単語間においても単純な置き換えを行うのではなく，意味素性の引き渡しを行わなければならない．

\paragraph*{$\bullet$ より高度な意味処理が必要な表現}
これには9つの例が含まれる．
上に述べたタイプも，本手法よりも高度な意味処理を要求するものであるが，
上のタイプはまだ比較的簡単な問題である．
それよりも，ここに分類されるものは更に複雑な意味処理を要求するものである．

提案手法では，情報の保存のために行われるRPDとRPの対応づけが単語のレベルで行われるため，
下の例のような場合正しく修正処理を行うことができない．
\begin{quote}
「それをガンダムの{\bf 前に}押して，前の{\bf 辺りに}」
\end{quote}
この例の場合，「前に」は「辺りに」と対応づけられるために，「ガンダムの」は「辺りに」に付け替えられてしまい，
``((それを) ((ガンダムの) (前の) 辺りに) 押して)''という結果が生成されてしまう．
この例を正しく解釈するためには，「前に」が「前の辺りに」という複合表現と対応していることを理解できる必要がある．

また，本手法を含めて，表層のレベルで自己修復を扱う既存の手法はどれも，品詞が異なるために次のような
簡単な表現も扱う事ができない．
\begin{quote}
「{\bf 赤い}，ごめん，{\bf 緑の}玉を押して」
\end{quote}
当然，
\begin{quote}
「{\bf 白いのが入るぐらいに}映して，{\bf 白いのを}映して」
\end{quote}
のような，表層上はかなり異なるが意味的にはほぼ同じと考えられる表現も扱う事ができない．

\paragraph*{$\bullet$ 主辞の省略}
このタイプのものは2つあった．
2つとも下の例のように「〜から見て」という句が動詞の後から付け足されている例である．
\begin{quote}
「{\bf 右に}押して，カメラから見て({\bf 右に})」
\end{quote}
「カメラから見て」は「押して」に係るわけではないので，
本論文で提案した構造非隣接に対する処理手法では解決できない．
これを解決するためには「右に」あるいは「右に押して」までを，
何らかの推論によって補完して考える必要がある．
あるいは，交差する係り受けも許すような仕組みが必要である．

\paragraph*{$\bullet$ 見かけは普通の言い直しだが，単純な言い直しとしては解決できない表現}
このタイプのものは1つ見つかった．
\begin{quote}
「カメラもうちょっと右から{\bf 映してくれる}，右に{\bf 回り込んでくれる}」
\end{quote}
この例の場合，一見動詞句の非明示的な言い直しのように見えるが，単純に「映して」
を「回り込んで」で置き換えてしまうことはできない．
ここでは，話者は「右から映す」ための手段として「右に回り込む」ことを依頼しているのであって，
回り込みながら「(何かを)撮影する」ことが重要なのである．
このような発話を正しく理解するためには，
談話解析までも構文解析と並列化した仕組みが必要である．
そして，外界の状況やユーザの意図に応じた処理を行わなければならない．


