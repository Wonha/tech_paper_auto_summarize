言語構造をとらえる方法としては，スタックによるモデル化\cite{grosz86},
\cite{allen96}, \cite{jonsson91}\footnote{\cite{jonsson91}ではやりとり
(働き掛け＋応答)単位を対話木によって管理しているが，この対話木は働き掛
け＋応答の2分木の中にあらたなやりとりが挿入できるという形式なので，本
質的にはスタックと同機能であると考えられる．}とAND-OR木によるモデル化
\cite{young89}, \cite{smith94}, \cite{smith95}がある．スタックによるモ
デル化は実現しやすく，注意状態との関係が明確であるという利点を持つ．し
かし，入れ子構造をなさないような副対話が生じた場合にその管理が難しい．
また，ユーザから主導権を取る発話(典型的にはユーザの誤った知識・方略を
協調的に修正する発話)を生成した場合には，いくつかのスタック要素のポッ
プを伴うことが多く，ユーザが主導権を改めて取ろうとしたときに必要な情報
がスタックから消えているという状況が生じる．また，原則としてスタックか
らポップした情報にはアクセスできないので，音声の誤認識による誤解を(し
ばらく対話が進んだ後で)修正する必要のある音声対話システムに用いるには
適していない．一方，AND-OR木によるモデル化は，基本的にタスクの問題構造
の記述であり，Groszらの言語構造と意図構造とを混同してしまっているので，
タスクの問題構造に従わない対話(例えば詳細化対話やシステムの能力に関す
るメタ的な質問など)は特別に扱わなければならないという欠点を持つ．これ
らのことを考え合わせると，音声対話に適した対話管理は，焦点とする範囲を
適当に絞りながらも過去の対話履歴にアクセスする可能性を残した方法を用い
て，言語構造と意図構造を区別して管理する必要があるといえる．
\cite{airenti93}では言語構造と意図構造とを区別してモデル化し，これらを
会話ゲームと行動ゲームと呼んでいる．しかし，それぞれのゲームがどのよう
に表現されるかについては部分的にしか示されておらず，音声対話システムを
構成するには不十分であるといえる．
score of this paragraph is 8
