提案手法は「定型文」「箇条書き」「表」という3つの記述形式を利用して評価文を自動抽出する．
本節では，これら3つの形式で記述された評価文の例を概観して，基本的な考え方を説明する．
手法の詳細は次節で述べる．
まず我々が着目したのは定型的な評価文である．
\head{これの良いところは計算が速いことです．
} \sent{悪い点は，慣れるまで時間がかかること．
}
いずれの評価文も「良いところ／悪い点は〜なこと」という定型的な表現を使って記述されている．
そのため，下線部にマッチするような語彙統語パターンを用意すれば，四角で囲まれたテキストを評価文として抽出することができる．
以下では「良いところ」「悪い点」のように，評価文の存在を示唆する表現のことを手がかり句と呼ぶ．
特に好評文の存在を示す手がかり句を「好評手がかり句」と呼ぶ．
例えば「良いところ」は好評手がかり句である．
同様に，不評文の存在を示す手がかり句を「不評手がかり句」と呼ぶ．
次に着目したのは，図[REF_fig:itemize]のように箇条書き形式で列挙された評価文である．
この箇条書きは手がかり句（良い点，悪い点）を見出しに持つため，各項目に評価文が含まれていることが分かる．
箇条書きと同様に，図[REF_fig:table]のような表形式からも評価文を自動収集することができる．
この表は左側の列が見出しの働きをしているが，ここにも手がかり句（気に入った点，イヤな点）が使われているので，表中に評価文が記述されていることが分かる．
実験の結果から，提案手法は80%から90%という精度で評価文を獲得できることが分かった．
また，収集した評価文が分類タスクに対して有効であることも確認することができた．
今後の課題としては，定型文から収集された評価文が多かったことから，新しい語彙統語パターンを利用して収集量をさらに拡大させることを検討している．
また，収集した評価文からの評価表現辞書の構築にも取り組んでいる．
評価者が「曖昧」と分類した評価文を分析したところ，評価極性を決定するために十分な文脈情報が与えられていない場合が大半であることが分かった．
それ以外のものとしては，文分割と構文解析の誤りに起因するものが3例だけ見つかった．
3例とも定型文から抽出されていた．
文脈情報が欠落している例として「何しろ情報量が多い」という文が好評文として獲得されていた．
この文の評価極性は文脈に依存するため，この文単独で評価極性を決定することは困難である．
したがって，この評価文を人手で評価した場合には「曖昧」に分類される可能性が高い．
しかし，実際にこの文が抽出された元テキストを調べてみると，次のようなものであった．
\single{このガイドブックのいいところは何しろ情報量が多いところです．
}
これを見ると「何しろ情報量が多い」という文は，少なくとも原文では好評文として使われていたことが分かる．
このことから，表[REF_tab:acc1]で不正解に数えられている評価文の中には，完全な間違いとは言いきれないものが含まれていると考えている．
利用した記述形式によって，収集される好評文と不評文の割合に大きな差が見られた．
特に定型文2の内訳を見ると，不評文の数が圧倒的に多いことが分かる（表[REF_tab:result]の定型文2）．
この理由を調べたところ「〜なのが難点」という言い回しが頻出していることが原因であった．
このような好不評の偏りは，例えば本コーパスを評価文分類器のトレーニングデータとして使うときには考慮しておく必要があると考えられる．
本実験ではHTML文書から評価文の収集を行ったが，提案手法自体はHTML文書に特化したものではないと考えている．
たしかに，箇条書きと表形式を利用した抽出処理は，HTML文書の特性を利用している．
しかし，表[REF_tab:result]から分かるように，抽出された評価文のうち80%以上が定型文から抽出されている．
このことから，提案手法はHTML文書以外のコーパスに対しても有効に働くと考えられる．
