まず，コーパスに内在する翻訳の多様性と，翻訳知識自動構築の観点から見た場合の問題点について述べる．
対訳コーパス中には通常，文脈や状況に依存した，言い換えると文脈や状況が変わると不適切となる対訳が存在する．
たとえば，英語を日本語に翻訳する場合，定冠詞`the'は通常訳出されない．
しかし，人間の翻訳でも，文内文脈では解決できない曖昧な表現となる場合，「私の」「その」など，限定表現が付与される場合がある．
また，日本語「写真を撮っていただけますか」は，通常英語に翻訳した場合，``Could you take our photograph?''となるが，``Could you press this shutter button?''と，写真撮影を人に依頼する状況でしか使用できない翻訳がされる場合がある．
このように，文脈／状況依存訳は，強度な意訳になっていることが多い．
このような文脈や状況に依存した対訳から構築した翻訳知識は，適合しない文脈／状況で使用されると，過剰な省略や冗長語が発生し，誤訳の原因となりうる．
一般的に，原言語の表現は，様々な目的言語表現に翻訳することができるため，同じ原文であっても複数種類の対訳がコーパス中に存在する．
たとえば，日本語「このトラベラーズチェックを現金にしてください」は，英語では，
I'd like to cash these traveller's checks. (平叙文)
Could you change these traveller's checks into cash? (疑問文)
Please cash these traveller's checks. (命令文)
などと翻訳することができる．
これらは文脈や状況に依存せず，常に正しい翻訳である．
実際，BTECコーパス[CITE]では，上記日本語の対訳は10種類存在する．
このような多様性を含むコーパスから翻訳知識を学習すると過剰に知識が生成される．
たとえば，[CITE]が使用したパターンベース翻訳システムの場合，言い換え表現から，すべて異なる変換規則が作成される．
しかし，実際の翻訳処理では1規則だけで十分であるため，冗長な規則は曖昧性の増大や翻訳速度の低下を招く[CITE]．

単言語の処理においては，コーパス中の多様性を排除する方法として，制限言語が提案されている[CITE]．
これは使用語彙や文法を制限して文章を記述する方法である．
制限言語で記述された文章は，人間が読んだりコンピュータが処理を行う際，構文構造や意味解釈の曖昧性を減少させる効果があると報告されている．
対訳コーパスからの翻訳知識自動構築の場合にも，同じ考え方が利用できる．
すなわち，コーパス中の対訳を，すべての表現を許すのではなく，「機械翻訳に適した対訳」に制限することにより，誤訳の原因となる文脈／状況依存訳を自動構築の前段階で排除したり，そこから構築させた翻訳知識の言語変換時の曖昧性を減少させることができると期待される．
これを本稿では制限対訳と呼ぶ．
制限対訳の指標としては，以下のものが考えられる．
前半3項目は，対訳単位の指標であり，最後の1項目は対訳コーパス全体に対する指標である．
直訳性
原言語・目的言語間で省略・冗長語が少ない．
すなわち，原文の単語のほとんどが翻訳文の単語に対応する．
文脈自由性
原文の単語列が翻訳文の単語列に，局所的に（文脈情報なしで）対応する．
この指標は，部分文が翻訳単位として再利用しやすいことを示している．
語順一致性
原文の語順が翻訳文でも保たれている．
この指標は，翻訳時の語順調整が少ないことを示している．
訳語一定性
コーパスを通じて，ある１単語が常に同じ単語に翻訳されている．
たとえば，形容動詞「必要だ」は，英語では形容詞`necessary'，動詞`need'，動詞`require'などに翻訳することができる．
しかし，可能であれば常に一つの表現，たとえば`necessary'に翻訳されている方が望ましい．
これらの指標は，翻訳方式により必要とされるものが異なる．
たとえば，単語直接方式の統計翻訳[CITE]では，単語の変換と語順調整を組み合わせて翻訳を行うため，語順一致性は重要な指標となる．
しかし，構文トランスファ方式では，構文変換時に語順を大幅に変更することができるため，それほど重要な指標ではない．
本稿では，句構造ベースの構文トランスファ方式について検討する．
本稿では，句構造ベースの構文トランスファ方式翻訳システムである，HPAT (Hierarchical Phrase Alignment-based Translator; [CITE])を実験に使用する．
これは，変換主導型機械翻訳システムTDMT[CITE]を基に，従来人手で構築していた変換規則を，対訳コーパスから自動獲得するように拡張したものである．
HPATの動作を簡単に説明する(図[REF_fig-HPAT-procedure])．
まずパラレルコーパスから階層的句アライメント[CITE]を用いて，句レベルの対応を階層的に抽出する．
そして，その階層関係を用いて対応をパターン化する．
これが変換規則で，基本的には同期文脈自由文法である．
翻訳時には，変換規則の原言語パターンを用いて入力文の構文解析を行う．
次に使用された原言語パターンを目的言語パターンにマッピングすることにより，目的言語に変換する．
解析や変換時に発生した曖昧性は，変換規則に記述されている用例(訓練コーパスの実例)と入力文の意味的距離を計算し，最も近いパターンを選択することにより解消する．
構文トランスファ方式に適した対訳について考察するため，本節ではTDMTを分析する．
TDMTは，ルール記述者がコーパスから対訳を一つづつ取得し，それと同等な翻訳が得られるよう，規則を追加または調整し，変換規則が作成された．
言い換えると，TDMTのルール記述用対訳は，コーパスの対訳とまったく同一ではなく，訳質を維持したまま規則数が最小となるように，目的言語側の文を書き換えている．
つまり，書き換えられた対訳文(以下，TDMT訓練訳と呼ぶ)は，TDMTという構文トランスファ方式翻訳システムに適した対訳となっている．
そこで，TDMT(英日翻訳版)の変換規則の訓練に用いられたTDMT訓練訳6,304文と，同じ原文の元コーパスに含まれる対訳(コーパス訳と呼ぶ)の比較を行った．
その統計データを表[REF_tbl-corpus-comparison]に，例を表[REF_tbl-tdmt-ideal-example]に示す．
これらからは，以下の制限対訳指標が構文トランスファ方式の機械翻訳に適していることを示している．
なお，本データは，形態素解析結果と，単語アライメント結果([REF_sec-translation-experiments]章参照)を元に算出した．
単語アライメントが出力した単語の対応関係を，単語リンクとも呼ぶ．
まず，表[REF_tbl-corpus-comparison]の単語リンク数について着目すると，TDMT訓練訳は値がかなり増加しており，目的言語の約50%の単語について，対応する単語が存在することになっている．
つまり，TDMT訓練文は原文の単語が忠実に訳されており，直訳的であることを示している．
表[REF_tbl-tdmt-ideal-example]の1番の対訳はその例である．
コーパス訳では原文に現れない冗長語「その」が付加されているが，TDMT訓練訳では原文の内容語が過不足なく対応している．
次に，目的言語語彙数，および平均訳語数を見ると，TDMT訓練訳は目的言語語彙数がかなり減少しており，それに伴い，平均訳語数が減少している．
これは，原文の単語訳ができる限り一定になるように，ルール記述者が翻訳文を書き換えながら訓練したためであり，そのため訳語のバラエティが減少したものである．
言い換えると，TDMT訓練訳は訳語一定性が高い．
たとえば，表[REF_tbl-tdmt-ideal-example]の1番と2番の`include'について着目すると，コーパス訳では，1番は名詞「込み」，2番は動詞「つく」と異なる訳語が使用されている．
しかし，TDMT訓練訳ではどちらも「含む」で一定である．
表[REF_tbl-corpus-comparison]の平均文脈自由数は原文で連続した単語が翻訳文上でも連続している組み合わせ数をカウントしたものである．
この値が大きいものは文脈自由性が高く，部品化しやすい対訳であると言える．
単語リンク数(単語対応数)が多いほど，この数値は大きくなる傾向があるが，同じ単語リンク数の場合，TDMT訓練訳の方が若干大きい値を示している．
表[REF_tbl-tdmt-ideal-example]の3番はその例である．
TDMT訓練訳では，名詞句``the rate for a single and a twin''は，やはり名詞句「シングルとツインの料金」と局所的にに訳されているため，規則化した際も再利用が可能である．
しかし，コーパス訳では，動詞「違う」を修飾する2つの連用修飾句「料金は」「シングルとツインでは」に分割されて訳されている．
そのため，修飾先を含めて規則化しないと再利用はできない．
前節で示した制限対訳指標のうち，本稿では特に直訳性に着目する．
直訳性の高い対訳のみを使用して翻訳知識を構築できれば，文脈／状況に依存する変換規則の生成が抑制され，誤訳を減少させることができると期待される．
訳語一定性，および文脈自由性は，コーパスを通じて訳語や構造が一定であることを示しているため，言い換え表現対策として有効と考えられるが，今回は曖昧性の減少より，誤訳の減少を優先する．
「直訳」は，原文の単語が忠実に翻訳文に反映されていることを意味する．
したがって，対訳文があったとき，原文・翻訳文の単語対応が多く取れる文は直訳性が高い．
対訳文の単語対応は，対訳辞書を参照する方法や，統計的単語アライメント(たとえば[CITE])等を用いると取得することができる．
しかし，言語によっては，必ずしも単語同士が対応づかない場合もある．
たとえば，日本語と英語を考えたとき，格助詞「が」などは，英語の単語として現れない．
ところが同じ助詞でも，副助詞「だけ」の場合は，英語では`only'などに訳されている場合が多く，たとえ機能語でも単語としての翻訳が必要な場合と不必要な場合がある．
つまり，単語対応数だけでなく，本来翻訳すべき単語が原文・翻訳文双方にどの程度含まれているか判断しなければ，直訳性は決定しない．
このような考えから，本稿では直訳性を以下の手順で判定する．
なお，ここでは対訳辞書を用いる．
対訳辞書は市販辞書を用いることも可能だと考えられるが，ここでは，対訳コーパスの単語アライメント結果から，単語リンクを集めて自動的に作成されるものとする．
また，一つの対訳文中で原言語・目的言語間は1対1に単語が対応するものと仮定する．
原言語の単語で対訳辞書を引く．
辞書の見出しに存在する単語は，翻訳されるべき単語と見なす．
その数を[MATH]とする．
目的言語の単語で対訳辞書を逆引きする．
辞書の訳語に存在する単語は，翻訳されるべき単語と見なす．
その数を[MATH]とする．
対訳辞書にエントリが存在する対訳単語を，単語リンクと見なす．
その数を[MATH]とする．
以下の式で直訳性を計算する．
これを対訳対応率(Translation Correspondence Rate; TCR)と呼ぶ．
対訳対応率は，「本来翻訳されるべき単語のうち，実際に翻訳された語の割合」を表す．
双方向に見ているので，省略語と冗長語を同等に検出することができる．
また，辞書に記載されていない語は分母・分子共に無視されるため，辞書のカバレッジの影響が少ない．
たとえば，原文「私はこのステーキを頼んでいません」の翻訳として，翻訳文1``I didn't order this steak''と，翻訳文2``This is different what I ordered''があったとする(図[REF_fig-tcr-example])．
直感的には，翻訳文1は原文に忠実な直訳であり，翻訳文2は意訳が含まれている対訳である．
図中の丸囲み単語が対訳辞書に載っている単語だったとすると，原文は5単語が見出しとして存在している([MATH])．
また，翻訳文1の単語も5単語が対訳として存在している([MATH])．
単語リンクは，I-私，not-ぬ，order-頼む，this-この，steak-ステーキの5つである([MATH])ので，式([REF_eqn-tcr])によると，対訳対応率[MATH]となる．
一方，翻訳文2を見ると，対訳辞書の訳語として載っている単語は，this, different, I, orderの4つであり([MATH])，単語リンクはthis-これ，order-頼む，I-私の3つしかない([MATH])．
したがって，[MATH]となり，翻訳文1の方が直訳性が高いと判断される．
このように，対訳対応率は基本的に形態素解析結果と対訳辞書だけから判断され，構文解析などの深い解析を必要としない．
本章では，直訳性を利用した機械翻訳知識構築方法について述べる．
本稿では，2つのアプローチを取る．
一つは，対訳文からの知識獲得の前処理として，対訳コーパス自体にフィルタリング処理を行い，対訳文を絞り込む方法，もう一つは，翻訳知識構築時に対訳文を直訳部とそれ以外（意訳部）に分離し，構築条件を変える方法である．
ここでは，コーパスフィルタリング方法として，さらに２つの方法を考える．
高直訳対訳のみを用いて機械翻訳知識を自動構築した場合．
閾値を高く設定するに従い，高直訳対訳だけが残るが，部分コーパスサイズは減少するため，そこから作成した機械翻訳知識のカバレッジが低下する．
原言語が同じ対訳でグループを作成し，各グループから最高スコアを持つものを用いて機械翻訳知識を自動構築した場合．
前者に比べてすべての原言語が学習対象となるため，翻訳知識のカバレッジが下がらないが，低直訳対訳であっても，コーパス中に１回しか出現しない場合は知識構築対象となるため，文脈／状況依存訳が残る可能性がある．
[REF_sec-literalness-score]節で定義した対訳対応率TCRは，完全な文ばかりでなく，部分文(句)に対しても適用可能なスコアである．
対訳コーパスフィルタリングの場合，高直訳対訳に絞るに従い，翻訳規則のカバレッジが低下するという欠点がある．
しかし低直訳対訳でも，部分的に見ると直訳と見なせる句が存在する．
つまり，低直訳対訳の直訳部を抽出し，翻訳知識構築に利用できれば，カバレッジの低下を抑えることができる．
ここで問題となるのは，低直訳対訳中には，慣用表現など直訳では訳すべきでないものが存在する点である．
たとえば，``May I help you''を直訳すると，「あなたを助けてもよいでしょうか」になるが，「どうしましたか」と訳すのが普通である．
このような慣用表現は，かなり長単位の単語列で表現される．
両者を共存させるため，ここでは対訳を直訳部と意訳部（非直訳部）に分割し，機械翻訳知識の構築方法を変える．
すなわち，直訳部に関しては，できる限り再利用可能なように細かい単位で規則化を行い，意訳部は規則化を最小限にして翻訳知識を構築する．
具体的には以下の手順による．
階層的句アライメントを行い，句レベルの対応関係を取得する．
階層構造をトップダウンに走査し，句レベルで直訳性を測る．
直訳性スコアが閾値以上の場合，その句を直訳句と判定する．
直訳句の場合，自分自身とその下位構造を汎化し，翻訳知識を構築する．
もし，最上位構造（対訳文全体）が直訳句でない場合，直訳句までの句対応を無視した翻訳知識を構築する．
たとえば，図[REF_fig-rule-example]のように，同じ原文に対応する2つの翻訳文があったとする．
翻訳文(A)の場合は，文全体(A-1)SのTCR値は1.0である．
そのため，すべての句が汎化され，全部で6規則が生成される．
直訳から生成された規則は他の翻訳文にも適用可能な一般的な規則である．
一方，(B)では文全体(B-1)SのTCR値は0.25と低い．
しかし，部分的に見ると，名詞句「市内」と``the city''のTCR値は1.0である．
そのため，文全体のうち，句(B-2)NPだけが汎化対象となり，(B-1)Sのように，単語数の多い規則が生成される．
このように，分割構築では直訳句は本来の構文トランスファ用変換規則を生成し，意訳部からはテンプレート的パターンを生成する．
意訳から生成された規則は，入力文の単語列とほぼ完全一致した場合のみ適用されるため，異なった文脈では使われにくい規則となる．
