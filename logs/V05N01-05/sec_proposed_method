従来，コロケーションは人手によって収集・整理されてきており，自動的に抽出する方法についての研究も，その多くは連続したコロケーションの抽出に限定されていた．
そこで本論文では，そのような限定をせずにすべてのコロケーションを自動的に抽出する手法として，コーパス中の単語の位置情報を用いる方法を提案する．
コロケーションは，一般には，任意の再現する単語の組み合わせ(arbitrary and recurrent word combination)として定義される[CITE]．
しかし，この定義だけでは余りに漠然としているため，本論文では，コロケーションを以下のようにとらえる．
コロケーションは，テキスト中で頻繁に出現する(繰り返し使われる)単語の組み合わせで，同一文中に共起し，複数文にまたがらないものである．
コロケーションは，単語間の結び付きが強い単語の組み合わせであり，これらは意味的なまとまりを構成する．
また，コロケーションは，形態的な面から，次の二つのタイプに分類することができる[CITE]．
単語が隣接して強く結合して，他語の挿入や語の交換が通常なされない表現．
隣接の度合が弱く，表現中に他語の挿入も許される表現．
本論文では，(a)のタイプのコロケーションを連続型コロケーション，(b)のタイプのコロケーションを不連続型コロケーションと呼ぶ．
[REF_Subsec:def_collocation]節の条件を満たすコロケーションを自動的に抽出するために，本論文では，まずコーパス中での出現頻度の高い単語列に着目する．
しかし，単に出現頻度の高い単語列を抽出するだけでは，意味的にまとまりのない断片的な単語列が多く抽出されるので，最長一致の原則[CITE]を用いて，一度，コロケーションとみなされた単語の組み合わせが，それ以後に分割されて処理されることを避ける．
また，以下のように，連続型コロケーションと不連続型コロケーションは，別々に抽出する．
コーパス中に複数回出現する単語列(連続型コロケーション)と，複数回出現し，かつ出現ごとに隣接する単語が異なる単語を抽出する．
上記1の単語列または単語がギャップを持って(離れて)複数回共起する組み合わせが不連続型コロケーションである．
上の集計方法は，不連続型コロケーションが連続型コロケーションに比べて，その存在数(出現回数)が少ないため，出現回数をスコアとしてコロケーションを抽出した場合，不連続型コロケーションは連続型コロケーションよりも，はるかに低いスコアとなり，スコアのみにより，不連続なコロケーションを抽出するのは困難である[CITE]ことから，現実的な方法であると考える．
まず，本手法の基礎となる，単語の``位置情報''について説明する．
コーパス中のある特定の場所にある単語[MATH]の位置を，2項組[MATH]によって表す．
ここで，[MATH]は文番号(コーパス中の何番目の文であるか)を，また[MATH]は単語番号(文中の何番目の単語であるか)を示している．
単語[MATH]はコーパス中の複数箇所に出現しえるので，このような2項組のリストを考えることにより，単語[MATH]がコーパス中のどこに出現するかを把握することができる．
以下では，2項組[MATH]のリストのことを，単語[MATH]の出現位置表と呼ぶことにする．
一つ注意すべきことは，ある単語[MATH]に対し，必ずしも出現位置表を一つだけ考える必要はないという点である．
もし，単語[MATH]が異なったコンテキストで用いられていれば，コンテキストごとに単語[MATH]の出現位置表を用意してもよい．
従って，同じ単語[MATH]であっても，異なった出現位置表を持つ場合がある．
本論文では，単語[MATH]の出現するコンテキストをとらえるために，有限オートマトンを用いる．
まず，コーパス中のすべての文を受理するような有限オートマトンを構成する．
このような有限オートマトンにおいて，単語[MATH]による状態遷移はオートマトン中の複数箇所に現れる可能性があるので，各状態遷移ごとに単語[MATH]の出現位置表を作成する．
なお，本論文では，コーパスから有限オートマトンを構成するために，ALERGIAアルゴリズム[CITE]を用いる([REF_Sec:alergia_algorithm]節参照)．
本論文における自動抽出法では，ある文中の単語の組み合わせが他の文にも出現するものをその文に含まれるコロケーション(の候補)とみなす．
単語の出現位置表を用いることにより，単語間の位置関係をとらえることができるので，ある単語がコーパス中の複数の文に出現している場合，その各々の文の中での組み合わせを考慮するだけで，複数の文に対して同じ組み合わせで出現しているものを知ることができる．
[REF_Subsec:based]節で述べたように，単語の出現するコンテキストをとらえるために，本論文では有限オートマトンを用いる．
我々は，コーパス・テキストを受理するような有限オートマトンを構成するために，ALERGIAアルゴリズム[CITE]を用いた．
ALERGIAアルゴリズムは，状態マージング手法を用いて，学習データに対し最適な構造を持つオートマトンを自動的に構成する．
また，ALERGIAアルゴリズムでは，本節(3)で述べるように，状態の等価判定を行い，等価な状態をマージすることで，オートマトンを構成する．
等価判定を変化させることで，本手法で抽出される単語の組み合わせの結び付きの強さを考慮できるのではないかと考える．
以下で，ALERGIAアルゴリズムの概要を述べる．
また，図[REF_Fig:pta2dsfa]に，ALERGIAアルゴリズムを用いて，学習データ[MATH]([MATH]は空列)に対する決定性確率有限オートマトンを構成する例を示す．
図[REF_Fig:pta2dsfa](a)から(d)までの各状態の中には状態番号を記載し，各状態の下には入力記号列がその状態をたどった回数(左)とその状態で受理された回数(右)を付与している．
また，各状態遷移には``遷移記号[状態遷移を行った回数]''を付与した．
学習データから接頭木アクセプタ(Prefix Tree Acceptor; PTA)を作成する．
ここで，接頭木アクセプタとは，学習データ中の入力記号列のみを受理することが可能な決定性有限オートマトンであり，初期状態を根とした木構造となる(図[REF_Fig:pta2dsfa](a)参照)．
[MATH]を学習データが接頭木アクセプタの状態[MATH]を訪れた回数とする．
もし学習データが状態[MATH]で受理されれば，受理されたデータの個数を[MATH]とする．
状態[MATH]で受理されなければ，次の状態へ遷移するが，このとき状態遷移[MATH] (状態[MATH]で入力記号[MATH]がきたときの遷移)をたどった回数を[MATH]とする．
状態遷移[MATH]の遷移確率[MATH]は，次のようにして求められる．
なお，[MATH]は，入力記号列が状態[MATH]で受理される確率を表している．
接頭木アクセプタの状態[MATH]と状態[MATH]が等価([MATH])であれば，これら2つの状態をマージする．
ここで，状態[MATH]と状態[MATH]が等価であるとは，すべての入力記号[MATH]([MATH]は入力記号の集合)について，遷移確率[MATH]と[MATH]が等しく，遷移後の状態も等価であるときをいう．
すなわち，
状態の等価性を判断する場合，学習データに対する統計的な揺れを伴うので，二つの遷移確率の差が許容範囲にあるときに等価であるとする．
いま，確率[MATH]のベルヌイ確率変数があり，[MATH]回の試行のうち[MATH]回この事象が起こったとすると，次式が成り立つ．
ALERGIAアルゴリズムでは，学習データから推定された二つの遷移確率の差が信頼範囲[MATH]の和の範囲内にあるときに，二つの状態を確率的に等価であるとしている．
すなわち，状態[MATH]と状態[MATH]が等価であるとは，すべての入力記号[MATH]について，次式が成り立つことである．
図[REF_Fig:pta2dsfa](b)は図[REF_Fig:pta2dsfa](a)の状態[MATH]と状態[MATH]をマージした後のオートマトンである．
その後，順に状態をマージして，最終的に図[REF_Fig:pta2dsfa](e)の決定性確率有限オートマトンが得られる．
図[REF_Fig:pta2dsfa](e)の状態の中にはその状態の受理確率を記載し，各状態遷移には``遷移記号[遷移確率]''を付与している．
[REF_Sec:extract_abstract]節で述べた考えに基づいた，コロケーションの自動抽出アルゴリズムを，以下で説明する．
まず，コーパスを[MATH]と表す．
[MATH]はコーパス中の[MATH]番目の文であり，[MATH]がコーパス中の文の総数である．
また，コーパス中の文[MATH]は，[MATH]と表す．
ここで，[MATH]は，文[MATH]中の[MATH]番目の単語であり，[MATH]が文の長さ(単語長)である．
以下では，コーパス中の単語の位置を表すのに，``文番号''および``単語番号''という用語を用いる．
文番号とはコーパス中の文に対して先頭から順に付けた番号であり，単語番号とは各々の文の中で先頭から順に付けた単語の出現番号である．
すなわち，文[MATH]中の単語[MATH]に対しては，文番号は[MATH]，単語番号は[MATH]となる．
ALERGIAアルゴリズムを用いて，コーパス[MATH]を受理する決定性確率有限オートマトンを構成する．
決定性確率有限オートマトンでは，各文[MATH]に対して状態遷移が一意に定まる．
各状態遷移に対して，単語の出現位置表を作成する(図[REF_Fig:inlearn]参照)．
なお，出現位置表とは，すでに[REF_Subsec:based]節で述べたように，各単語のコーパス中の出現位置をまとめたものであり，出現位置は文番号と単語番号の2項組で表される．
位置情報は[MATH]，[MATH]の順に記録する．
図[REF_Fig:edgeattr]は，図[REF_Fig:inlearn]の処理によって作成された([MATH]中の)単語の出現位置表を示している．
各表は文[MATH]の単語``もしもし''，``通訳国際会議事務局''，``です''，``か''に対応している．
なお，ALERGIAアルゴリズムの等価判定の信頼範囲を決定する[MATH]の値によって，構築されるオートマトンの規模は変化する．
様々な[MATH]の値に対するオートマトンによって，上の手順で作成される出現位置表の総数[MATH]と各表の内容が異なる．
各表に記録される出現位置の2項組の数は状態遷移の回数である．
手順(2)から手順(6)にかけて，コーパス中の文[MATH]中のコロケーションを同定・抽出する処理を行う．
手順(1)で作成された，単語の出現位置表から，文[MATH]の単語共有表を作成する(図4参照)．
文[MATH]の単語共有表とは，文[MATH]中のすべての単語[MATH] (の状態遷移)の出現位置表を文番号の小さい順にマージして一つの表にまとめた(文[MATH]に対して固有の)ものである．
なお，図[REF_Fig:wordkyofile]において``位置番号''とあるものは，マージする前に，各単語の出現位置表に文[MATH]の単語番号[MATH]を付けて，文[MATH]の単語共有表の情報として付加したものである．
つまり，文[MATH]の単語共有表の中の情報は``文番号(出現する文の番号[MATH])''，``単語番号(文[MATH]中の単語位置)''，``位置番号(文[MATH]中の単語位置)''の3項組となる．
以下では，単語共有表の一行(3項組)を出現位置レコードと呼ぶ．
ただし，次のものは文[MATH]の単語共有表に含めない．
文番号が[MATH]である出現位置レコード．
マージしたときにその文番号を持つ出現位置が一つしかない出現位置レコード．
たとえば，図[REF_Fig:edgeattr]の出現位置表において，文番号[MATH]や[MATH]を持つ出現位置レコードがこれに該当する．
上記のものを含めない理由は，手順(3)と手順(5)で，文[MATH]の単語共有表を参照して，他の文にも出現する文[MATH]中の単語の組み合わせを探すために，文[MATH]中の単語が複数個出現する他の文番号を持つ出現位置レコードのみを，文[MATH]の単語共有表に残せばよいからである．
手順(3)から手順(6)では，他の文にも出現する文[MATH]中のパターンを抽出するために，二文(文[MATH]と他の文)中で共通して現れるパターンを抽出する処理(手順(3)，手順(5))を繰り返し，抽出されるパターンを収集する(手順(4)，手順(6))．
手順(3)と手順(4)では，抽出・収集するパターンは単語または単語列であり，手順(5)と手順(6)では，抽出・収集するパターンはギャップを持った単語の組み合わせである([REF_Subsec:auto_extract]節参照)．
手順(2)で作成した文[MATH]の単語共有表を，同一文番号を持つ出現位置レコードごとにまとめ，分割する(図[REF_Fig:tst2sp]参照)．
こうして得られた分割表のうち，文番号が[MATH]であるものをとりだし，次の抽出規則を用いて出現パターンを抽出する．
ここで抽出される出現パターンは，文[MATH]と文[MATH]の両者に現れるパターンとなる．
二つの出現位置レコード[MATH]と[MATH]([MATH])の位置番号(文[MATH]中の単語位置)を[MATH]，[MATH]と表し，単語番号(文[MATH]中の単語位置)を[MATH]，[MATH]と表すと，
[MATH]かつ[MATH]のとき，``[[MATH]の単語][[MATH]の単語]''
[MATH]かつ[MATH]のとき，``[[MATH]の単語][[MATH]の単語]''
のように前後に単語を結び付け，結び付いた単語列(二単語以上のパターン)を一つの出現パターンとする．
抽出規則1を満たす[MATH]がない場合，``[[MATH]の単語]''を一つの出現パターンとする．
上記の抽出規則により得られる出現パターンはコーパス中に最低でも2回出現するために，文[MATH]に含まれるコロケーション(またはその要素)となる可能性がある．
以上の処理を，文[MATH]の単語共有表のすべての分割表に対して行い，出現パターンをすべて抽出する．
手順(3)で抽出された出現パターン群から，位置番号の値のみの比較処理で，文[MATH]の単語パターンを収集する(図[REF_Fig:subpdel]参照)．
ここで，単語パターンとは，文[MATH]中の単語(列)が一つのまとまりとして他の文にも出現するものである．
抽出された出現パターン群から，次の収集規則により，既に抽出されたパターンに包含される断片的なパターンを削除する．
文[MATH]中で，あるパターンが抽出された場所からは，その部分パターンを抽出しないとし，部分パターンを削除する．
上の収集規則を満たすために問題となるのは，出現パターンが複数個抽出されたときに，複数の出現パターンが同じ位置番号の値の単語を持つ場合である．
その場合，出現パターン[MATH]の最小の位置番号を[MATH]，最大の位置番号を[MATH]とすると，もし[MATH]の位置番号(列)が最大値・最小値の比較によって出現パターン[MATH]([MATH])の位置番号列に包含される([MATH]かつ[MATH])ならば[MATH]を削除する．
単語パターンは文[MATH]中のパターンの位置のみで判定して収集し，以後，位置番号の情報のみを必要とする．
たとえば，複数の出現パターンの位置番号列が全く一致する場合([MATH]かつ[MATH])は，同一単語パターンであるので，どれか一つを残し，削除すればよい(図[REF_Fig:subpdel](1)(3)(5))．
収集規則で削除されずに残された出現パターンを文[MATH]の単語パターンとし，単語パターンの集合を[MATH]とする．
[MATH]中の単語列(二単語以上のパターン)を文[MATH]中の連続型コロケーションとして抽出する．
たとえば，コーパス[MATH]の文[MATH]の[MATH]からは``ですか''が抽出される．
また，[MATH]中の単語パターンは，文[MATH]中の不連続型コロケーションの構成要素となる．
手順(4)で作られた集合[MATH]中の単語パターンは，文[MATH]中の単語(列)が，コーパス中の他の文にも出現するパターンであり，文[MATH]における単語のまとまりと考えることができる．
[REF_Subsec:auto_extract]節で述べたように，文[MATH]に含まれる不連続型コロケーションは，集合[MATH]中の単語パターンが，文[MATH]の中と同じ組み合わせ(同順)で他の文中でもギャップを持って共起するものである．
文[MATH]中のどのような不連続な単語の組み合わせが他の文に出現しているかを知るために，再度，文[MATH]中と同じ単語の組み合わせが出現している他の文に対して処理を行う．
文[MATH]の単語共有表の分割表で，文番号が[MATH]であるものをとりだす．
文番号[MATH]の分割表から，手順(3)と同様の処理で抽出される二文中に共通する出現パターンが，位置番号列の比較によって，[MATH]中の単語パターンと一致するかどうかを調べる．
もし，文[MATH]との間で複数の([MATH]中の)単語パターンが共通して出現していて，かつ両方の文で同順でギャップを持って現れている場合，その単語パターンの組み合わせが文[MATH]と文[MATH]に共通して現れる不連続型コロケーションである．
以下で，処理の詳細な説明を述べる．
手順(3)で作成された文[MATH]の単語共有表の分割表のうち，文番号が[MATH]であるものをとりだし，二文(文[MATH]と文[MATH])中に共通して出現するパターンを抽出する．
ただし，この手順では，抽出された出現パターンから，次の条件を満たさないパターンを削除する(図[REF_Fig:idenexam]参照．
ただし，[MATH]は図[REF_Fig:subpdel]のものを用いている)．
[MATH]中にある単語パターンと位置番号(列)が一致するパターンであること．
条件1を満たさない出現パターンをすべて削除した後，出現パターンが，``位置番号(文[MATH]中の位置)''と``単語番号(文[MATH]中の位置)''ともに不連続な関係が成立する他の出現パターンを持つものであること．
条件1は，出現パターンの最小位置番号と最大位置番号が，[MATH]中にある単語パターンの最小位置番号と最大位置番号と完全に一致する場合のみ成立する．
たとえば，図[REF_Fig:idenexam](a)の出現パターン2と図[REF_Fig:idenexam](b)の出現パターン2は，図[REF_Fig:subpdel]の[MATH]中の単語パターン1と一致し，図[REF_Fig:idenexam](b)の出現パターン1は図[REF_Fig:subpdel]の[MATH]中の単語パターン2と一致するため，条件1を満たす．
しかし，図[REF_Fig:idenexam](a)の出現パターン1は条件1を満たさない．
次に，条件1を満たす出現パターンが一つしか存在しない場合は，条件2で比較対象となる他の出現パターンがないため，このパターンは削除する(図[REF_Fig:idenexam](a)の出現パターン2)．
もし条件1を満たす出現パターンが複数ある場合，ある出現パターンに対して，位置番号と単語番号が共に不連続な関係が成立する他の出現パターンを探す．
なお，条件2の不連続な関係は，次の不連続条件により判定できる．
ここで，条件2の判定の対象となる出現パターンを[MATH]，比較対象の他の出現パターンを[MATH]とする．
また，[MATH]を[MATH]の最小単語番号，[MATH]を[MATH]の最大単語番号とする．
最小位置番号と最大位置番号は，手順(4)と同様，[MATH]と[MATH]で表す．
[MATH]かつ[MATH]
[MATH]かつ[MATH]
不連続条件Aまたは不連続条件Bの一方を満たす場合，パターン[MATH]とパターン[MATH]の間に位置番号と単語番号とで共に不連続な関係が成立する．
二つの不連続条件を用いて条件2を満たさない出現パターンを削除する．
図[REF_Fig:idenexam](b)の場合，出現パターン1と出現パターン2の間には，位置番号(文[MATH]中の位置)と単語番号(文[MATH]中の位置)共に不連続な関係が成立する(不連続条件を満たす)ため，二つのパターンはともに条件2を満たす．
条件1と条件2を共に満たす出現パターン([MATH]中の単語パターン)が，文[MATH]に含まれる不連続型コロケーションの要素となる．
つまり，そのパターンを共有する文[MATH](図[REF_Fig:idenexam](b)の場合は[MATH])と，文[MATH]には同じ不連続な単語の組み合わせが出現する．
条件1と条件2を共に満たす出現パターンがある場合，次の手順(5.2)の処理を行い，二文中で共通する不連続型コロケーションを抽出する．
手順(5.1)で抽出された文[MATH]と文[MATH]で共通して出現する出現パターンのうちの一つを[MATH]としたときに，不連続条件Aを満たす[MATH]を持たない(両方の文で，その出現パターンより前の位置には他の出現パターンが出現していない)出現パターンが，文[MATH]と文[MATH]との間で共通して現れる不連続型コロケーションの先頭の要素である．
先頭の要素である出現パターンすべてに対して，先頭の要素ではない(両方の文で，ある出現パターンの後に出現している)出現パターンをつないで，先頭の出現パターンを根とした多分木を構成する．
以下にその多分木の構築について述べる．
最初に，先頭の要素である出現パターンを各々別の木構造の根とする．
各々の根に対してつなぐことのできる出現パターンは，根を[MATH]としたときに不連続条件Bが成立する出現パターン[MATH]のみである．
このとき，[MATH]は根[MATH]の子孫となる．
つまり，木構造の各々の節の出現パターンを[MATH]としたときに，
不連続条件Bを満たす出現パターン[MATH]が節[MATH]の子孫である．
あるいは，不連続条件Aを満たす出現パターン[MATH]が節[MATH]の祖先である．
という条件を満たし，木構造が根のみである場合は単純に根の子として直接つなげればよい．
しかし，既に根以外の節がある場合は，次のようにしてパターンを多分木につなげていく(図[REF_Fig:ctree]参照)．
節[MATH]の子孫であり，かつ節[MATH]が子パターンを持っていない場合，節[MATH]の子としてつなげる．
節[MATH]の子孫であり，かつ節[MATH]の子の祖先でもある場合，節[MATH]と節[MATH]の子の間に挿入する．
節[MATH]の子孫であり，かつ節[MATH]の子すべてに対して子孫でも祖先でもない場合，節[MATH]の子としてつなげる．
上の条件を，1，2，3の順に適用して多分木を構築する．
以上の処理に基づいて，すべての出現パターンを各々多分木につなげる．
構成されたすべての多分木を根からすべての葉までたどった各々の出現パターン([MATH]中の単語パターン)の組み合わせが，文[MATH]と文[MATH]の間で共通して出現する文[MATH]中の不連続型コロケーションである．
たとえば，図[REF_Fig:idenexam](b)の場合，文[MATH]と文[MATH]との間では，出現パターン1``もしもし''が根となり，残る出現パターン2 ``ですか''を根につなぐことになる．
``ですか''は葉となるので，根からたどったパターン``もしもし〜ですか''が文[MATH]と文[MATH]で共通して出現する不連続型コロケーションとして抽出される．
手順(5)を文[MATH]の単語共有表のすべての分割表に対して行い，抽出される二文(文[MATH]と他の文)中で共通して出現する[MATH]中の単語パターンの組み合わせ(不連続型コロケーション)から，文[MATH]中の不連続型コロケーションを重複しないように収集する．
まず，抽出された各々の不連続型コロケーション[MATH]の先頭の要素である単語パターンと，不連続型コロケーション[MATH] [MATH]の先頭の要素である単語パターンの位置番号列を比較する．
位置番号列が一致した場合は，次の要素同士を比較するという処理を繰り返す．
すべての単語パターンが一致すれば，[MATH]と[MATH]を文[MATH]の同じ不連続型コロケーションとし，一致しない要素が一つでもあれば，[MATH]と[MATH]は文[MATH]中の異なる不連続型コロケーションとする．
コーパス中のすべての文に対して手順(2)から手順(6)の処理を行い，各文に含まれる連続型および不連続型コロケーション(の候補)を手順(4)と手順(6)で抽出する．
コーパス全体でのコロケーションを集計するために，抽出された連続型および不連続型コロケーションを，各々単語の組み合わせそのもの(文字列)の比較により，同じものが抽出された回数を求める．
以上，手順(1)から手順(7)で，コロケーションの抽出法を述べてきた．
手順(1)と手順(7)のみで若干の文字列処理を必要とするほかは，すべて整数(位置情報)の比較演算のみで行うことができる．
また，各文[MATH][MATH]が含むコロケーションの抽出処理は，各々独立したものであり，分割処理を行うことで，計算機の負荷を軽くすることができる．
本手法の処理の特徴を次に示す．
各単語間の距離値そのものを扱うのではなく，各単語の関係を``連続''か``不連続''かのみとして考える．
意味的にまとまりのない断片的な単語列の抽出を防ぐために，池原ら[CITE]のように最長一致の原則により単語列の長いものだけを抽出する．
多分木を構築することで一度の処理で，すべての任意の長さの不連続型コロケーションを抽出する．
コーパス全体に含まれるコロケーションだけではなく，任意の文(または任意の範囲の文)に含まれるコロケーションを知りたい場合にも適する．
処理するコーパスを大きくしたい場合，位置情報を追加または新規作成するだけでよい．
従来，コロケーションは人手によって収集・整理されてきており，自動的に抽出する方法についての研究も，その多くは連続したコロケーションの抽出に限定されていた．
そこで本論文では，そのような限定をせずにすべてのコロケーションを自動的に抽出する手法として，コーパス中の単語の位置情報を用いる方法を提案する．
コロケーションは，一般には，任意の再現する単語の組み合わせ(arbitrary and recurrent word combination)として定義される[CITE]．
しかし，この定義だけでは余りに漠然としているため，本論文では，コロケーションを以下のようにとらえる．
コロケーションは，テキスト中で頻繁に出現する(繰り返し使われる)単語の組み合わせで，同一文中に共起し，複数文にまたがらないものである．
コロケーションは，単語間の結び付きが強い単語の組み合わせであり，これらは意味的なまとまりを構成する．
また，コロケーションは，形態的な面から，次の二つのタイプに分類することができる[CITE]．
単語が隣接して強く結合して，他語の挿入や語の交換が通常なされない表現．
隣接の度合が弱く，表現中に他語の挿入も許される表現．
本論文では，(a)のタイプのコロケーションを連続型コロケーション，(b)のタイプのコロケーションを不連続型コロケーションと呼ぶ．
[REF_Subsec:def_collocation]節の条件を満たすコロケーションを自動的に抽出するために，本論文では，まずコーパス中での出現頻度の高い単語列に着目する．
しかし，単に出現頻度の高い単語列を抽出するだけでは，意味的にまとまりのない断片的な単語列が多く抽出されるので，最長一致の原則[CITE]を用いて，一度，コロケーションとみなされた単語の組み合わせが，それ以後に分割されて処理されることを避ける．
また，以下のように，連続型コロケーションと不連続型コロケーションは，別々に抽出する．
コーパス中に複数回出現する単語列(連続型コロケーション)と，複数回出現し，かつ出現ごとに隣接する単語が異なる単語を抽出する．
上記1の単語列または単語がギャップを持って(離れて)複数回共起する組み合わせが不連続型コロケーションである．
上の集計方法は，不連続型コロケーションが連続型コロケーションに比べて，その存在数(出現回数)が少ないため，出現回数をスコアとしてコロケーションを抽出した場合，不連続型コロケーションは連続型コロケーションよりも，はるかに低いスコアとなり，スコアのみにより，不連続なコロケーションを抽出するのは困難である[CITE]ことから，現実的な方法であると考える．
まず，本手法の基礎となる，単語の``位置情報''について説明する．
コーパス中のある特定の場所にある単語[MATH]の位置を，2項組[MATH]によって表す．
ここで，[MATH]は文番号(コーパス中の何番目の文であるか)を，また[MATH]は単語番号(文中の何番目の単語であるか)を示している．
単語[MATH]はコーパス中の複数箇所に出現しえるので，このような2項組のリストを考えることにより，単語[MATH]がコーパス中のどこに出現するかを把握することができる．
以下では，2項組[MATH]のリストのことを，単語[MATH]の出現位置表と呼ぶことにする．
一つ注意すべきことは，ある単語[MATH]に対し，必ずしも出現位置表を一つだけ考える必要はないという点である．
もし，単語[MATH]が異なったコンテキストで用いられていれば，コンテキストごとに単語[MATH]の出現位置表を用意してもよい．
従って，同じ単語[MATH]であっても，異なった出現位置表を持つ場合がある．
本論文では，単語[MATH]の出現するコンテキストをとらえるために，有限オートマトンを用いる．
まず，コーパス中のすべての文を受理するような有限オートマトンを構成する．
このような有限オートマトンにおいて，単語[MATH]による状態遷移はオートマトン中の複数箇所に現れる可能性があるので，各状態遷移ごとに単語[MATH]の出現位置表を作成する．
なお，本論文では，コーパスから有限オートマトンを構成するために，ALERGIAアルゴリズム[CITE]を用いる([REF_Sec:alergia_algorithm]節参照)．
本論文における自動抽出法では，ある文中の単語の組み合わせが他の文にも出現するものをその文に含まれるコロケーション(の候補)とみなす．
単語の出現位置表を用いることにより，単語間の位置関係をとらえることができるので，ある単語がコーパス中の複数の文に出現している場合，その各々の文の中での組み合わせを考慮するだけで，複数の文に対して同じ組み合わせで出現しているものを知ることができる．
[REF_Subsec:based]節で述べたように，単語の出現するコンテキストをとらえるために，本論文では有限オートマトンを用いる．
我々は，コーパス・テキストを受理するような有限オートマトンを構成するために，ALERGIAアルゴリズム[CITE]を用いた．
ALERGIAアルゴリズムは，状態マージング手法を用いて，学習データに対し最適な構造を持つオートマトンを自動的に構成する．
また，ALERGIAアルゴリズムでは，本節(3)で述べるように，状態の等価判定を行い，等価な状態をマージすることで，オートマトンを構成する．
等価判定を変化させることで，本手法で抽出される単語の組み合わせの結び付きの強さを考慮できるのではないかと考える．
以下で，ALERGIAアルゴリズムの概要を述べる．
また，図[REF_Fig:pta2dsfa]に，ALERGIAアルゴリズムを用いて，学習データ[MATH]([MATH]は空列)に対する決定性確率有限オートマトンを構成する例を示す．
図[REF_Fig:pta2dsfa](a)から(d)までの各状態の中には状態番号を記載し，各状態の下には入力記号列がその状態をたどった回数(左)とその状態で受理された回数(右)を付与している．
また，各状態遷移には``遷移記号[状態遷移を行った回数]''を付与した．
学習データから接頭木アクセプタ(Prefix Tree Acceptor; PTA)を作成する．
ここで，接頭木アクセプタとは，学習データ中の入力記号列のみを受理することが可能な決定性有限オートマトンであり，初期状態を根とした木構造となる(図[REF_Fig:pta2dsfa](a)参照)．
[MATH]を学習データが接頭木アクセプタの状態[MATH]を訪れた回数とする．
もし学習データが状態[MATH]で受理されれば，受理されたデータの個数を[MATH]とする．
状態[MATH]で受理されなければ，次の状態へ遷移するが，このとき状態遷移[MATH] (状態[MATH]で入力記号[MATH]がきたときの遷移)をたどった回数を[MATH]とする．
状態遷移[MATH]の遷移確率[MATH]は，次のようにして求められる．
なお，[MATH]は，入力記号列が状態[MATH]で受理される確率を表している．
接頭木アクセプタの状態[MATH]と状態[MATH]が等価([MATH])であれば，これら2つの状態をマージする．
ここで，状態[MATH]と状態[MATH]が等価であるとは，すべての入力記号[MATH]([MATH]は入力記号の集合)について，遷移確率[MATH]と[MATH]が等しく，遷移後の状態も等価であるときをいう．
すなわち，
状態の等価性を判断する場合，学習データに対する統計的な揺れを伴うので，二つの遷移確率の差が許容範囲にあるときに等価であるとする．
いま，確率[MATH]のベルヌイ確率変数があり，[MATH]回の試行のうち[MATH]回この事象が起こったとすると，次式が成り立つ．
ALERGIAアルゴリズムでは，学習データから推定された二つの遷移確率の差が信頼範囲[MATH]の和の範囲内にあるときに，二つの状態を確率的に等価であるとしている．
すなわち，状態[MATH]と状態[MATH]が等価であるとは，すべての入力記号[MATH]について，次式が成り立つことである．
図[REF_Fig:pta2dsfa](b)は図[REF_Fig:pta2dsfa](a)の状態[MATH]と状態[MATH]をマージした後のオートマトンである．
その後，順に状態をマージして，最終的に図[REF_Fig:pta2dsfa](e)の決定性確率有限オートマトンが得られる．
図[REF_Fig:pta2dsfa](e)の状態の中にはその状態の受理確率を記載し，各状態遷移には``遷移記号[遷移確率]''を付与している．
[REF_Sec:extract_abstract]節で述べた考えに基づいた，コロケーションの自動抽出アルゴリズムを，以下で説明する．
まず，コーパスを[MATH]と表す．
[MATH]はコーパス中の[MATH]番目の文であり，[MATH]がコーパス中の文の総数である．
また，コーパス中の文[MATH]は，[MATH]と表す．
ここで，[MATH]は，文[MATH]中の[MATH]番目の単語であり，[MATH]が文の長さ(単語長)である．
以下では，コーパス中の単語の位置を表すのに，``文番号''および``単語番号''という用語を用いる．
文番号とはコーパス中の文に対して先頭から順に付けた番号であり，単語番号とは各々の文の中で先頭から順に付けた単語の出現番号である．
すなわち，文[MATH]中の単語[MATH]に対しては，文番号は[MATH]，単語番号は[MATH]となる．
ALERGIAアルゴリズムを用いて，コーパス[MATH]を受理する決定性確率有限オートマトンを構成する．
決定性確率有限オートマトンでは，各文[MATH]に対して状態遷移が一意に定まる．
各状態遷移に対して，単語の出現位置表を作成する(図[REF_Fig:inlearn]参照)．
なお，出現位置表とは，すでに[REF_Subsec:based]節で述べたように，各単語のコーパス中の出現位置をまとめたものであり，出現位置は文番号と単語番号の2項組で表される．
位置情報は[MATH]，[MATH]の順に記録する．
図[REF_Fig:edgeattr]は，図[REF_Fig:inlearn]の処理によって作成された([MATH]中の)単語の出現位置表を示している．
各表は文[MATH]の単語``もしもし''，``通訳国際会議事務局''，``です''，``か''に対応している．
なお，ALERGIAアルゴリズムの等価判定の信頼範囲を決定する[MATH]の値によって，構築されるオートマトンの規模は変化する．
様々な[MATH]の値に対するオートマトンによって，上の手順で作成される出現位置表の総数[MATH]と各表の内容が異なる．
各表に記録される出現位置の2項組の数は状態遷移の回数である．
手順(2)から手順(6)にかけて，コーパス中の文[MATH]中のコロケーションを同定・抽出する処理を行う．
手順(1)で作成された，単語の出現位置表から，文[MATH]の単語共有表を作成する(図4参照)．
文[MATH]の単語共有表とは，文[MATH]中のすべての単語[MATH] (の状態遷移)の出現位置表を文番号の小さい順にマージして一つの表にまとめた(文[MATH]に対して固有の)ものである．
なお，図[REF_Fig:wordkyofile]において``位置番号''とあるものは，マージする前に，各単語の出現位置表に文[MATH]の単語番号[MATH]を付けて，文[MATH]の単語共有表の情報として付加したものである．
つまり，文[MATH]の単語共有表の中の情報は``文番号(出現する文の番号[MATH])''，``単語番号(文[MATH]中の単語位置)''，``位置番号(文[MATH]中の単語位置)''の3項組となる．
以下では，単語共有表の一行(3項組)を出現位置レコードと呼ぶ．
ただし，次のものは文[MATH]の単語共有表に含めない．
文番号が[MATH]である出現位置レコード．
マージしたときにその文番号を持つ出現位置が一つしかない出現位置レコード．
たとえば，図[REF_Fig:edgeattr]の出現位置表において，文番号[MATH]や[MATH]を持つ出現位置レコードがこれに該当する．
上記のものを含めない理由は，手順(3)と手順(5)で，文[MATH]の単語共有表を参照して，他の文にも出現する文[MATH]中の単語の組み合わせを探すために，文[MATH]中の単語が複数個出現する他の文番号を持つ出現位置レコードのみを，文[MATH]の単語共有表に残せばよいからである．
手順(3)から手順(6)では，他の文にも出現する文[MATH]中のパターンを抽出するために，二文(文[MATH]と他の文)中で共通して現れるパターンを抽出する処理(手順(3)，手順(5))を繰り返し，抽出されるパターンを収集する(手順(4)，手順(6))．
手順(3)と手順(4)では，抽出・収集するパターンは単語または単語列であり，手順(5)と手順(6)では，抽出・収集するパターンはギャップを持った単語の組み合わせである([REF_Subsec:auto_extract]節参照)．
手順(2)で作成した文[MATH]の単語共有表を，同一文番号を持つ出現位置レコードごとにまとめ，分割する(図[REF_Fig:tst2sp]参照)．
こうして得られた分割表のうち，文番号が[MATH]であるものをとりだし，次の抽出規則を用いて出現パターンを抽出する．
ここで抽出される出現パターンは，文[MATH]と文[MATH]の両者に現れるパターンとなる．
二つの出現位置レコード[MATH]と[MATH]([MATH])の位置番号(文[MATH]中の単語位置)を[MATH]，[MATH]と表し，単語番号(文[MATH]中の単語位置)を[MATH]，[MATH]と表すと，
[MATH]かつ[MATH]のとき，``[[MATH]の単語][[MATH]の単語]''
[MATH]かつ[MATH]のとき，``[[MATH]の単語][[MATH]の単語]''
のように前後に単語を結び付け，結び付いた単語列(二単語以上のパターン)を一つの出現パターンとする．
抽出規則1を満たす[MATH]がない場合，``[[MATH]の単語]''を一つの出現パターンとする．
上記の抽出規則により得られる出現パターンはコーパス中に最低でも2回出現するために，文[MATH]に含まれるコロケーション(またはその要素)となる可能性がある．
以上の処理を，文[MATH]の単語共有表のすべての分割表に対して行い，出現パターンをすべて抽出する．
手順(3)で抽出された出現パターン群から，位置番号の値のみの比較処理で，文[MATH]の単語パターンを収集する(図[REF_Fig:subpdel]参照)．
ここで，単語パターンとは，文[MATH]中の単語(列)が一つのまとまりとして他の文にも出現するものである．
抽出された出現パターン群から，次の収集規則により，既に抽出されたパターンに包含される断片的なパターンを削除する．
文[MATH]中で，あるパターンが抽出された場所からは，その部分パターンを抽出しないとし，部分パターンを削除する．
上の収集規則を満たすために問題となるのは，出現パターンが複数個抽出されたときに，複数の出現パターンが同じ位置番号の値の単語を持つ場合である．
その場合，出現パターン[MATH]の最小の位置番号を[MATH]，最大の位置番号を[MATH]とすると，もし[MATH]の位置番号(列)が最大値・最小値の比較によって出現パターン[MATH]([MATH])の位置番号列に包含される([MATH]かつ[MATH])ならば[MATH]を削除する．
単語パターンは文[MATH]中のパターンの位置のみで判定して収集し，以後，位置番号の情報のみを必要とする．
たとえば，複数の出現パターンの位置番号列が全く一致する場合([MATH]かつ[MATH])は，同一単語パターンであるので，どれか一つを残し，削除すればよい(図[REF_Fig:subpdel](1)(3)(5))．
収集規則で削除されずに残された出現パターンを文[MATH]の単語パターンとし，単語パターンの集合を[MATH]とする．
[MATH]中の単語列(二単語以上のパターン)を文[MATH]中の連続型コロケーションとして抽出する．
たとえば，コーパス[MATH]の文[MATH]の[MATH]からは``ですか''が抽出される．
また，[MATH]中の単語パターンは，文[MATH]中の不連続型コロケーションの構成要素となる．
手順(4)で作られた集合[MATH]中の単語パターンは，文[MATH]中の単語(列)が，コーパス中の他の文にも出現するパターンであり，文[MATH]における単語のまとまりと考えることができる．
[REF_Subsec:auto_extract]節で述べたように，文[MATH]に含まれる不連続型コロケーションは，集合[MATH]中の単語パターンが，文[MATH]の中と同じ組み合わせ(同順)で他の文中でもギャップを持って共起するものである．
文[MATH]中のどのような不連続な単語の組み合わせが他の文に出現しているかを知るために，再度，文[MATH]中と同じ単語の組み合わせが出現している他の文に対して処理を行う．
文[MATH]の単語共有表の分割表で，文番号が[MATH]であるものをとりだす．
文番号[MATH]の分割表から，手順(3)と同様の処理で抽出される二文中に共通する出現パターンが，位置番号列の比較によって，[MATH]中の単語パターンと一致するかどうかを調べる．
もし，文[MATH]との間で複数の([MATH]中の)単語パターンが共通して出現していて，かつ両方の文で同順でギャップを持って現れている場合，その単語パターンの組み合わせが文[MATH]と文[MATH]に共通して現れる不連続型コロケーションである．
以下で，処理の詳細な説明を述べる．
手順(3)で作成された文[MATH]の単語共有表の分割表のうち，文番号が[MATH]であるものをとりだし，二文(文[MATH]と文[MATH])中に共通して出現するパターンを抽出する．
ただし，この手順では，抽出された出現パターンから，次の条件を満たさないパターンを削除する(図[REF_Fig:idenexam]参照．
ただし，[MATH]は図[REF_Fig:subpdel]のものを用いている)．
[MATH]中にある単語パターンと位置番号(列)が一致するパターンであること．
条件1を満たさない出現パターンをすべて削除した後，出現パターンが，``位置番号(文[MATH]中の位置)''と``単語番号(文[MATH]中の位置)''ともに不連続な関係が成立する他の出現パターンを持つものであること．
条件1は，出現パターンの最小位置番号と最大位置番号が，[MATH]中にある単語パターンの最小位置番号と最大位置番号と完全に一致する場合のみ成立する．
たとえば，図[REF_Fig:idenexam](a)の出現パターン2と図[REF_Fig:idenexam](b)の出現パターン2は，図[REF_Fig:subpdel]の[MATH]中の単語パターン1と一致し，図[REF_Fig:idenexam](b)の出現パターン1は図[REF_Fig:subpdel]の[MATH]中の単語パターン2と一致するため，条件1を満たす．
しかし，図[REF_Fig:idenexam](a)の出現パターン1は条件1を満たさない．
次に，条件1を満たす出現パターンが一つしか存在しない場合は，条件2で比較対象となる他の出現パターンがないため，このパターンは削除する(図[REF_Fig:idenexam](a)の出現パターン2)．
もし条件1を満たす出現パターンが複数ある場合，ある出現パターンに対して，位置番号と単語番号が共に不連続な関係が成立する他の出現パターンを探す．
なお，条件2の不連続な関係は，次の不連続条件により判定できる．
ここで，条件2の判定の対象となる出現パターンを[MATH]，比較対象の他の出現パターンを[MATH]とする．
また，[MATH]を[MATH]の最小単語番号，[MATH]を[MATH]の最大単語番号とする．
最小位置番号と最大位置番号は，手順(4)と同様，[MATH]と[MATH]で表す．
[MATH]かつ[MATH]
[MATH]かつ[MATH]
不連続条件Aまたは不連続条件Bの一方を満たす場合，パターン[MATH]とパターン[MATH]の間に位置番号と単語番号とで共に不連続な関係が成立する．
二つの不連続条件を用いて条件2を満たさない出現パターンを削除する．
図[REF_Fig:idenexam](b)の場合，出現パターン1と出現パターン2の間には，位置番号(文[MATH]中の位置)と単語番号(文[MATH]中の位置)共に不連続な関係が成立する(不連続条件を満たす)ため，二つのパターンはともに条件2を満たす．
条件1と条件2を共に満たす出現パターン([MATH]中の単語パターン)が，文[MATH]に含まれる不連続型コロケーションの要素となる．
つまり，そのパターンを共有する文[MATH](図[REF_Fig:idenexam](b)の場合は[MATH])と，文[MATH]には同じ不連続な単語の組み合わせが出現する．
条件1と条件2を共に満たす出現パターンがある場合，次の手順(5.2)の処理を行い，二文中で共通する不連続型コロケーションを抽出する．
手順(5.1)で抽出された文[MATH]と文[MATH]で共通して出現する出現パターンのうちの一つを[MATH]としたときに，不連続条件Aを満たす[MATH]を持たない(両方の文で，その出現パターンより前の位置には他の出現パターンが出現していない)出現パターンが，文[MATH]と文[MATH]との間で共通して現れる不連続型コロケーションの先頭の要素である．
先頭の要素である出現パターンすべてに対して，先頭の要素ではない(両方の文で，ある出現パターンの後に出現している)出現パターンをつないで，先頭の出現パターンを根とした多分木を構成する．
以下にその多分木の構築について述べる．
最初に，先頭の要素である出現パターンを各々別の木構造の根とする．
各々の根に対してつなぐことのできる出現パターンは，根を[MATH]としたときに不連続条件Bが成立する出現パターン[MATH]のみである．
このとき，[MATH]は根[MATH]の子孫となる．
つまり，木構造の各々の節の出現パターンを[MATH]としたときに，
不連続条件Bを満たす出現パターン[MATH]が節[MATH]の子孫である．
あるいは，不連続条件Aを満たす出現パターン[MATH]が節[MATH]の祖先である．
という条件を満たし，木構造が根のみである場合は単純に根の子として直接つなげればよい．
しかし，既に根以外の節がある場合は，次のようにしてパターンを多分木につなげていく(図[REF_Fig:ctree]参照)．
節[MATH]の子孫であり，かつ節[MATH]が子パターンを持っていない場合，節[MATH]の子としてつなげる．
節[MATH]の子孫であり，かつ節[MATH]の子の祖先でもある場合，節[MATH]と節[MATH]の子の間に挿入する．
節[MATH]の子孫であり，かつ節[MATH]の子すべてに対して子孫でも祖先でもない場合，節[MATH]の子としてつなげる．
上の条件を，1，2，3の順に適用して多分木を構築する．
以上の処理に基づいて，すべての出現パターンを各々多分木につなげる．
構成されたすべての多分木を根からすべての葉までたどった各々の出現パターン([MATH]中の単語パターン)の組み合わせが，文[MATH]と文[MATH]の間で共通して出現する文[MATH]中の不連続型コロケーションである．
たとえば，図[REF_Fig:idenexam](b)の場合，文[MATH]と文[MATH]との間では，出現パターン1``もしもし''が根となり，残る出現パターン2 ``ですか''を根につなぐことになる．
``ですか''は葉となるので，根からたどったパターン``もしもし〜ですか''が文[MATH]と文[MATH]で共通して出現する不連続型コロケーションとして抽出される．
手順(5)を文[MATH]の単語共有表のすべての分割表に対して行い，抽出される二文(文[MATH]と他の文)中で共通して出現する[MATH]中の単語パターンの組み合わせ(不連続型コロケーション)から，文[MATH]中の不連続型コロケーションを重複しないように収集する．
まず，抽出された各々の不連続型コロケーション[MATH]の先頭の要素である単語パターンと，不連続型コロケーション[MATH] [MATH]の先頭の要素である単語パターンの位置番号列を比較する．
位置番号列が一致した場合は，次の要素同士を比較するという処理を繰り返す．
すべての単語パターンが一致すれば，[MATH]と[MATH]を文[MATH]の同じ不連続型コロケーションとし，一致しない要素が一つでもあれば，[MATH]と[MATH]は文[MATH]中の異なる不連続型コロケーションとする．
コーパス中のすべての文に対して手順(2)から手順(6)の処理を行い，各文に含まれる連続型および不連続型コロケーション(の候補)を手順(4)と手順(6)で抽出する．
コーパス全体でのコロケーションを集計するために，抽出された連続型および不連続型コロケーションを，各々単語の組み合わせそのもの(文字列)の比較により，同じものが抽出された回数を求める．
以上，手順(1)から手順(7)で，コロケーションの抽出法を述べてきた．
手順(1)と手順(7)のみで若干の文字列処理を必要とするほかは，すべて整数(位置情報)の比較演算のみで行うことができる．
また，各文[MATH][MATH]が含むコロケーションの抽出処理は，各々独立したものであり，分割処理を行うことで，計算機の負荷を軽くすることができる．
本手法の処理の特徴を次に示す．
各単語間の距離値そのものを扱うのではなく，各単語の関係を``連続''か``不連続''かのみとして考える．
意味的にまとまりのない断片的な単語列の抽出を防ぐために，池原ら[CITE]のように最長一致の原則により単語列の長いものだけを抽出する．
多分木を構築することで一度の処理で，すべての任意の長さの不連続型コロケーションを抽出する．
コーパス全体に含まれるコロケーションだけではなく，任意の文(または任意の範囲の文)に含まれるコロケーションを知りたい場合にも適する．
処理するコーパスを大きくしたい場合，位置情報を追加または新規作成するだけでよい．
