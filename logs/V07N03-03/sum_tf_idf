================================================================
[section type  : abstract]
[section title : abstract]
================================================================
[i:0, score:0.42725] 形態素解析処理において，日本語などのわかち書きされない言語と英語などのわかち書きされる言語では，形態素辞書検索のタイミングや辞書検索単位が異なる．
[i:1, score:0.15305] 本論文ではこれらの言語で共通に利用できる形態素解析の枠組の提案と，それに基づいた多言語形態素解析システムを実装を行った．
[i:2, score:0.04772] また，日本語，英語，中国語での解析実験も行った．

================================================================
[section type  : intro]
[section title : はじめに]
================================================================
[i:11, score:0.20531] 形態素解析は自然言語処理における基本的なコンポーネントであるが，ミクロな視点から見れば形態素解析処理自体も複数のコンポーネントからなりたっている．
[i:16, score:0.26730] [REF_comp]章では，形態素解析システムの主要な内部処理のコンポーネント化を行い，それを基に形態素解析ツールキットの実装を行った．
[i:17, score:0.20039] 個別のコンポーネントについての言語非依存性と汎用性を考察し，実装の方針について解説する．

================================================================
[section type  : proposed_method]
[section title : 言語に依存しないトークン認識と辞書検索]
================================================================
[i:22, score:0.39598] トークンを発展させた概念が本論文で提案する形態素片である．
[i:41, score:0.44445] トークンの処理はわかち書きされる言語とわかち書きされない言語ではまったく異なるとみなされてきた．
[i:44, score:0.48724] 本章ではわかち書きされる言語とされない言語のトークン認識方法の違いに着目し，どちらの表記法にも適応できる統一的な枠組を提案する．
-----------------------------------------------------
  [subsection title : わかち書きされる言語とされない言語の処理の違い]
-----------------------------------------------------
  [i:lead, score:0.52685] わかち書きされない言語では，トークン認識は全ての文字をトークンとして認識すれば良い．
.....
  [i:47, score:0.52685] わかち書きされない言語では，トークン認識は全ての文字をトークンとして認識すれば良い．
  [i:54, score:0.50023] このような，わかち書きされる言語とされない言語のトークン認識処理の違いは，辞書検索の方法に影響を与える．
  [i:57, score:0.57610] 一方，わかち書きされない言語では文は明白な単語区切りを持っていないため，辞書検索ではシステムは全ての部分トークン列(部分文字列)が語辞書に存在するかそれぞれ問い合わせる必要がある．
-----------------------------------------------------
  [subsection title : 1 トークン = 1 語 の問題]
-----------------------------------------------------
  [i:lead, score:0.40801] わかち書きされる言語でも，単語は常に明白な単語境界文字列で区切られているわけではない．
.....
  [i:68, score:0.40801] わかち書きされる言語でも，単語は常に明白な単語境界文字列で区切られているわけではない．
  [i:74, score:0.33747] これは，わかち書きされる言語の「文の認識」という大きな課題であり，Palmerら[CITE]によって研究されている．
  [i:95, score:0.59093] 彼らはわかち書きされる語のイディオムや定型表現などを扱うため，空白文字を含む語の辞書登録を可能にし，トークン認識時にそれらをTable-look-up matchingという方法で検索をする．
-----------------------------------------------------
  [subsection title : 形態素片]
-----------------------------------------------------
  [i:lead, score:0.42104] [REF_1t=1l]節で述べたように，わかち書きされる言語は単語境界が明白であると考えられてきたにもかかわらず，単語内区切り曖昧性，複合語の問題がある．
.....
  [i:127, score:0.57569] この形態素片を各言語ごとに定義すれば，本節冒頭の英語の例のような非論理的な曖昧性を含むことなく，わかち書きされる言語とされない言語を統一的に扱える．
  [i:148, score:0.60590] 形態素片は辞書を引き始める位置と引き終える位置を明確にし，わかち書きされる言語でも，効率的な共通接頭辞検索を可能にする概念である．
  [i:151, score:0.65954] わかち書きされる言語である英語を例に考えてみると「デリミタと記号文字で区切られる文字(アルファベット)の連続」と「記号文字」の二種類が形態素片となり，形態素片認識にはデリミタと記号文字を定義する必要があることが分かる．

================================================================
[section type  : proposed_method]
[section title : コンポーネント化と実装]
================================================================
[i:199, score:0.37405] 形態素片列に対し語辞書検索を行い品詞候補，及び，語自体のコストを与える．
[i:207, score:0.48663] これらのコンポーネントのうちで言語依存性の高いものは，形態素片認識，辞書検索，未定義語処理である．
[i:208, score:0.35983] 形態素片認識と辞書検索は形態素片の導入により，言語依存部分がほぼ解消されたと言える．
-----------------------------------------------------
  [subsection title : 辞書検索]
-----------------------------------------------------
  [i:lead, score:0.45393] 辞書検索コンポーネントは形態素片列として認識された文から可能性のある語全てを辞書から獲得する．
.....
  [i:212, score:0.45393] 辞書検索コンポーネントは形態素片列として認識された文から可能性のある語全てを辞書から獲得する．
  [i:225, score:0.24831] Websterら[CITE]はこのような連続した文字列で表現できないイディオム，定型表現などを形態素解析処理の段階で扱うために，辞書検索とパージングの知識・処理を融合するという枠組を提案している．
  [i:226, score:0.30351] コンポーネント化設計により，文字列として連続していない語の認識処理も，他のコンポーネントに影響を与えないように辞書検索コンポーネントなどの内部で実装できる．
-----------------------------------------------------
  [subsection title : 最適解選択処理]
-----------------------------------------------------
  [i:lead, score:0.05736] 我々はHMMによる最適解の選択方法を採用した．
.....
  [i:235, score:0.34828] 特定の言語のために形態素解析を行うためにユーザが必要なものは，形態素片認識を行うための情報と，語と接続表(HMMパラメータ)だけである．
  [i:237, score:0.18657] 形態素情報管理コンポーネントは，前述の方法により最尤解選択を行う．
  [i:242, score:0.19991] 状態遷移表管理コンポーネントは，現在の状態と次の品詞をキーに状態遷移のコストと遷移先状態を返すという単純な仕事をする．
-----------------------------------------------------
  [subsection title : 未定義語処理]
-----------------------------------------------------
  [i:lead, score:0.22954] 未定義語処理コンポーネントは辞書に登録されていない語に対して品詞推定を行う．
.....
  [i:262, score:0.53111] しかし，本研究では形態素片という概念を導入したため，わかち書きされる言語でも問題になるようになった．
  [i:263, score:0.44486] 未定義語に複合語は無いと仮定すれば，ある位置から始まり次のデリミタまで間の全ての部分形態素片列を未定義語の候補とすれば良い．
  [i:271, score:0.41776] 未定義語の長さの決定:「形態素片」「字種によるまとまり」「デリミタに挟まれた領域」を未定義語を構成する単位に選択でき，未定義語を構成する「最大単位数」も指定できる
-----------------------------------------------------
  [subsection title : ツールキットによる形態素解析システムの実装]
-----------------------------------------------------
  [i:lead, score:0.14295] LimaTKを用いて，簡単な多言語対応形態素解析システム\mozを作成した．
.....
  [i:275, score:0.16956] 各行はそれぞれ一つの形態素を表し，各列は左から，「見出し文字列」「各形態素の持つコスト」「品詞コード」「状態コード」「解析には用いないその他の情報(角括弧で囲まれている)」となっている．
  [i:277, score:0.17719] RWCPの品詞タグ付きコーパス[CITE](約92万形態素)から品詞trigramモデルでパラメータ学習を行い，さらに茶筌[CITE]の語辞書エントリを追加した．
  [i:279, score:0.22986] Penn Treebank[CITE]の品詞タグ付きコーパス(約128万形態素)から品詞trigramモデルで学習を行い，電子化テキスト版Oxford Advanced Learner's Dictionary[CITE]の辞書エントリを追加した．

================================================================
[section type  : related_study]
[section title : 関連研究]
================================================================
[i:286, score:0.49326] Websterら[CITE]はわかち書きされる言語(英語)のイディオムや定型表現が扱えるように，英語のデリミタで区切られた単位をわかち書きされない言語(中国語を想定している)の文字に対応させわかち書きされない言語での解析方法を適用している．
[i:295, score:0.54215] 我々は，わかち書きされる言語で考えられる分割の可能性，及び，わかち書きされる言語とされない言語との整合性も考慮し，形態素片という概念を導入した．
[i:303, score:0.54910] 1文字≠1形態素片(わかち書きされる言語)

================================================================
[section type  : conclusion]
[section title : おわりに]
================================================================
[i:307, score:0.29114] 本論文では，言語に依存しない形態素解析の枠組の提案と，形態素解析の内部処理のコンポーネント化によるツールキットの設計・実装を行った．
[i:308, score:0.61951] 従来は，わかち書きするか否かという言語の特徴により大きく処理が異なる形態素解析処理を，形態素片という辞書検索単位を定義したことにより，言語非依存の共通の枠組で行えるようになった．
[i:309, score:0.23085] また，形態素解析の内部処理のコンポーネント化により，言語非依存化のみならず様々な改良や他の言語処理への適用が行いやすくなった．

