点字翻訳(以下,本文中では点訳と称する)は一般に図[REF_fig:a0]に示したような手順で行われる.
すなわち,漢字かな混じり文を点字の規則に従って分かち書きを行ったのち,漢字に読みをつけ,読みを表音文字体系に変換し,最後に点字出力形態に合わせて点字を出力する.
従来この作業は,点訳ボランティアによりすべて手作業で行われていた.
一字一字点筆を用いて打点するため,修正するにはそのページ全体を打ち直す必要があり,非常に時間がかかる.
最近,パソコンで動作する点訳プログラムが入手できるようになって点訳の効率は格段に上がった.
しかし完全自動化には限界があり,点訳プログラムはあまり利用されていない.
その主な原因は,次の2点と考えられる.
通常の自然言語処理における形態素解析や構文解析では点字特有のパターンを全て表現するのは困難であり,文節レベルより細かい区切りが必要とされる.
このため,点訳ボランティアは点訳プログラムで区切り処理されたカナあるいは点字の文章全体を再度見直す必要がある.
日本語の漢字は複数の読みをもつものが多く,読みを一意に決定することは困難である.
従って,点訳ボランティアは点訳プログラムが与えた読みについても見直して修正する必要がある.
原因(１)について補足説明する.
第一番目の問題として形式名詞の問題がある.
形式名詞を要素として含む助動詞「(〜する)ことだ」の場合,一般の形態素解析では直前の文節に続けて一つの文節とされるが,点字の場合は「こと」の前で区切らなければならない.
第二番目に複合語の問題がある.
「漢語+する」の形のサ変名詞は,「研究する」だと点字の分かち書きでは区切らない.
しかし,これが複合語化して「共同研究する」となった場合は,「共同」「研究」「する」と3つに区切らなければならない.
日本語のように漢字を組み合わせて容易に新しい単語を作る言語の場合,従来の形態素解析は複合語を構成する基本となる漢字2字熟語,漢字3字熟語を辞書に登録しておくことで処理を行う.
しかし,点字の分かち書きの場合,その単語が何文字の熟語から構成されているかが認定されるだけでは正しく分かち書きを行うことができない.
いくつの漢字2字熟語,漢字3字熟語が組み合わされているか,という情報が必要になる.
日本語文の文節区切りは従来,点訳の分かち書き用としてではなく,機械翻訳,日本語によるデータベース検索,文書校正支援等のための形態素解析として,佐藤[CITE],長尾[CITE]らによって研究されてきた.
これらの手法は大規模な文法情報付きの辞書をそれぞれ独自に用意して形態素解析を行うものであった.
一方,最近では言語資源の共有やモジュラリティの観点から春野[CITE],颯々野[CITE],松本[CITE]らがより実用的な形態素解析システムについて提案している.
これらのシステムは形態素解析結果の曖昧性については考慮しているが,第一候補のみを示す一括処理を基本としている点,文節より細かい分割レベルの解析は行わない点などの理由で,点訳へ直ちに適用するには困難がある.
一般の形態素解析では与えられた入力文に対して単語辞書や文法辞書,それにユーザ辞書などを用いて処理が行われ,文節と認定された単位で区切られる.
機械翻訳に用いられる場合と音声合成のために用いられる場合とでは,文節の単位が異なり,一意に決定できるものではない.
このような形態素解析方式を点訳に適用するには以下のような問題点があると考えられる.
点訳に必要な分かち書きの単位としては,一般の形態素解析によって決定される文節よりもさらに細かく分割する必要がある.
後に続く処理のフィードバックによって前の処理の誤りが発見,修正される一般の自然言語処理と異なり,形態素解析の誤りをその後の点訳処理で回復することが難しい.
点訳のための分かち書きでは,「連濁」や複合語化によって区切り方が変わるにもかかわらず,従来の形態素解析ではそのような「読み」や複合情報までの詳しい出力が得られない.
複合情報とは,点訳のための分かち書きに必要となる連濁や複合語の語数などを示す情報のことである.
前述のような問題点をふまえ,筆者らは従来より行われてきた形態素解析に用いられるような大規模な辞書と文法規則を用いず,簡便な表層解析のみを行うことによって分かち書きを行い[CITE],対話的に誤りを修正していくことを試みている[CITE], [CITE].
対話機能を導入することにより点訳ボランティアの見直しの手間が軽減され,点訳作業にかかる時間の大幅な短縮が期待される.
本システムの基本方針は次の4点である.
{
{分かち書きの処理を自動分割と対話処理の2段階で行う.
}
{文法情報を含まない単語のみからなる7種類のテーブルを用いて表層解析を行う.
}
{自動分割の際に用いる分かち書きの規則を表層情報に基づく知識に書き換え,知識ベース化する(以下,知識ベースAと称する).
}
{自動分割による分かち書きが疑わしい箇所および,表層情報では一意に決定できない分かち書き箇所を対話処理でユーザに提示するための規則を知識ベース化する(以下,知識ベースBと称する).
}
}
今回構築した試作システムの構成を図[REF_fig:c]に示す.
本システムは自動分割部と対話処理部の２つから構成される.
自動分割部では以下のような処理を行う.
最初に入力文から,各種テーブルと字種情報を用いて表層情報を抽出する.
ここで得られた表層情報を基に,知識ベースAの知識を用いて分かち書き箇所を決定する.
分かち書きの知識が競合した場合には,優先点数の高い知識を優先する.
自動分割部では熟練ボランティアによって作成された正しく分かち書きされたファイル(以後「正解ファイル」と称する)を用いて知識ベースAの知識をチューニングするための機能をもつ.
対話処理部では,自動分割部の処理結果のうち,信頼性が低い箇所を知識ベースBを用いてユーザに示したり,自動分割に用いた知識を表示したりする.
ユーザはシステムによって指摘された箇所のみを順にチェックすることにより,容易に分かち書きを行うことができる.
それぞれの処理について順に説明する.
本システムが行っている表層解析について説明する.
ここで表層解析とは,漢字かな混じりテキストの字面から判別できる字種や,以下に示す表層情報を抽出することである.
具体的には,表[REF_bt-tables]に示す7種類のテーブル名が示す情報を表層情報と定義し,文中のどこからどこまでがそれぞれのテーブルの要素と一致したかを調べる.
形態素解析では辞書をひいて単語ごとに文法情報を得,文法情報に基づいて単語の連接を詳しく調べていくのに対して,表層解析では,文に出現する文字列の表層情報をテーブルを参照しながらチェックするだけで,前後の語と語の関係については考慮しない.
本システムの表層解析で用いるテーブルはここに示した7つであり,従来の形態素解析辞書のような文法情報は持っていない.
ひらがな書きの自立語テーブル以外はすべて単語のみからなる.
ひらがな書き自立語テーブルでは,各ひらがな自立語ごとに,その前および後で区切るかどうかの情報を持たせている.
ひらがな書き自立語とは「しかし」「はっきり」のようなすべてひらがなで表記される自立語を指す.
これらは表層解析の際,分かち書きの重要な目安となる助詞との区別がつきにくいうえ,ひらがな書き自立語どうしが接続した際,分かち書きを誤る可能性が高い.
例えば,「しかし」は独立して出現するので「しかし」の前後は分かち書きを行なう,すなわち「前後で区切る」となる(表[REF_bt-tables]の例参照).
「はっきり」の場合,「はっきりと」「はっきりした」「はっきり／示す」というように後続する語によって後ろの分かち書き方が変化する.
従って,「はっきり」については「前で区切る」となる(表[REF_bt-tables]の例参照).
これらのテーブルはEDR日本電子化辞書研究所の「日本語基本単語辞書」から情報処理関連の単語を抽出し,ひらがな書き自立語については区切り方の情報を人手により入力した.
また,接頭語,接尾語については文献[CITE]を参照し,実際のテキストから抽出して作成した.
ひらがな書き自立語以外のテーブルは単語のみからなるため,語の追加・削除が容易
である.
また,ひらがな書き自立語についてもユーザは容易に修正できる.
分かち書きに必要な知識を表[REF_知識ベースAの知識一覧]に示す.
ここで表 [REF_知識ベースAの知識一覧]の第3列目に表現されている「知識」内の言葉について説明を加えておく.
分かち書きには3種類の区切り方がある.
1つ目が語と語の間に1文字分のスペースをあけることで,表中,「区切る」とはスペース(空白)をおくことを意味する.
とくに「2回区切る」とは, 2つのスペースを連続して置くことで,このようなことは句点の後や倒置文において生じる.
3つ目がスペースをあけずに続けて書く場合で,これを「区切らない」と書く.
知識の総数は現在のところ39個である.
知識は以下の４種に大別できる.
句点,かっこ,スペースに関する知識
点訳のための分かち書きを行う上で,必ず守らなければならない知識を導入した.
これらの知識には高い優先点数を与えた.
字種の変わり目に関する知識
字種の変わり目に着目した知識を導入した.
様々な字種の組合せについて11個の知識で対応する.
漢字熟語,ひらがな書きの自立語,混ぜ書き語,助詞,接頭語・接尾語に関する知識
字種の情報だけでは区切り方の曖昧な箇所について各種テーブルから得られる表層情報を基に区切り方を決定するための知識を導入した.
その他に関する知識
上記(1)〜(3)を用いても区切り方が曖昧な箇所に対して導入した.
知識の獲得は,通常のエキスパートシステムにおける知識ベースの構築手順に従って行った.
手順としては,「点訳の手引」等に示されている分かち書きの規則のうち,表層情報を用いて記述できるものを知識として知識ベースに加えた.
表 [REF_知識ベースAの知識一覧]のうち,句読点の分類の1-1, 1-2, 1-3,助詞の4-1, 4-2がこれにあたる.
また,「点訳の手引」では学校文法風に記述されている規則,例えば,「自立語の前を区切る」という規則を表層情報を用いて記述し,知識ベースに加えた.
表[REF_知識ベースAの知識一覧]における字種の変わり目の分類にある, 3-1〜3-11, 5-1〜5-3, 6-1, 6-2がこの例である.
また,予備実験の結果,表[REF_知識ベースAの知識一覧]のその他, 10-1〜10-6のような知識を知識ベースに加えた.
これらは情報処理関連の文献に出現することが多く,表情情報を用いて表現可能な知識である.
このようにして知識を記述していくが,表層情報だけでは記述不可能な規則については対話処理で取り扱う.
知識同士が競合した場合にどの知識を選択するかを決定するために各知識には優先点数を設定した.
例えば,「機械的」のような漢字列について考える.
「機械」は漢字2字熟語のため,表[REF_知識ベースAの知識一覧]の知識7-2により,「械」と「的」の間を区切るという規則が適用される.
一方,知識8-2により,接尾語の前は区切らないという規則が適用され,知識が競合する.
この際,それぞれの知識に付与されている優先点数をみると, 7-2の知識が1点, 8-2の知識が2点で, 8-2の知識の方が優先度が高いことがわかる.
よってこの場合,知識8-2が適用され,「械」と「的」の間は区切らない.
これは分かち書きとしては正解となる.
知識ベースAのチューニングのため,我々は熟練ボランティアによって正しく分かち書きされた正解ファイルを用意した.
正解ファイルを用いることにより,知識ベースAの知識によって正しく区切られる箇所を知ることができ,知識のチューニングを容易に行えるようにした.
例えば表[REF_知識ベースAの知識一覧]の知識1-3は以下のように簡潔に表現するようにした.
ここで,右辺の第1項が知識の識別番号,第2項が優先点数,第3項が知識適用の条件部,第4項がその知識を適用した場合の区切り方である.
第4項については前述のとおり「区切らない」「区切る」「2回区切る」の3通りがある.
我々の提案する分かち書き知識は,文字と文字の間に注目して,その文字間を「区切らない」か,「区切る」か「2回区切る」かを順次判断していく.
自動分割では,ユーザはツールバーに表示されているボタンをクリックすることにより,あるいはメニューバーからプルダウン式に表示されるメニューを選択することにより,「一段落ごと」あるいは「全文一括」のモードで分かち書きを行うことができる.
「全文一括」モードでは,文書の全段落の現在何段落目を処理中であるかがダイアログボックスに表示される.
対話処理部における知識の構築の基本方針は次の２つである.
{分かち書きの規則のうち,表層情報だけでは曖昧で区切り方を一意に決定できない規則を知識とした.
}
{自動分割処理の結果,誤っている可能性が高い区切り箇所の特徴をまとめて知識とした.
}
(1)については例えば,点訳のための分かち書きの規則として,
{助動詞の「ない」の前は区切らない}
{形容詞の「ない」の前は区切る}
という規則がある.
この場合,「ない」の品詞が決定できないと正しく分かち書きが行われない.
我々が今回採用している表層解析では「ない」の字種と「ひらがな書き自立語」であるという情報しかもたないため,「ない」の直前の区切りは常に曖昧である.
このような分かち書き規則に対し,対話処理で用いる知識ベースBでは「『ない』の直前の区切りは曖昧であるのでユーザに提示する」という結論部によりユーザの指示を待つ.
(2)については,「情報通信」のような漢字熟語の場合,正しくは「情報」と「通信」に分かち書きされなければならない.
しかし漢字2字熟語,漢字3字熟語の２つの漢字テーブルを検索すると「情報」,「通信」,「情報通」が登録されている.
本来ならばここで,「情報」＋「通信」で「情報通信」という組合せが尤もらしいと判断されるべきである.
しかし,「流体力学」のような漢字熟語の場合,「流体」「体力」「力学」と分割可能で,熟語が長くなればその組合せはさらに増える.
ところで,表層解析では語と語の組合せ(前後の語の接続関係や,オーバーラップしているかどうか,熟語のすべての文字列がテーブルによってカバーされているかどうか,等)についてはチェックしない(3.2.1節参照).
このために「情報通信」の例では,「情報通」が優先されて「情報通」「信」というように誤って分かち書きされてしまう.
今回我々は簡便な前方最長一致の手法を用いることとしたため,漢字熟語の区切りはこのような誤りが多いことから,知識ベースBに「漢字連続部は分かち書きを誤る可能性が高い」ということでユーザに提示する.
この漢字熟語分割手法についてはさらに検討を要する.
自動分割における分かち書きが終了すると文書には分かち書きの区切りを表す赤いスラッシュと知識ベースBによって指摘された緑の三角と赤い網かけが表示される.
図[REF_実行例]中,スラッシュ2本が連続している箇所は「2回区切る」ことを現している.
ユーザはそれぞれの文字間の区切りを見て,分かち書きに疑問がある場合は区切り箇所にマウスカーソルを合わせ,右ボタンをクリックすることにより,自動分割で使用されている分かち書きの知識を知ることができる.
区切りを削除したい箇所では,削除したい区切りの上にマウスカーソルを合わせてマウスの左ボタンをクリックするだけでよい.
反対に区切りを挿入したい箇所についても,区切りたい文字間にマウスカーソルを合わせて左ボタンをクリックすることによって区切りを挿入できる.
図[REF_実行例]は自動分割処理の後,どのような知識によって区切られているか(いないか)をダイアログボックスを開いて表示している画面である.
ユーザはこれを見て,必要に応じて分かち書きの知識の追加,修正,削除を行うこともできる.
また実用段階において,もし熟練ボランティアによってあらかじめ正解ファイルが与えられていれば,ユーザが行った区切りと用意された正解の区切りとを比較することによりユーザ自身の見落としやすい箇所や区切り過ぎている箇所を知ることができる.
さらに,正解と比較した分かち書きの精度を計算させることも可能である.
このような機能は初級点訳ボランティアの教育システムとしての可能性を示しているといえる.
点字翻訳(以下,本文中では点訳と称する)は一般に図[REF_fig:a0]に示したような手順で行われる.
すなわち,漢字かな混じり文を点字の規則に従って分かち書きを行ったのち,漢字に読みをつけ,読みを表音文字体系に変換し,最後に点字出力形態に合わせて点字を出力する.
従来この作業は,点訳ボランティアによりすべて手作業で行われていた.
一字一字点筆を用いて打点するため,修正するにはそのページ全体を打ち直す必要があり,非常に時間がかかる.
最近,パソコンで動作する点訳プログラムが入手できるようになって点訳の効率は格段に上がった.
しかし完全自動化には限界があり,点訳プログラムはあまり利用されていない.
その主な原因は,次の2点と考えられる.
通常の自然言語処理における形態素解析や構文解析では点字特有のパターンを全て表現するのは困難であり,文節レベルより細かい区切りが必要とされる.
このため,点訳ボランティアは点訳プログラムで区切り処理されたカナあるいは点字の文章全体を再度見直す必要がある.
日本語の漢字は複数の読みをもつものが多く,読みを一意に決定することは困難である.
従って,点訳ボランティアは点訳プログラムが与えた読みについても見直して修正する必要がある.
原因(１)について補足説明する.
第一番目の問題として形式名詞の問題がある.
形式名詞を要素として含む助動詞「(〜する)ことだ」の場合,一般の形態素解析では直前の文節に続けて一つの文節とされるが,点字の場合は「こと」の前で区切らなければならない.
第二番目に複合語の問題がある.
「漢語+する」の形のサ変名詞は,「研究する」だと点字の分かち書きでは区切らない.
しかし,これが複合語化して「共同研究する」となった場合は,「共同」「研究」「する」と3つに区切らなければならない.
日本語のように漢字を組み合わせて容易に新しい単語を作る言語の場合,従来の形態素解析は複合語を構成する基本となる漢字2字熟語,漢字3字熟語を辞書に登録しておくことで処理を行う.
しかし,点字の分かち書きの場合,その単語が何文字の熟語から構成されているかが認定されるだけでは正しく分かち書きを行うことができない.
いくつの漢字2字熟語,漢字3字熟語が組み合わされているか,という情報が必要になる.
日本語文の文節区切りは従来,点訳の分かち書き用としてではなく,機械翻訳,日本語によるデータベース検索,文書校正支援等のための形態素解析として,佐藤[CITE],長尾[CITE]らによって研究されてきた.
これらの手法は大規模な文法情報付きの辞書をそれぞれ独自に用意して形態素解析を行うものであった.
一方,最近では言語資源の共有やモジュラリティの観点から春野[CITE],颯々野[CITE],松本[CITE]らがより実用的な形態素解析システムについて提案している.
これらのシステムは形態素解析結果の曖昧性については考慮しているが,第一候補のみを示す一括処理を基本としている点,文節より細かい分割レベルの解析は行わない点などの理由で,点訳へ直ちに適用するには困難がある.
一般の形態素解析では与えられた入力文に対して単語辞書や文法辞書,それにユーザ辞書などを用いて処理が行われ,文節と認定された単位で区切られる.
機械翻訳に用いられる場合と音声合成のために用いられる場合とでは,文節の単位が異なり,一意に決定できるものではない.
このような形態素解析方式を点訳に適用するには以下のような問題点があると考えられる.
点訳に必要な分かち書きの単位としては,一般の形態素解析によって決定される文節よりもさらに細かく分割する必要がある.
後に続く処理のフィードバックによって前の処理の誤りが発見,修正される一般の自然言語処理と異なり,形態素解析の誤りをその後の点訳処理で回復することが難しい.
点訳のための分かち書きでは,「連濁」や複合語化によって区切り方が変わるにもかかわらず,従来の形態素解析ではそのような「読み」や複合情報までの詳しい出力が得られない.
複合情報とは,点訳のための分かち書きに必要となる連濁や複合語の語数などを示す情報のことである.
前述のような問題点をふまえ,筆者らは従来より行われてきた形態素解析に用いられるような大規模な辞書と文法規則を用いず,簡便な表層解析のみを行うことによって分かち書きを行い[CITE],対話的に誤りを修正していくことを試みている[CITE], [CITE].
対話機能を導入することにより点訳ボランティアの見直しの手間が軽減され,点訳作業にかかる時間の大幅な短縮が期待される.
本システムの基本方針は次の4点である.
{
{分かち書きの処理を自動分割と対話処理の2段階で行う.
}
{文法情報を含まない単語のみからなる7種類のテーブルを用いて表層解析を行う.
}
{自動分割の際に用いる分かち書きの規則を表層情報に基づく知識に書き換え,知識ベース化する(以下,知識ベースAと称する).
}
{自動分割による分かち書きが疑わしい箇所および,表層情報では一意に決定できない分かち書き箇所を対話処理でユーザに提示するための規則を知識ベース化する(以下,知識ベースBと称する).
}
}
今回構築した試作システムの構成を図[REF_fig:c]に示す.
本システムは自動分割部と対話処理部の２つから構成される.
自動分割部では以下のような処理を行う.
最初に入力文から,各種テーブルと字種情報を用いて表層情報を抽出する.
ここで得られた表層情報を基に,知識ベースAの知識を用いて分かち書き箇所を決定する.
分かち書きの知識が競合した場合には,優先点数の高い知識を優先する.
自動分割部では熟練ボランティアによって作成された正しく分かち書きされたファイル(以後「正解ファイル」と称する)を用いて知識ベースAの知識をチューニングするための機能をもつ.
対話処理部では,自動分割部の処理結果のうち,信頼性が低い箇所を知識ベースBを用いてユーザに示したり,自動分割に用いた知識を表示したりする.
ユーザはシステムによって指摘された箇所のみを順にチェックすることにより,容易に分かち書きを行うことができる.
それぞれの処理について順に説明する.
本システムが行っている表層解析について説明する.
ここで表層解析とは,漢字かな混じりテキストの字面から判別できる字種や,以下に示す表層情報を抽出することである.
具体的には,表[REF_bt-tables]に示す7種類のテーブル名が示す情報を表層情報と定義し,文中のどこからどこまでがそれぞれのテーブルの要素と一致したかを調べる.
形態素解析では辞書をひいて単語ごとに文法情報を得,文法情報に基づいて単語の連接を詳しく調べていくのに対して,表層解析では,文に出現する文字列の表層情報をテーブルを参照しながらチェックするだけで,前後の語と語の関係については考慮しない.
本システムの表層解析で用いるテーブルはここに示した7つであり,従来の形態素解析辞書のような文法情報は持っていない.
ひらがな書きの自立語テーブル以外はすべて単語のみからなる.
ひらがな書き自立語テーブルでは,各ひらがな自立語ごとに,その前および後で区切るかどうかの情報を持たせている.
ひらがな書き自立語とは「しかし」「はっきり」のようなすべてひらがなで表記される自立語を指す.
これらは表層解析の際,分かち書きの重要な目安となる助詞との区別がつきにくいうえ,ひらがな書き自立語どうしが接続した際,分かち書きを誤る可能性が高い.
例えば,「しかし」は独立して出現するので「しかし」の前後は分かち書きを行なう,すなわち「前後で区切る」となる(表[REF_bt-tables]の例参照).
「はっきり」の場合,「はっきりと」「はっきりした」「はっきり／示す」というように後続する語によって後ろの分かち書き方が変化する.
従って,「はっきり」については「前で区切る」となる(表[REF_bt-tables]の例参照).
これらのテーブルはEDR日本電子化辞書研究所の「日本語基本単語辞書」から情報処理関連の単語を抽出し,ひらがな書き自立語については区切り方の情報を人手により入力した.
また,接頭語,接尾語については文献[CITE]を参照し,実際のテキストから抽出して作成した.
ひらがな書き自立語以外のテーブルは単語のみからなるため,語の追加・削除が容易
である.
また,ひらがな書き自立語についてもユーザは容易に修正できる.
分かち書きに必要な知識を表[REF_知識ベースAの知識一覧]に示す.
ここで表 [REF_知識ベースAの知識一覧]の第3列目に表現されている「知識」内の言葉について説明を加えておく.
分かち書きには3種類の区切り方がある.
1つ目が語と語の間に1文字分のスペースをあけることで,表中,「区切る」とはスペース(空白)をおくことを意味する.
とくに「2回区切る」とは, 2つのスペースを連続して置くことで,このようなことは句点の後や倒置文において生じる.
3つ目がスペースをあけずに続けて書く場合で,これを「区切らない」と書く.
知識の総数は現在のところ39個である.
知識は以下の４種に大別できる.
句点,かっこ,スペースに関する知識
点訳のための分かち書きを行う上で,必ず守らなければならない知識を導入した.
これらの知識には高い優先点数を与えた.
字種の変わり目に関する知識
字種の変わり目に着目した知識を導入した.
様々な字種の組合せについて11個の知識で対応する.
漢字熟語,ひらがな書きの自立語,混ぜ書き語,助詞,接頭語・接尾語に関する知識
字種の情報だけでは区切り方の曖昧な箇所について各種テーブルから得られる表層情報を基に区切り方を決定するための知識を導入した.
その他に関する知識
上記(1)〜(3)を用いても区切り方が曖昧な箇所に対して導入した.
知識の獲得は,通常のエキスパートシステムにおける知識ベースの構築手順に従って行った.
手順としては,「点訳の手引」等に示されている分かち書きの規則のうち,表層情報を用いて記述できるものを知識として知識ベースに加えた.
表 [REF_知識ベースAの知識一覧]のうち,句読点の分類の1-1, 1-2, 1-3,助詞の4-1, 4-2がこれにあたる.
また,「点訳の手引」では学校文法風に記述されている規則,例えば,「自立語の前を区切る」という規則を表層情報を用いて記述し,知識ベースに加えた.
表[REF_知識ベースAの知識一覧]における字種の変わり目の分類にある, 3-1〜3-11, 5-1〜5-3, 6-1, 6-2がこの例である.
また,予備実験の結果,表[REF_知識ベースAの知識一覧]のその他, 10-1〜10-6のような知識を知識ベースに加えた.
これらは情報処理関連の文献に出現することが多く,表情情報を用いて表現可能な知識である.
このようにして知識を記述していくが,表層情報だけでは記述不可能な規則については対話処理で取り扱う.
知識同士が競合した場合にどの知識を選択するかを決定するために各知識には優先点数を設定した.
例えば,「機械的」のような漢字列について考える.
「機械」は漢字2字熟語のため,表[REF_知識ベースAの知識一覧]の知識7-2により,「械」と「的」の間を区切るという規則が適用される.
一方,知識8-2により,接尾語の前は区切らないという規則が適用され,知識が競合する.
この際,それぞれの知識に付与されている優先点数をみると, 7-2の知識が1点, 8-2の知識が2点で, 8-2の知識の方が優先度が高いことがわかる.
よってこの場合,知識8-2が適用され,「械」と「的」の間は区切らない.
これは分かち書きとしては正解となる.
知識ベースAのチューニングのため,我々は熟練ボランティアによって正しく分かち書きされた正解ファイルを用意した.
正解ファイルを用いることにより,知識ベースAの知識によって正しく区切られる箇所を知ることができ,知識のチューニングを容易に行えるようにした.
例えば表[REF_知識ベースAの知識一覧]の知識1-3は以下のように簡潔に表現するようにした.
ここで,右辺の第1項が知識の識別番号,第2項が優先点数,第3項が知識適用の条件部,第4項がその知識を適用した場合の区切り方である.
第4項については前述のとおり「区切らない」「区切る」「2回区切る」の3通りがある.
我々の提案する分かち書き知識は,文字と文字の間に注目して,その文字間を「区切らない」か,「区切る」か「2回区切る」かを順次判断していく.
自動分割では,ユーザはツールバーに表示されているボタンをクリックすることにより,あるいはメニューバーからプルダウン式に表示されるメニューを選択することにより,「一段落ごと」あるいは「全文一括」のモードで分かち書きを行うことができる.
「全文一括」モードでは,文書の全段落の現在何段落目を処理中であるかがダイアログボックスに表示される.
対話処理部における知識の構築の基本方針は次の２つである.
{分かち書きの規則のうち,表層情報だけでは曖昧で区切り方を一意に決定できない規則を知識とした.
}
{自動分割処理の結果,誤っている可能性が高い区切り箇所の特徴をまとめて知識とした.
}
(1)については例えば,点訳のための分かち書きの規則として,
{助動詞の「ない」の前は区切らない}
{形容詞の「ない」の前は区切る}
という規則がある.
この場合,「ない」の品詞が決定できないと正しく分かち書きが行われない.
我々が今回採用している表層解析では「ない」の字種と「ひらがな書き自立語」であるという情報しかもたないため,「ない」の直前の区切りは常に曖昧である.
このような分かち書き規則に対し,対話処理で用いる知識ベースBでは「『ない』の直前の区切りは曖昧であるのでユーザに提示する」という結論部によりユーザの指示を待つ.
(2)については,「情報通信」のような漢字熟語の場合,正しくは「情報」と「通信」に分かち書きされなければならない.
しかし漢字2字熟語,漢字3字熟語の２つの漢字テーブルを検索すると「情報」,「通信」,「情報通」が登録されている.
本来ならばここで,「情報」＋「通信」で「情報通信」という組合せが尤もらしいと判断されるべきである.
しかし,「流体力学」のような漢字熟語の場合,「流体」「体力」「力学」と分割可能で,熟語が長くなればその組合せはさらに増える.
ところで,表層解析では語と語の組合せ(前後の語の接続関係や,オーバーラップしているかどうか,熟語のすべての文字列がテーブルによってカバーされているかどうか,等)についてはチェックしない(3.2.1節参照).
このために「情報通信」の例では,「情報通」が優先されて「情報通」「信」というように誤って分かち書きされてしまう.
今回我々は簡便な前方最長一致の手法を用いることとしたため,漢字熟語の区切りはこのような誤りが多いことから,知識ベースBに「漢字連続部は分かち書きを誤る可能性が高い」ということでユーザに提示する.
この漢字熟語分割手法についてはさらに検討を要する.
自動分割における分かち書きが終了すると文書には分かち書きの区切りを表す赤いスラッシュと知識ベースBによって指摘された緑の三角と赤い網かけが表示される.
図[REF_実行例]中,スラッシュ2本が連続している箇所は「2回区切る」ことを現している.
ユーザはそれぞれの文字間の区切りを見て,分かち書きに疑問がある場合は区切り箇所にマウスカーソルを合わせ,右ボタンをクリックすることにより,自動分割で使用されている分かち書きの知識を知ることができる.
区切りを削除したい箇所では,削除したい区切りの上にマウスカーソルを合わせてマウスの左ボタンをクリックするだけでよい.
反対に区切りを挿入したい箇所についても,区切りたい文字間にマウスカーソルを合わせて左ボタンをクリックすることによって区切りを挿入できる.
図[REF_実行例]は自動分割処理の後,どのような知識によって区切られているか(いないか)をダイアログボックスを開いて表示している画面である.
ユーザはこれを見て,必要に応じて分かち書きの知識の追加,修正,削除を行うこともできる.
また実用段階において,もし熟練ボランティアによってあらかじめ正解ファイルが与えられていれば,ユーザが行った区切りと用意された正解の区切りとを比較することによりユーザ自身の見落としやすい箇所や区切り過ぎている箇所を知ることができる.
さらに,正解と比較した分かち書きの精度を計算させることも可能である.
このような機能は初級点訳ボランティアの教育システムとしての可能性を示しているといえる.
