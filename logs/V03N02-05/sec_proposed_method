ある単語が現れるか否かだけでなく，単語間の関係すなわち係り受け関係をも指定して用例を検索することができれば，ある言い回しを含んだ文を検索することや，ある意味内容を含んだ文を検索することなど，検索対象をさらに絞り込んだ高度の検索をすることができる．
そのためには，単語，品詞などの形態素情報をタグとして付加するだけでは不十分で，構文情報が付与されたコーパスを作成しなければならない．
しかし，完全な構文解析には意味情報も必要であり，長文を含む大量のテキストに対して安定的に高い精度で構文解析を行なうことは現在のところ未だ困難である．
そこで，我々は，完全な構文解析木を得るものではないが，文の骨格的な構造を表層情報のみを用いて解析する方法を開発した[CITE]．
この方法は，意味を考慮しないと正確に解析できない部分については，曖昧なまま残しておき，それ以外の文全体の構造を正確に把握しようとするものである．
本研究では，対訳付の辞書用例8万文について，骨格構造解析により構文付きコーパスの作成を行なった．
このうち200文を取り出して解析結果を評価したところ，骨格構造解析結果中に正しい解析木を含んでいるものは約93%，その中で，係り先が曖昧な文節は約8%であった．
以下2.1節で骨格構造解析の概要を述べ，2.2節で構文付コーパスの作成実験について述べる．
骨格構造解析は次の２段階により行なう．
(1)形態素解析を行なって文節列を求め，係り受けに関する文節の属性(文節カテゴリ)を求める．
(2)文節カテゴリと以下に述べるブロック化規則に基づいて文節列に次々とN近傍ブロック化処理を施す．
N近傍ブロック化とは隣接するN文節(あるいはNブロック)間の係り受け関係を定めることであり，場合によっては曖昧な係り受け関係をそのまま含む．
このように本手法では，係り受け関係は隣接するN近傍において構成されるという仮説に基づいている．
実際にはN=3として解析している．
まず始めに，文を単語単位に分割し，それらを文節単位に区切る．
そして，各文節の形態素情報を元に文節カテゴリを付与する．
文節カテゴリとは，文節自身のタイプ(自立語の品詞)と係り先文節のタイプによりカテゴライズしたもので，文節自身のタイプを，体(名詞)，用(動詞，形容詞，形容動詞)，副(副詞，連体詞)，接(接続詞)の４つのに大分類し，これらの組合せにより「体用」「体体」などの１０種のカテゴリを設けた．
その他に，文節が並列構造を構成する可能性があることを示す「体並，用並」，主題を表す機能語「は・では」が含まれる文節「は用」，時を表す名詞が含まれる文節「時用」の４つのカテゴリを設けている．
ブロック化処理では，Nブロック先までを係り受けの範囲として調べる．
N=3とした時，ブロック内の係り受け可能性の組合せは文節カテゴリに基づけば，図[REF_block-rule]に示す[MATH]通りが考えられる．
このうち，図[REF_block-rule](a)--(l)の30通りがブロック化可能なパターンである．
例えば，図[REF_block-rule](a)の場合は，文節Aは文節Bに係ると解析され，文節A,Bを１つのブロックとしてブロック化を行う．
また，ブロック化が可能なパターンの中で，図[REF_block-rule](h)(i)(j)(l)については，曖昧さを含んだブロックとして解析される．
例えば，図[REF_block-rule](h)の場合は，文節Aは文節Bか文節Cに係ると解析される．
その他のパターン(34通り)は，ブロック化が不可能なパターンである．
図[REF_block-rule](m)の8通りは文節AがB,C,Dのいずれにも係りえないためブロック化が不可能なパターン，図[REF_block-rule](n)--(q)の10通りは，非交差条件によりブロック化できないパターン，図[REF_block-rule](r)--(w)の16通りは，文節カテゴリの組合せにより出現しえないパターンである．
ブロック化の途中で，読点が出現した時は，その文節までをブロック化の範囲として解析し，ブロック化を一時中断しておく(読点ブロック)．
ここで，Nブロック前か，直前の読点文節のいづれか遠いブロックに戻り，ブロック化が可能な状態に変化しているかどうか順次調べ，その後，読点ブロックの次の文節を起点とするブロック化処理を行う．
また，係り可能性のパターンが図[REF_block-rule](m)--(q)に該当する時には，ブロック化が行われず，必然的にブロック化が停止する．
この場合も，読点で停止した時と同様の処理を行う
このようにして，N文節よりも遠い文節と係り受け関係をもつことが可能となるが，この場合でも，ブロックで見るとその関係はＮブロック以内になっている．
[ht]
ブロック化処理の手順例を図[REF_skelton-ana]に示す．
文頭より解析を始め「一度」から「汚れた」，「汚れた」から「環境を」，「環境を」から「戻す」までにブロック化規則，図[REF_block-rule]-(a),(a),(f)をそれぞれ適用してブロック化を施す(図[REF_skelton-ana]-(1))．
次に，先にブロック化された「一度…戻す」から「難しさを」までをブロック化する．
これにより「戻す」の係り先は「ことの」と「難しさを」の２通りがあると解析される．
その後「難しさを」から「体験している」，「体験している」から「日本は，」までをブロック化する(図[REF_skelton-ana]-(3))．
文節カテゴリ「は用」は主題を表す文節であって，一般に後続するいくつかの文節に係る可能性がある．
そのため，このような文節の係り先は保留して，次の文節「技術援助の」からブロック化を行う．
以下，同様に解析を進める．
[htb]
\unitlength 1cm
(14.47, 3) \thicklines \put(0,2.7) {一度汚れた環境を元に戻すことの難しさを身をもって体験している日本は，技術援助の先進国となり，…}
本実験では，講談社和英辞典[CITE]とオーム社科学技術和英大辞典[CITE]の中の英語対訳付き用例文約8万文(図[REF_text])に対して骨格構造解析を行ない図[REF_skeltal-data]のような構文付きコーパスを作成した．
[htb]
\fbox{\parbox[t]{110mm}{
[t]{107mm} 0:原テキスト
彼の言っていることは事実と合わぬ
1:骨格構造データ
(@1 ((彼@2)の体用) @2 ((言う@3)ている用体) @3 ((こと@5)は体用)
@4 ((事実@5)と体用) @5 ((合う)ぬ用終))
2:意味分類コード化データ
(@1 (((1100001 1200003) @2)の体用)
@2 (((2310002 2312001) @3)ている用体)
@3 (((1101001 1112002 1254003 1310101…) @5)は体用)
@4 (((1103001) @5)と体用)
@5 (((2112003 2155001 2375001))ぬ用終))
3:対訳英文
His testimony does not agree with the facts.
}}
骨格構造データは，原テキストに骨格構造解析を施したものである．
実験では，形態素解析用の自立語辞書としてはＥＤＲ日本語単語辞書[CITE]より単語の見出し・品詞情報のみを取り出したものを，機能語辞書については我々が実際のテキストベースから収集し拡張，整理した複合機能語辞書(約200のグループ，見出し語数約1500語)[CITE]を用いた．
データは次のような形式で登録されている．
(・・・(文節番号((自立語係り先文節列) 機能語列文節カテゴリ)・・・)
活用語は終止形に戻し，複合語は，その構成語を＃で連接して登録してある．
機能語は，複合機能語辞書中のグループ名で登録した．
例えば「ている」「てはいる」「てもいる」のように意味的には同じであるが，派生的な語は同じ機能語として登録されている．
類似用例の検索を実現するために，分類語彙表[CITE]を用いて，文節内の自立語(複合語は，その構成語各々)に対して，意味分類を用いた番号付けによってコード化を施した(意味分類コード)．
このコード化により，意味分類コードの前方一致位置よって完全一致検索を含めた３つのレベルの曖昧検索が可能となる．
表[REF_ana-answer]に，この8万文の中から抜き出したそれぞれ100文について，形態素解析，文節カテゴリ付け，骨格構造解析での正解文数を示す．
講談社和英辞典については，骨格構造解析結果が正しい解析木を含んでいるものは100文中で97文，科学技術和英大辞典では90文であった．
誤りのほとんどは，形態素解析あるいは文節カテゴリ付けの失敗によるものであり，これらが正しく行われば骨格構造解析そのものは，98%以上の精度で正しい解析木を含むものが得られる．
また，100文中で，係り先が特定できない文節(曖昧文節)は，科学技術和英大辞典では約9%出現した．
係り先が１つに特定できないと，構造を指定して検索する際に，検索パターンと構文的には異なるものを検索してしまう可能性がある．
この点については４章で述べる．
[htb]
{曖昧文節：係り先が特定できない文節数／文末以外の合計文節数}
[b]
2章で述べた骨格構造解析によって構文付きコーパスを作成し，それを対象として用例検索システムを構築した。
この用例検索システムでは，単語や品詞情報などの形態素的制約だけではなく，構文的制約(係り受け関係)を指定して検索することができる．
この構文的制約によってユーザの検索意図に反する多くの不用な用例を省き，必要な用例に絞り込んだ検索をする．
また，検索対象とするコーパスは分類語彙表により意味分類コード化処理が施してあるため，類似用例を検索することも容易である．
以下，3.1節でシステムの概要を，3.2節で構造コードを含む索引表について述べ，3.3節で検索アルゴリズム，3.4節で本システムのインタフェースについて述べる．
システム構成図を図[REF_system]に示す．
本システムは，構文付きコーパス，索引表，入力文解析部，検索部，インタフェース部から構成されている．
入力された検索対象文は，入力文解析部で解析され，その構造がインタフェースのウインドウ上に表示される．
この構造表示の上で，さらに検索したい部分構造を特定することができる．
検索は２段階に分けて行われる．
まず始めに，検索パターン中の自立語または機能語が出現する文を索引表から検索する(一次検索)．
次に，検索された文を対象として，検索パターンと構造的に一致するか否かの照合を行う(二次検索)．
本システムでは，用例中に出現する自立語，意味分類コード，機能語を対象として索引表を作成した．
ただし，機能語「の，は，を，が，に，た」については，索引表に登録していない．
本システムでは，索引表は，検索対象を制限するための一次検索において用いるが，これらの機能語は，非常に多くの用例に出現するため，このような効果が小さいからである(表[REF_func])．
検索パターンにこれらの機能語が含まれる場合には，二次検索の際に，これらの機能語が含まれるか否かを調べている．
通常の索引表では，図[REF_index]に示すように，ある単語に対して，どの文に出現したかを示す文番号列のみを登録するが，本システムでは，二次検索で構造の照合を行う必要があるので，その単語が出現する文番号だけでなく，単語のテキスト中での出現位置(文節番号)，文節カテゴリコード，係り先文節番号列を同時に登録した(以下，構造コードと呼ぶ)(図[REF_indexing])．
このような構造コードを登録することにより，二次検索で構造の照合を行う時に，２次記憶上にある構文付きコーパスを再度アクセスすることなく、構造コードに対して検索パターンとの照合を行えばよいので，高速な構造検索が可能となる．
検索は，以下のように一次検索，二次検索の２段階に分けて行う．
一次検索では検索パターン中の単語が現れる文を検索し，二次検索で，検索された文を対象として，検索パターンと構造的に一致するか否かの照合を行う．
{自立語，機能語による絞り込み(一次検索)}
本システムは自立語に対して，次のような種類の検索を可能としている．
1.単語による完全一致検索
2.意味分類コードによる類似用例検索
・曖昧レベル１検索・曖昧レベル２検索
単語による完全一致検索の場合の一次検索は，入力された単語と完全に一致する文を自立語索引表を用いて検索する．
類似用例検索の場合の一次検索は，各単語の意味分類コードを用いて検索を行う．
その際，図[REF_bunrui]のように，曖昧レベル１検索では，意味分類コードＡ，Ｂが一致する単語を含む用例を，曖昧レベル２検索では，意味分類コードＡのみが一致する単語を含む用例を検索する．
これにより，意味分類コードに対して単純な前方一致検索を行うだけで，その一致位置により２つのレベルの曖昧検索が可能となる．
[htb]
\unitlength 1cm
(5, 2.5) \thicklines
機能語については，例えば「ている，てはいる，てもいる」のような派生的な語は１つのものとして登録してある．
そのため「ている」「てはいる」「てもいる」は同じ語として検索される．
{構造検索(二次検索)}
二次検索では，索引表にコード化されている構造コード中の文節番号，係り文節番号，文節カテゴリコードを参照して，検索パターンと一次検索で抽出された文との間に構造的一致があるか否かを検査する．
例えば，検索パターンが図[REF_struct]のように＃に続く番号で表現されているとすると，一次検索において，＃１と＠３，＃２と＠４，＃３と＠５が一致していることがわかる．
従って，ここでは＃１と＃３の構造が＠３と＠５の構造と，＃２と＃３の構造が＠４と＠５の構造と同じであれば構造が一致したといえる．
[htb]
骨格構造解析により解析されたコーパスには，係り先が一意に決定されていない場合があるが，そのような場合には，対象とする用例中に検索パターンとの構造が一致するものが含まれていれば，構造的に一致したことにする(図[REF_aimai])．
[htb]
また，並列構造を構成する可能性がある文節については，係り先文節は決定されず，「体並・用並」という文節カテゴリが付与されている．
そこで，並列構造を指定して用例を検索する際には，対象とする用例の文節カテゴリが一致しているか否かの検査を行うことにより構造の照合を行う(図[REF_para])．
検索システムの実行画面を図[REF_interface]に示す．
インタフェースはX-Window上に構築されており，ユーザが検索文入力ウィンドウに文を入力すると，骨格構造解析が実行され，解析結果が三角表現を用いてウィンドウ上に表示される．
検索パターンの指定は，三角表上で，係り先を示すウインドウ(図中の矢印)をマウスでクリックするという簡単な操作で行われる．
検索結果もウインドウ上に表示され，ユーザは検索された用例の構造を三角表上で確認することも可能である．
また，構造の三角表現は，縮退表示することも可能である(図[REF_reduce])．
これにより，長い文の全体構造も，ウインドウ上で一度に把握することができる．
[htb]
[htb]
