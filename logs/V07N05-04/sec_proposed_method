本節では、「３つ組／４つ組モデル」を用いて係り受け解析をする手順を解説する。
係り受け解析の全体の流れは図[REF_fig:flow]のようになっている。
３つ組／４つ組モデルの準備として、[REF_subsec:restrict]節で述べる手法により、各文節の係り先候補を３つ以下に制限する。
まず、文法を用いて、各文節の係り先として文法的に正しいものを列挙する。
その中で係り元から一番近い文節・二番目に近い文節・最も遠い文節を選び出し、他を無視する。
そして、係り先の候補の集合の中で、ある要素が係り先として選択される確率を、係り元文節と全ての係り先の候補の属性を同時に考慮するモデル（３つ組／４つ組モデル）で推定する。
[REF_subsec:tripquad]節では、モデルの特徴及び利点について述べる。
最後に、上記のモデルを用いて文全体の最適な係り受けを選択する方法を、[REF_subsec:sentence]節で解説する。
[t]
(360,180)
本システムでは、文を入力とし、JUMAN[CITE]で形態素解析をした後、文法SLUNG[CITE]で構文解析する。
SLUNGは、JUMANの形態素を解析の単位として、文法的に正しい全ての構文木を出力する。
これを係り先候補の制限に使うために、それぞれの構文木中の部分木を、図[REF_fig:transform]のようにして、文節単位の係り受け構造に帰着させる。
部分木Mの左部分木L、右部分木Rの最も右側にある語をそれぞれ[MATH], [MATH]とし、それらが属する文節を[MATH], [MATH]とするとき、[MATH]は[MATH]に係ることになる。
一つの構文木は一つの係り受け構造に対応するが、可能な構文木が複数あるため、一つの係り元文節に対して、係り先候補となる文節が複数求まる。
以下では、その候補の中から正しいものを選び出すことを考える。
人手で記述する文法を用いることには、[REF_sec:introduction]節で述べたような我々の最終目標に達するための要件である他に、決してありえない構造を排除することができるという利点がある。
文法の制約が過剰でないことは、[REF_sec:related]節で述べたようにSLUNGの被覆率が高いことが保証している。
日本語の文節の係り先の傾向として、(1)近くから遠くになるに従って割合が減少すること、(2)最も遠い文節に係る場合だけは比較的多いことが知られている。
この傾向は例えば[CITE]で分析されている。
SLUNGにより係り先候補を絞った場合にもこの傾向はやはり顕著である。
EDRコーパスの文をSLUNGで解析した際の、係り先候補の数、及び正しい係り先の位置の関係の分布を表[REF_tab:position]に示す。
表中の「第一」「第二」…は、文法で制限された係り先候補のうち、係り元文節から近い順に何番目が正しい係り先であるかを意味する。
「最遠」は係り元から最も遠い候補である。
このデータより、係り元文節から(1)最も近い文節・(2)二番目に近い文節・(3)最も遠い文節のいずれかに係る場合だけで98.6[MATH]を占めることがわかる。
この性質を利用して、係り先の候補が４つ以上存在する場合にも上記の３文節だけを考え、その他の文節を無視することにする。
この制限によって、係り受け精度の上限は98.6[MATH]となるが、わずか1.4[MATH]の犠牲により問題を大幅に単純化することができ、次節で述べる３つ組／４つ組モデルの構成が可能になる。
３つ組／４つ組モデルは、文節[MATH]が文節[MATH]に係る確率[MATH]を式([REF_equ:triplet2]),式([REF_equ:quadruplet2])で計算する。
但し、[MATH]は文節[MATH]の係り先の（３つ以下に限定された）候補、[MATH]は文節[MATH]の属性、[MATH]は[MATH]及び二文節[MATH]間の属性を表す。
\refstepcounter{enums}
このモデルの特徴は、上記の式から推測される通り、「係り元文節と、係り先の候補となる全ての文節の属性を同時に考慮すること」、そして「それぞれの係り先の候補の係りやすさを求めるのではなく、各候補が選ばれる確率を求める」ことである。
これらの意義は次の３点にある。
\vskip 2mm
文節間の距離でなく、係り先の候補の中での相対的位置を用いて係り先を選べること
着目している候補だけでなく、文脈、すなわち他の候補の属性を考慮できること
ある係り元に対する全ての候補への係りやすさを、同じ条件の下で計算できること
\vskip 2mm以下で、これらの意義について順に述べる。
文節間の距離は、係り受け解析における重要な要素として考えられているが、係り先の候補の中の位置の方が重要な場合がある。
例として、([REF_sent:karega])の各文における「彼が」の係り先を推定する時を考える。
両者とも、「走るのを」が正しい係り先と考えられる。
\vskip 2mm
\refstepcounter{equation} \vskip 2mm
文法を用いずに文節数を距離とするモデルでは、「彼が」と「走るのを」の文節間距離はaでは1、bでは2と異なっている反面、aでの「彼が→見た」とbでの「彼が→走るのを」が、係り元からの距離が2である動詞であるという点で、似た事象であると見なされる。
一方、文法で係り先を絞った場合、a, bとも「彼が」の係り先の候補は「走るのを」と「見た」の２つとなる。
このように、係り先の候補のみに着目すれば、両者を同じ事象として扱えるので、より効率のよい学習が行えるようになる。
([REF_sent:watashino])において、「私の」の係り先を考える。
正解は、それぞれ「娘に」「友人の」である。
\vskip 2mm
\refstepcounter{equation} \vskip 2mm
係り元文節と係り先文節、及び文節間距離を考えるモデルでは、a, bにおける「私の→娘に」は区別されることなく、全く同じ係り受け確率が付与される。
しかしながら、この確率は非常に低くなる。
なぜなら、実際にEDRコーパスの一部を観察したところ、aの「[MATH]の[MATH] [MATH]」という構文に対し、bのような「[MATH]の[MATH] [MATH]」の構文の頻度が４倍程度あり、後者の構文では、[MATH]は近くの[MATH]を修飾する場合が約75％と、圧倒的に多いからである。
従って、aにおいて、「私の→娘に」に比べて「私の→かわいい」の確率のほうが高くなり、解析誤りを引き起こす。
係り元と係り先の３つの候補全てを同時に考慮すると、この誤りを防ぐことができる。
aにおいて「私の」と、その係り先候補である「かわいい」「娘に」「会った。
」を同時に考えて、三者のそれぞれが選ばれる確率を計算した場合、第二候補であっても、第一候補の形容詞連体形よりも高い確率が割り当てられ、正しく係り先を求めることができる。
このような現象は、第一候補である形容詞や副詞を飛び越えて第二候補に係るケースなどで一般的に数多く見受けられる。
これは意義2とも関連するが、ある一つの係り元に対する係り受けの確率を、共通の前件を持った条件付き確率で計算できるという利点である。
([REF_sent:watashino]a)の「私の」の係り先を考える際には、従来の手法は式([REF_equ:pairmodel])、我々の手法は式([REF_equ:tqmodel])を求めることになる。
([REF_equ:pairmodel])ではそれぞれの条件付き確率の前件が異なるため、５つの値の和は1にならないのに対し、式([REF_equ:tqmodel])では３つの和が1になる。
従って、３つ組／４つ組モデルにおいて推定する条件付き確率は、係り元とその係り先候補がある文脈において、それぞれの係り先候補が選ばれる確率に一致することになる。
なお、考慮する条件を図示すると、それぞれ図[REF_fig:oldmodel]、図[REF_fig:abcd]のようになる。
\refstepcounter{enums}
\refstepcounter{enums}
各文節間の係りやすさ[MATH]を求めるにあたって、係り元文節に対する係り先文節の候補の数に依って、次のようなモデルを用いることにする。
係り先候補が１つの場合：その係り先に確定するため、[MATH]となる。
係り先候補が２つの場合：係り元と２つの係り先の文節の情報を考慮する「３つ組モデル」を用いる。
係り先候補が３つ以上の場合：係り先の候補のうち、係り元に最も近い文節、二番目に近い文節、最も遠い文節の３つだけを考え、係り元とその３つの文節の情報を考慮する「４つ組モデル」を用いる。
こうして求まった値を用いて、SLUNGの出力した全ての部分木Mに対して、統計値[MATH]を以下のようなアルゴリズムで割り振る。
なお、SLUNGの出力する構文木の終端記号は、文節単位でなく、単語（JUMANの出力する形態素）を単位としている。
部分木Mがただ一つの単語からなる場合、[MATH] = 1.0
そうでない場合、図[REF_fig:partialtree]の部分木において、左部分木Lの最も右側の単語を[MATH]、右部分木Rの最も右側の単語を[MATH]として、[MATH]、[MATH]の属する文節をそれぞれ[MATH]、[MATH]とする。
このとき、
\refstepcounter{enums}
文全体に対応する構文木で、この統計値が最大になるようなものを探索し、その構文木を再び文節の係り受け関係に変換して出力する。
こうして得られた文の係り受けは、必ず文法的に正しい構文木に対応しており、係り受け同士が交差することはない。
