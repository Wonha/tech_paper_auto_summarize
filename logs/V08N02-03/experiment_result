
従来，概念関連度の評価は，２つの正規化された概念ベクトルの内積により行われている[CITE].
すなわち，式[REF_Vector]のように表現された概念ベクトル間の内積により計算できる．
しかし，この方式では各属性間の直交性を仮定しており，直交属性を選ぶことは容易ではなく[CITE]，また，適切な重みを設定することも非常に困難であると思われる．
[CITE]ではALT-J/Eシソーラス[CITE]の約3千種の概念カテゴリーを属性として利用し，各属性の重みは，基本的には出現頻度により与えているが，十分な直交性を有しているか，また，適切な重みになっているか，あるいは，そのような適切な性質を持つような概念ベースへと自動的に精錬を行えるかが問題となる．
[REF_CBchain]で示したように，本稿で提案する概念の定義では，任意の概念[MATH]はその属性の集合として定義されている．
また，各属性はある概念であるため，結果として任意の概念[MATH]は[MATH]次までの属性の連鎖で定義されている．
このような概念定義に対する関連度評価モデルを以下に述べる．
各概念の属性には，その概念に関連する概念が並んでいるものと考えられるので，一致する属性数が多い程関連が強いと考えられる．
したがって，2つの概念[MATH]，[MATH]の関連度は，それぞれの1次属性同士の一致単語数を0から1の範囲に正規化したものとする．
すなわち，2つの概念[MATH], [MATH]を１次属性[MATH]とその重み[MATH]を用いて，
と表現し，[MATH]なる[MATH]の個数を[MATH]個とするとき，概念[MATH]と概念[MATH]の一致度[MATH]を次式で定義する．
この式は，概念[MATH]から見たときの属性の一致割合[MATH]と概念[MATH]から見たときの一致割合[MATH]の平均を表しており，重み情報は無視している．
また，[MATH]（属性数が等しい）のとき，式[REF_Ematch]は，
となる．
また，重み情報を利用する場合の一致度[MATH]を以下のように定義する．
この式は，概念[MATH]から見たときの一致している属性の重みの割合[MATH]と概念[MATH]から見たときの一致している属性の重みの割合[MATH]の平均を表している．
1次属性同士を比較する際に，単語の完全一致ではなく，その単語が表している概念としての一致度を利用することができる．
すなわち，1次属性同士の概念としての一致度は，それぞれの2次属性同士の一致単語数から導き，1次属性同士が単語としては一致していなくても，その一致度合いを見積もれるようにする方法である．
一致度を利用することにより，2つの概念間の関連度はそれぞれの1次属性同士の一致度の平均として定義できる．
ただし，一致度は0から1の範囲の実数であるため1次属性同士の対応関係が問題になってくる．
いま，ある1次属性[MATH]と相手のすべての1次属性[MATH]との一致度を計算したとき，[MATH]は一致度が最大の[MATH]に対応させるべきである．
しかし，同じことが他のすべての[MATH]にも言えるため，問題は複雑になる．
これは，1次属性同士を並べるときに，対応する1次属性間の一致度の合計が最大になるように並べ替える問題である．
このような並べ替え問題は，組み合わせ最適化問題の一種であり，要素数が多くなると組み合わせ爆発を起こすため，真の最適解を求めることはそれほど容易ではない．
しかし，[CITE]で提案している「単純法」のように，単純な方法でも比較的最適解に近い値がでることから，本稿で行う実験では並び替え問題の部分には単純法を利用している．
単純法とは，最適化手法の欲張り法の一種で，一致度が最大のものを順に選択していく方法であり，その結果が最適解である保証はないが，比較的良好な解が得られるので，ここでの適用には十分であると判断している．
なお，より正確に一致度の合計が最大になるように並び替えたい場合は，遺伝的アルゴリズムなどを用いることができる[CITE]．
以上の考察より，概念[MATH]と概念[MATH]との２次属性までの概念連鎖による関連度[MATH]は以下に示すアルゴリズム(CNW)により評価する．
概念連鎖による関連度評価アルゴリズム（CNW）
1次属性数の少ない方の概念を概念[MATH]とし（[MATH]），概念[MATH]の1次属性の並びを固定する．
概念[MATH]の各1次属性を対応する概念[MATH]の各1次属性との一致度([MATH])の合計が最大になるように並べ替える．
ただし，対応にあふれた概念[MATH]の1次属性（[MATH])は無視する．
概念[MATH]と概念[MATH]との関連度[MATH]は，
である．
また，1次属性数が同じ場合（[MATH]）の関連度は，
となる．
アルゴリズムCNWでは重み情報を利用していない．
重み情報を利用した概念連鎖による関連度評価アルゴリズム(CW)は以下のようになる．
重み付き概念連鎖による関連度評価アルゴリズム（CW）
1次属性数の少ない方の概念を概念[MATH]とし（[MATH]），概念[MATH]の1次属性の並びを固定する．
概念[MATH]の各1次属性を対応する概念[MATH]の各1次属性との重み付き一致度([MATH])の合計が最大になるように並べ替える．
ただし，対応にあふれた概念[MATH]の1次属性（[MATH])は無視する．
概念[MATH]と概念[MATH]との関連度[MATH]は，
である．
ただし，[MATH]は，それぞれ属性[MATH]の重みである．
アルゴリズムCWは，流れとしてはアルゴリズムCNWと同様であるが，1次属性同士の一致度の計算に重み付き一致度を用いる点と得られた一致度に重みを掛け合わせる点が異なる．
図[REF_Eassoc]に重みを利用しない場合の概念連鎖による関連度(CNW)の計算例を示す．
比較する対象概念を「机」と「椅子」とし，属性数を３個とした場合のそれぞれの(a)１次属性，および，１次属性の１次属性，すなわち，(b)２次属性の例である．
(c)一致度マトリックスは，概念「机」の各１次属性と概念「椅子」の各１次属性とのそれぞれの１次属性集合の一致度である．
たとえば，「学校」と「教室」の一致度は，「生徒」と「大学」が一致するので３個中２つが一致し，一致度は[MATH]である．
この一致度マトリックスから最大値を順に選んでいくと，太字で示した1, 2/3，0となり，「椅子」の１次属性の並びは(教室,勉強,木)となる．
したがって，一致度の合計は5/3となるので，関連度は5/9である．
関連度の性能は，使用する概念ベースと関連度計算方式の両方に左右されるが，本稿では概念ベース３通り（基本概念ベース，圧縮概念ベース，縮小概念ベース）に対して，以下に示す５通りの関連度計算方式の各組合せについて検討する．
重み情報を利用しない１次属性同士の一致度（式[REF_Ematch]）
重み情報を利用する１次属性同士の一致度（式[REF_EmatchW]）
重み情報を利用しない２次属性までの概念連鎖による関連度（式[REF_Echain]）
重み情報を利用する２次属性までの概念連鎖による関連度（式[REF_EchainW]）
ベクトル内積による関連度
ただし，使用する概念ベースによって利用できる関連度計算方式が限られてくるので，実際には表[REF_Case]に示す９通りについて評価する．
この中で，圧縮概念ベースに対するベクトル内積(Vector)が従来方式である．
まず，以下のような４つの概念の組（サンプル概念）を準備する．
(概念X [MATH]概念A 概念B 概念C)
ここで，概念Xは任意の概念（対象概念）であり，概念Aは概念Xと同義か類義の概念，概念Bは概念Xに密に関係する概念，概念Cは概念Xに疎な関係の概念である．
密な関係とは反意関係・対関係・上位下位関係・全体部分関係・兄弟関係など具体的な関係を定義できるものを指し，疎な関係とは具体的な関係を定義できないものを指す．
すなわち，対象概念Xに対してAが非常に関連が強く，Bが関連があり，Cはほとんど関連がない概念である．
[MATH]を概念Xと概念Aとの関連度，[MATH]を概念Xと概念Bとの関連度，[MATH]を概念Xと概念Cとの関連度とすると，
のとき，その関連度計算結果は正解であり，それ以外は不正解である．
次に，そのようなサンプル概念をどのように作成するのかが問題となるが，本研究では，人間の常識的判断に近いものほど良いと考えているので，サンプル概念の作成は人手によるものとした．
すなわち，被験者約30名に対して，サンプル概念(X, A, B, C)を20組以上作成してもらい，さらに，サンプル概念作成者以外の２人により各サンプル概念が正しいかどうか判断してもらい，１人でも正しいとは言えないと答えたサンプル概念は削除した．
したがって，３人中３人とも同じと判断したサンプル概念を抽出した．
以上のような過程を経て，合計559組のサンプル概念(da33-559)を準備した．
表[REF_Sample]に，準備したサンプル概念の一部を示す．
関連度評価方式の評価点は，全サンプル概念(559組)に対する正解率，すなわち，サンプル概念100組あたりのA,B,Cの順序正解個数とする．
以上で準備したサンプル概念を用いて，表[REF_Case]に示した９通りの方式（概念ベースと関連度計算方式）に対して，評価実験を行った．
実験結果を表[REF_Result1]に示す．
実験結果から，ChainW，Chain方式の正解率が従来のVector方式より高いことが分かる．
その中でも，基本概念ベースよりも縮小概念ベースを用いた方がより高い．
これは，基本概念ベースには多くの雑音（不適切な属性）が含まれているため，属性数を重みの大きい順に30個で打ち切ることにより，雑音をある程度除去できたことによる効果であると思われる．
ただし，MatchW，Match方式では，逆に，縮小概念ベースよりも基本概念ベースを用いた方が正解率が高い．
MatchW，Match方式は，１次属性のみしか用いないために，属性同士の一致確率が極めて低く，さらに属性数を30個に打ち切ってしまう縮小概念ベースでは，雑音の抑制効果よりも，属性同士の一致確率の減少がまさってしまうため，このような結果となったものと考えられる．
この点においても，概念を連鎖的に利用することにより，属性同士が完全に一致していなくても概念としての一致度を利用できるChainW，Chain方式が有効であることが確認できる．
圧縮概念ベースを用いたVector方式でも，属性数を30個で打ち切ると正解率が落ちる（正解率76.0%）が，その落ちかたはMatchW，Match方式に比べて小さい．
これは，基本概念ベースおよび縮小概念ベースでは属性種別が約４万であるのに対し，圧縮概念ベースでは属性種別が約３千と少ないため属性同士の一致確率が比較的高いことによる効果と考えられる．
しかし，ChainW，Chain方式よりは劣っており，また，ChainW，Chain方式では縮小概念ベースを用いた方がより正解率が上がる．
したがって，関連度計算方式としてChainW，Chainを採用すれば，よりコンパクトな概念ベース（縮小概念ベース）で，より良い関連度を計算できることが分かる．
属性の重みを関連度計算に利用する場合と利用しない場合とを比較してみると，重みを利用した方がよりよい結果となっている．
このことは，辞書での出現頻度を基に付与した重み情報が，どの程度正しいかは不明ではあるが，有効であることを示している．
しかし，概念ベースを成長させて行くには，人間からの直接教示，電子新聞・書籍，インターネットを利用した文書収集などを通じて，概念や属性の追加・修正・削除を行っていく必要があり，その場合の適切な重み情報の付与は非常に困難である．
したがって，重み情報を利用しない計算方式であるChainの正解率が，ChainWに比べてそれほど劣っていないことは，注目に値する．
すなわち，単純に雑音的な属性は削除し良い属性は追加していくことで，概念ベースおよび関連度計算結果がより良いものになっていくであろうことが期待できる．
もちろん，適切な重み情報を付与することが可能ならば，ChainWによりより精度の高い関連度を求めることができる．
PentiumII 400MHzのパーソナルコンピュータで実行した場合，サンプル概念559組（1677回の関連度計算）に対する計算時間は，圧縮のVector，縮小のMatchおよびMatchWでは約12秒，縮小のChainおよびChainWでは約23秒である．
ChainやChainWでは，やや複雑な計算を行っているにもかかわらず倍程度の計算時間で済んでいる．
これは，関連度計算を行うためには，概念表記（単語）を基にその概念を概念ベースから検索する必要があり，概念ベースの概念数が約４万と多いために，概念の検索処理に多くの計算時間がかかるためである．
純粋な関連度計算の時間では，Vector, Match, MatchWの計算時間を１とすると，Chain，ChainWの計算時間は，縮小概念ベースの場合で30×30=900であるが，実際の利用においては検索処理は省略できないので，関連度計算時間は倍程度で済むようである．
従来の関連度計算方式Vectorでは，概念ベースを構築・拡張・精錬する際には，シソーラスなどの概念カテゴリーデータベースが必要であるのに対し，提案した関連度計算方式ChainW，Chainでは，シソーラスなどは不要である．
そのため，概念ベースの構造は単純なものとなり，拡張・精錬，すなわち概念ベースの成長が容易に行えるであろうことが予想される．
さらに，Chain方式では重み情報が不要なため，特に属性の追加は容易に行える．
そこでここでは，縮小概念ベース＋Chainに対して，概念への人手による適切な属性の追加実験を行い，概念ベースの成長の容易性と関連度性能の向上可能性を示す．
実験手順および結果は以下の通りである．
評価実験で用いたサンプル概念559組(da33-559)から，100組を抽出し(da33-100)評価実験を行う．
その結果，正解率86%，すなわち，不正解数は14であった．
不正解のサンプル概念組の各概念の関連度を見て，不当に低い概念に適切と思われる属性を人手により２〜６個追加する．
属性追加を行った概念ベースを用いて，サンプル概念100組(da33-100)に対して，評価実験を行う．
その結果，正解率98%となった．
(属性追加を行っても正解とはならなかったサンプル概念が14組中２組あった．
)
属性追加を行った概念ベースを用いて，サンプル概念559組(da33-559)に対して，評価実験を行う．
その結果，正解率85.0%となった．
属性追加を行う前の概念ベースでは正解率82.6%であり，正解数にすると462である．
正解率85.0%を正解数に換算すると475であり，正解数が13増えたことになる．
Chain方式は，重みを計算には使用せずに概念の２次属性までを連鎖的に利用する方式である．
したがって，一つの概念Xの属性を修正すると，概念Xを属性として持つ多くの概念に影響がおよぶ可能性がある．
しかし，上の実験結果からは，そのような影響はプラス側にやや見られた程度であり，ほぼプラスマイナスゼロとみなせる．
以上，単純な属性追加実験によって，概念ベースを容易に成長させることが可能であることが分かった．
