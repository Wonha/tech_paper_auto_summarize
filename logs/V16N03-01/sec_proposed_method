本節では提案手法について述べる前に本研究で知識源として利用するWikipediaの記事構造について述べる．
Wikipediaは，様々な事物に関する常識的知識が密に記述されたフリーの多言語百科事典である．
図[REF_fig:wiki]（b）は見出し語「紅茶」に対する記事の例である．
Wikipediaの記事は，明確な構造をもつMediaWiki構文により記述されており，多段の箇条書きを含む．
この例のように，Wikipediaの記事には典型的なある概念（または具体物）の辞書的な定義に加えて，関連する概念（または具体物）の列挙を箇条書きとして含むことが多い．
本稿ではWikipediaの記事から上位下位関係候補を抽出するための媒体として，MediaWiki構文で記事のレイアウト情報を扱う表[REF_tab:mediawiki_syntax]の修飾記号に注目し，記事から見出し（表[REF_tab:mediawiki_syntax]では[MATH]と標記）をノードとするグラフ構造（記事構造）を抽出する．
具体的には，[MATH]に付与されている修飾記号の優先度が高く修飾記号の{繰り返し数}が{少ない}ほど，グラフ構造上の高い位置にノードを配置する．
このとき，修飾記号の優先度は記号の{繰り返し数}より優先される．
例えば，「*リプトン」より「==イギリス==」の修飾記号の優先度が高いので，グラフ構造上で「イギリス」が「リプトン」より高い位置に配置される．
また，「==イギリス==」は「=主な紅茶ブランド=」と比較し修飾記号{（この場合は``=''）の繰り返し数}が{多い}ので，「主な紅茶ブランド」よりグラフ構造上で低い位置に配置される．
ただし，ルートノードは記事名とし，その修飾記号は{繰り返し数}0の「=」とする．
図[REF_fig:wiki]（b）の記事に対応する図[REF_fig:wiki]（a）のMediaWikiコードをもとに，図[REF_fig:wiki]（c）のような記事構造が抽出できる．
本節では，[REF_sec:wikipedia]節の手続きでWikipediaの各記事から構築した記事構造を知識源として，上位下位関係を獲得する手法を提案する．
提案手法は以下の2ステップからなる．
[REF_sec:wikipedia]節で説明した記事構造に含まれるノード間の先祖—子孫関係に注目して上位下位関係候補を抽出する．
SVM[CITE]を用いて，Step1で抽出された上位下位関係候補から不適切な関係を取り除く．
以下，提案手法について詳しく述べる．
このステップでは，記事構造の各ノード{を上位語候補，}子孫関係にあるノード{を下位語候補とする}全ての組み合わせを上位下位関係候補として抽出する．
例えば，図[REF_fig:wiki]（c）の記事構造からは，「ブレンドティー／チャイ」や，「紅茶／リプトン」などの上位下位関係候補が抽出できる．
ここで，訓練データの記事構造から得られる上位語候補を調べたところ，階層構造中で上位語候補に対して箇条書きで下位語候補が列挙されるときには，上位語に箇条書き特有の修飾語が付くことが分かった．
このような修飾語としては，主観で一部の下位語を選んで列挙していることを示す「主な〜」や「代表的な〜」などの接頭語，箇条書きが下位語の列挙であることを陽に示す「〜のリスト」や「〜の一覧」などの接尾語などがあり，基本的に上位語を箇条書きのタイトルとするために付けられたものであるため，適切な上位語を得るためには取り除く必要がある．
そこで我々は，抽出された上位語候補が図[REF_fig:list_pattern]のパターンをもつ場合，パターン中の[MATH]以外の部分を取り除いた．
パターン中の[MATH]は任意の文字列を示す．
{ただし，複数のパターンに一致した場合には，その中で，パターンの具体的な文字列部分（ex.「代表的な}[MATH]{」であれば「代表的な」）が最長一致するパターンを適用した．
}例えば，上位語「主な紅茶ブランド」はパターン「主な[MATH]」を適用することで，「紅茶ブランド」と置換される．
このようにして得られる上位下位関係候補には，明らかに誤りとみなせる上位下位関係候補や，上位語または下位語に記号などの不要語を含む上位下位関係候補が含まれていたため，図[REF_fig:huyou]のルールに従って上位下位関係候補を削除，あるいは訂正した．
Step1の手続きで得られた上位下位関係候補は多くの適切な関係を含む一方で，「生産地／インド」，「紅茶ブランド／イギリス」のような誤りも含む．
Step2では，Step1で抽出した上位下位関係候補から教師あり機械学習を用い不適切な関係を取り除く．
本稿では上位下位関係候補が適切な上位下位関係か否かを判定するため，Support Vector Machine (SVM)[CITE]で学習された分類器を用いて上位下位関係候補を選別する．
{SVMで各上位下位関係候補（上位語候補—下位語候補のペア）が適切な上位下位関係であるかどうかを判定するには，分類対象の上位下位関係候補を，素性ベクトルと呼ばれる分類対象の特徴（素性）を数値で表現したベクトルに変換する必要がある．
この素性ベクトル（上位下位関係候補）に正解（適切な上位下位関係か否か）をつけたものを学習データとして，Step2で用いる分類器(SVM)を得る．
}
{本研究では素性として，上位下位関係候補がある条件（特徴）を満たすかどうかを一つの素性として表現し，素性ごとに設定された条件を入力の上位下位関係候補が満たせば，対応する素性ベクトルの次元の値に1をセットし，満たさなければ0をセットする．
実際に使用した素性をまとめたリストを表}[REF_tab:feature]{に示す．
表の各列は左から素性の種類，各素性に対応する素性ベクトルの次元の値を1にセットする条件，図}[REF_fig:wiki]{から抽出した上位下位関係候補「紅茶ブランド／Lipton」で実際に1にセットされる素性を表している．
}ただし，同じ表現の上位下位関係候補が異なる記事構造から抽出された場合，全ての抽出元の記事構造について生成した素性ベクトル{の論理和を用いる．
}次に生成した素性ベクトルをSVMに入力し，その結果得られたSVMのスコアが閾値以上の上位下位関係候補を正しい上位下位関係とみなす．
以下で，各素性{の設計方針}について説明する．
まず上位語候補・下位語候補の品詞は，誤りの判定に有効である．
例えば，「木次線／管轄」のように上位語に固有名詞を含み，下位語に固有名詞を含まない場合，誤りの関係と推定できる．
ここでは，品詞として{IPA辞書}{の}品詞細分類レベル（ex.名詞—固有名詞など）まで考慮する．
また上位語候補・下位語候補に含まれる品詞のうち，主辞の品詞は語の意味的な特徴をよく捉えているため特に重要である．
例えば，上位語候補の主辞の品詞が動詞であれば多くの場合その上位下位関係候補は誤りである．
本稿では上位語候補・下位語候補の末尾の形態素を主辞とし，主辞の品詞を他の品詞と区別するように素性を設計した．
{品詞と同様に}，上位語候補・下位語候補中の形態素の表層文字列は上位下位関係らしさの判定に有効である．
例えば，「アメリカ映画／ウエスト・サイド物語」のように頻度が少ない，あるいは未知の上位語候補・下位語候補であっても，「映画」や「物語」などのより頻度が高い形態素に注目することで上位語らしさ・下位語らしさを判定することが出来る．
また品詞と同様に上位語候補・下位語候補の主辞の表層文字列は適切な上位下位関係であるかどうかの手がかりとなりやすいので，他の形態素と区別する．
上位語候補，下位語候補にはStep1の不要語処理ではカバーしきれない，「背景」や「あ行」などの不要語が多く存在する．
これら不要語の特徴を捉えるため，上位語候補，下位語候補の表層文字列ごとに次元を割り当てるように素性を設計した．
上位語候補，あるいは下位語候補が属性語である上位下位関係候補は誤りの関係となりやすい．
ここで属性語とは，その単語についてユーザが知りたい観点を指す単語である[CITE]．
例えば，「紅茶」の属性語としては「生産量」や「価格」があげられる．
{このような属性語を含む関係（例えば，}「紅茶／生産量」や「生産量／1位インド」など）{は多くの場合，}属性語と概念（または具体物）間の関係となり上位下位関係となることは少ない．
そこでこの素性ではあらかじめ抽出しておいた{属性語リストの各語に固有の次元を割りあてるように設計した．
}
本研究では，属性語は以下のような手順で抽出した．
まず各記事構造から根ノード以外のノードを抽出する．
つぎに，抽出したノードのうち，Wikipedia中の複数の記事に出現するノードを属性とみなす．
例えば「紅茶」と「タバコ」という記事の両方に「生産量」が見出しとして出現する場合，「生産量」を属性語とみなす．
前述の上位語候補・下位語候補の表層文字列を素性とする素性EXPもこの素性と同{じく不要語らしさ}を扱うことができるがこの素性では教師無しで構築された属性語リストを用いることで，より被覆率高く{不要語}を検出することが可能であることに注意されたい．
記事構造の箇条書き表現から抽出された下位語候補をもつ上位下位関係は適切な関係になりやすい．
例えば，図[REF_fig:wiki]（c）の記事構造の箇条書き表現には「Lipton」，「Wedgwood」などの固有名詞が列挙されており，これらは上位ノード「紅茶ブランド」の下位語として適切である．
このような傾向を捉えるために，この素性では記事構造から抽出された上位語候補あるいは下位語候補のノードに付与されている修飾記号の種類（節見出し，定義の箇条書き，番号付き箇条書き，番号なし箇条書き）ごとに次元を割りあてた．
記事構造で上位語候補と下位語候補との間の距離が近ければ近いほど，正しい上位下位関係であることが多い．
そこで，記事構造中における上位語候補・下位語候補間の距離を素性とすることで，この傾向を捉える．
本稿では，上位語候補，下位語候補間の距離を記事構造中で上位語候補と下位語候補間に存在する辺の数とする．
例えば，図[REF_fig:wiki]（c）の記事構造上で「Wedgwood」と「紅茶ブランド」間の距離は2である．
素性DISTでは，上位語候補と下位語候補間の距離が2以上か否かという2つの状態にそれぞれ異なる次元を割りあてた．
上位語候補がStep1の時点で図[REF_fig:list_pattern]のパターンにマッチしていた場合，子孫ノードに適切な下位語が列挙されやすい傾向がある．
例えば，図[REF_fig:wiki]（c）中の「主な紅茶ブランド」というノードは下位階層に「Lipton」，「Wedgwood」などの適切な下位語が列挙されており，上位語がStep1のパターンにマッチしていれば，その上位下位関係は適切だろうと推定できる．
素性PATでは，Step1の時点で上位語候補がパターンにマッチしている場合{この素性に対応する素性ベクトルの次元の値を1にセットするように設計した}．
素性MORPHでは，形態素間の類似性を判断しているため，「高校」や「公立校」のように形態素の一部が一致する語の類似性はないと判断してしまう欠点が存在する．
そこで上記のような事例を扱えるようにするため，素性LCHARでは，上位語候補と下位語候補の末尾の1文字が共通する複合語に意味的に似た語が多い特徴を利用し，素性MORPHの欠点を補う．
具体的には，上位語候補と下位語候補の末尾が同じとき，{この素性に対応する素性ベクトルの次元の値を1にセットするように設計した}．
