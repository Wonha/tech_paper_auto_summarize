本稿では，大量の上位下位関係をWikipediaから効率的に自動獲得する手法を提案する．
ここで「単語Aが単語Bの上位語である（または，単語Bが単語Aの下位語である）」とは，Millerの定義[CITE]に従い，「AはBの一種，あるいは一つである(B is a (kind of) A)」とネイティブスピーカーがいえるときであると定義する．
例えば，「邦画」は「映画」の，また「イチロー」は「野球選手」のそれぞれ下位語であるといえ，「映画／邦画」，「野球選手／イチロー」はそれぞれ一つの上位下位関係である．
以降，「A／B」はAを上位語，Bを下位語とする上位下位関係（候補）を示す．
一般的に上位下位関係獲得タスクは，上位下位関係にある表現のペアをどちらが上位語でどちらが下位語かという区別も行った上で獲得するタスクであり，本稿でもそれに従う．
本稿では概念—具体物関係（ex.野球選手／イチロー）を概念間の上位下位関係（ex.スポーツ選手／野球選手）と区別せず，合わせて上位下位関係として獲得する．
上位下位関係は様々な自然言語処理アプリケーションでより知的な処理を行うために利用されている[CITE]．
例えば，Fleischmanらは質問文中の語句の上位語を解答とするシステムを構築した[CITE]．
また鳥澤らはキーワード想起支援を目的としたWebディレクトリを上位下位関係をもとに構築した[CITE]．
しかしながら，このような知的なアプリケーションを実現するためには，人手で書き尽くすことが困難な具体物を下位語とする上位下位関係を網羅的に収集することが重要になってくる．
そこで本稿では，Wikipediaの記事中の節や箇条書き表現の見出しをノードとするグラフ構造（以降，記事構造とよぶ）から大量の上位下位関係を効率的に獲得する手法を提案する．
具体的には，まず記事構造上でノードを上位語候補，子孫関係にある全てのノードをそれぞれ下位語候補とみなし，上位下位関係候補{を}抽出する．
例えば，図[REF_fig:wiki]（b）のWikipediaの記事からは[REF_sec:wikipedia]節で述べる手続きにより，図[REF_fig:wiki]（c）のような記事構造が抽出できる．
この記事構造上のノード「紅茶ブランド」には，その子孫ノードとして「Lipton」，「Wedgwood」，「Fauchon」，「イギリス」，「フランス」が列挙されている．
提案手法をこの記事構造に適用すると，「紅茶ブランド」を上位語候補として，その子孫ノードを下位語候補群とする上位下位関係候補を獲得できる．
しかしながら獲得した下位語候補には，「Wedgwood」，「Fauchon」のように下位語として適切な語が存在する一方，「イギリス」，「フランス」のような誤りも存在する．
この例のように，記事構造は適切な上位下位関係を多く含む一方，誤りの関係も含むため，機械学習を用いて不適切な上位下位関係を取り除く．
以下，[REF_sec:bib]節で関連研究と本研究とを比較する．
[REF_sec:wikipedia]節で提案手法で入力源とするWikipediaの記事構造に触れ，[REF_sec:method]節で提案手法について詳細に述べる．
[REF_sec:exp]節では提案手法を日本語版Wikpediaに適用し，獲得された上位下位関係の評価を行う．
最後に[REF_sec:matome]節で本稿のまとめと今後の展望について述べる．
本稿では，大量の上位下位関係をWikipediaから効率的に自動獲得する手法を提案する．
ここで「単語Aが単語Bの上位語である（または，単語Bが単語Aの下位語である）」とは，Millerの定義[CITE]に従い，「AはBの一種，あるいは一つである(B is a (kind of) A)」とネイティブスピーカーがいえるときであると定義する．
例えば，「邦画」は「映画」の，また「イチロー」は「野球選手」のそれぞれ下位語であるといえ，「映画／邦画」，「野球選手／イチロー」はそれぞれ一つの上位下位関係である．
以降，「A／B」はAを上位語，Bを下位語とする上位下位関係（候補）を示す．
一般的に上位下位関係獲得タスクは，上位下位関係にある表現のペアをどちらが上位語でどちらが下位語かという区別も行った上で獲得するタスクであり，本稿でもそれに従う．
本稿では概念—具体物関係（ex.野球選手／イチロー）を概念間の上位下位関係（ex.スポーツ選手／野球選手）と区別せず，合わせて上位下位関係として獲得する．
上位下位関係は様々な自然言語処理アプリケーションでより知的な処理を行うために利用されている[CITE]．
例えば，Fleischmanらは質問文中の語句の上位語を解答とするシステムを構築した[CITE]．
また鳥澤らはキーワード想起支援を目的としたWebディレクトリを上位下位関係をもとに構築した[CITE]．
しかしながら，このような知的なアプリケーションを実現するためには，人手で書き尽くすことが困難な具体物を下位語とする上位下位関係を網羅的に収集することが重要になってくる．
そこで本稿では，Wikipediaの記事中の節や箇条書き表現の見出しをノードとするグラフ構造（以降，記事構造とよぶ）から大量の上位下位関係を効率的に獲得する手法を提案する．
具体的には，まず記事構造上でノードを上位語候補，子孫関係にある全てのノードをそれぞれ下位語候補とみなし，上位下位関係候補{を}抽出する．
例えば，図[REF_fig:wiki]（b）のWikipediaの記事からは[REF_sec:wikipedia]節で述べる手続きにより，図[REF_fig:wiki]（c）のような記事構造が抽出できる．
この記事構造上のノード「紅茶ブランド」には，その子孫ノードとして「Lipton」，「Wedgwood」，「Fauchon」，「イギリス」，「フランス」が列挙されている．
提案手法をこの記事構造に適用すると，「紅茶ブランド」を上位語候補として，その子孫ノードを下位語候補群とする上位下位関係候補を獲得できる．
しかしながら獲得した下位語候補には，「Wedgwood」，「Fauchon」のように下位語として適切な語が存在する一方，「イギリス」，「フランス」のような誤りも存在する．
この例のように，記事構造は適切な上位下位関係を多く含む一方，誤りの関係も含むため，機械学習を用いて不適切な上位下位関係を取り除く．
以下，[REF_sec:bib]節で関連研究と本研究とを比較する．
[REF_sec:wikipedia]節で提案手法で入力源とするWikipediaの記事構造に触れ，[REF_sec:method]節で提案手法について詳細に述べる．
[REF_sec:exp]節では提案手法を日本語版Wikpediaに適用し，獲得された上位下位関係の評価を行う．
最後に[REF_sec:matome]節で本稿のまとめと今後の展望について述べる．
