TDMTは，単純な表層パタンと用例で記述した変換知識の情報を用いて構成素境界解析と用例利用型処理を行なう．
構成素境界解析と用例利用型処理は構文解析や変換などを行なうTDMTの中心的処理である．
本節では，変換知識について説明したあと，TDMTの翻訳処理の概要について述べる．
変換知識は，[REF_cb-pattern]節で説明する構成素境界パタンにより表した原言語表現が，用例を訳し分け条件としてどのような目的言語表現に対応するかを記述する．
変換知識の作成は，原言語パタンごとに，システムが翻訳できるようなデータ形式に翻訳例を加工して行なう(この作業を以下，翻訳訓練と呼ぶ)．
例えば，「京都に来てください」→``Please come to Kyoto''という翻訳例の原言語部分から，「Xてください」と「XにY」という原言語パタンを抽出し，それぞれの原言語パタンについて変換知識を作成する．
「XにY」では，XとYの具体的な語の組(京都,来る)に対して目的言語パタンは``Y[MATH] to X[MATH]''になるという以下のような日英の変換知識を作る．
X[MATH]はXの対訳を示す．
この変換知識は，「空港に行く」→``go to the airport''や「三時に来る」→``come at three o'clock''のような翻訳例の翻訳訓練結果も含んでいる．
TDMTでは，変換知識の原言語パタンを用いて，入力文に適合する原言語構文構造の候補を作る．
また，変換知識の用例と目的言語パタンを用いて，最尤原言語構文構造とその変換結果である最尤目的言語構文構造を決定する．
なお，原言語パタンには，意味距離計算の対象となる入力文中の語を決めるために主部(head)となる部分がどこであるかという情報を与える（[REF_dis-input]節参照）．
目的言語パタンには，生成処理を助けるための情報を与える（[REF_output]節参照）．
本論文で提案するTDMTの構成を図[REF_flow]に示す．
入力文を形態素解析した後，構成素境界解析では，変換知識の原言語パタンを組み合わせて入力文に適合する原言語構文構造の候補を作る．
用例利用型処理では，構成素境界解析から送られた原言語構文構造候補の各パタンごとに，意味距離計算の対象となる入力文中の語の組に対して，変換知識の各用例との意味距離をシソーラスを参照して計算する．
最小の意味距離を与える用例を類似用例と定義する．
この類似用例の意味距離を元に構文構造のスコアを求め，最尤の原言語構文構造を決定する．
構成素境界解析の途中で入力文の部分に対する構文構造候補ができた場合，用例利用型処理で構文構造のスコアを計算して候補を絞り込みながら，構成素境界解析を進めていく．
構成素境界解析は入力文全体の原言語構文構造の候補を最終的に出力し，この候補の中から用例利用型処理で最尤のものを決定する．
用例利用型処理では，さらに，入力文全体の最尤の原言語構文構造について，構造を構成する各パタンからは変換知識の中で類似用例が与える目的言語パタンへ変換し，構造の終端の語句からは対訳辞書の中で対応する目的言語の語句へ変換して，最尤の目的言語構文構造を作る．
最後に，生成処理で，生成辞書を参照するなどして，最尤の目的言語構文構造から翻訳結果を出力する．
TDMTは，表層パタンの照合による構成素境界解析と用例利用型処理を組み合わせたことにより多言語話し言葉翻訳システムを構築する上で，以下のような利点を持つ．
多様な話し言葉表現の構文構造を単純なパタンの組み合わせにより記述できる．
（頑健性）
構文構造が単純であり，解析途中で候補を絞り込みながら構文構造を作り上げることにより，効率的な構文解析ができる．
（実時間性）
変換知識の記述が容易であり，構成素境界解析と用例利用型処理は単純で言語に依存しない手法なので，様々な言語ペアの翻訳に対応できる．
（汎用性）
構成素境界パタンは，変項と構成素境界により成り，文や名詞句など意味的にまとまった語句の構文構造を表す[CITE]．
変項は，XやYなどの記号により表し，構成素に対応する．
構成素として変項を具体化するのは，内容語と，構成素境界パタンに照合する語句である．
構成素境界は，機能語または品詞バイグラムマーカにより表し，構成素を関係づけたり修飾したりする．
構成素境界解析では，構成素境界をキーにして構文構造を作っていくため（[REF_algorithm]節参照），構成素境界のない「X Y」のような二つの変項が隣接するパタンは認めず，構成素の間には必ず構成素境界を置く．
以下，本節では，構成素境界パタンを用いた構文構造の記述方法について説明する．
構成素境界パタンの中で構成素境界を表す表層語句は原則として機能語であり，内容語は構成素となるので構成素境界には使用しない．
この制限により，パタンの種類が膨大になるのを防ぐことができる．
英語の前置詞，日本語や韓国語の助詞は頻出の機能語であり構成素境界となる．
例えば，英語語句``go to Kyoto''において，前置詞``to''が構成素境界として二つの構成素``go''と``Kyoto''の間にあると考え，構成素境界パタン``X to Y''を用いて図[REF_cbp-func]の(a)のように構文構造を記述する．
日本語語句「こちらは観光局」においても，機能語「は」が構成素境界として二つの構成素「こちら」と「観光局」の間にあり，構成素境界パタン「XはY」を用いて図[REF_cbp-func]の(b)のように構文構造を記述する．
[tbh]
(50,15)
英語語句``I go''は，二つの構成素``I''と``go''より成る．
しかし，この二つの構成素の間には表層語句は存在しない．
このような場合，形態素解析で品詞が確定した後に，品詞バイグラムマーカを二つの構成素の間に挿入する．
前方の構成素の最後の語の品詞をA，後続する構成素の先頭の語の品詞をBとすると，{[MATH]}A-B{[MATH]}を品詞バイグラムマーカと定義する．
本論文では，AとBを品詞の英語名で表すことにする．
連接する品詞Aと品詞Bの間に品詞バイグラムマーカ{[MATH]}A-B{[MATH]}を構成素境界として挿入する条件を以下に示す．
AもBも，前後の構成素を関係づける格助詞や前置詞のような品詞でない．
Aが，後続の構成素を修飾する連体詞や冠詞のような品詞でない．
Bが，前にある構成素を修飾する日本語や韓国語の助動詞や接尾語のような品詞でない．
例えば，「こちら{[MATH]}pronoun-particle{[MATH]}は{[MATH]}particle-noun{[MATH]}観光局」や``go {[MATH]}verb-preposition{[MATH]} to {[MATH]}preposition-propernoun{[MATH]} Kyoto''のような品詞バイグラムマーカの挿入は[1]の条件に抵触するので認めない．
「その」と「ホテル」の間や``the''と``bus''の間は[2]に，「行き」と「ます」の間や「鈴木」と「さん」の間は[3]に，それぞれ抵触するので品詞バイグラムマーカは挿入しない．
品詞バイグラムマーカは，本節の条件により機械的に挿入することができ，単語名でなく品詞名を使うので種類を限定することができる．
英語語句``I go''の``I''と``go''はそれぞれ代名詞と一般動詞であり，{[MATH]}pronoun-verb{[MATH]}を構成素境界としてそれらの間に挿入する．
この結果，``I go''は``I {[MATH]}pronoun-verb{[MATH]} go''に修正され，パタン``X {[MATH]}pronoun-verb{[MATH]} Y''に照合可能になる．
従って，``I go''の構造は図[REF_cbp-bi]の(a)のように記述できる．
また，日本語の話し言葉では，「こちら観光局」のように助詞がしばしば省略される．
この語句は「こちら」と「観光局」という二つの構成素より成る．
「こちら」は代名詞，「観光局」は普通名詞なので，{[MATH]}pronoun-noun{[MATH]}を構成素境界として「こちら」と「観光局」の間に挿入する．
修正された「こちら{[MATH]}pronoun-noun{[MATH]}観光局」は「X{[MATH]}pronoun-noun{[MATH]}Y」に照合可能になる．
品詞バイグラムマーカ{[MATH]}pronoun-noun{[MATH]}が「は」と同様の働きをすることにより，助詞が脱落していない「こちらは観光局」と同様の構造を助詞脱落表現についても図[REF_cbp-bi]の(b)のように記述することができる．
[tbh]
(81,14)
文献[CITE]のTDMTは，「空港バス」や「会場入り口」など複数の名詞が連続した複合名詞を``NOUN[MATH] NOUN[MATH]''という品詞列パタンにより表し，「XのY」のような表層パタンの場合とは異なる照合のメカニズムを使っていた．
品詞バイグラムマーカの導入により，複数の名詞が連続した複合名詞も，「X{[MATH]}noun-noun{[MATH]}Y」のように構成素境界パタンで表現でき，表層パタンの照合のみで構文解析を行なうことが可能になった．
すなわち，「空港バス」のような複合名詞も「こちら観光局」のような助詞脱落表現も，品詞バイグラムマーカにより構文構造を記述できる．
本論文で提案する品詞バイグラムマーカの挿入により，助詞脱落表現に具体的な助詞を補完する手法[CITE]で生じた，補完する助詞を誤る，補完すべきでない時に助詞を補完する，などの問題を解決することができる．
変項の間に必ず構成素境界を置けば，「そのX」，「XにY」，「XからYまでZ」など，変項の数に制限なく構成素境界パタンを作ることができる．
また，「明日までに行く」という語句では機能語である助詞「まで」と「に」が連続している．
「まで」と「に」の間は[REF_bigram-marker]節の条件[1]に抵触するので品詞バイグラムマーカを挿入する必要はなく，機能語を連続させて構成素境界とした「XまでにY」のような構成素境界パタンを作ることができる．
構成素境界パタンに照合する語句は，構成素として別の構成素境界パタンの変項を具体化することができる．
すなわち，構成素境界パタンを組み合わせることにより構文構造を作ることができる．
任意の長さの複合名詞も，「X{[MATH]}noun-noun{[MATH]}Y」のような構成素境界パタンの組み合わせにより構文構造を記述できる．
しかし，パタンの組み合わせ方によってはありえない構文構造ができるので，構文解析の品質や効率を上げるためにこのような構造を排除する必要がある．
このため，本論文では，パタンを構造レベルによって分類し，各構造レベルのパタンの変項を具体化できる語句について，そのサブ構造レベルと品詞を表[REF_var]のようにあらかじめ指定する．
これにより，パタンの組み合わせ方を制限し，ありえない構文構造を排除することができる．
例えば，``I go to Kyoto''という文の構文構造は，``X {[MATH]}pronoun-verb{[MATH]} Y''と``X to Y''というパタンの組み合わせになる．
``I go to Kyoto''の正しい構造は図[REF_Igoto]の(a)であり，(b)の構造は排除しなくてはならない．
``X {[MATH]}pronoun-verb{[MATH]} Y''を単文レベル，``X to Y''を動詞句レベルのパタンに指定し，表[REF_var]のように動詞句の下部構造を制限すれば，``X {[MATH]}pronoun-verb{[MATH]} Y''は``X to Y''の下部構造とはなりえないので，(b)の構造は排除される．
[tbh]
(90,24)
構成素境界解析は，相互情報量を用いて再帰的に構成素境界を検知して構文構造を求める頑健な構文解析手法としても提案されているが[CITE]，統計処理への依存が強く，文法情報をほとんど利用しないため解析精度に問題があった．
本論文で提案する構成素境界解析は，意味的にまとまった語句について構成素境界パタンを作り，構造レベルでパタンを分類するなど，単純で緩やかな文法制約を与えることにより高精度の構文解析を可能にする．
本節では，チャート法に基づくアルゴリズムで，逐次的に入力文の語を読み込んでボトムアップに構文構造を作り上げる構成素境界解析について説明する．
チャート法は活性弧と不活性弧を組み合わせることにより入力文の構文構造を作る．
図[REF_passive]の(a)のような内容語による構造，構成素境界パタンのすべての変項が具体化された(b)と(c)のような構造は不活性弧に対応する．
[MATH]は，構文解析で読み込み中の語を指す走査カーソルである．
入力文の構文構造は，入力文全体をカバーする不活性弧に対応する．
構成素境界パタン中に具体化されていない変項がある図[REF_active]の(d)と(e)のような構造は活性弧に対応する．
[h]
(60,16)
[h]
(30,13)
チャート法は，部分的な構文解析結果を弧で表すことにより同じ解析を繰り返すのを回避し，効率的な構文解析を行なう．
さらに，構成素境界パタンを使ったチャート法の構文解析では，表層をキーとして弧を張っていくので，競合する構成素境界パタンが少ない．
従って，張られる弧の数も少ないため，処理時間をより一層抑えることができる．
「友人とハワイに来週行きます」という日英翻訳の入力文を例にとって，TDMTの構成素境界解析を説明する．
まず，形態素解析により入力文の各語の品詞を次のように決定する．
[REF_bigram-marker]節の条件を満たす品詞バイグラムマーカは，普通名詞と動詞の間の{[MATH]}noun-verb{[MATH]}のみであり，入力文は「友人とハワイに来週{[MATH]}noun-verb{[MATH]}行きます」に修正される．
修正された入力文に対し，以下のアルゴリズムに従って，逐次的にボトムアップの構成素境界解析を行なう．
以下では，語と語の間に節点を置き，左から[MATH]番目の語の左隣には節点{[MATH]}が，右隣には節点{[MATH]}があるものとする．
弧は節点から節点に張るものとする．
先頭の語に走査カーソルを設定し，[MATH]として，(i)へ．
走査カーソルの指す語が名詞や動詞などの内容語であれば，節点[MATH]から節点[MATH]に不活性弧を張り，(iii)へ．
そうでなければ，(ii)へ．
走査カーソルの指す語が構成素境界[MATH]であれば，構成素境界から構成素境界パタンへの対応表を参照することにより，構成素境界パタンを検索
する．
検索されたすべてのパタンについて，その形式に応じて(ii.a)[MATH](ii.e)のいずれかの処理を行なったうえで，(iii)へ．
パタンが検索できなければ，(iv)へ．
\samepage{
「X[MATH]Y」，「X[MATH]Y[MATH]Z」，「X[MATH]Y」のように，[MATH]の左が変項一つのみであり，[MATH]が右端でないパタンが検索された場合，そのパタンの[MATH]の左隣の変項を，節点[MATH]から節点[MATH]（ただし，[MATH]）に張られた不活性弧で具体化できれば，検索されたパタンに関する活性弧を節点[MATH]から節点[MATH]に張る．
「X[MATH]」のように，[MATH]の左が変項一つのみであり，[MATH]が右端であるパタンが検索された場合，そのパタンの[MATH]の左の変項を，節点[MATH]から節点[MATH]に張られた不活性弧で具体化できれば，検索されたパタンに関する不活性弧を節点[MATH]から節点[MATH]に張る．
「[MATH]X」，「[MATH]X[MATH]」のように，[MATH]が左端であるパタンが検索された場合，検索されたパタンに関する活性弧を節点[MATH]から節点[MATH]に張る．
「X[MATH]Y[MATH]Z」，「X[MATH]Y」のように，[MATH]の左に別の構成素境界があり，[MATH]が右端でないパタンが検索された場合，検索されたパタンに関する活性弧が，[MATH]より左のみ具体化されて節点[MATH]から節点[MATH]に張られていれば，検索されたパタンに関する活性弧を節点[MATH]から節点[MATH]に張る．
「[MATH]X[MATH]」のように，[MATH]の左に別の構成素境界があり[MATH]が右端であるパタンが検索された場合，検索されたパタンに関する活性弧が，[MATH]より左が具体化されて節点[MATH]から節点[MATH]に張られていれば，検索されたパタンに関する不活性弧を節点[MATH]から節点[MATH]に張る．
節点[MATH]から節点[MATH]（ただし，[MATH]）に新しく張られた不活性弧が，節点[MATH]から節点[MATH]（ただし，[MATH]）に張られた活性弧を構成するパタンの中のまだ具体化されていない最左の変項を具体化できれば，さらに節点[MATH]から節点[MATH]に新しい不活性弧または活性弧を張る．
新しい弧が張れなくなるまでこの操作を繰り返し，(iv)へ．
走査カーソルの指す語が入力文の最後の語であれば，解析終了．
そうでなければ，走査カーソルを右へ一語移動させ，[MATH]として，(i)へ．
}
(ii)で参照する対応表は，システムが持つ変換知識の原言語パタンからあらかじめ機械的に作成しておく．
例文の構成素境界解析において検索される構成素境界パタンを表[REF_ch1:tret]に示す．
図[REF_chart]は入力文に対して弧が張られていく過程を示すチャートである．
実線は不活性弧を，点線は活性弧を示し，弧のできる順序を示す番号により弧を識別する．
先頭の語「友人」は内容語であり，不活性弧(1)を張る．
次の語「と」により「XとY」のXを(1)で具体化させた活性弧(2)と(3)を張る．
「XとY」は(2)では動詞句のパタン，(3)では名詞句のパタンである．
「ハワイ」により不活性弧(4)を張る．
(3)の「XとY」のYを(4)で具体化し，不活性弧(5)を張る．
次の語「に」から検索された動詞句パタン「XにY」のXを(4)と(5)でそれぞれ具体化し，活性弧(6)と(7)を張る．
「来週」により不活性弧(8)を張る．
{[MATH]}noun-verb{[MATH]}から検索された「X{[MATH]}noun-verb{[MATH]}Y」のXを(8)で具体化し，活性弧(9)を張る．
「行き」により不活性弧(10)を張り，(9)の「X{[MATH]}noun-verb{[MATH]}Y」のYを(10)で具体化し，不活性弧(11)を張る．
(6)と(7)の「XにY」のYを(11)で具体化し，それぞれ不活性弧(12)と(13)を張る．
さらに，(2)の「XとY」のYを(12)で具体化し，不活性弧(14)を張る．
入力文の最後の語「ます」から検索された「Xます」のXを(14)と(13)で具体化し，それぞれ不活性弧(15)と(16)を張る．
すべての語を読み込み終えて，これ以上新たな弧が張れない状態になり，解析は終了する．
入力文全体をカバーする不活性弧(15)と(16)が入力文の構文構造の候補に対応する．
図[REF_15and16]に入力文の構文構造の候補を示す．
パタンに付随する番号は，そのパタンを最上部とする構文構造が対応する不活性弧を示す．
本節では，構成素境界解析で得られた入力文の構文構造の候補から，意味距離計算によって最尤の目的言語構文構造を決定する用例利用型処理について，[REF_algorithm]節の例文を使って説明する．
現在，TDMTでは，シソーラス上での意味属性の位置関係により単語間に0[MATH]1の意味距離を与え[CITE]，構成素境界パタンに関する意味距離を，各変項についての単語間の意味距離の合計値としている．
不活性弧(11)を構成する「X{[MATH]}noun-verb{[MATH]}Y」では，XとYを具体化する語の組(来週,行く)を意味距離計算の対象として，「X{[MATH]}noun-verb{[MATH]}Y」に関する変換知識の用例との意味距離を計算する．
例えば，(来週,行く)と用例(明日,来る)の間の意味距離は，「来週」と「明日」の間の意味距離と，「行く」と「来る」の間の意味距離の合計値である．
構成素境界パタンに照合する語句が上部の構成素境界パタンの変項を具体化している場合，主部の語の組を対象として用例との意味距離を計算する．
構成素境界パタンで主部となる部分の情報は変換知識に記述しておき，主部は下部の構造から上部の構造へ伝搬するという性質を利用して，主部の語を機械的に求めることができる．
不活性弧(12)では「XにY」のXとY を，「ハワイ」と「来週{[MATH]}noun-verb{[MATH]}行き」でそれぞれ具体化する．
「X{[MATH]}noun-verb{[MATH]}Y」ではYを主部に定めているとすると，「来週{[MATH]}noun-verb{[MATH]}行き」の主部は「行き」であり，不活性弧(12)の「XにY」に関する意味距離計算の対象は(ハワイ,行く)となる．
用例利用型処理では，構文構造を構成する各構成素境界パタンについて類似用例を変換知識の中から求める．
類似用例の与える情報により，最尤の原言語構文構造を決定し，その構造を目的言語に変換して，最尤の目的言語構文構造を得る．
不活性弧(15)と(16)に対応する構文構造を構成する構成素境界パタンについて，意味距離計算の結果を表[REF_d-cal]のように仮定する．
類似用例が与える意味距離を，構文構造を構成する構成素境界パタンについてすべて合計した値を，構文構造のスコアと定義し，このスコアが最小のものを最尤の構文構造とする[CITE]．
不活性弧(15)に対応する構文構造では，「XとY」(動詞句)，「XにY」，「X{[MATH]}noun-verb{[MATH]}Y」，「Xます」で類似用例が与える意味距離，0.34，0.18，0.12，0.00を合計した0.64がスコアとなる．
不活性弧(16)に対応する構文構造では，「XとY」(名詞句)，「XにY」，「X{[MATH]}noun-verb{[MATH]}Y」，「Xます」で類似用例が与える意味距離1.01，0.18，0.12，0.00を合計した1.31がスコアとなる．
従って，不活性弧(15)に対応する構文構造が最小のスコアを持ち，入力文全体についての最尤の原言語構文構造となる．
最尤の原言語構文構造の各構成素境界パタンを，変換知識の中で類似用例が訳し分け条件となって与える目的言語パタンへと変換することにより，最尤の目的言語構文構造を作る．
不活性弧(15)に対応する構文構造では，各構成素境界パタンは表[REF_d-cal]の5列目に示す目的言語パタンに変換される．
内容語の「友人」，「ハワイ」，「来週」，「行き」は，対訳辞書を参照して``friend''，``Hawaii''，``next week''，``go''にそれぞれ変換され，図[REF_(15)]に示す目的言語構文構造ができる．
矢印の上の数字は，各構成素境界パタンのスコアである．
用例利用型処理で得られた最尤の目的言語構文構造は，原言語構文構造の性質を受け継いでいるため，そのまま線条化すると，``I will go next week to Hawaii with the friend''となってしまう．
そこで，``Y[MATH] X[MATH]''の``X[MATH]''は時間格，``Y[MATH] to X[MATH]''の``to X[MATH]''は場所格，というような情報をあらかじめ変換知識の目的言語パタンに与えておいたうえで，語順や活用などの調整を生成処理で行ない，以下のような英語文を出力する．
``I will go to Hawaii with the friend next week''
意味距離計算により構文構造のスコアを得るためには，下部の構造での主部の語を確定させ意味距離計算の対象を決定する必要がある．
不活性弧は，構文構造を構成する構成素境界パタンのすべての変項が具体化されている構造であり，構成素境界パタンの主部の語をすべて求めることができるので意味距離計算の対象が決定し，構文構造のスコアが得られる．
TDMTでは，処理時間を短縮するために，入力文の同じ部分に対して作られる不活性弧をスコアにより順位づけし，上位n個(n-best)の不活性弧のみを保持して構文解析を進めていく．
すなわち，解析途中で構文構造候補の絞り込みを行なう．
保持した不活性弧にはスコアと主部の情報を与え，上部の構造で意味距離計算による構文構造候補の絞り込みが容易にできるようにする．
意味距離計算により解析途中で構文構造候補を絞り込むには，[REF_algorithm]節のアルゴリズムのようなボトムアップの解析が必要である．
TDMTシステムは現在，1-bestをデフォルトとして解析途中での構文構造候補の絞り込みを行なっているが，nの値は容易に変更可能である．
例えば，[REF_algorithm]節の入力文の解析の途中で，「友人とハワイに来週{[MATH]}noun-verb{[MATH]}行き」に対して，二つの不活性弧(13)と(14)ができる．
保持する不活性弧を1-bestにして構文解析を行なうと，スコアの良い(14)のみが「友人とハワイに来週{[MATH]}noun-verb{[MATH]}行き」について保持され，「Xます」のXを(14)で具体化した(15)のみが入力文の構文構造に対応する．
(13)は途中で枝刈りされるので(16)に対応する構文構造は作られない．
