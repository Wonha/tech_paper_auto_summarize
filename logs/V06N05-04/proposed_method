TDMTの枠組

TDMTは，単純な表層パタンと用例で記述した変換知識の情報を用いて構成素境
界解析と用例利用型処理を行なう．構成素境界解析と用例利用型処理は構文解
析や変換などを行なうTDMTの中心的処理である．本節では，変換知識について
説明したあと，TDMTの翻訳処理の概要について述べる．

\subsection{変換知識}~\label{tk}
変換知識は，\ref{cb-pattern}節で説明する構成素境界パタンにより表した原言語表現が，
用例を訳し分け条件としてどのような目的言語表現に対応するかを記述する．
変換知識の作成は，原言語パタンごとに，システムが翻訳
できるようなデータ形式に翻訳例を加工して行なう(この作業を以
\clearpage
\noindent
下，翻訳訓
練と呼ぶ)．例えば，「京都に来てください」→``{\it Please come to
Kyoto}''という翻訳例の原言語部分から，「Xてくださ
い」と「XにY」という原言語パタンを抽出し，それぞれの原言語パタンについて
変換知識を作成する．「XにY」では，XとYの具体的な
語の組(京都, 来る)に対して目的言語パタンは
``Y$'$ {\it to} X$'$''になるという以下のような日英の変換知
識を作る~\footnote{本論文では，XやYのようなパタンの変項を具
体化する語の組で，変換知識の中で訳し分け条件と
して記述されているものを用例と呼ぶ．
\ref{tk}節の「XにY」に関する変換知識の例では
(京都, 来る)や(空港, 行く)が用例である．
}．X$'$はXの対訳を示す．

\begin{center}
\begin{tabular}{cll}
X に Y &$=>$ & Y$'$ {\it to} X$'$
((京都, 来る),(空港, 行く)...),\\
&& Y$'$ {\it at} X$'$
((三時, 来る), ...),\\
&&\hspace*{5mm} :
\end{tabular}
\end{center}

この変換知識は，
「空港に行く」 → ``{\it go to the airport}''や
「三時に来る」 → ``{\it come at three o'clock}''のような翻訳例の
翻訳訓練結果も含んでいる．

TDMTでは，変換知識の原言語パタンを用いて，入力文に適合する原言語構文構造の候補を作る．
また，変換知識の用例と目的言語パタンを用いて，
最尤原言語構文構造とその変換結果である最尤目的言語構文構造を決定する．
なお，原言語パタンには，意味距離計算の対象となる入力文中の語を決めるために主
部(head)となる部分がどこであるかという情報を与える（\ref{dis-input}節
参照）．目的言語パタンには，生成処理を助けるための情報を与える（\ref{output}節
参照）．

\subsection{翻訳処理の概要}

本論文で提案するTDMTの構成を図~\ref{flow}に示す．

\begin{figure*}[htb]
\begin{center}
\epsfile{file=flow.eps,hscale=1,vscale=1}
\vspace{-2mm}
\caption{TDMTの構成}
\label{flow}
\end{center}
\end{figure*}

\vspace*{-4mm}
入力文を形態素解析した後，
構成素境界解析では，変換知識の原言語パタン
を組み合わせて入力文に適合する原言語構文構造の候補を作る．

用例利用型処理では，構成素境界解析から送られた原言語構文構造候補の各パタンごとに，
意味距離計算の対象となる入力文中の語の組に対して，変換知識の各用例との
意味距離をシソーラスを参照して計算する．
最小の意味距離を与える用例を類似用例と定義する．
この類似用例の意味距離を元に構文構造のスコアを求め，
最尤の原言語構文構造を決定する．

構成素境界解析の途中で入力文の部分に対する構文構造候補ができた場合，
用例利用型処理で構文構造のスコアを計算して候補を絞り込みながら，
構成素境界解析を進めていく．
構成素境界解析は入力文全体の原言語構文構造の候補を最終的に出力し，
この候補の中から用例利用型処理で最尤のものを決定する．

用例利用型処理では，さらに，入力文全体の最尤の原言語構文構造について，
構造を構成する各パタンからは変換知識の中で類似用例が与える目的言語パタンへ変換し，
構造の終端の語句からは対訳辞書の中で対応する目的言語の語句へ変換して，
最尤の目的言語構文構造
を作る~\footnote{原言語構文構造を作りながら
目的言語構文構造へ変換することも可能であるが，
現在は，翻訳処理の省力化のため，
枝刈りされる原言語構文構造についての変換・生成は
行なっていない．
翻訳入力の途中で部分的な翻訳結果を出力する同時翻訳機構では，
構文解析と変換・生成を同時に行なう必要がある．}． 
最後に，生成処理で，生成辞書を参照するなどして，
最尤の目的言語構文構造から翻訳結果を出力する．

TDMTは，表層パタンの照合による構成素
境界解析と用例利用型処理を組み合わせたことにより多言語話し言葉翻訳システムを
構築する上で，以下のような利点を持つ．
\vspace*{6mm}

\begin{itemize}
\item 多様な話し言葉表現の構文構造を単純なパタンの組み合わせにより記述できる．（頑健性）
\item 構文構造が単純であり，解析途中で候補を絞り込みながら構文構造を作り上げることにより，効率的な構文解析ができる．（実時間性）
\item 変換知識の記述が容易であり，
構成素境界解析と用例利用型処理は単純で言語に依存しない手法なので，
様々な言語ペアの翻訳に対応できる．（汎用性）
\end{itemize}

構成素境界パタン~\label{cb-pattern}

構成素境界パタンは，変項と構成素境界により成り，文や名詞句など意味的に
まとまった語句の構文構造を表す~\cite{Furuse2}．
変項は，XやYなどの記号により表し，構成素に対応する．
構成素として変項を具体化するのは，
内容語と，構成素境界パタンに照合する語句である．
構成素境界は，機能語または品詞バイグラムマーカにより表し，構成素
を関係づけたり修飾したりする．構成素境界解析では，構成素境界をキー
にして構文構造を作っていくため（\ref{algorithm}節参照），構成素境界の
ない「X Y」のような二つの変項が隣接するパタンは認めず~\footnote{
目的言語表現は，構成素境界パタンでない「X$'$ Y$'$」のようなパ
タンでも表すことができる．構成素境界は構文解析のために使い，生成では必
ずしも必要としない．}，
構成素の間には必ず構成素境界を置く．

以下，本節では，
構成素境界パタンを用いた構文構造の記述方法について説明する．

\subsection{構成素境界としての機能語}

構成素境界パタンの中で構成素境界を表す表層語句は原則とし
て機能語であり，内容語は構成素となるので構成素境界には使用しない．
この制限により，パタンの種類が膨大に
なるのを防ぐことができる．

英語の前置詞，日本語や韓国語の助詞は頻出の機能語であり構成素境界となる．
例えば，英語語句``{\it go to Kyoto}''において，前置詞``{\it to}''が構
成素境界として二つの構成素``{\it go}''と``{\it Kyoto}''の間にあると
考え，構成素境界パタン``X {\it to} Y''を用いて図~\ref{cbp-func}の(a)のよう
に構文構造を記述する．日本語語句「{\it こちらは観光局}」においても，機能
語「{\it は}」が構成素境界として二つの構成素「{\it こちら}」と「{\it 
観光局}」の間にあり，構成素境界パタン「XはY」を用いて図~\ref{cbp-func}の(b)
のように構文構造を記述する．

\begin{figure}[tbh]
  \begin{center}
     \setlength{\unitlength}{1mm}
     \begin{picture}(50,15)
       \begin{small}
       \put(4,13){ \shortstack{X {\it to} Y}}
       \put(6,9){\line(0,1){3}}
       \put(3,6){ \shortstack{{\it go}}}
       \put(14,9){\line(0,1){3}}
       \put(9,6){ \shortstack{{\it Kyoto}}}
       \put(8,1){ \shortstack{(a)}}

       \put(37,13){ \shortstack{X は Y}}
       \put(39,9){\line(0,1){3}}
       \put(32,6){ \shortstack{{\it こちら}}}
       \put(47,9){\line(0,1){3}}
       \put(44,6){ \shortstack{{\it 観光局}}}
       \put(40,1){ \shortstack{(b)}}

     \end{small}
     \end{picture}

     \caption{構文構造（機能語が構成素境界）}
  \label{cbp-func}

  \end{center}
\end{figure}


\subsection{構成素境界としての品詞バイグラムマーカ}

\subsubsection{品詞バイグラムマーカの挿入}~\label{bigram-marker}

英語語句``{\it I go}''は，二つの構成素``{\it I}''と``{\it go}''より成
る．しかし，この二つの構成素の間には表層語句は存在しない．このような場
合，形態素解析で品詞が確定した後に，品詞バイグラムマーカを二つの構成素の間に挿入する．
前方の構成素の最後の語の品詞をA，後続する構成素の先頭の語の
品詞をBとすると，{\footnotesize $<$}A-B{\footnotesize $>$}を
品詞バイグラムマーカと定義する．本論文では，AとBを品詞の英語名で表すこ
とにする．

連接する品詞Aと品詞Bの間に品詞バイグラムマーカ{\footnotesize
$<$}A-B{\footnotesize $>$}を構成素境界として挿入する\break
条件を以下に示す．

\vspace*{6mm}

\begin{enumerate}
\renewcommand{\labelenumi}{}
\item  \hspace*{-3mm}AもBも，前後の構成素を関係づける格助詞や前置詞のような品詞でない．

\item  \hspace*{-3mm}Aが，後続の構成素を修飾する連体詞や冠詞のような品詞でない．
\item  \hspace*{-3mm}Bが，前にある構成素を修飾する日本語や韓国語の助動詞や接尾語のような品詞でない．
\end{enumerate}

\vspace*{6mm}

例えば，「こちら{\footnotesize $<$}pronoun-particle{\footnotesize $>$}
は{\footnotesize $<$}particle-noun{\footnotesize $>$}観光局」や``{\it
go} {\footnotesize $<$}verb-preposition{\footnotesize $>$} {\it to}
{\footnotesize $<$}preposition-propernoun{\footnotesize $>$} {\it Kyoto}''
のような品詞バイグラムマーカの挿入は[1]の条件に抵触するので認めない．
「{\it その}」と「{\it ホテル}」の間や``{\it the}''と``{\it bus}''の間
は[2]に，「{\it 行き}」と「{\it ます}」の間や「{\it 鈴木}」と「{\it さ
ん}」の間は[3]に，それぞれ抵触するので品詞バイグラムマーカは挿入しな
い．
品詞バイグラムマーカは，
本節の条件により機械的に挿入することができ，
単語名でなく品詞名を使うので種類を限定することができる~\footnote{
用例利用型処理（\ref{ebmt}節参照）により高精度の構文解析や変換を実現するためには
変換知識の各パタンにできるだけ多くの用例を付与することが望ましい．
そこで，品詞バイグラムマーカを「X{\footnotesize $<$}$\ast$-$\ast${\footnotesize $>$}Y」のように一本化
して用例を集約することも考えられる．
しかし，英語のパタン``X {\footnotesize $<$}pronoun-verb{\footnotesize $>$} Y''が照合するのは
``{\it I} {\footnotesize $<$}pronoun-verb{\footnotesize $>$} {\it go}''のような
単文レベルの表現にほぼ限定されるというように，
品詞バイグラムマーカの挿入位置が構成素境界パタンの構造レベル（\ref{combination}節参照）に関係す
る場合があるので，現在はマーカを挿入位置の前後の品詞で区別している．}．

\subsubsection{品詞バイグラムマーカを用いた構文構造記述}

英語語句``{\it I go}''の``{\it I}''と``{\it go}''はそれぞれ代名詞と一般動詞であり，
{\footnotesize $<$}pronoun-verb{\footnotesize $>$}を\mbox{構成}素境界と
してそれらの間に挿入する．この結果，``{\it I go}''は``{\it I} {\footnotesize
$<$}pronoun-verb{\footnotesize $>$} {\it go}''に修正され，パタン``X
{\footnotesize $<$}pronoun-verb{\footnotesize $>$} Y''に照合可能になる．
従って，``{\it I go}''の構造は図~\ref{cbp-bi}の(a)のように記述できる．

また，日本語の話し言葉では，「こちら観光局」のように助詞がしばしば省略
される．この語句は「こちら」と「観光局」という二つの構成素より成る．
「こちら」は代名詞，「観光局」は普通名詞なので，
{\footnotesize $<$}pronoun-noun{\footnotesize $>$}を構成素境界として
「こちら」と「観光局」の間に挿入する．修正された「こちら{\footnotesize
$<$}pronoun-noun{\footnotesize $>$}観光局」は「X{\footnotesize
$<$}pronoun-noun{\footnotesize $>$}Y」に照合可能になる．品
詞バイグラムマーカ{\footnotesize $<$}pronoun-noun{\footnotesize $>$}が
「は」と同様の働きをすることにより，助詞が脱\break
落していない「こちらは観光
局」と同様の構造を助詞脱落表現についても図~\ref{cbp-bi}の(b)のように記
述することができる．

\begin{figure}[tbh]
  \begin{center}
     \setlength{\unitlength}{1mm}
     \begin{picture}(81,14)
       \begin{small}

       \put(1,13){ \shortstack{X {\footnotesize $<$}pronoun-verb{\footnotesize $>$} Y}}
       \put(3,9){\line(0,1){3}}
       \put(1,6){ \shortstack{{\it I}}}
       \put(32,9){\line(0,1){3}}
       \put(29,6){ \shortstack{{\it go}}}
       \put(14,1){ \shortstack{(a)}}

       \put(45,13){ \shortstack{X {\footnotesize $<$}pronoun-noun{\footnotesize $>$} Y}}
       \put(47,9){\line(0,1){3}}
       \put(42,6){ \shortstack{{\it こちら}}}
       \put(76,9){\line(0,1){3}}
       \put(71,6){ \shortstack{{\it 観光局}}}
       \put(57,1){ \shortstack{(b)}}

     \end{small}
     \end{picture}

     \caption{構文構造（品詞バイグラムマーカが構成素境界）}
  \label{cbp-bi}

  \end{center}
\end{figure}

文献\cite{Furuse}のTDMTは，「空港バス」や「会場入り口」など複数の名詞が連
続した複合名詞を``NOUN$_{1}$ NOUN$_{2}$''という品詞列パタンにより
表し，「XのY」のような表層パタンの場合とは異なる照合のメカニズムを使っ
ていた．品詞バイグラムマーカの導入により，複数の名詞が連続した複合名詞
も，「X{\footnotesize $<$}noun-noun{\footnotesize $>$}Y」のように構成
素境界パタンで表現でき，表層パタンの照合のみで構文解析を行なうこ
とが可能になった．
すなわち，「空港バス」のような複合名詞も「こちら観光局」のような助詞脱落表現も，
品詞バイグラムマーカにより構文構造を記述できる．
本論文で提案する品詞バイグラムマーカの挿入により，
助詞脱落表現に具体的な助詞を補完する手法~\cite{Furuse}で生じた，補完
する助詞を誤る，補完すべきでない時に助詞を補完する，などの問題を
解決することができる．

\subsection{多様な構成素境界パタン}

変項の間に必ず構成素境界を置けば，
「そのX」，「XにY」，「XからYまでZ」など，
変項の数に制限なく構成素境界パタンを作ることができる．

また，「明日までに行く」という語句では機能語である助詞「まで」と「に」
が連続している．「まで」と「に」の間は\ref{bigram-marker}節の条件[1]に抵触するので
品詞バイグラムマーカを挿入する必要はなく，
機能語を連続させて構成素境界とした「XまでにY」のような
構成素境界パタンを作ることができる．

\subsection{構成素境界パタンの組み合わせ}~\label{combination}

構成素境界パタンに照合する語句は，
構成素として別の構成素境界パタンの変項を具体化することができる．
すなわち，構成素境界パタンを組み合わせることにより構文構造を作ることができる．
任意の長さの複合名詞も，「X{\footnotesize $<$}noun-noun{\footnotesize $>$}Y」の
ような構成素境界パタンの組み合わせにより構文構造を記述できる．

しかし，パタンの組み合わせ方によってはありえない構文構造ができるので，
構文解析の品質や効率を上げるためにこのような構造を排除する必要がある．
このため，本論文では，パタンを構造レベルによって分類し，
各構造レベルのパタンの
変項を具体化できる語句について，そのサブ構造レベルと品
詞を表~\ref{var}のようにあらかじめ指定
する~\footnote{これは各構造レベルで，変項すべてについて適用される緩や
かな制限である．英語のパタン``X {\footnotesize $<$}pronoun-verb{\footnotesize $>$}
Y''のXは名詞性のパタンや語でしか具体化できないなど，より厳しい制限を特
定の変項についてローカルに与えることもできる．}．
これにより，パタンの組み合わせ方を制限し，ありえない構文構造を排除する
ことができる．

\renewcommand{\arraystretch}{}
\begin{table}[tbh]
\begin{center}
 \caption{構造レベルの関係}
 \label{var}
 \begin{small}
\begin{tabular}{|l|l|} \hline
         構造レベル & 変項を具体化できるサブ構造レベルと品詞 \\  \hline
        複文，重文 & 複文, 重文, 単文, 動詞句, $\ldots$\\
        単文 & 動詞句, 名詞句, 複合名詞, $\ldots$\\
        動詞句  &  動詞句,  名詞句, 複合名詞, 一般動詞, $\ldots$\\
        名詞句  &  名詞句, 複合名詞,  普通名詞, 固有名詞, $\ldots$ \\
        複合名詞 &  複合名詞, 普通名詞, $\ldots$ \\  \hline
\end{tabular}
\end{small}
\end{center}
\end{table}


例えば，``{\it I go to Kyoto}''という文の構文構造は，
``X {\footnotesize $<$}pronoun-verb{\footnotesize $>$} Y''と
``X {\it to} Y''というパタンの組み合わせになる．``{\it I go to Kyoto}''の正しい
構造は図~\ref{Igoto}の(a)であり，(b)の構造は排除しなくてはならない．
``X {\footnotesize $<$}pronoun-verb{\footnotesize $>$} Y''を単文レベル，
``X {\it to} Y''を動詞句レベルのパタンに指定し，
表~\ref{var}のように動詞句の下部構造を制限すれば，
``X {\footnotesize $<$}pronoun-verb{\footnotesize $>$} Y''は``X {\it to} Y''
の下部構造とはなりえないので，(b)の構造は排除される．


\begin{figure}[tbh]
  \begin{center}
     \setlength{\unitlength}{1mm}
     \begin{picture}(90,24)

       \put(2,21){\shortstack{\small X{\footnotesize $<$}pronoun-verb{\footnotesize $>$}Y}}
       \put(3,17){\line(0,1){3}}
       \put(1,13){ \shortstack{\small \it I}}
       \put(30,17){\line(0,1){3}}
       \put(24,14){ \shortstack{\small X {\it to} Y}}
       \put(26,10){\line(0,1){3}}
       \put(23,7){ \shortstack{\small \it go}}
       \put(34,10){\line(0,1){3}}
       \put(28,7){ \shortstack{\small \it Kyoto}}
       \put(16,1){ \shortstack{{\small (a)}}}

       \put(73,21){ \shortstack{\small X {\it to} Y}}
       \put(69,17){\line(4,3){5}}
       \put(50,14){ \shortstack{\small X{\footnotesize $<$}pronoun-verb{\footnotesize $>$}Y}}
       \put(52,10){\line(0,1){3}}
       \put(50,7){ \shortstack{\small \it I}}
       \put(79,10){\line(0,1){3}}
       \put(76,7){ \shortstack{\small \it go}}
       \put(89,17){\line(-4,3){5}}
       \put(85,14){ \shortstack{\small \it Kyoto}}
       \put(74,1){\shortstack{{\small (b)}}}

     \end{picture}
     \caption{{\it I go to Kyoto}の構文構造}
  \label{Igoto}
  \end{center}
\end{figure}

構成素境界解析~\label{parsing}

構成素境界解析は，相互情報量を用いて再帰的に構成素境界を検知して構文構
造を求める頑健な構文解析手法としても提案されているが~\cite{Margerman}，
統計処理への依存が強く，文法情報をほとんど利用しないため解析精度に問題
があった．本論文で提案する構成素境界解析は，意味的にまとまった語句につ
いて構成素境界パタンを作り，構造レベルでパタンを分類するなど，単純で緩やかな
文法制約を与えることにより高精度の構文解析を可能にする．

本節では，チャート法に基づくアル
ゴリズムで，逐次的に入力文の語を読み込んでボトムアップに構文構造を作り
上げる構成素境界解析について説明する．

\subsection{活性弧と不活性弧}

チャート法は活性弧と不活性弧を組み合わせることにより入力文の構文構造を作る．
図~\ref{passive}の(a)のような内容語による構造，構成素境界パタンのすべ
ての変項が具体化された(b)と(c)のような構造は不活性弧に対応する．
$\Uparrow$は，構文解析で読み込み中の語を指す走査カーソルである．
入力文の構文構造は，入力文全体をカバーする不活性弧に対応する．
構成素境界パタン中に具体化されていない変項がある図~\ref{active}の(d)と(e)のよ
うな構造は活性弧に対応する．

\clearpage

\begin{figure}[h]
  \begin{center}
     \setlength{\unitlength}{1mm}
     \begin{picture}(60,16)
       \small

       \put(1,12){ \shortstack{友人}}
       \put(2,8){ \shortstack{\large $\Uparrow$}}
       \put(1,0){ \shortstack{(a)}}

       \put(23,16){ \shortstack{X に Y}}
       \put(25,12){\line(0,1){3}}
       \put(21,9){ \shortstack{京都}}
       \put(33,12){\line(0,1){3}}
       \put(30,9){\shortstack{行く}}
       \put(32,5){\shortstack{\large $\Uparrow$}}
       \put(28,0){\shortstack{(b)}}

       \put(51,14){\shortstack{X さん}}
       \put(57,10){\shortstack{\large $\Uparrow$}}
       \put(52,10){\line(0,1){3}}
       \put(49,7){\shortstack{鈴木}}
       \put(55,0){\shortstack{(c)}}


     \end{picture}
     \caption{不活性弧に対応する構造}
  \label{passive}
  \end{center}
\end{figure}

\vspace*{-8mm}

\begin{figure}[h]
  \begin{center}
     \setlength{\unitlength}{1mm}
     \begin{picture}(30,13)
       \small

       \put(3,12){ \shortstack{X から Y}}
       \put(9,8){ \shortstack{\large $\Uparrow$}}
       \put(5,8){\line(0,1){3}}
       \put(1,5){ \shortstack{東京}}
       \put(8,0){ \shortstack{(d)}}

       \put(27,12){ \shortstack{この X}}
       \put(29,8){ \shortstack{\large $\Uparrow$}}
       \put(29,0){ \shortstack{(e)}}

     \end{picture}
     \caption{活性弧に対応する不完全な構造}
  \label{active}
  \end{center}
\end{figure}
\vspace*{-3mm}

チャート法は，
部分的な構文解析結果を弧で表すことにより
同じ解析を繰り返すのを回避し，効率的な構文解析を行なう．
さらに，構成素境界パタンを使ったチャート法の構文解析では，
表層をキーとして弧を張っていくので，
競合する構成素境界パタンが少ない．従って，張られる弧の
数も少ないため，処理時間をより一層抑えることができる．

\subsection{構文解析}~\label{algorithm}

「友人とハワイに来週行きます」という日英翻訳の入力文
を例にとって，TDMTの構成素境界解析を説明する．

まず，形態素解析により入力文の各語の品詞を次のように決定する．

\begin{small}
\begin{center}
\begin{tabular}{ccccccc}
友人&と&ハワイ&に&来週&行き&ます\\
普通名詞&助詞&固有名詞&助詞&普通名詞&動詞&助動詞
\end{tabular}
\end{center}
\end{small}

\ref{bigram-marker}節の条件を満たす品詞バイグラムマーカは，普通名詞と
動詞の間の{\footnotesize $<$}noun-verb{\footnotesize $>$}のみであり，
入力文は「友人とハワイに来週
{\footnotesize $<$}noun-verb{\footnotesize $>$}行きます」に修正される．
修正された入力文\break
に対し，以下のアル
ゴリズムに従って，逐次的にボトムアップの構成素境界解析を行なう．
以下では，語と語の間に節点を置き，左から$k$番目の語の左隣には節点{\small $k-1$}が，
右隣には節点{\small $k$}があるものとする．
弧は節点から節点に張るものとする．
\vspace*{6mm}

\begin{quote}
\begin{enumerate}
\renewcommand{\labelenumi}{}
\newcommand{\labelenumii}{}
\item [({\footnotesize 0})]先頭の語に走査カーソルを設定し，$k:=1$として，(i)へ．


\item 走査カーソルの指す語が名詞や動詞などの内容語であれば，
節点$k-1$から節点$k$に不活性弧を張り，(iii)へ．そうでなければ，(ii)へ．

\item 走査カーソルの指す語が構成素境界$\alpha_1$であれば，
構成素境界から構成素境界パタンへの対応表を参照することにより，
\mbox{構成素境界パタンを検索}

\clearpage
する．
検索されたすべてのパタンについて，
その形式に応じて(ii.a)$\sim$(ii.e)のいずれかの処理を行なったうえで，(iii)へ．
パタンが検索できなければ，(iv)へ．
\samepage{
\begin{enumerate}

\item 「X$\alpha_1$Y」，「X$\alpha_1$Y$\alpha_2$Z」，「X$\alpha_1\alpha_2$Y」のように，
$\alpha_1$の左が変項一つのみであり，$\alpha_1$が右端でないパタンが検索された場合，
そのパタンの$\alpha_1$の左隣の変項を，
節点$j$から節点$k-1$（ただ\break
し，$j<k-1$）に張られた不活性弧で具体化できれば，
検索されたパタンに関する活性弧を節点$j$から節点$k$に張る．

\item 「X$\alpha_1$」のように，
$\alpha_1$の左が変項一つのみであり，$\alpha_1$が右端であるパタンが検索された場合，
そのパタンの$\alpha_1$の左の変項を，
節点$j$から節点$k-1$に張られた不活性弧で具体化できれ\break
ば，
検索されたパタンに関する不活性弧を節点$j$から節点$k$に\break
張る．

\item 「$\alpha_1$X」，「$\alpha_1$X$\alpha_2$」のように，
$\alpha_1$が左端であるパタンが検索された場合，
検索されたパタンに関する活性弧を節点$k-1$から節点$k$に張る．

\item 「X$\alpha_0$Y$\alpha_1$Z」，「X$\alpha_0\alpha_1$Y」のように，$\alpha_1$の
左に別の構成素境界があり，$\alpha_1$が右端でないパタンが検索された場合，
検索されたパタンに関する活性弧が，$\alpha_1$より左のみ具体化されて
節点$j$から節点$k-1$に張られていれば，
検索されたパタンに関\break
する活性弧を節点$j$から節点$k$に張る．
\item 「$\alpha_0$X$\alpha_1$」のように，$\alpha_1$の
左に別の構成素境界があり$\alpha_1$が右端であるパタンが検索された場合，
検索されたパタンに関す\break
る活性弧が，$\alpha_1$より左が具体化されて
節点$j$から節点$k-1$に\break
張られていれば，
検索されたパタンに関する不活性弧を節点$j$から節点$k$に張る．
\end{enumerate}

\item 節点$i$から節点$k$（ただし，$i<k$）に新しく張られた不活性弧が，
節点$h$から節点$i$（ただし，$h<i$）に張られた活性弧を構成するパタンの中の
まだ具体化されていない最左の変項を具体化できれば，
さらに節点$h$から節点$k$に新しい不活性弧または活性弧を張る．
新しい弧が張れなくなるまでこの操作を繰り返し，(iv)へ．
\item 走査カーソルの指す語が入力文の最後の語であれば，解析終了．そうでなけ
れば，走査カーソルを右へ一語移動させ，$k:=k+1$として，(i)へ．}
\end{enumerate}
\vspace*{6mm}
\end{quote}
\newpage

(ii)で参照する対応表は，システムが持つ変換知識の原言語パタンから
あらかじめ機械的に作成しておく．
例文の構成素境界解析において検索される構成素境界
パタンを表~\ref{ch1:tret}に示す．

\begin{table}[tbh]
\begin{center}
 \caption{構成素境界パタンの検索}
 \label{ch1:tret}
 \begin{small}
\begin{tabular}{|c|cc|} \hline
        構成素境界    &   構成素境界パタン & (パタンの構造レベル)  \\  \hline
        {\it と}  &   XとY  &     (名詞句，動詞句)\\
        {\it に} &    XにY & (動詞句)\\
        {\footnotesize $<$}noun-verb{\footnotesize $>$} &  X{\footnotesize $<$}noun-verb{\footnotesize $>$}Y &(動詞句)\\
        {\it ます} &  Xます  &(単文)\\ \hline
\end{tabular}
\end{small}
\end{center}
\end{table}

図~\ref{chart}は入力文に対して弧が張られていく過程を示すチャートで
ある．実線は不活性弧を，点線は活性弧を示し，
弧のできる順序を示す番号により弧を識別する．

\begin{figure*}[htb]
\begin{center}
\epsfile{file=chart.eps,hscale=0.9,vscale=0.9}
\caption{構文解析の過程を示すチャート}
\label{chart}
\end{center}
\end{figure*}


先頭の語「友人」は内容語であり，不活性弧(1)を張る．次の語
「と」により「XとY」のXを(1)で具体化させた活性弧(2)と(3)を張る．
「XとY」は(2)では動詞句のパタン，(3)では名詞句の
パタンである．「ハワイ」により不活性弧(4)を張る．(3)の「X
とY」のYを(4)で具体化し，不活性弧(5)を張る．次の語「に」か
ら検索された動詞句パタン「XにY」のXを(4)と(5)でそれぞれ具体化し，
活性弧(6)と(7)を張る．「来週」により不活性弧(8)を張る．
\clearpage
\noindent
{\footnotesize $<$}noun-verb{\footnotesize
 $>$}から検索された「X{\footnotesize $<$}noun-verb{\footnotesize
 $>$}Y」のXを(8)で具体化し，活性弧(9)を張る．「行き」により不活性弧(10)を張り，
(9)の「X{\footnotesize $<$}noun-verb{\footnotesize $>$}Y」のYを(10)で具体化し，
不活性弧(11)を張る．(6)と(7)の「XにY」のYを(11)で具体化し，
それぞれ不活性弧(12)と(13)を張る．さらに，(2)の「X
とY」のYを(12)で具体化し，不活性弧(14)を張る．

入力文の最後の語「{\it ます}」から検索された「Xます」のX
を(14)と(13)で具体化し，それぞれ不活性弧(15)と(16)を張る．
すべての語を読み込み終えて，これ以上新たな弧が張れない状態になり，解析は終了する．
入力文全体をカバーする不活性弧(15)と(16)が入力文の構文構造の候補に対応する．
図~\ref{15and16}に入力文の構文構造の候補を示す．
パタンに付随する番号は，そのパタンを最上部とする構文構造が対応する不活性弧を示す．

\begin{figure*}[htb]
\begin{center}
\epsfile{file=structures.eps,hscale=0.8,vscale=0.8}
\caption{入力文の構文構造の候補}
\label{15and16}
\end{center}
\end{figure*}

用例利用型処理~\label{ebmt}

本節では，構成素境界解析で得られた入力文の構文構造の候補から，
意味距離計算によって最尤の目的言語構文構造を決定する用例利用
型処理について，
\ref{algorithm}節の例文を使って説明する．

\subsection{意味距離計算}~\label{dis-input}

現在，TDMTでは，シソーラス上での意味属性の位置関係
により単語間に0$\sim$1の意味距離を与え~\cite{Sumita}，構
成素境界パタンに関する意味距離を，各変項についての単語間の意味
距離の合計値としている．不活性弧(11)を構成する「X{\footnotesize
$<$}noun-verb{\footnotesize $>$}Y」では，XとYを具体化する語の組(来週, 行く)を
意味距離計算の対象として~\footnote{
意味距離計算は表記形「行き」でなく標準形「行く」に対して行なう．}，
「X{\footnotesize $<$}noun-verb{\footnotesize $>$}Y」に関する
変換知識の用例との意味距離を計算する．
例えば，(来週, 行く)と用例(明日, 来る)の間の意味距離
は，「来週」と「明日」の間の意味距離と，「行く」と「来る」の間の意味距
離の合計値である．

構成素境界パタンに照合する語句が上部の構成素境界パタンの変項を具体化している場合，
主部の語の組を対象として用例との意味距離を計算する．
構成素境界パタンで主部となる部分\break
の情報は変換知識に記述しておき，
主部は下部の構造から上部の構造へ伝搬するという性質を\break
利用して，
主部の語を機械的に求めることができる．
不活性弧(12)では「XにY」のXとY\break
を，「ハワイ」と「来週
{\footnotesize $<$}noun-verb{\footnotesize $>$}行き」でそれぞれ具体化する．
「X{\footnotesize $<$}noun-verb{\footnotesize $>$}Y」ではYを\break
主部に
定めているとすると，「来週{\footnotesize $<$}noun-verb{\footnotesize $>$}行き」
の主部は「行き」であり，
不活性弧(12)の「XにY」に関する意味距離計算の対象は(ハワイ, 行く)となる．

\subsection{最尤原言語構文構造の決定と目的言語への変換}~\label{output}

用例利用型処理では，構文構造を構成する各構成素境界パタンについて
類似用例を変換知識の中から求める．
類似用例の与える情報により，最尤の原言語構文構造を決定し，その構造を目的言語に変換して，
最尤の目的言語構文構造を得る．
不活性弧(15)と(16)に対応する構文構造を構成する構成素境界パタンについて，
意味距離計算の結果を表~\ref{d-cal}のように仮定する．

\begin{table*}[htb]
\begin{center}
 \caption{意味距離計算の結果}
\label{d-cal}
\begin{small}
\begin{tabular}{|c|c||c|ccc|}
 \hline
 構文構造の最上部の & 対応する & 意味距離計算の & \multicolumn{3}{c|}{意味距離計算の結果} \\ \cline{4-6}
  パタン {\footnotesize （太字は主部）} &  不活性弧 &   対象      & 類似用例 & 目的言語パタン & 意味距離 \\ \hline
 Xと{\bf Y} {\footnotesize (動詞句)} & (14)  &  (友人, 行く) & (社長, 行く) &  Y$'$ {\it with} X$'$ & 0.34\\
Xと{\bf Y} {\footnotesize (名詞句)} &  (5) & (友人, ハワイ) & (京都, 奈良) &  X$'$ {\it and} Y$'$ & 1.01 \\
Xに{\bf Y} & (12),(13)  &  (ハワイ, 行く) & (京都, 行く) &  Y$'$ {\it to} X$'$ & 0.18 \\
X{\footnotesize $<$}noun-verb{\footnotesize $>$}{\bf Y} &   (11) & (来週, 行く) & (明日, 来る) &  Y$'$ X$'$ & 0.12 \\
 {\bf X}ます  &  (15),(16) & (行く) & (行く) &  {\it I will} X$'$ & 0.00 \\ \hline
\end{tabular}
\end{small}
\end{center}
\end{table*}

類似用例が与える意味距離を，構文構造を構成する構成素境界パタンについてすべて合計した値を，
構文構造のスコアと定義し，このスコアが最小のものを最尤
の構文構造とする~\cite{Furuse}．
不活性弧(15)に対応する構文構造では，「XとY」(動詞句)，「XにY」，
「X{\footnotesize $<$}noun-verb{\footnotesize $>$}Y」，「Xます」で類似用例が
与える意味距離，0.34，0.18，0.12，0.00を合計した0.64がスコアとなる．不活性
弧(16)に対応する構文構造では，「XとY」(名詞句)，「XにY」，
「X{\footnotesize $<$}noun-verb{\footnotesize $>$}Y」，「Xます」で類似用例が
与える意味距離1.01，0.18，0.12，0.00を合計した1.31がスコアとなる．従って，
不活性弧(15)に対応する構文構造が最小のスコアを持ち，入力文全体についての最尤
の原言語構文構造となる．
\clearpage

最尤の原言語構文構造の各構成素境界パタンを，
変換知識の中で類似用例が訳し分け条件となって与える目的言語パタンへと変換
することにより，最尤の目的言語構文構造を作る．
不活性弧(15)に対応す
る構文構造では，各構成素境界パタンは表~\ref{d-cal}の5列目に示す目的言語パタンに変
換される．内容語の「友人」，「ハワイ」，「来
週」，「行き」は，対訳辞書を参照して``{\it friend}''，``{\it
Hawaii}''，``{\it next week}''，``{\it go}''にそれぞれ変換され~\footnote
{TDMTシステムは，内容語に対して，対訳辞書に記述されたデフォルトの対訳語句を与えているが，
意味距離計算の結果の類似用例によってはデフォルト以外の対訳語句を与え
ている\cite{Furuse,Yamada}．}，図~\ref{(15)}に示す目的言語構文構造ができる．
矢印の上の数字は，各構成素境界パタンのスコアである．

\begin{figure*}[htb]
\begin{center}
\epsfile{file=transfer.eps,hscale=0.8,vscale=0.8}
\caption{最尤原言語構文構造の変換}
\label{(15)}
\end{center}
\end{figure*}

用例利用型処理で得られた
最尤の目的言語構文構造は，原言語構文構造の性質を受け継いでいるため，
そのまま線条化すると，
``{\it I will go next week to Hawaii with the friend}''となってしまう．
そこで，``Y$'$ X$'$''の``X$'$''は時間格，
``Y$'$ {\it to} X$'$''の``{\it to} X$'$''は場所格，
というような情報をあらかじめ変換知識の目的言語パタンに与えておいたうえで，
語順や活用などの調整を生成処理で行ない，
以下のような英語文を出力する．

\begin{small}
\begin{center}
``{\it I will go to Hawaii with the friend next week}''
\end{center}
\end{small}

解析途中での構文構造候補の絞り込み~\label{n-best}

意味距離計算により構文構造のスコアを得るためには，下部の構造での主部の
語を確定させ意味距離計算の対象を決定する必要がある．不活性弧は，構文構
造を構成する構成素境界パタンのすべての変項が具体化されている構造であり，
構成素境界パタンの主部の語をすべて求めることができるので意味距離計算の対象が決定し，
構文構造のスコアが得られる．TDMTでは，
処理時間を短縮するために，入力文の同じ部分に対して作られる不活性弧を
スコアにより順位づけし，上位n個(n-best)の不活性弧のみを保持して
構文解析を進めていく．すなわち，解析途中で構文構造候補の絞り込みを行なう．
保持した不活性弧にはスコアと
主部の情報を与え，上部の構造で意味距離計算による構文構造候補の絞り込みが容易にで
きるようにする．
意味距離計算により解析途中
で構文構造候補を絞り込むには，\ref{algorithm}節のアルゴリズムのようなボト
ムアップの解析が必要である．

TDMTシステムは現在，1-bestをデフォルトとし
て解析途中での構文構造候補の絞り込みを行なっているが，nの値は容易に変更可能である．
例えば，\ref{algorithm}節の入力文の解析の途中で，「友人とハワイに来週
{\footnotesize $<$}noun-verb{\footnotesize $>$}行き」
に対して，二つの不活性弧(13)と(14)ができる．保持する不活性弧
を1-bestにして構文解析を行なうと，スコアの良い(14)のみが「友人とハワイに来週
{\footnotesize $<$}noun-verb{\footnotesize $>$}行き」について
保持され，「Xます」のXを(14)で具体化した(15)のみが
入力文の構文構造に対応する．
(13)は途中で枝刈りされるので(16)に対応する構文構造は作られない．

