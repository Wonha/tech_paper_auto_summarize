[MATH]法とチャート法について簡単に説明した後，これらを組み合わせて，可能な構文構造を
適切な順に必要なだけ生成する手法について述べる．
[MATH]法は，初期状態から現在状態までの費
用[MATH]と，現在状態から目標状態までの推定費用[MATH]との和[MATH]を発見的知識として探索を行なう．
適
用可能な状態遷移オペレータが残っている状態と残っていない状態を，それぞれ，OPENリストとCLOSEリストに保持する．
探索では，1)全推定費用[MATH]の最も小さい状態をOPENリスト
から取り出し，CLOSEリストに入れる，2)取り出した状態に状態遷移オペレータを適用して，すべての継続状態を生成する，3)各継続状態について[MATH]を計算し，継続状態のうちOPENリストとCLOSEリストのいずれにも入っていない状態をOPENリストに入れる，という三つの過程を繰り返し，OPENリストから取り出した状態が目標状態であれば，探索を終える．
[MATH]法の
探索戦略に従う探索では，推定費用[MATH]が現在状態から目標状態までの実際の費用[MATH]より大きくないという最適性条件が成り立つならば，目標状態が存在する限り，費用の最も小さい目標状態に到達できることが証明されている．
チャート法は，チャートと呼ばれる表に，弧と呼ばれる部分的構文構造を登録しながら処理を進める．
構文規則[MATH]から生成される弧は，[MATH]の形式で表
される．
[MATH]は既に完成した構造の列であり，[MATH]は空所と呼ばれる未完成の構造の列である．
弧は，空所があるとき([MATH]のとき)活性弧と呼ばれ，ないとき([MATH]のとき)不活性弧と呼ばれる．
また，その弧の生成に用いられた構文規則の左辺の構文範疇でラベル付けされている．
以後，紛れなければ，弧をその構文範疇名で呼ぶ．
上昇型チャート法の枠組みは，1)不活性弧のラベルを右辺の第一項として持つ構文規則を適用することで弧を成長させる予測手続き，2)活性弧の空所を不活性弧で埋めることで弧を成長させる結合手続き，の二つの手続きから成る．
解析のある時点において，予測手続きまたは結合手続きの処理対象となる弧が複数存在するとき，そのうちどの弧を選択するかは，アジェンダと呼ばれるリストを用いて制御される．
アジェンダ制御にどのような戦略を用いるかに応じて，チャート法は様々な振舞いを示す．
チャート法による構文解析を探索問題と捉えると，自然な対応付けとして，チャート法における弧，予測手続きと結合手続き，アジェンダ，チャートは，それぞれ，探索問題における状態，状態遷移オペレータ，OPENリスト，CLOSEリストとみなせる．
以後，ラベルが終端構文範疇であり，初期状態に相当する不活性弧を初期弧と呼ぶ．
また，[MATH]を入力文の終了位置とするとき位置が[MATH]であり，ラベルが目標構文範疇であり，目標状態に相当する不活性弧を目標弧と呼ぶ．
弧には，費用付き構文規則を適用して初期弧からその弧を生成するために要した費用を付与する．
これは，初期状態から現在状態までの費用[MATH]に相当し，後に[REF_sec:rule]節で示す式([REF_eq:cost])で計算される．
さらに，弧には，それを構成要素として持つ目標弧を生成するための推定費用を付与する．
これは，現在状態から目標状態までの推定費用[MATH]に相当し，後に[REF_sec:est]節で示す式([REF_eq:est])
で計算される．
式([REF_eq:est])で計算される推定費用[MATH]は，[MATH]法の最適性条件[MATH]を満たすので，[MATH]と[MATH]
の和[MATH]が小さい順に弧をアジェンダから取り出せば，[MATH]法の探索戦略に従う上昇型チャート法が実現できる．
そのアルゴリズムを図[REF_fig:astar_chart]に示す．
このアルゴリズムは，費用の最も小さい目標弧を生成した後も，そのまま処理を続ければ，目標弧を費用の昇順に必要なだけ生成することができる．
図[REF_fig:astar_chart]のアルゴリズムは最も基本的なものである．
この基本アルゴリズムに次のような改良を加えれば，生成される弧の数は減少する．
可能な構文構造を効率良く表現するために，1)二つの構造が持つすべての情報が同じであるとき，それらの構造を共有し(sub-tree sharing)，2)二つの構造が持つ情報のうち内部構造以外のすべての情報が同じであるとき，それらの構造を統合する(local ambiguity packing)方法[CITE]が用いられることがある．
元のチャート法に基づく基本アルゴリズムでは，前者は実現されているが後者は実現されていない．
実現するためには，ステップ[REF_algo:ac_push]を次のように変更すればよい．
生成された弧が不活性弧であり，そのラベル，位置，全推定費用と同じものを持つ不活性弧がアジェンダに存在すれば，それら二つの弧を統合してアジェンダに入れ，チャートに存在すれば，二つの弧を統合してチャートに入れる．
さもなければ，生成された弧をアジェンダに入れる．
弧を生成するための費用は，構文規則に付与された費用に基づいて計算される．
費用付き構文規則は，文脈自由文法の形式に従い，一般に次のように表せる．
[MATH]は非終端構文範疇，[MATH]は終端構文範疇または非終端構文範疇である．
[MATH]は，この規則の適用
費用を表す．
[MATH]は，弧[MATH]と[MATH]の相対的関係を表す重みである．
[MATH]は非負の実数，[MATH]
は正の実数とする．
活性弧[MATH] ([MATH]ならば不活性弧)を生成するための費用は，不活性弧[MATH]を生成するための費用[MATH]に重み[MATH]をかけたものの和に，規則([REF_eq:rule])の適用
費用[MATH]を加えた値であると定め，次式で計算する．
初期弧の生成費用は0とする．
弧から目標弧までの費用の推定は，入力文とは独立に，構文規則だけに基づいてあらかじめ
行なっておく．
従って，一度求めた推定費用は，費用付き構文規則に変更がない限り変更され
ない．
推定は，上昇型解析とは逆方向に目標弧から初期弧に向けて行ない，求めた推定費用を
各弧に付与する．
推定を下降型で行なうので，本節では，弧[MATH]から目標弧までの推定費用を，目
標弧から弧[MATH]までの推定費用と呼ぶ．
推定費用は，構文解析で活性弧の空所が左から順に埋って
いくことを前提として計算する．
目標構文範疇から始めて，構文規則を左辺から右辺への書き換えに繰り返し用い，目標弧から活性弧[MATH]までの推定費用[MATH]が計算済みであり，規則([REF_eq:rule])が存在するとき，目標弧から活性弧[MATH]までの推定費用[MATH]は，次式で計算できる．
[MATH]は規則([REF_eq:rule])の適用費用であり，[MATH]は活性弧[MATH]のすべ
ての空所を埋めるための最小費用である．
下降型推定で求めた目標弧から活性弧[MATH]までの費用[MATH]は，上昇型構文解析を行なうときには不活性弧[MATH]から目標弧までの推定費用となる．
式([REF_eq:est])
で計算される推定費用は，目標弧から活性弧[MATH]までの可能な推定費用のうち最小値を右辺第一項とし，可能な不活性弧[MATH]の生成費用のうち最小値を第二項としているので，[MATH]法の最適性
条件を満たす．
式([REF_eq:est])を用いて推定費用を求めるために，まず，不活性弧[MATH]の最小生成費用[MATH]を計算
する．
そのアルゴリズムを図[REF_fig:min_cost]に示す．
例えば，図[REF_fig:rule]のような費用付き構文規則が与えられたとき，この規則に従って生成される各不活性弧の最小生成費用は，図[REF_fig:min_cost]のアルゴリズムを用いて次のように計算される．
まず，ステップ[REF_algo:cost_init]で，[MATH]，[MATH]，[MATH]，[MATH]となる．
ステップ[REF_algo:cost_init]で，リストに，規則(a)が先頭，規則(k)が最後尾という順
で入っているとすると，一回目のループのステップ[REF_algo:cost_pop]で，規則(a) [MATH]が取り
出されるが，[MATH]も[MATH]もまだ求まっていないので，この規則はステップ[REF_algo:cost_cost]でリストの最後尾に入れられる．
二〜五回目のループでも同様に，規則(b)〜(e)が取り出されるが，いずれもステップ[REF_algo:cost_cost]でリストの最後尾に入れられる．
六回目のループのステップ[REF_algo:cost_pop]では規則(f)が取り出される．
[MATH]は既に求まっているので，ステップ[REF_algo:cost_cost]で，[MATH]と計算される．
この値は不活性弧Aについて初めて計算された値であるので，ステップ[REF_algo:cost_min]では何も行なわれない．
七回目のループのステップ[REF_algo:cost_pop]で規則(g)が取り出されると，ステップ[REF_algo:cost_cost]で[MATH]となる．
この値は不活性弧Aについて既に求まっている値より小さくないので，ステップ[REF_algo:cost_min]では何も行なわれない．
以下，同様にして，[MATH]，[MATH]，[MATH]，[MATH]，[MATH]，[MATH]，[MATH]が順に求まる．
次に，以上のようにして計算された不活性弧の最小生成費用を式([REF_eq:est])に代入して，目標弧
から各弧までの最小推定費用を再帰的に求める．
そのアルゴリズムを図[REF_fig:min_est]に示す．
図[REF_fig:rule]の費用付き構文規則が与えられているとき，推定費用は次のように計算される．
ステップ[REF_algo:est_pop]で構文範疇Sが取り出されるので，規則(a)がステップ[REF_algo:est_est]での処理対象となり，目標弧から不活性弧NPまでの推定費用は，[MATH]と計算され，不活性弧VPまでの推定費用は[MATH]となる．
活性弧[MATH]までの推定費用は，[MATH]となる．
これらの推定値は初めて計算された値であるので，ステップ[REF_algo:est_compare]での大小比較は行なわれない．
ステップ[REF_algo:est_push]でNPとVPがリストの最後尾に入れられる．
二回目のループのステップ[REF_algo:est_pop]では構文範疇NPが取り出され，規則(b)と(c)がステップ[REF_algo:est_est]での処理対象となる．
規則(b)について，不活性弧Aまでの推定費用は，[MATH]となり，不活性弧Nまでの推定費用は[MATH]となる．
活性弧[MATH]までの推定費用は，[MATH]となる．
規則(c)については，不活性弧PRPまでの推定費用は，[MATH]と計算され，活性弧[MATH]までの推定費用は，[MATH]となる．
ステップ[REF_algo:est_push]でA，PRP，Nがリストの最後尾に入れられる．
三回目のループのステップ[REF_algo:est_est]では，規則(d)と(e)が処理対象となる．
規則(d)について，不活性弧Vまでの推定費用は，[MATH]，不活性弧Aまでの推定費用は[MATH]となる．
活性弧[MATH]までの推定費用は，[MATH]となる．
規則(e)については，不活性弧Vまでの推定費用は，[MATH]，不活性弧AVまでの推定費用は[MATH]となる．
不活性弧Vについて，規則(d)から得られた値6と規則(e)から得られた値2のうち小さいほうの後者がその推定費用となる．
ステップ[REF_algo:est_compare]では，不活性弧Aについて，今，規則(d)から得られた値0は，二回目のループで規則(b)から得られた値6より小さいので，推定費用は0となる．
以下，同様に処理が進むと，表[REF_tab:est]に示す推定費用が最終的に得られる．
図[REF_fig:rule]の構文規則と表[REF_tab:est]の推定費用を用いて`failing student looked hard'を解析する過程を追う．
解析アルゴリズムは，[REF_sec:astar_chart]節で述べた改良を加えていない図[REF_fig:astar_chart]の基本的なものを用いることにする．
表[REF_tab:chart]は，この例文に対して全解探索を行なった場合に得られるチャートである．
図[REF_fig:astar_chart]のアルゴリズムによる解析で，費用の最も小さい目標弧が得られるまでのアジェンダの変化の様子を表[REF_tab:agenda]に示す．
表[REF_tab:agenda]の各行は，解析のある時点でのアジェンダの内容を表す．
アジェンダの要素は，弧と全推定費用([MATH])の対であり，[MATH]の昇順に左から右へ並んでいる．
表[REF_tab:agenda]の最左要素がアジェンダの先頭要素である．
アジェンダは，図[REF_fig:astar_chart]の解析アルゴリズムにおける第[MATH]回目のループでの処理で，第[MATH]行目から第[MATH]行目へ変化する．
以後，第[MATH]行目のアジェンダをアジェンダ[MATH]と呼ぶ．
弧は，表[REF_tab:chart]の#欄の番号で表される．
例えば，アジェンダ1の第一要素1:#4は，表[REF_tab:chart]の四行目の全推定費用が1である弧hardを指す．
まず，アジェンダ1から先頭要素1:#4を取り出し，不活性弧#4に予測手続きを適用して得られた弧#9と#10をアジェンダに加え，[MATH]の昇順に並べると，アジェンダ2へ変化する．
アジェンダ2の先頭要素の不活性弧#10は，それに対して適用できる構文規則が存在しないので，アジェンダ3へ変化する．
アジェンダ3，4，5，6，7の先頭要素は不活性弧であるので，これらに予測手続きを適用して得られた弧を加え，[MATH]の昇順に並べると，それぞれ，アジェンダ4，5，6，7，8となる．
アジェンダ8の先頭要素である弧#15は活性弧であるので，#15と不活性弧#10に結合手続きを適用して得られた弧#19をアジェンダに加え，[MATH]の昇順に並べると，アジェンダ9へ変化する．
以下，同様に処理を進め，アジェンダ15から先頭要素7:#23を取り出すと，弧#23は目標弧であるので，費用の最も小さい目標弧を発見したことになり，解析を中断する．
もし費用が二番目に小さい目標弧が必要ならば，アジェンダ16から処理を再開すればよい．
以上の解析過程の追跡からわかるように，弧#13，#17，#18，#21，#22，#24，#25を生成せずに，また，弧#6，#11，#14に対して手続きを適用せずに，生成費用の最も小さい目標弧が得られる．
[MATH]法とチャート法について簡単に説明した後，これらを組み合わせて，可能な構文構造を
適切な順に必要なだけ生成する手法について述べる．
[MATH]法は，初期状態から現在状態までの費
用[MATH]と，現在状態から目標状態までの推定費用[MATH]との和[MATH]を発見的知識として探索を行なう．
適
用可能な状態遷移オペレータが残っている状態と残っていない状態を，それぞれ，OPENリストとCLOSEリストに保持する．
探索では，1)全推定費用[MATH]の最も小さい状態をOPENリスト
から取り出し，CLOSEリストに入れる，2)取り出した状態に状態遷移オペレータを適用して，すべての継続状態を生成する，3)各継続状態について[MATH]を計算し，継続状態のうちOPENリストとCLOSEリストのいずれにも入っていない状態をOPENリストに入れる，という三つの過程を繰り返し，OPENリストから取り出した状態が目標状態であれば，探索を終える．
[MATH]法の
探索戦略に従う探索では，推定費用[MATH]が現在状態から目標状態までの実際の費用[MATH]より大きくないという最適性条件が成り立つならば，目標状態が存在する限り，費用の最も小さい目標状態に到達できることが証明されている．
チャート法は，チャートと呼ばれる表に，弧と呼ばれる部分的構文構造を登録しながら処理を進める．
構文規則[MATH]から生成される弧は，[MATH]の形式で表
される．
[MATH]は既に完成した構造の列であり，[MATH]は空所と呼ばれる未完成の構造の列である．
弧は，空所があるとき([MATH]のとき)活性弧と呼ばれ，ないとき([MATH]のとき)不活性弧と呼ばれる．
また，その弧の生成に用いられた構文規則の左辺の構文範疇でラベル付けされている．
以後，紛れなければ，弧をその構文範疇名で呼ぶ．
上昇型チャート法の枠組みは，1)不活性弧のラベルを右辺の第一項として持つ構文規則を適用することで弧を成長させる予測手続き，2)活性弧の空所を不活性弧で埋めることで弧を成長させる結合手続き，の二つの手続きから成る．
解析のある時点において，予測手続きまたは結合手続きの処理対象となる弧が複数存在するとき，そのうちどの弧を選択するかは，アジェンダと呼ばれるリストを用いて制御される．
アジェンダ制御にどのような戦略を用いるかに応じて，チャート法は様々な振舞いを示す．
チャート法による構文解析を探索問題と捉えると，自然な対応付けとして，チャート法における弧，予測手続きと結合手続き，アジェンダ，チャートは，それぞれ，探索問題における状態，状態遷移オペレータ，OPENリスト，CLOSEリストとみなせる．
以後，ラベルが終端構文範疇であり，初期状態に相当する不活性弧を初期弧と呼ぶ．
また，[MATH]を入力文の終了位置とするとき位置が[MATH]であり，ラベルが目標構文範疇であり，目標状態に相当する不活性弧を目標弧と呼ぶ．
弧には，費用付き構文規則を適用して初期弧からその弧を生成するために要した費用を付与する．
これは，初期状態から現在状態までの費用[MATH]に相当し，後に[REF_sec:rule]節で示す式([REF_eq:cost])で計算される．
さらに，弧には，それを構成要素として持つ目標弧を生成するための推定費用を付与する．
これは，現在状態から目標状態までの推定費用[MATH]に相当し，後に[REF_sec:est]節で示す式([REF_eq:est])
で計算される．
式([REF_eq:est])で計算される推定費用[MATH]は，[MATH]法の最適性条件[MATH]を満たすので，[MATH]と[MATH]
の和[MATH]が小さい順に弧をアジェンダから取り出せば，[MATH]法の探索戦略に従う上昇型チャート法が実現できる．
そのアルゴリズムを図[REF_fig:astar_chart]に示す．
このアルゴリズムは，費用の最も小さい目標弧を生成した後も，そのまま処理を続ければ，目標弧を費用の昇順に必要なだけ生成することができる．
図[REF_fig:astar_chart]のアルゴリズムは最も基本的なものである．
この基本アルゴリズムに次のような改良を加えれば，生成される弧の数は減少する．
可能な構文構造を効率良く表現するために，1)二つの構造が持つすべての情報が同じであるとき，それらの構造を共有し(sub-tree sharing)，2)二つの構造が持つ情報のうち内部構造以外のすべての情報が同じであるとき，それらの構造を統合する(local ambiguity packing)方法[CITE]が用いられることがある．
元のチャート法に基づく基本アルゴリズムでは，前者は実現されているが後者は実現されていない．
実現するためには，ステップ[REF_algo:ac_push]を次のように変更すればよい．
生成された弧が不活性弧であり，そのラベル，位置，全推定費用と同じものを持つ不活性弧がアジェンダに存在すれば，それら二つの弧を統合してアジェンダに入れ，チャートに存在すれば，二つの弧を統合してチャートに入れる．
さもなければ，生成された弧をアジェンダに入れる．
弧を生成するための費用は，構文規則に付与された費用に基づいて計算される．
費用付き構文規則は，文脈自由文法の形式に従い，一般に次のように表せる．
[MATH]は非終端構文範疇，[MATH]は終端構文範疇または非終端構文範疇である．
[MATH]は，この規則の適用
費用を表す．
[MATH]は，弧[MATH]と[MATH]の相対的関係を表す重みである．
[MATH]は非負の実数，[MATH]
は正の実数とする．
活性弧[MATH] ([MATH]ならば不活性弧)を生成するための費用は，不活性弧[MATH]を生成するための費用[MATH]に重み[MATH]をかけたものの和に，規則([REF_eq:rule])の適用
費用[MATH]を加えた値であると定め，次式で計算する．
初期弧の生成費用は0とする．
弧から目標弧までの費用の推定は，入力文とは独立に，構文規則だけに基づいてあらかじめ
行なっておく．
従って，一度求めた推定費用は，費用付き構文規則に変更がない限り変更され
ない．
推定は，上昇型解析とは逆方向に目標弧から初期弧に向けて行ない，求めた推定費用を
各弧に付与する．
推定を下降型で行なうので，本節では，弧[MATH]から目標弧までの推定費用を，目
標弧から弧[MATH]までの推定費用と呼ぶ．
推定費用は，構文解析で活性弧の空所が左から順に埋って
いくことを前提として計算する．
目標構文範疇から始めて，構文規則を左辺から右辺への書き換えに繰り返し用い，目標弧から活性弧[MATH]までの推定費用[MATH]が計算済みであり，規則([REF_eq:rule])が存在するとき，目標弧から活性弧[MATH]までの推定費用[MATH]は，次式で計算できる．
[MATH]は規則([REF_eq:rule])の適用費用であり，[MATH]は活性弧[MATH]のすべ
ての空所を埋めるための最小費用である．
下降型推定で求めた目標弧から活性弧[MATH]までの費用[MATH]は，上昇型構文解析を行なうときには不活性弧[MATH]から目標弧までの推定費用となる．
式([REF_eq:est])
で計算される推定費用は，目標弧から活性弧[MATH]までの可能な推定費用のうち最小値を右辺第一項とし，可能な不活性弧[MATH]の生成費用のうち最小値を第二項としているので，[MATH]法の最適性
条件を満たす．
式([REF_eq:est])を用いて推定費用を求めるために，まず，不活性弧[MATH]の最小生成費用[MATH]を計算
する．
そのアルゴリズムを図[REF_fig:min_cost]に示す．
例えば，図[REF_fig:rule]のような費用付き構文規則が与えられたとき，この規則に従って生成される各不活性弧の最小生成費用は，図[REF_fig:min_cost]のアルゴリズムを用いて次のように計算される．
まず，ステップ[REF_algo:cost_init]で，[MATH]，[MATH]，[MATH]，[MATH]となる．
ステップ[REF_algo:cost_init]で，リストに，規則(a)が先頭，規則(k)が最後尾という順
で入っているとすると，一回目のループのステップ[REF_algo:cost_pop]で，規則(a) [MATH]が取り
出されるが，[MATH]も[MATH]もまだ求まっていないので，この規則はステップ[REF_algo:cost_cost]でリストの最後尾に入れられる．
二〜五回目のループでも同様に，規則(b)〜(e)が取り出されるが，いずれもステップ[REF_algo:cost_cost]でリストの最後尾に入れられる．
六回目のループのステップ[REF_algo:cost_pop]では規則(f)が取り出される．
[MATH]は既に求まっているので，ステップ[REF_algo:cost_cost]で，[MATH]と計算される．
この値は不活性弧Aについて初めて計算された値であるので，ステップ[REF_algo:cost_min]では何も行なわれない．
七回目のループのステップ[REF_algo:cost_pop]で規則(g)が取り出されると，ステップ[REF_algo:cost_cost]で[MATH]となる．
この値は不活性弧Aについて既に求まっている値より小さくないので，ステップ[REF_algo:cost_min]では何も行なわれない．
以下，同様にして，[MATH]，[MATH]，[MATH]，[MATH]，[MATH]，[MATH]，[MATH]が順に求まる．
次に，以上のようにして計算された不活性弧の最小生成費用を式([REF_eq:est])に代入して，目標弧
から各弧までの最小推定費用を再帰的に求める．
そのアルゴリズムを図[REF_fig:min_est]に示す．
図[REF_fig:rule]の費用付き構文規則が与えられているとき，推定費用は次のように計算される．
ステップ[REF_algo:est_pop]で構文範疇Sが取り出されるので，規則(a)がステップ[REF_algo:est_est]での処理対象となり，目標弧から不活性弧NPまでの推定費用は，[MATH]と計算され，不活性弧VPまでの推定費用は[MATH]となる．
活性弧[MATH]までの推定費用は，[MATH]となる．
これらの推定値は初めて計算された値であるので，ステップ[REF_algo:est_compare]での大小比較は行なわれない．
ステップ[REF_algo:est_push]でNPとVPがリストの最後尾に入れられる．
二回目のループのステップ[REF_algo:est_pop]では構文範疇NPが取り出され，規則(b)と(c)がステップ[REF_algo:est_est]での処理対象となる．
規則(b)について，不活性弧Aまでの推定費用は，[MATH]となり，不活性弧Nまでの推定費用は[MATH]となる．
活性弧[MATH]までの推定費用は，[MATH]となる．
規則(c)については，不活性弧PRPまでの推定費用は，[MATH]と計算され，活性弧[MATH]までの推定費用は，[MATH]となる．
ステップ[REF_algo:est_push]でA，PRP，Nがリストの最後尾に入れられる．
三回目のループのステップ[REF_algo:est_est]では，規則(d)と(e)が処理対象となる．
規則(d)について，不活性弧Vまでの推定費用は，[MATH]，不活性弧Aまでの推定費用は[MATH]となる．
活性弧[MATH]までの推定費用は，[MATH]となる．
規則(e)については，不活性弧Vまでの推定費用は，[MATH]，不活性弧AVまでの推定費用は[MATH]となる．
不活性弧Vについて，規則(d)から得られた値6と規則(e)から得られた値2のうち小さいほうの後者がその推定費用となる．
ステップ[REF_algo:est_compare]では，不活性弧Aについて，今，規則(d)から得られた値0は，二回目のループで規則(b)から得られた値6より小さいので，推定費用は0となる．
以下，同様に処理が進むと，表[REF_tab:est]に示す推定費用が最終的に得られる．
図[REF_fig:rule]の構文規則と表[REF_tab:est]の推定費用を用いて`failing student looked hard'を解析する過程を追う．
解析アルゴリズムは，[REF_sec:astar_chart]節で述べた改良を加えていない図[REF_fig:astar_chart]の基本的なものを用いることにする．
表[REF_tab:chart]は，この例文に対して全解探索を行なった場合に得られるチャートである．
図[REF_fig:astar_chart]のアルゴリズムによる解析で，費用の最も小さい目標弧が得られるまでのアジェンダの変化の様子を表[REF_tab:agenda]に示す．
表[REF_tab:agenda]の各行は，解析のある時点でのアジェンダの内容を表す．
アジェンダの要素は，弧と全推定費用([MATH])の対であり，[MATH]の昇順に左から右へ並んでいる．
表[REF_tab:agenda]の最左要素がアジェンダの先頭要素である．
アジェンダは，図[REF_fig:astar_chart]の解析アルゴリズムにおける第[MATH]回目のループでの処理で，第[MATH]行目から第[MATH]行目へ変化する．
以後，第[MATH]行目のアジェンダをアジェンダ[MATH]と呼ぶ．
弧は，表[REF_tab:chart]の#欄の番号で表される．
例えば，アジェンダ1の第一要素1:#4は，表[REF_tab:chart]の四行目の全推定費用が1である弧hardを指す．
まず，アジェンダ1から先頭要素1:#4を取り出し，不活性弧#4に予測手続きを適用して得られた弧#9と#10をアジェンダに加え，[MATH]の昇順に並べると，アジェンダ2へ変化する．
アジェンダ2の先頭要素の不活性弧#10は，それに対して適用できる構文規則が存在しないので，アジェンダ3へ変化する．
アジェンダ3，4，5，6，7の先頭要素は不活性弧であるので，これらに予測手続きを適用して得られた弧を加え，[MATH]の昇順に並べると，それぞれ，アジェンダ4，5，6，7，8となる．
アジェンダ8の先頭要素である弧#15は活性弧であるので，#15と不活性弧#10に結合手続きを適用して得られた弧#19をアジェンダに加え，[MATH]の昇順に並べると，アジェンダ9へ変化する．
以下，同様に処理を進め，アジェンダ15から先頭要素7:#23を取り出すと，弧#23は目標弧であるので，費用の最も小さい目標弧を発見したことになり，解析を中断する．
もし費用が二番目に小さい目標弧が必要ならば，アジェンダ16から処理を再開すればよい．
以上の解析過程の追跡からわかるように，弧#13，#17，#18，#21，#22，#24，#25を生成せずに，また，弧#6，#11，#14に対して手続きを適用せずに，生成費用の最も小さい目標弧が得られる．
