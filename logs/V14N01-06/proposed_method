森田ら[CITE]は，機能表現の中でも特に「単なる語の連接ではなく，表現形式全体として，個々の構成要素のプラス以上の独自の意味が生じている」表現を複合辞と呼び，個々の構成要素の意味から構成的に表現形式全体の意味を説明できるような表現とは区別している．
現代語複合辞用例集[CITE]（以下，複合辞用例集と呼ぶ）は，主要な125種類の複合辞について，用例を集成し，説明を加えたものである．
日本語複合辞用例データベース[CITE]（以下，用例データベースと呼ぶ）は，機能表現の機械処理を研究するための基礎データを提供することを目的として設計・編纂されたデータベースである．
用例データベースは，複合辞用例集に収録されている125種類の複合辞および，その異形（合計337種類の機能表現）を対象として，機能表現候補と一致する表記のリストと，個々の機能表現候補に対して最大50個の用例を収録している．
そして，各機能表現候補が文中において果たしている働きを，\tabref{tbl:判定ラベル体系}に示す6種類の判定ラベルのうちから人手で判定し，付与している．
機能表現に対して付与される判定ラベルは，F, A, Mのいずれかであり，これらが本論文における検出対象となる．
[tb]
判定ラベルとは，機能表現候補が文中でどのような働きをしているかを表すラベルであり，用例データベースでは\tabref{tbl:判定ラベル体系}の通り，6種類のラベルが設定されている．
以下，個々の判定ラベルについて説明する．
用例データベースでは，IPA品詞体系(THiMCO97)の形態素解析用辞書[CITE]に登録されている語から，「助詞・格助詞・連語」として登録されている語を取り除いた残りの語を，語としている．
そして，ある機能表現候補が，1個以上の語，複合辞または慣用表現からなる列である場合，その候補は判定単位として適切であるが，それ以外の場合は，その候補は判定単位として不適切であるとして，判定ラベルBを付与している．
例えば，\tabref{tbl:判定ラベル体系}中の\strref{ex:A43-2000:B}に含まれる機能表現候補「にかけて」は，「心配する」という意味の慣用表現「気にかける」の一部が活用した形であり，先に述べた条件を満たしていない．
したがって，\strref{ex:A43-2000:B}には，判定ラベルBが付与される．
判定ラベルYは，機能表現候補の読みが，判定対象となっている機能表現の読みと一致していないことを表す．
例えば，「AうえでB」という形で，「Aした後でB」という出来事の継起関係を表す機能表現「うえで」の用例として\tabref{tbl:判定ラベル体系}中の\strref{ex:A12-1000:Y}を判定する場合を考える．
この場合，機能表現候補の読み「じょうで」と，判定対象となっている機能表現の読み「うえで」が一致していないので．
判定ラベルYを付与する．
判定ラベルCは，機能表現候補に内容的に働いている語が含まれていることを表す．
例えば，\tabref{tbl:判定ラベル体系}中の\strref{ex:A56-1000:C}の機能表現候補に含まれる動詞「とる」は本来の意味で内容的に働いているので，判定ラベルとしてCを付与する．
判定ラベルF, A, Mは，機能表現候補が機能的に働いているとき，その機能を区別するためのラベルである．
判定ラベルFは，機能表現候補が複合辞用例集で説明されている用法で働いていることを表し，判定ラベルAは，機能表現候補が接続詞的に働いていることを表す．
判定ラベルMは，これら以外の機能的な働きをしていることを表す．
例として，「ところで」の用例として\tabref{tbl:判定ラベル体系}中の\strref{ex:A22-1000:F}[MATH]([REF_ex:A22-1000:M])を判定する場合を考える．
\strref{ex:A22-1000:F}のターゲット文字列は，複合辞用例集で説明されている通りに逆接の働きをしているので，判定ラベルFを付与する．
\strref{ex:A22-1000:A}のターゲット文字列は，文頭で接続詞的に働いているので，判定ラベルAを付与する．
\strref{ex:A22-1000:M}のターゲット文字列は，形式名詞「ところ」を含めて機能的に働いているので，判定ラベルMを付与する．
本論文では，判定ラベルF, A, Mが付与される機能表現候補を検出対象とする．
本節では，最初に，機能表現検出タスクに対して機械学習的手法を適用する場合に，考慮しておくべき2つの問題点について述べる．
第1の問題点は，学習データの分量とモデルの複雑さの間に存在するトレードオフの関係であり，第2の問題点は，機能表現候補が部分的に重複して現れた場合の取り扱いである．
その上で，機能表現を検出する手順として，以下の2通りの手順を検討する．
1つまたは複数の形態素からなる機能表現候補を単位として，判定ラベルを付与する手順（以下，手順1と呼ぶ）．
形態素を単位として，機能表現の一部であることを表すチャンクタグを付与する手順（以下，手順2と呼ぶ）．
手順2については，検出対象とする機能表現の取り扱い方によって，更に2通りに細分化することができる．
第1は，検出対象とする全ての機能表現に同一のチャンクタグを用いる手順（以下，手順2-aと呼ぶ）であり，第2は，機能表現毎に異なるチャンクタグを用いる手順（以下，手順2-bと呼ぶ）である．
機能表現検出タスクに対して機械学習的手法を適用する場合には，まず，学習データの分量とモデルの複雑さの間に存在するトレードオフの関係を考慮する必要がある．
一般に，あるタスクに対して機械学習手法を適用する時，そのタスクの対象をどの程度に細分化してモデルで表現するかは，非常に重要な問題である．
十分な分量の学習データが利用可能である場合には，タスクの対象を細かく分類した複雑なモデルを採用することによって，モデルの予測精度は改善する．
しかし，不十分な分量の学習データしか利用できない場合に，過度に複雑なモデルを採用すると，モデルの予測精度は悪化する．
つまり，機能表現検出タスクに対して機械学習的手法を適用する場合には，利用できる学習データの量を考慮しながら，適当な複雑さのモデルを選択する必要がある．
機能表現検出タスクに対して機械学習的手法を適用する場合には，第2の問題点として，機能表現候補が部分的に重複して現れる場合を考慮する必要がある．
例えば，\strref{ex:toiu-F}と\strref{ex:toiumonono-F}には，「という」および「というものの」という2つの機能表現候補が，部分的に重複して現れている．
それが試合\kern0pt\uline{という}ものの難しさだ．
勝った\uline{という}\uline{ものの}，スコアは悪い．
\strref{ex:toiu-F}では，「AというB」という形で用いられてBの具体的な内容を示しているので，2つの機能表現候補の内，「という」という機能表現候補に対して，機能的であるという判定を行う必要がある．
それに対して，\strref{ex:toiumonono-F}では，「AというもののB」の形で，前件Aの成立・存在を認めた上で，それにもかかわらず後件Bのようなことがあるという関係を述べているので，2つの機能表現候補の内，「というものの」という機能表現候補に対して，機能的であるという判定を行う必要がある．
実際に予備調査を行った結果から，機能表現候補の出現箇所の約20%において，このように複数の機能表現候補の一部が重複した形で現れることが分かった．
したがって，機能表現検出において，複数の機能表現候補が部分的に重複して現れる場合を無視することは適当ではなく，その複数の候補を適切に扱う必要がある．
以上の問題点を踏まえて，手順1について検討する．
ある1つの機能表現候補に適切な判定ラベルを付与するには，その候補に付与される可能性がある複数の判定ラベル間に優先順位を与えるモデルが必要である．
つまり，判定ラベルの数を[MATH]とすると，[MATH]に比例した複雑さのモデルが必要である．
手順1では，機能表現毎に個別に判定ラベルを付与するため，機能表現の種類数を[MATH]とすると，判定ラベルの総数は，候補毎の判定ラベルの数[MATH]と機能表現の種類数[MATH]の積[MATH]となる．
したがって，手順1のモデルの複雑さは，[MATH]に比例する．
また，第2の問題点に対応するには，部分的に重複している複数の機能表現候補と判定ラベルの対から，適当なものを選択する必要がある．
手順1のモデルでは，機能表現候補と判定ラベルの[MATH]通りの対を全て区別しているので，それらを比較することにより，適当な対を選択する．
次に，手順2について検討する．
手順2では，形態素を単位として判定を行い，それぞれの形態素に，機能表現の一部であることを表すチャンクタグを付与する．
ある形態素に適切なチャンクタグを付与するには，その形態素に付与される可能性がある全てのチャンクタグに優先順位を与えるモデルが必要である．
このようなモデルの複雑さは，その形態素に付与される可能性があるチャンクタグの種類数に比例する．
さらに，チャンクタグ[MATH]を形態素[MATH]に付与する場合と形態素[MATH]に付与する場合の2通りの状況を考える．
また，機能表現に含まれる全ての形態素の異なり数[MATH]とする．
この時，同一のチャンクタグ[MATH]を付与する場合であっても，付与対象となる形態素が異なる場合には異なるモデルが必要という立場に立つと，手順2のモデルの複雑さは，チャンクタグの種類数と，形態素の異なり数[MATH]の積に比例すると考えられる．
この分析を踏まえて，手順2-aと手順2-bのモデルの複雑さを検討する．
手順2-aでは，検出対象とする全ての機能表現に同一のチャンクタグを用いる．
このチャンクタグは，その形態素が含まれるチャンクの用法を表す判定ラベルと，その形態素がチャンクの中で占める位置を表す部分からなり，チャンクタグの種類数は[MATH]に比例する．
よって，手順2-aのモデルの複雑さは[MATH]に比例する．
一方，手順2-bでは，機能表現毎に異なるチャンクタグを用いる．
このチャンクタグは，その形態素がどの機能表現の一部であるかを表す部分，その形態素が含まれるチャンクの用法を表す判定ラベル，および，その形態素がチャンクの中で占める位置を表す部分からなり，チャンクタグの種類数は[MATH]に比例する．
よって，手順2-bのモデルの複雑さは，[MATH]に比例する．
また，手順2では，形態素を単位としてチャンクタグを付与することによって，部分的に重複している複数の機能表現候補の選択も同時に行っている．
例えば，\strref{ex:toiu-F}，（[REF_ex:toiumonono-F]）の場合，形態素「もの」に対してチャンクタグを付与すると，機能表現候補「という」と機能表現候補「というものの」のどちらが適切かという選択も同時に行われる．
先に述べた通り，モデルの複雑さと，モデルの推定に必要となる学習データの量にはトレードオフの関係が存在する．
手順1のモデルの複雑さは[MATH]に比例し，手順2-aのモデルの複雑さは[MATH]に比例し，手順2-bのモデルの複雑さは[MATH]に比例する．
[REF_sec:intro]章で述べたように，異形を考慮すると，機能表現の種類数[MATH]は1万種類以上となる．
それに対して，機能表現中に現れる形態素は，助詞・助動詞などの付属語と限られた自立語のみであり，機能表現中に現れる形態素の異なり数[MATH]は，機能表現の種類数[MATH]よりもはるかに少なく，多くても数百程度と予想される．
したがって，検討した手順の中で，もっとも簡単なモデルを使っている手順は，手順2-aである．
本論文では，利用できる学習データの量が十分ではない可能性を考慮して，複雑なモデルの採用を避け，できるだけ簡単なモデルの手順を採用することにする．
よって，本論文における機能表現検出タスクの定式化においては，手順2-aを採用する．
すなわち，形態素を単位として，機能表現の一部であることを表すチャンクタグを付与し，機能表現をチャンキングするという方式を採用する．
そのチャンクタグとしては，検出対象とする全ての機能表現に同一のチャンクタグを用いる．
サポートベクトルマシンは，素性空間を超平面で分割することによりデータを2つのクラスに分類する二値分類器である[CITE]．
2つのクラスを正例，負例とすると，学習データにおける正例と負例の間隔（マージン）を最大にする超平面を求め，それを用いて分類を行う．
すなわち，以下の識別関数[MATH]の値によってクラスを判別することと等価である．
f(x) & = \operatorname{sgn} \left( \sum^{l}_{i=1} \alpha_i y_i K(x_i,x) + b \right)
b & = -\frac{max}_{i,y_i=-1}b_i + \operatorname{min}_{i,y_i=1}b_i{2}\nonumber
b_i & = \sum^l_{j=1} \alpha_j y_j K(x_j,x_i) \nonumber
ここで[MATH]は識別したい事例の文脈（素性の集合），[MATH]と[MATH]は学習データの文脈とクラスである．
また，関数[MATH]は，[MATH]のときに1，[MATH]のときに[MATH]となる二値関数である．
各[MATH]は，式([REF_eq:svm5])と式([REF_eq:svm6])の制約のもとで式([REF_eq:svm4])の[MATH]を最大にするものである．
L() & = \sum^l_{i=1} \alpha_i - \frac{1}{2} \sum^l_{i,j=1} \alpha_i \alpha_j y_i y_j K(x_i,x_j)
& 0 \leq\alpha_i \leq C   (i=1,.
..
,l)
& \sum^l_{i=1} \alpha_i y_i = 0
関数[MATH]はカーネル関数と呼ばれ，様々なものが提案されているが，本論文では次式で定義される多項式カーネルを用いる．
ここで，[MATH]は実験的に設定される定数である．
予備実験を行い，次数[MATH]の値として[MATH]の3通りを検討した．
[MATH]とした場合はF値に大きな差はなかったが，[MATH]とするとF値がかなり悪化した．
ただし，[MATH]とした場合は，[MATH]とした場合に比べて，学習時間がかなり増加したため，本論文では，次数[MATH]の値として2を用いる．
また，予備実験において，マージン[MATH]の値として[MATH]の5通りを検討したところ，F値に大きな差が見られなかったため，本論文ではマージン[MATH]の値として1を用いる．
[REF_subsec:formalization]節で述べたように，本論文では，検出対象とする機能表現全てに共通のチャンクタグを，形態素を単位として付与するという手順で，機能表現検出を行う．
チャンクタグは，そのチャンクタグが付与された形態素が，検出対象とする機能表現のいずれかに含まれるか否かを表し，チャンクの範囲を示す要素とチャンクの用法を示す要素という2つの要素からなる．
以下，本論文で用いたチャンクタグについて詳細を述べる．
チャンクの範囲を示す要素の表現法としては，以下で示すようなIOB2フォーマット[CITE]が広く利用されている．
本論文でも，このIOB2フォーマットを使用する．
チャンクの用法を示す要素の表現法としては，\tabref{tab:tag}のように様々なものが考えられる．
例えば，体系5 (CHK5)は，6種類の判定ラベルF, A, M, C, Y, Bのうち，ラベルA, MとラベルC, Y, Bをそれぞれ区別せずに1つの分類とみなす表現法である．
そして，各機能表現候補は，チャンクであることを表す要素(B/I)と，用法を示す要素(F/AM/CYB)を組み合わせた6種類のチャンクタグによって表現される．
実際には，この6種類に，チャンクに含まれないことを表すチャンクタグOを加えて，\figref{fig:chunktag}のように7種類のチャンクタグを付与する．
また，体系11 (CHK11)は，判定ラベルF, A, Mの機能表現候補に対しては体系5と同様にチャンクタグを付与するが，判定ラベルC, Y, Bの機能表現候補に対しては，チャンクとして区別せずに，チャンクタグOを付与する体系である．
予備実験の結果，いずれの表現法を用いても大きな性能の差は見られなかったため，本論文では，最も性能が良かった体系5 (CHK5)を用いる．
本論文では，用例データベースで設定されている判定ラベルのうち，ラベルFが付与された表現を検出する検出器（これを，検出器Fと呼ぶ）と，ラベルF, A, Mのいずれかが付与された表現（機能表現）を検出する検出器（これを，検出器FAMと呼ぶ）を作成する．
検出器FAMの評価時には，判定ラベルF, A, Mを区別しない．
判定ラベルFは，複合辞用例集で説明されている用法で用いられていることを表す判定ラベルであり，機能表現候補がひとかたまりとなって非構成的な意味を持っている場合にのみ付与される．
それに対して，判定ラベルA, Mは，機能表現候補が非構成的な意味を持っているか否かに関わらず，その機能表現候補が機能的な働きをしていることを表すラベルである．
したがって，検出器Fは，非構成的な意味を持つ機能表現（の一部）のみを検出する検出器となり，検出器FAMは機能表現全体を検出する検出器となる．
SVMは二値分類器であるため，そのままでは，2クラスの分類しか扱えない．
本論文のようにクラス数が3以上の場合には，複数の二値分類器を組み合わせて拡張する必要がある．
本論文では，拡張手法としては，広く利用されているペアワイズ法を用いる．
ペアワイズ法とは，[MATH]個のクラスに属するデータを分類する時，異なる2つのクラスのあらゆる組み合わせに対する二値分類器を作り，得られた[MATH]個の二値分類器の多数決により，クラスを決定する方法である．
学習・解析に用いる素性について説明する．
文頭から[MATH]番目の形態素[MATH]に対して与えられる素性[MATH]は，形態素素性[MATH]，チャンク素性[MATH]，チャンク文脈素性[MATH]の3つ組として，次式によって定義される．
形態素素性[MATH]は，形態素解析器によって形態素[MATH]に付与される情報である．
本論文では，IPA品詞体系(THiMCO97)の形態素解析用辞書[CITE]に基づいて動作する形態素解析器ChaSenによる形態素解析結果を入力としているため，以下の10種類の情報（表層形，品詞，品詞細分類[MATH]，活用型，活用形，原形，読み，発音）を形態素素性として用いた．
チャンク素性[MATH]とチャンク文脈素性[MATH]は，[MATH]番目の位置に出現している機能表現候補に基づいて定まる素性である．
今，下図のような形態素列[MATH]からなる機能表現候補[MATH]が存在したとする．
チャンク素性[MATH]は，[MATH]番目の位置に出現している機能表現候補[MATH]を構成している形態素の数（機能表現候補の長さ）と，機能表現候補中における形態素[MATH]の相対的位置の情報の2つ組である．
チャンク文脈素性[MATH]は，[MATH]番目の位置に出現している機能表現候補の直前2形態素および直後2形態素の形態素素性とチャンク素性の組である．
すなわち，[MATH]番目の位置に対する[MATH]および[MATH]は次式で表される．
CF(i) &=\langle k-j+1 ,\;\; i-j+1 \rangle
OF(i) &=\langle MF(m_{j-2}), CF(m_{j-2}), MF(m_{j-1}), CF(m_{j-1}),
&　\;\phantomMF(m_{k+1}), CF(m_{k+1}), MF(m_{k+2}), CF(m_{k+2})\rangle
[REF_subsec:formalization]節で述べたように，機能表現検出においては，1つの文中に，複数の機能表現候補が部分的に重複して現れる場合を考慮する必要がある．
ここでは，そのような場合のチャンク素性とチャンク文脈素性の付与方法について考える．
複数の機能表現候補が部分的に重複して現れている場合，それらの候補全てに基づいてチャンク素性とチャンク文脈素性を付与するという方法と，それらの候補から何らかの基準を用いて1つの候補を選択し，選択された候補に基づいてチャンク素性とチャンク文脈素性を付与するという方法が考えられる．
前者の方法で付与された素性を参照して機械学習を行うには，重複する可能性がある機能表現の全ての組み合わせに対して十分な量の学習事例が必要であるが，そのような学習事例を準備することは現実的ではない．
そのため，本論文では，後者の方法を採り，次の優先順序に従って選ばれた1つの機能表現候補に基づいて，チャンク素性とチャンク文脈素性を付与することにする．
先頭の形態素が，最も左側の機能表現候補を用いる．
1を満たす候補が複数存在する場合は，その中で最も形態素数が多い候補を用いる．
例えば，\strref{ex:nakutehaikemasen}には，「なくてはいけません」および「てはいけません」という2つの機能表現候補が，部分的に重複して現れている．
慎重にし\uline{なく}\uline{てはいけません}．
この場合，「なくてはいけません」という機能表現候補が，「てはいけません」という機能表現候補に比べて，より左の形態素から始まっているので，「なくてはいけません」という機能表現候補に基づいて，チャンク素性とチャンク文脈素性を付与する．
また，\strref{ex:toiumonono}には，「という」および「というものの」という2つの機能表現候補が，部分的に重複して現れている．
それが試合\uline{という}\uline{ものの}難しさだ．
この場合，2つの機能表現候補の先頭の形態素は同一であるため，より形態素数が多い候補「というものの」に基づいて，チャンク素性とチャンク文脈素性を付与する．
[MATH]番目の形態素に対するチャンクタグを[MATH]とすると，チャンクタグ[MATH]の学習・解析を行う場合に用いる素性として，[MATH]番目の形態素および前後2形態素に付与された素性[MATH]と，直前2形態素に付与されたチャンクタグ[MATH]を用いる（\figref{yamcha}）．
解析時には，解析によって得られたチャンクタグを，直前2形態素に付与されたチャンクタグとして順に利用して，解析を行う．
前後3形態素の素性と直前3形態素のチャンクタグを用いて学習・解析を行う予備実験も行ったが，前後2形態素の素性と直前2形態素のチャンクタグを用いた場合に比べて，殆んど性能が変わらなかったため，前後2形態素の素性と直前2形態素のチャンクタグを用いる．
この節では，形態素解析結果に基づいて，人手で作成した規則によって機能表現候補の用法を識別する検出器の概略について述べる．
形式的には，ある機能表現候補[MATH]の用法を判定する規則[MATH]は，形態素列パターン[MATH]と，判定規則リスト[MATH]の2つ組として，次のように定義される．
機能表現候補[MATH]に一致する形態素列パターン[MATH]は，1つの形態素に一致する形態素パターン[MATH]の列である．
P(E) & \equiv p_{1}p_{2}\cdots p_{l}
p & \equiv\langle Lex,\: POS,\: FORM\rangle
形態素パターン[MATH]は，形態素の基本形の表記[MATH]，品詞[MATH]および活用形[MATH]の3つ組として定義される．
例えば，「として」に対する形態素列パターン[MATH]は，以下のように3つの形態素パターンからなる．
なお，本論文では，IPA品詞体系の形態素解析用辞書に基づいて動作する形態素解析器ChaSenによる形態素解析結果を入力としているため，品詞と活用形はIPA品詞体系で指定する．
また，判定規則リスト[MATH]は，機能表現候補の直前の形態素列に一致する左接続制約[MATH]，直後の形態素列に一致する右接続制約[MATH]，および，これらの制約を満たした場合の判定ラベル[MATH]からなる3つ組として定義される判定規則[MATH]の順序付き集合である．
R(E) & \equiv{r_{1}, r_{2},…, r_{k}}
r & \equiv\langle LC,\:RC,\:L \rangle
左接続制約[MATH]および右接続制約[MATH]は，論理関数[MATH]と，左接続素性[MATH]または右接続素性[MATH]の組み合わせである．
LC & \equiv LF | and(LC',LC'') | or(LC',LC'') | not(LC')
RC & \equiv RF | and(RC',RC'') | or(RC',RC'') | not(RC')
ここで，[MATH]は任意の左接続制約を表し，[MATH]は任意の右接続制約を表す．
例えば，「として」に対する判定規則リスト[MATH]は，以下のような2つの判定規則の順序付き集合である．
最初の判定規則は，左接続制約なし，右接続制約「[MATH]」，判定ラベルCという3つ組である．
これは，機能表現候補の右側が「だ」以外の助動詞であれば，機能表現候補の左側がどのような表現であっても，判定ラベルCを付与するという判定規則を意味する．
接続素性としては，複合辞用例集で説明されている接続制約を参考にして，\tabref{tbl:左接続素性}と\tabref{tbl:右接続素性}のような素性を用意した．
このような規則[MATH]に基づく判定は，以下の2段階からなる．
最初に，形態素列パターン[MATH]によって機能表現候補を発見し，次に，判定規則リスト[MATH]に含まれる判定規則を先頭から順に検査して，最初に一致した判定規則[MATH]の判定ラベルを出力する．
例えば，\strref{ex:toshite-F}の形態素解析結果を対象として判定を行う場合を考える．
たくさんの若者たちが，ボランティア\uline{として}，頑張っている．
最初に形態素列パターン[MATH]によって下線部が機能表現候補として発見される．
次に，判定規則リスト[MATH]に含まれている判定規則を順に適用していく．
1番目の規則[MATH]は，右接続制約が「だ」以外の助動詞となっているが，\strref{ex:toshite-F}では，機能表現候補の直後は読点になっているから，成り立たない．
2番目の規則[MATH]は，左接続制約が「体言」になっており，\strref{ex:toshite-F}でも成り立っているので，判定ラベルとしてFを出力する．
なお，全ての判定規則が成り立たなかった場合は，判定ラベルを付与しない．
人手で作成した判定規則の数を，\tabref{tbl:human_crafted_rules}に示す．
1つの機能表現候補を判定するための判定規則リストは，平均して2.7個の判定規則からなっている．
なお，使用した接続素性は186個である．
1つの文に対して，全ての可能な機能表現候補に対する規則を適用すると，複数の機能表現候補が照合されることがある．
この時，[REF_subsec:formalization]節で述べた場合と同様に，複数の機能表現候補が部分的に重なって出現して，それらの候補に対する判定ラベルが相互に競合し，複数の判定ラベル付与結果を同時に採用できない場合がある．
その場合は，以下の優先順序に従って機能表現候補を採用する．
まず，形態素列長で比較して，より長い機能表現候補を採用する．
機能表現候補の形態素列長が等しい場合は，先頭の形態素が最も左側の機能表現候補を採用する．
既に採用されている機能表現候補と，競合する機能表現候補は，全て棄却する．
