================================================================
[section type  : abstract]
[section title : abstract]
================================================================
[i:4, score:0.53384] そこで本論文では，文の簡約を「原文から，文節重要度と文節間係り受け整合度の総和が最大になる部分文節列を選択する」問題として定式化し，それを解くための効率の良いアルゴリズムを提案する．
[i:5, score:0.44519] 本稿の定式化では簡約文の評価に文節間の係り受け整合度が用いられていることから，簡約結果は適切な係り受け構造を持つことが期待できる．
[i:7, score:0.28200] このアルゴリズムを実用するには，文節重要度と係り受け整合度の適切な設定が不可欠であるが，本稿ではこれらについては議論せず，アルゴリズムの導出と計算効率，実装法などに重点を置いて報告する．

================================================================
[section type  : intro]
[section title : はじめに]
================================================================
[i:14, score:0.38041] また，重要度の低い文節や単語を削除することによって文を簡約する手法も研究されており，単語重要度と言語的な尤度の総和が最大となる部分単語列を動的計画法によって求める方法[CITE]が提案されている．
[i:18, score:0.53360] 本論文では，文の簡約を「原文から,文節重要度と文節間係り受け整合度の総和が最大になる部分文節列を選択する」問題として定式化し，それを解くための効率の良いアルゴリズムを提案する．
[i:27, score:0.46766] さらに，このアルゴリズムでは文頭から係り受け解析と部分文節列の選択が同時に進行するので，一つの文の入力が終了してから，その文の簡約文が出力されるまでの遅延時間を非常に短くできる可能性がある．

================================================================
[section type  : proposed_method]
[section title : 問題の定式化]
================================================================
[i:31, score:0.37353] 文節を削除/選択の単位として行う文の簡約は，原文からできるだけ``良い''部分文節列を選択することであると考えることができる．
[i:54, score:0.37285] 評価関数[MATH]を用いると，[MATH]文節からなる原文を[MATH]文節からなる文に簡約する問題は次のように述べることができる．
[i:65, score:0.51304] 二文節間の係り受け整合度の総和は，従来，係り受け解析にも用いられている評価関数であり，その意味で本手法による簡約文は，係り受け整合度[MATH]が適切に設定されていれば，原文の部分的な係り受け構造を保った自然な係り受け構造を持つことが期待できる．

================================================================
[section type  : proposed_method]
[section title : 再帰式とアルゴリズム]
================================================================
[i:68, score:0.00000] 
-----------------------------------------------------
  [subsection title : 再帰式]
-----------------------------------------------------
  [i:lead, score:0.29872] 文簡約問題，すなわち関数[MATH]の最大化問題を解くために，その``部分解とそれらの間の関係''を考える．
.....
  [i:69, score:0.29872] 文簡約問題，すなわち関数[MATH]の最大化問題を解くために，その``部分解とそれらの間の関係''を考える．
  [i:70, score:0.18508] まず，先頭文節を[MATH]に，末尾文節を[MATH]に，文節列長を[MATH]に固定したときの最大化を考え，その最大値を表す関数[MATH]を以下のように定義する．
  [i:72, score:0.05954] そうすると[MATH]は次の再帰式を満たすことが示される．
-----------------------------------------------------
  [subsection title : アルゴリズムの構成]
-----------------------------------------------------
  [i:lead, score:0.12343] 再帰式は[MATH]のとき，[MATH]となる[MATH]と[MATH]の全てが既に計算されていれば，高々3つの変数に関する最大化問題を解くことにより[MATH]が計算できることを表している．
.....
  [i:87, score:0.48336] このとき，係り文節[MATH]は必ず受け文節[MATH]より文頭側にあること，文節列[MATH]を簡約する場合，簡約後の部分文節列の長さは原文節の長さより大きくなることがないことから，変数には以下のような制約が課せられる．
  [i:97, score:0.29333] そして，もし必要ならば，その時点で3.3に述べるバックトレースを行い，そこまでの入力に対する簡約文を出力することができる．
  [i:98, score:0.43018] また，最外ループを[MATH]に関するループとすれば，そのループの第[MATH]ステップの処理が終わった時点で，[MATH]としてバックトレースが可能になるので，文節数[MATH]から順に求めたい文節数までの簡約文を出力するアルゴリズムが構成できる．
-----------------------------------------------------
  [subsection title : バックトレース]
-----------------------------------------------------
  [i:lead, score:0.22087] アルゴリズム１の計算結果から最適部分文節列を構成することを，ここでは「バックトレース」という．
.....
  [i:115, score:0.49517] したがって，アルゴリズム[REF_alg:recursion]の各ステップで最大値を与える[MATH]，[MATH]，[MATH]の値(最適分割点)を記憶しておけば，アルゴリズム[REF_alg:recursion]の終了後，任意の長さの簡約文と，必要ならばその上の係り受け構造を再帰的に得ることができる．
  [i:130, score:0.44170] [MATH]は文節列[MATH]を長さ[MATH]に簡約するときの最適分割点であるが，再帰式の証明(付録)からわかるように，[MATH]は簡約結果において[MATH]に係る文節の中で最も文頭側にあるものの番号である．
  [i:133, score:0.53596] すなわち，アルゴリズム[REF_alg:backtrace]を用いてバックトレースを行なうとき，[MATH]ならば[MATH]であることを記憶し，まとめて出力すれば，簡約文中の全ての文節に対する[MATH]の値，つまり係り受け構造を知ることができる．
-----------------------------------------------------
  [subsection title : 計算量]
-----------------------------------------------------
  [i:lead, score:0.09852] まず，アルゴリズム[REF_alg:recursion]における加算回数について考察する．
.....
  [i:134, score:0.09852] まず，アルゴリズム[REF_alg:recursion]における加算回数について考察する．
  [i:135, score:0.08083] 計算ステップ[MATH]における加算回数を[MATH]とすると[MATH]に対する再帰式より，次のことが容易に分かる．
  [i:149, score:0.16002] 実際，[MATH]の場合，加算回数と比較演算回数は表[REF_tbl:order]で示したように，[MATH]であり，アルゴリズム[REF_alg:recursion]をCで実装しUltraSPARC-IIi(270MHz)上で処理したときの処理時間は，1秒以内である．

================================================================
[section type  : proposed_method]
[section title : 簡約例]
================================================================
[i:152, score:0.31924] 簡約文の係り受け構造も[CITE]による括弧表記を用いて示している．
[i:162, score:0.35292] 簡約文の文節数[MATH]を原文の文節数[MATH]に等しく設定すると簡約文は原文そのものしかあり得ない．
[i:165, score:0.28822] これは，現実の場面で文章全体をどの程度に圧縮したいかという要求と簡約文の品質を考え合わせて決めるものであるが，本手法を人が文を簡約するときの支援システムとして使用する場合には[MATH]の値を順次変化させ，それに応じて得られる簡約文の中から人が適切なものを選ぶという使い方も考えられる．

================================================================
[section type  : conclusion]
[section title : おわりに]
================================================================
[i:167, score:0.45260] 文節重要度と係り受け整合度に基づいて，効率的に文の簡約を行なうアルゴリズムを提案した．
[i:168, score:0.35229] このアルゴリズムは簡約文の係り受け構造も同時に出力できるので，簡約文を引き続き他言語に翻訳するときなどにも有用である．
[i:171, score:0.46920] 今後は，文節重要度や係り受け整合度の設定の仕方が簡約結果に与える影響や，文節重要度から定まる評価関数値と係り受け整合度から定まる評価関数値の適切な重み付けなどについて検討し，簡約手法としての評価を行なう予定である．

