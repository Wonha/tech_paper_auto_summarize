本論文では，片仮名複合名詞[MATH]が入力として与えられたとき，それを構成語列[MATH]へと分割する問題を取り扱う．
ここでは，出力[MATH]が1語（すなわち[MATH]）である場合もありうることに注意をされたい．
1節においても議論したように，片仮名名詞は英語の翻字が多く，提案する素性の1つもその性質を利用したものとなっているため，以下では入力される片仮名語は英語の翻字であると仮定する．
この仮定が実テキストにおいてどの程度成立しているのかを検証することは難しいが，例えばウェブ検索エンジンのクエリにおいては，片仮名のクエリの約87%は翻字であることが報告されている[CITE]．
このデータから上記の仮定にはある程度の妥当性があることが推測され，実テキストを処理する際にも提案手法の効果を期待することができる．
我々は片仮名複合名詞の分割処理を「片仮名複合名詞[MATH]に対する構成語列[MATH]を予測する構造予測問題」と捉えて，これを以下のような線形モデルを用いて解く．
ここで[MATH]は入力[MATH]に対する全分割候補の集合を表す．
[MATH]は分割候補[MATH]の素性ベクトル表現，[MATH]は訓練事例から推定される重みベクトルである．
表[REF_tab:feature]に我々が実験で用いた素性テンプレートを示す．
テンプレート1からは，ある構成語[MATH]-gramが出現したか否かを示す2値素性が，訓練事例に出現した全ての構成語[MATH]-gramについて生成される．
テンプレート2は同様の[MATH]-gram素性である．
テンプレート3からは，構成語の文字数(1, 2, 3, 4, [MATH]5)を示す2値素性が5種類生成される．
テンプレート4は構成語[MATH]が外部辞書に登録されているか否かを表す2値素性であり，構成語[MATH]が外部辞書に登録されていれば1を返す2値素性が1つ生成される．
テンプレート5から7は，片仮名複合名詞の言い換えと逆翻字を用いたものであり，[REF_sec:para]節と[REF_sec:trans]節において詳しく説明する．
以下の議論では，テンプレート1から4によって生成される素性を基本素性，テンプレート5から生成される素性を言い換え素性，テンプレート6と7から生成される素性を逆翻字素性と呼んで互いに区別をする．
重みベクトル[MATH]は任意の学習アルゴリズムを用いて最適化することが可能であるが，ここでは計算効率を考慮して平均化パーセプトロン[CITE]を用いた．
平均化パーセプトロンはオンライン学習アルゴリズムの一種であり，高速に学習を行うことができると同時に，多くのタスクにおいてSVMなどのバッチ学習アルゴリズムと比較しても遜色のない精度を達成できることが知られている．
パーセプトロンの訓練時およびテスト時には[MATH]を求める操作が必要となるが，セミマルコフモデルにおいて用いられるのと同様の動的計画法によって効率的に実行可能である．
本節では，片仮名複合名詞の言い換え表現を，教師あり学習の素性として使う方法について述べる（表[REF_tab:feature]におけるテンプレート5に対応する）．
一般的に，複合名詞は様々な形へと言い換えることが可能であるが，そうした言い換え表現の中には，元の複合名詞の単語境界を認識する手がかりとなるものが存在する．
以下に具体例を示す．
\head{アンチョビパスタ}{ex:anchovy} \sent{アンチョビ・パスタ
[3pt]} \sent{アンチョビのパスタ}
([REF_ex:anchovy]b)は，複合名詞([REF_ex:anchovy]a)の構成語間に中黒を挿入することによって生成された言い換え表現である．
同様に([REF_ex:anchovy]c)は助詞「の」を挿入することによって生成された言い換え表現である．
もしラベルなしテキストにおいて([REF_ex:anchovy]b)や([REF_ex:anchovy]c)のような言い換え表現を観測することができれば，このことは複合名詞([REF_ex:anchovy]a)を「アンチョビ」と「パスタ」に正しく分割するための手がかりとなることが考えられる．
このような言い換えを利用して片仮名複合名詞の分割処理を行うため，複合名詞の言い換え規則を7つ作成した（表[REF_tab:para]）．
言い換え規則の作成にあたっては，Kageuraら[CITE]の研究を参考にしながら，分割処理に有用と思われるものを人手で選定した．
作成した言い換え規則は全て[MATH]という形式をしており（[MATH]と[MATH]は名詞，[MATH]は助詞などの機能語），左辺が言い換え前の複合名詞，右辺が言い換え後の表現に対応している．
これらの規則を用いて，次のように新しい素性を定義する．
まず前処理として，以下のような正規表現を用いることにより，片仮名複合名詞の言い換え表現の出現頻度をラベルなしテキストから求める．
(katakana)+\;・\;(katakana)+
(katakana)+\;の\;(katakana)+
(katakana)+\;する\;(katakana)+
(katakana)+\;した\;(katakana)+
(katakana)+\;な\;(katakana)+
(katakana)+\;的\;(katakana)+
(katakana)+\;的な\;(katakana)+
ただし(katakana)は片仮名1文字にマッチする特殊文字である．
また[MATH]は文字の繰り返しを表す量指定子であり，最長一致が適用されるものとする．
このような正規表現を用いることによって，単語分割処理を行わずに言い換え表現を抽出することができるのは，表[REF_tab:para]のような片仮名複合語の言い換え表現に対象を限定しているためである．
上記の正規表現にマッチするテキストは，必ず前後が片仮名以外の文字（漢字や平仮名）に囲まれていることになる．
そのような文字種の変わり目には，単語境界が存在する場合が多いため，このような単純な文字列処理であっても言い換え表現を抽出することが可能になっている．
分割処理時に分割候補[MATH]が提示された際には，構成語2-gramに対する言い換え素性Para ([MATH], [MATH])の値を次のように定義する．
まず[MATH]，[MATH]と代入することにより，表[REF_tab:para]の規則から言い換え表現を生成する．
そして，生成された7つの言い換え表現の頻度の和を[MATH]としたとき，その対数[MATH]を素性値として用いる．
ここでは素性値の計算に非常に単純な方法を用いているため，[MATH]や[MATH]に名詞ではなく，名詞連続が代入された場合であっても，素性が発火してしまうということがある．
また逆に，正解となる構成語よりも小さな単位の文字列が代入された場合であっても，同様に素性が発火してしまうことがあり，精度に悪影響を及ぼす可能性がある．
しかし，このような手法であっても実験において分割精度の向上を十分確認することができたため，シンプルさを重視して現在のような手法とした．
素性値として頻度ではなく対数頻度を用いているのはスケーリングのためである．
予備的な実験においては，頻度をそのまま素性値として用いることも行ったが，対数頻度を用いた場合の方が高い精度が得られた．
なお，[MATH]ではなく[MATH]としているのは，[MATH] = 1であった場合に素性値が0となるのを防ぐためである．
片仮名語の多くは英語を翻字したものであり，元となる英語表現が存在する．
以下では，そのような英語表現のことを原語と呼び，片仮名語と原語の対のことを翻字対と呼ぶこととする．
我々は，片仮名語が原語の発音情報をおおよそ保持しているという特性を利用することによって，単語単位での対応関係が付与された翻字対（単語対応付き翻字対）をラベルなしテキストから自動抽出する（表[REF_tab:trans]）．
そして，得られた単語対応付き翻字対に基づいて，分割結果[MATH]に出現する単語[MATH]-gramが，英単語[MATH]-gramと対応付け可能であるかを示す2値素性を用いる（表[REF_tab:feature]におけるテンプレート6と7に対応する）．
以下本節では，テキストから単語対応付き翻字対を自動抽出する方法について説明する．
日本語においては，括弧表現を使って片仮名語の原語がテキスト中に挿入される場合がある．
\head{アメリカでジャンクフード(junk food)と言えば.
..
}{ex:junk} \sent{トラックバックスパム(spam)を撃退するため.
..
}{}
いずれの例文においても，下線を引いた片仮名語に対して，その原語が括弧を使って併記されている．
我々はこのような括弧表現を利用することにより，単語対応付き翻字対の自動抽出を行う．
こうした括弧表現から単語対応付き翻字対の抽出を行うためには，少なくとも以下の3つのことが技術的な問題となる
片仮名語の直後に出現する括弧表現が必ずしもその原語であるとは限らないため，原語が記述されている括弧表現とそうでない括弧表現を区別する必要がある．
翻字対の関係にある片仮名語の開始位置を決定しなくてはならない．
例えば([REF_ex:junk]b)においては，原語「spam」の翻字は「トラックバックスパム」ではなく「スパム」である．
片仮名語と原語の単語対応を求めるためには，片仮名語を分かち書きしなくてはならない．
例えば([REF_ex:junk]a)から表[REF_tab:trans]のような単語対応付き翻字対を獲得するためには，片仮名列「ジャンクフード」を「ジャンク」と「フード」に分割することが必要である．
これまでにも，前述のような括弧表現から翻字対を自動抽出する研究は数多く存在するが，問題Cに対する本質的な解決策はいまだ提案されていない．
これまでの研究においては，基本的に既存の単語分割器を用いることによって片仮名語の分割が行われている[CITE]．
しかし，[REF_sec:prev]節において議論を行ったように，片仮名語の分かち書きを行うことは現在のところ技術的に困難であり，このようなアプローチは望ましくない．
我々は上記の3つの問題を解決するため，片仮名語と原語の発音の類似性を利用することを提案する．
以下の議論では，説明のために，まず問題Cだけを議論の対象とする．
具体例として，片仮名語「ジャンクフード」と原語「junk food」に対して，それらの発音の類似性に基づき以下のような部分文字列の対応関係が得られたとする．
\head{[ジャン][MATH][ク][MATH][フー][MATH][ド][MATH]}{ex:junk2} \sent{[jun][MATH][k][MATH] [foo][MATH][d][MATH]}
ここでは，括弧で囲まれて同じ番号を添えられている部分文字列が，互いに対応関係にあるものとする．
括弧表現内の英語は空白を使って分かち書きされているため，上記のような部分文字列の対応関係を利用すれば，片仮名語と英単語が1対1に対応するように片仮名列を分かち書きすることができる．
また，その過程において，単語間の対応関係も明らかにすることができる．
残る問題Aおよび問題Bに対しても，発音の類似性に基づいて同様に解決を図ることが可能である．
以下の例において，下線が引かれた片仮名語と括弧内の英語表現が翻字対であるか否かを判定することを考える．
\head{検索エンジン(Google)を使って.
..
}{ex:google} \sent{トラックバックスパム(spam)を撃退する.
..
}{}
このように，括弧内に原語ではない表現が出現したり，片仮名語の開始位置が正しく認識されなかった場合には，片仮名列とアルファベット列の発音の類似度が低くなることが期待できるため，フィルタリングできると考えられる．
単語対応付き翻字対の具体的な抽出手順については，[REF_sec:extraction]節において説明を行う．
片仮名語と原語における部分文字列の対応関係の発見には，Jiampojamarnら[CITE]が提案した生成モデルを用いる．
[MATH]と[MATH]をそれぞれ片仮名列とアルファベット列とし，これらの間の対応関係を見つけることを考える．
ただし，原語には空白が存在する可能性があるが，空白に対応する片仮名文字列は存在しないことから，部分文字列の対応を求めるときにはアルファベット列から空白を取り除いておく．
例えば「ジャンクフード」と「junk food」の部分文字列対応を求める場合には「[MATH]」「[MATH]」とする．
ここで，[MATH]をそれらの間の部分文字列の対応とする．
具体的には，[MATH]は対応付けられている部分文字列の組([MATH], [MATH])の集合であり，[MATH]および[MATH]となる．
この部分文字列対応[MATH]の確率を以下のように定義する．
一般に[MATH]は観測することができないため隠れ変数として扱い，モデルのパラメータは翻字対[MATH]の集合からEMアルゴリズムを用いて推定する．
詳細は文献[CITE]を参照されたい．
表[REF_tab:alignment]に「ジャンクフード」と「junkfood」に対する部分文字列対応[MATH]の具体例，および実験において計算された確率値を示す．
この確率モデルを用いて，与えられた[MATH]に対する部分文字列の対応を次のように決定する．
このとき[MATH]の中の部分文字列[MATH]が空白をまたいでしまうと（ジャンクフードの例であれば[MATH]などとなった場合），[MATH]を使って片仮名列[MATH]を分かち書きすることができなくなってしまう．
そこで，アルファベット列[MATH]が空白を含んでいた場合は，前述のとおり空白を取り除いて確率値の計算を行うが，空白の存在した箇所は記憶しておき，部分文字列[MATH]が空白をまたがないという制約を加えて[MATH]の計算を行う．
この発音モデルを用いて，以下のような手順で単語対応付き翻字対の抽出を行う．
括弧内に出現するアルファベット列[MATH]と，その直前に出現する片仮名列[MATH]を抽出し，それらの組[MATH]を翻字対の候補とする．
ただしアルファベット列は全て小文字に正規化する．
翻字対候補[MATH]に対するスコアを以下のように定義し，それが閾値[MATH]を越えたものを正しい翻字対と判定する．
式中の[MATH]は[MATH]に含まれる単語数であり，[MATH]という項は単語数が多い場合にスコアが過剰に小さくなるのを防ぐために導入している．
ここでスコアが閾値を下回っていた場合には，片仮名語の開始位置を正しく判定できていない可能性がある．
そこで，片仮名列[MATH]の最左文字を1文字ずつ削除していき，閾値を上回るものが見つかればそれを翻字対と判定し，次の翻字対候補の処理に移る．
得られた翻字対[MATH]に対して，部分文字列対応[MATH]に基づいて片仮名列[MATH]を分かち書きし，単語の対応関係を求める．
これにより，単語対応付き翻字対のリストを得ることができる．
ただし，手順2においては，表記揺れやタイポなどの要因により，1つの片仮名列に対して複数の逆翻字が見つかる可能性がある．
その場合は，各片仮名列[MATH]に対して，最もスコアの高い翻字対[MATH]のみを保持して，それ以外のものは使用しない．
本論文では，片仮名複合名詞[MATH]が入力として与えられたとき，それを構成語列[MATH]へと分割する問題を取り扱う．
ここでは，出力[MATH]が1語（すなわち[MATH]）である場合もありうることに注意をされたい．
1節においても議論したように，片仮名名詞は英語の翻字が多く，提案する素性の1つもその性質を利用したものとなっているため，以下では入力される片仮名語は英語の翻字であると仮定する．
この仮定が実テキストにおいてどの程度成立しているのかを検証することは難しいが，例えばウェブ検索エンジンのクエリにおいては，片仮名のクエリの約87%は翻字であることが報告されている[CITE]．
このデータから上記の仮定にはある程度の妥当性があることが推測され，実テキストを処理する際にも提案手法の効果を期待することができる．
我々は片仮名複合名詞の分割処理を「片仮名複合名詞[MATH]に対する構成語列[MATH]を予測する構造予測問題」と捉えて，これを以下のような線形モデルを用いて解く．
ここで[MATH]は入力[MATH]に対する全分割候補の集合を表す．
[MATH]は分割候補[MATH]の素性ベクトル表現，[MATH]は訓練事例から推定される重みベクトルである．
表[REF_tab:feature]に我々が実験で用いた素性テンプレートを示す．
テンプレート1からは，ある構成語[MATH]-gramが出現したか否かを示す2値素性が，訓練事例に出現した全ての構成語[MATH]-gramについて生成される．
テンプレート2は同様の[MATH]-gram素性である．
テンプレート3からは，構成語の文字数(1, 2, 3, 4, [MATH]5)を示す2値素性が5種類生成される．
テンプレート4は構成語[MATH]が外部辞書に登録されているか否かを表す2値素性であり，構成語[MATH]が外部辞書に登録されていれば1を返す2値素性が1つ生成される．
テンプレート5から7は，片仮名複合名詞の言い換えと逆翻字を用いたものであり，[REF_sec:para]節と[REF_sec:trans]節において詳しく説明する．
以下の議論では，テンプレート1から4によって生成される素性を基本素性，テンプレート5から生成される素性を言い換え素性，テンプレート6と7から生成される素性を逆翻字素性と呼んで互いに区別をする．
重みベクトル[MATH]は任意の学習アルゴリズムを用いて最適化することが可能であるが，ここでは計算効率を考慮して平均化パーセプトロン[CITE]を用いた．
平均化パーセプトロンはオンライン学習アルゴリズムの一種であり，高速に学習を行うことができると同時に，多くのタスクにおいてSVMなどのバッチ学習アルゴリズムと比較しても遜色のない精度を達成できることが知られている．
パーセプトロンの訓練時およびテスト時には[MATH]を求める操作が必要となるが，セミマルコフモデルにおいて用いられるのと同様の動的計画法によって効率的に実行可能である．
本節では，片仮名複合名詞の言い換え表現を，教師あり学習の素性として使う方法について述べる（表[REF_tab:feature]におけるテンプレート5に対応する）．
一般的に，複合名詞は様々な形へと言い換えることが可能であるが，そうした言い換え表現の中には，元の複合名詞の単語境界を認識する手がかりとなるものが存在する．
以下に具体例を示す．
\head{アンチョビパスタ}{ex:anchovy} \sent{アンチョビ・パスタ
[3pt]} \sent{アンチョビのパスタ}
([REF_ex:anchovy]b)は，複合名詞([REF_ex:anchovy]a)の構成語間に中黒を挿入することによって生成された言い換え表現である．
同様に([REF_ex:anchovy]c)は助詞「の」を挿入することによって生成された言い換え表現である．
もしラベルなしテキストにおいて([REF_ex:anchovy]b)や([REF_ex:anchovy]c)のような言い換え表現を観測することができれば，このことは複合名詞([REF_ex:anchovy]a)を「アンチョビ」と「パスタ」に正しく分割するための手がかりとなることが考えられる．
このような言い換えを利用して片仮名複合名詞の分割処理を行うため，複合名詞の言い換え規則を7つ作成した（表[REF_tab:para]）．
言い換え規則の作成にあたっては，Kageuraら[CITE]の研究を参考にしながら，分割処理に有用と思われるものを人手で選定した．
作成した言い換え規則は全て[MATH]という形式をしており（[MATH]と[MATH]は名詞，[MATH]は助詞などの機能語），左辺が言い換え前の複合名詞，右辺が言い換え後の表現に対応している．
これらの規則を用いて，次のように新しい素性を定義する．
まず前処理として，以下のような正規表現を用いることにより，片仮名複合名詞の言い換え表現の出現頻度をラベルなしテキストから求める．
(katakana)+\;・\;(katakana)+
(katakana)+\;の\;(katakana)+
(katakana)+\;する\;(katakana)+
(katakana)+\;した\;(katakana)+
(katakana)+\;な\;(katakana)+
(katakana)+\;的\;(katakana)+
(katakana)+\;的な\;(katakana)+
ただし(katakana)は片仮名1文字にマッチする特殊文字である．
また[MATH]は文字の繰り返しを表す量指定子であり，最長一致が適用されるものとする．
このような正規表現を用いることによって，単語分割処理を行わずに言い換え表現を抽出することができるのは，表[REF_tab:para]のような片仮名複合語の言い換え表現に対象を限定しているためである．
上記の正規表現にマッチするテキストは，必ず前後が片仮名以外の文字（漢字や平仮名）に囲まれていることになる．
そのような文字種の変わり目には，単語境界が存在する場合が多いため，このような単純な文字列処理であっても言い換え表現を抽出することが可能になっている．
分割処理時に分割候補[MATH]が提示された際には，構成語2-gramに対する言い換え素性Para ([MATH], [MATH])の値を次のように定義する．
まず[MATH]，[MATH]と代入することにより，表[REF_tab:para]の規則から言い換え表現を生成する．
そして，生成された7つの言い換え表現の頻度の和を[MATH]としたとき，その対数[MATH]を素性値として用いる．
ここでは素性値の計算に非常に単純な方法を用いているため，[MATH]や[MATH]に名詞ではなく，名詞連続が代入された場合であっても，素性が発火してしまうということがある．
また逆に，正解となる構成語よりも小さな単位の文字列が代入された場合であっても，同様に素性が発火してしまうことがあり，精度に悪影響を及ぼす可能性がある．
しかし，このような手法であっても実験において分割精度の向上を十分確認することができたため，シンプルさを重視して現在のような手法とした．
素性値として頻度ではなく対数頻度を用いているのはスケーリングのためである．
予備的な実験においては，頻度をそのまま素性値として用いることも行ったが，対数頻度を用いた場合の方が高い精度が得られた．
なお，[MATH]ではなく[MATH]としているのは，[MATH] = 1であった場合に素性値が0となるのを防ぐためである．
片仮名語の多くは英語を翻字したものであり，元となる英語表現が存在する．
以下では，そのような英語表現のことを原語と呼び，片仮名語と原語の対のことを翻字対と呼ぶこととする．
我々は，片仮名語が原語の発音情報をおおよそ保持しているという特性を利用することによって，単語単位での対応関係が付与された翻字対（単語対応付き翻字対）をラベルなしテキストから自動抽出する（表[REF_tab:trans]）．
そして，得られた単語対応付き翻字対に基づいて，分割結果[MATH]に出現する単語[MATH]-gramが，英単語[MATH]-gramと対応付け可能であるかを示す2値素性を用いる（表[REF_tab:feature]におけるテンプレート6と7に対応する）．
以下本節では，テキストから単語対応付き翻字対を自動抽出する方法について説明する．
日本語においては，括弧表現を使って片仮名語の原語がテキスト中に挿入される場合がある．
\head{アメリカでジャンクフード(junk food)と言えば.
..
}{ex:junk} \sent{トラックバックスパム(spam)を撃退するため.
..
}{}
いずれの例文においても，下線を引いた片仮名語に対して，その原語が括弧を使って併記されている．
我々はこのような括弧表現を利用することにより，単語対応付き翻字対の自動抽出を行う．
こうした括弧表現から単語対応付き翻字対の抽出を行うためには，少なくとも以下の3つのことが技術的な問題となる
片仮名語の直後に出現する括弧表現が必ずしもその原語であるとは限らないため，原語が記述されている括弧表現とそうでない括弧表現を区別する必要がある．
翻字対の関係にある片仮名語の開始位置を決定しなくてはならない．
例えば([REF_ex:junk]b)においては，原語「spam」の翻字は「トラックバックスパム」ではなく「スパム」である．
片仮名語と原語の単語対応を求めるためには，片仮名語を分かち書きしなくてはならない．
例えば([REF_ex:junk]a)から表[REF_tab:trans]のような単語対応付き翻字対を獲得するためには，片仮名列「ジャンクフード」を「ジャンク」と「フード」に分割することが必要である．
これまでにも，前述のような括弧表現から翻字対を自動抽出する研究は数多く存在するが，問題Cに対する本質的な解決策はいまだ提案されていない．
これまでの研究においては，基本的に既存の単語分割器を用いることによって片仮名語の分割が行われている[CITE]．
しかし，[REF_sec:prev]節において議論を行ったように，片仮名語の分かち書きを行うことは現在のところ技術的に困難であり，このようなアプローチは望ましくない．
我々は上記の3つの問題を解決するため，片仮名語と原語の発音の類似性を利用することを提案する．
以下の議論では，説明のために，まず問題Cだけを議論の対象とする．
具体例として，片仮名語「ジャンクフード」と原語「junk food」に対して，それらの発音の類似性に基づき以下のような部分文字列の対応関係が得られたとする．
\head{[ジャン][MATH][ク][MATH][フー][MATH][ド][MATH]}{ex:junk2} \sent{[jun][MATH][k][MATH] [foo][MATH][d][MATH]}
ここでは，括弧で囲まれて同じ番号を添えられている部分文字列が，互いに対応関係にあるものとする．
括弧表現内の英語は空白を使って分かち書きされているため，上記のような部分文字列の対応関係を利用すれば，片仮名語と英単語が1対1に対応するように片仮名列を分かち書きすることができる．
また，その過程において，単語間の対応関係も明らかにすることができる．
残る問題Aおよび問題Bに対しても，発音の類似性に基づいて同様に解決を図ることが可能である．
以下の例において，下線が引かれた片仮名語と括弧内の英語表現が翻字対であるか否かを判定することを考える．
\head{検索エンジン(Google)を使って.
..
}{ex:google} \sent{トラックバックスパム(spam)を撃退する.
..
}{}
このように，括弧内に原語ではない表現が出現したり，片仮名語の開始位置が正しく認識されなかった場合には，片仮名列とアルファベット列の発音の類似度が低くなることが期待できるため，フィルタリングできると考えられる．
単語対応付き翻字対の具体的な抽出手順については，[REF_sec:extraction]節において説明を行う．
片仮名語と原語における部分文字列の対応関係の発見には，Jiampojamarnら[CITE]が提案した生成モデルを用いる．
[MATH]と[MATH]をそれぞれ片仮名列とアルファベット列とし，これらの間の対応関係を見つけることを考える．
ただし，原語には空白が存在する可能性があるが，空白に対応する片仮名文字列は存在しないことから，部分文字列の対応を求めるときにはアルファベット列から空白を取り除いておく．
例えば「ジャンクフード」と「junk food」の部分文字列対応を求める場合には「[MATH]」「[MATH]」とする．
ここで，[MATH]をそれらの間の部分文字列の対応とする．
具体的には，[MATH]は対応付けられている部分文字列の組([MATH], [MATH])の集合であり，[MATH]および[MATH]となる．
この部分文字列対応[MATH]の確率を以下のように定義する．
一般に[MATH]は観測することができないため隠れ変数として扱い，モデルのパラメータは翻字対[MATH]の集合からEMアルゴリズムを用いて推定する．
詳細は文献[CITE]を参照されたい．
表[REF_tab:alignment]に「ジャンクフード」と「junkfood」に対する部分文字列対応[MATH]の具体例，および実験において計算された確率値を示す．
この確率モデルを用いて，与えられた[MATH]に対する部分文字列の対応を次のように決定する．
このとき[MATH]の中の部分文字列[MATH]が空白をまたいでしまうと（ジャンクフードの例であれば[MATH]などとなった場合），[MATH]を使って片仮名列[MATH]を分かち書きすることができなくなってしまう．
そこで，アルファベット列[MATH]が空白を含んでいた場合は，前述のとおり空白を取り除いて確率値の計算を行うが，空白の存在した箇所は記憶しておき，部分文字列[MATH]が空白をまたがないという制約を加えて[MATH]の計算を行う．
この発音モデルを用いて，以下のような手順で単語対応付き翻字対の抽出を行う．
括弧内に出現するアルファベット列[MATH]と，その直前に出現する片仮名列[MATH]を抽出し，それらの組[MATH]を翻字対の候補とする．
ただしアルファベット列は全て小文字に正規化する．
翻字対候補[MATH]に対するスコアを以下のように定義し，それが閾値[MATH]を越えたものを正しい翻字対と判定する．
式中の[MATH]は[MATH]に含まれる単語数であり，[MATH]という項は単語数が多い場合にスコアが過剰に小さくなるのを防ぐために導入している．
ここでスコアが閾値を下回っていた場合には，片仮名語の開始位置を正しく判定できていない可能性がある．
そこで，片仮名列[MATH]の最左文字を1文字ずつ削除していき，閾値を上回るものが見つかればそれを翻字対と判定し，次の翻字対候補の処理に移る．
得られた翻字対[MATH]に対して，部分文字列対応[MATH]に基づいて片仮名列[MATH]を分かち書きし，単語の対応関係を求める．
これにより，単語対応付き翻字対のリストを得ることができる．
ただし，手順2においては，表記揺れやタイポなどの要因により，1つの片仮名列に対して複数の逆翻字が見つかる可能性がある．
その場合は，各片仮名列[MATH]に対して，最もスコアの高い翻字対[MATH]のみを保持して，それ以外のものは使用しない．
