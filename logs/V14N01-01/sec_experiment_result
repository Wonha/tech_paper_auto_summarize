提案アルゴリズムを利用したパーザをC++で実装し，その時間計算量の振る舞いや解析精度を実験的に評価した．
提案アルゴリズムを評価するために，京大コーパスVersion 2 [CITE]を使った．
新聞記事の1月1日から1月8日分(7,958文)を訓練事例とし，1月9日分(1,246文)をテスト事例とした．
1月10日分を開発用に用いた．
これらの記事の使い方は[CITE]と同じである．
独自にC++で実装したSVMsのツールを用いた．
カーネルとして，3次の多項式カーネルを用いた．
特に記述がない限り誤分類のコストは1に設定した．
解析精度テスト事例に対する我々のパーザの性能を表[REF_tbl:acc]に示す．
従来研究との比較のために，性能評価には京大コーパスで標準的に使われる尺度である係り受け正解率と文正解率の二つを用いる．
係り受け正解率とは，正しく解析された係り受けの割合であり(他の多くの文献と同様，文末の一文節を除く)，文正解率とは，全ての係り関係が正しく解析された文の割合である．
「標準素性」を用いた場合の精度は比較的よい．
実際，この係り受け正解率は動的素性を用いないときのCascaded Chunking Model [CITE]とほぼ同じである．
第[REF_sec:models]節で述べた全ての素性を用いた場合，我々のパーザは89.56%の係り受け正解率を得た．
これは京大コーパスVersion 2に対して公表されている精度の中で最もよいものである．
時間計算量の漸近的な振る舞い図[REF_speed]に，我々のパーザのテスト事例に対する実行時間を示す．
これはワークステーション(Ultra SPARC II 450 MHz, 1GBメモリ)を用いて計測した．
図[REF_speed]より実行時間の上限が文の長さに比例しているのが分かる．
これは，第[REF_subsec:time]節で行なった理論的な分析と一致している．
この実験結果を見て，確かに従来研究よりも時間計算量の上限は低く抑えられているが，我々のパーザの実際の処理時間はそれほど速くないと思われるかもしれない．
パーザのこの遅さの主たる原因は，SVMsにおけるカーネル評価での膨大な計算のせいである．
我々の実験では，SVMの分類器は4万個以上のサポートベクタを持っている．
それゆえ，係り関係を判定するたびに膨大な内積計算が必要となる．
幸い，この問題に対する解決策は既にKudoとMatsumoto [CITE]によって与えられている．
彼らは高次の多項式カーネルを線形カーネルに変換する手法を提案し，変換された線形カーネルでは，精度を保ったまま元の多項式カーネルよりもおよそ30から300倍高速だったと報告している．
彼らの手法を我々のパーザに適用すれば，処理時間も十分高速化されるだろう．
彼らの手法を用いればどのくらい我々のパーザの速度が改善されるか粗く見積もるために，線形カーネルを用い，同じテスト事例に対してパーザを走らせてみた．
図[REF_speed:lin]に，線形カーネルを用いたパーザの処理時間を示す．
なお計測には多項式カーネルを用いた場合と同じマシンを使った．
3次の多項式カーネルを使う場合に比べて相当に高速である．
非常に長い文であっても0.02秒以内で解析が行なえている．
加えて，このパーザのスピードばかりでなく精度も我々が期待した以上だった．
係り受け正解率は87.36%，文正解率は40.60%に達した．
これらの精度は，素性の組合せを人手で選択して追加しているパーザ[CITE]よりもわずかに良い．
我々のパーザと関連研究におけるパーザとを時間計算量と精度の点から比較する．
比較のサマリを表[REF_tbl:comp]に示す．
我々のアルゴリズムとSVMsと組み合わせたものが時間計算量の点から優れた性質を持ち，加えてトップレベルの精度が得られている．
文献[CITE]との比較は，第[REF_comp:theory]の記述にゆずる．
Uchimotoら[CITE]は最大エントロピー法と後方ビームサーチを用いている．
文献[CITE]によれば，解析時間は[MATH]に比例するとのことである．
これに対し，我々のパーザは線形時間で文を解析し，精度もよい．
工藤と松本[CITE]の「相対モデル」のパーザも，後方ビームサーチを用いているので，時間計算量という点ではUchimotoらのパーザと同様である．
文献[CITE]では，「相対モデル」のパーザは，京大コーパスVersion 3.0に対して，係り受け正解率91.37%を得，Cascaded Chunking Modelは91.23%を得たと報告されている．
我々のパーザは，京大コーパスVersion 2において，Cascaded Chunking Modelの精度を0.27ポイント上回っていることを考えると，我々のパーザと「相対モデル」パーザとの差も大きなものではないと判断できる．
また，我々と同様Sekine [CITE]も線形時間で処理が進む非常に高速なパーザを提案している．
彼の手法は，後方から係り先を決定していく．
係り元の文節の語形の情報と，係り先候補(5つまで)の主辞の情報から，係り先を一つに決める決定的有限状態変換器を用いている．
係り元の語形や5つの係り先候補の主辞の情報を細かく区別すると，状態(state)の数が多くなりすぎ，大量のメモリを消費するため，係り元の語形の状態を40に，係り先の主辞の状態を18に限定している．
品詞や活用形の情報のみ利用している．
このため，精度が大きく犠牲になっている．
提案アルゴリズムを利用したパーザをC++で実装し，その時間計算量の振る舞いや解析精度を実験的に評価した．
提案アルゴリズムを評価するために，京大コーパスVersion 2 [CITE]を使った．
新聞記事の1月1日から1月8日分(7,958文)を訓練事例とし，1月9日分(1,246文)をテスト事例とした．
1月10日分を開発用に用いた．
これらの記事の使い方は[CITE]と同じである．
独自にC++で実装したSVMsのツールを用いた．
カーネルとして，3次の多項式カーネルを用いた．
特に記述がない限り誤分類のコストは1に設定した．
解析精度テスト事例に対する我々のパーザの性能を表[REF_tbl:acc]に示す．
従来研究との比較のために，性能評価には京大コーパスで標準的に使われる尺度である係り受け正解率と文正解率の二つを用いる．
係り受け正解率とは，正しく解析された係り受けの割合であり(他の多くの文献と同様，文末の一文節を除く)，文正解率とは，全ての係り関係が正しく解析された文の割合である．
「標準素性」を用いた場合の精度は比較的よい．
実際，この係り受け正解率は動的素性を用いないときのCascaded Chunking Model [CITE]とほぼ同じである．
第[REF_sec:models]節で述べた全ての素性を用いた場合，我々のパーザは89.56%の係り受け正解率を得た．
これは京大コーパスVersion 2に対して公表されている精度の中で最もよいものである．
時間計算量の漸近的な振る舞い図[REF_speed]に，我々のパーザのテスト事例に対する実行時間を示す．
これはワークステーション(Ultra SPARC II 450 MHz, 1GBメモリ)を用いて計測した．
図[REF_speed]より実行時間の上限が文の長さに比例しているのが分かる．
これは，第[REF_subsec:time]節で行なった理論的な分析と一致している．
この実験結果を見て，確かに従来研究よりも時間計算量の上限は低く抑えられているが，我々のパーザの実際の処理時間はそれほど速くないと思われるかもしれない．
パーザのこの遅さの主たる原因は，SVMsにおけるカーネル評価での膨大な計算のせいである．
我々の実験では，SVMの分類器は4万個以上のサポートベクタを持っている．
それゆえ，係り関係を判定するたびに膨大な内積計算が必要となる．
幸い，この問題に対する解決策は既にKudoとMatsumoto [CITE]によって与えられている．
彼らは高次の多項式カーネルを線形カーネルに変換する手法を提案し，変換された線形カーネルでは，精度を保ったまま元の多項式カーネルよりもおよそ30から300倍高速だったと報告している．
彼らの手法を我々のパーザに適用すれば，処理時間も十分高速化されるだろう．
彼らの手法を用いればどのくらい我々のパーザの速度が改善されるか粗く見積もるために，線形カーネルを用い，同じテスト事例に対してパーザを走らせてみた．
図[REF_speed:lin]に，線形カーネルを用いたパーザの処理時間を示す．
なお計測には多項式カーネルを用いた場合と同じマシンを使った．
3次の多項式カーネルを使う場合に比べて相当に高速である．
非常に長い文であっても0.02秒以内で解析が行なえている．
加えて，このパーザのスピードばかりでなく精度も我々が期待した以上だった．
係り受け正解率は87.36%，文正解率は40.60%に達した．
これらの精度は，素性の組合せを人手で選択して追加しているパーザ[CITE]よりもわずかに良い．
我々のパーザと関連研究におけるパーザとを時間計算量と精度の点から比較する．
比較のサマリを表[REF_tbl:comp]に示す．
我々のアルゴリズムとSVMsと組み合わせたものが時間計算量の点から優れた性質を持ち，加えてトップレベルの精度が得られている．
文献[CITE]との比較は，第[REF_comp:theory]の記述にゆずる．
Uchimotoら[CITE]は最大エントロピー法と後方ビームサーチを用いている．
文献[CITE]によれば，解析時間は[MATH]に比例するとのことである．
これに対し，我々のパーザは線形時間で文を解析し，精度もよい．
工藤と松本[CITE]の「相対モデル」のパーザも，後方ビームサーチを用いているので，時間計算量という点ではUchimotoらのパーザと同様である．
文献[CITE]では，「相対モデル」のパーザは，京大コーパスVersion 3.0に対して，係り受け正解率91.37%を得，Cascaded Chunking Modelは91.23%を得たと報告されている．
我々のパーザは，京大コーパスVersion 2において，Cascaded Chunking Modelの精度を0.27ポイント上回っていることを考えると，我々のパーザと「相対モデル」パーザとの差も大きなものではないと判断できる．
また，我々と同様Sekine [CITE]も線形時間で処理が進む非常に高速なパーザを提案している．
彼の手法は，後方から係り先を決定していく．
係り元の文節の語形の情報と，係り先候補(5つまで)の主辞の情報から，係り先を一つに決める決定的有限状態変換器を用いている．
係り元の語形や5つの係り先候補の主辞の情報を細かく区別すると，状態(state)の数が多くなりすぎ，大量のメモリを消費するため，係り元の語形の状態を40に，係り先の主辞の状態を18に限定している．
品詞や活用形の情報のみ利用している．
このため，精度が大きく犠牲になっている．
