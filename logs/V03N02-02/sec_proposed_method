ダイジェスト自動生成システムの作成に先立ち，94年9月8日から10月18日の間にfj.wantedに流れた記事231件(フォロー記事は除く)に対する調査を行なった．
特に，その中の59件については，詳細な調査を行なった．
ここでは，その調査結果を示す．
fj.wantedの記事の主題(目的)は，「何かを探している(求めている)ということを伝える」というものである．
これらの記事の主題は，おおよそ，図[REF_fig:category]に示すような2段の階層的カテゴリに分類することが可能である．
この図において，かぎ括弧内は，求めるものの対象が何であるかを示している．
以下では，これらのカテゴリを記事のカテゴリと呼ぶ．
fj.wantedの記事には，以下のような文章上の特徴が見られた．
多くの記事において，その記事の内容を端的に表す1文(以下，サマリ文と呼ぶ)が存在する．
調査した記事59件中，54件(91.5%)にサマリ文が存在した．
fj.wantedの記事で用いられる文章構造のほとんどは，単刀直入型か背景説明型である．
単刀直入型と背景説明型とは，図[REF_fig:structure]に示すような文章構造(文章の流れ)をさす．
この図において，かぎ括弧がつけられたものは，省略可能な要素である．
調査した記事59件中，単刀直入型は47件(79.8%)，背景説明型は10件(16.9%)であった．
なお，これらの型において，「要約」の部分が1文であれば，それがサマリ文となる．
fj.wantedの記事には，以下のような表現上の特徴が見られた．
典型的な「求む」の表現が，多くの記事で用いられる．
これらの表現のほとんどは，典型的な動詞群と文パターン(文末表現)によって構成されている．
使われる典型的な動詞は，記事のカテゴリによって異なる．
図[REF_fig:pattern_example]に例を示す．
機械による言語処理を難しくする，以下のような特徴が見られる．
テキストが低品質である．
(誤りが多い)
会話体が存在する．
(ex.「〜ってあるんでしょうか？」)
品目名として，かなり特殊な固有名詞が多数現れる．
上記の調査結果に基づき，fj.wantedの各記事から
記事のカテゴリ
サマリ文
の2つを記事のサマリとして抽出することとし，それを行なうモジュールを作成した．
その概要を図[REF_fig:summary_extraction]に示す．
この図に示すように，サマリ抽出は，文分割，特徴抽出，カテゴリ判定，サマリ文抽出の4つのステップによって行なうが，最後の2つのカテゴリ判定とサマリ文抽出はそれぞれ独立に行う．
これは，以下のように，サマリ文として抽出すべき文とカテゴリ判定の根拠となる文が異なる場合があるからである．
ＡＴ互換機用のモニタを探しています。
ＶＧＡ以上の解像度を持つカラーモニターを２万円未満で譲っていただけないでしょうか。
この例では，1文目がサマリ文であるのに対し，カテゴリ「譲って下さい」は2文目から求まる．
ニュース記事の本文を文毎に分割し，先頭の10文を取り出す．
記事には，色々な表示上の工夫がされていることがあり，文を切り出すことはそれほど単純ではない．
ここでは，各種のヒューリスティックを組み込んだ専用プログラムによって文を切り出す．
各文に対して，42個の特徴が存在するかどうかを調べ，特徴ベクトル(42bitのビット列)を作成する．
ここでの「特徴」とは，例えば，
「譲って下さい」に類する表現が存在する
といったものであり，これは，表[REF_table:yuzutte]に示すような表現が存在するかどうかを，文字列照合によって調べることによって判定する．
42個の特徴の概要を表[REF_table:features]に示す．
カテゴリ判定では，35個の規則を用いる．
このうち，31個の規則は，特徴1--16, 18-32に直接対応する規則で，これらの特徴の存在がそのままカテゴリの候補に対応する(表[REF_table:features]中の，「以降の処理での利用」欄を参照)．
残りの4つの規則のうちの3つは，特徴33--35に対応する規則で，他の規則によって「探しています」というカテゴリが候補となっている場合にのみ使用する．
残りの1つの規則(特徴17に対応)は，他の規則によってカテゴリの候補が得られない場合にのみ使用する．
具体的には，以下の手順によってカテゴリを決定する．
カテゴリ候補リストを空とする．
先頭の文の特徴ベクトルから順に，文の特徴ベクトルに対して以下を実行する．
規則を適用し，その特徴ベクトルから得られる全てのカテゴリの候補をカテゴリ候補リストに追加する．
そのリストの中に，「譲って下さい／譲ります／貸して下さい／募集します」のいずれかが含まれる場合は，それを最終的なカテゴリとし，処理を終了する．
カテゴリ候補リストに「教えて下さい」が含まれている場合は，それを最終的なカテゴリとし，処理を終了する．
カテゴリ候補リストに「探しています」が含まれている場合は，それを最終的なカテゴリとし，処理を終了する．
カテゴリは不明とする．
サマリ文の抽出では，以下の2つの方法を実装した．
特徴1--32を持った最初の文をサマリ文とする．
但し，その前の文が「疑問文(特徴36)」である場合は，その文をサマリ文とする．
特徴37--42を持たない最初の文をサマリ文とする．
上記のサマリ抽出モジュールを用いて，fj.wantedのダイジェストシステムを試作した．
作成したシステムの概要を図[REF_fig:system]に示す．
サマリ文抽出では，基本的には，表現パタンによる方法を用い，この方法によってサマリ文が抽出できない場合には，文章構造による方法を用いる．
ダイジェスト編集では，得られた記事のサマリをカテゴリ別に整理し，HTML (HyperText Markup Language)形式で出力する．
このとき，元の記事へのポインタを，ハイパーテキストのリンクとして埋め込む．
ダイジェストリーダーとしては，WWW (World-Wide Web)のクライアントプログラム(xmosaic等)を用いる．
本システムは，現在，WWWにおいて試験運用している．
図[REF_fig:digest]にダイジェストの表示例を示す．
本研究により，fj.wantedに関しても実用的なダイジェストの自動生成が可能であることが明らかになった．
当初，我々は，テキストと投稿者がかなり多様であるため，fj.wantedのダイジェスト自動生成は，難しいのではないかと考えていた．
しかし，本研究の結果は，この予想を覆すものであった．
fj.wantedのダイジェスト自動生成が可能であった最大の理由は，「fj.wantedの記事が，自分の求めるものが何であるかを読み手に伝えるという明確な目的を持った文章であり，そのような情報を伝達するために使われる文章構造と文章表現はかなり限定される」ということにあるだろう．
このことが，言わば「斜め読み」的処理によるサマリ抽出を可能にしていると考えられる．
さらなる精度向上を目指すならば，サマリ文がない記事(15%)のサマリ生成が必要となる．
サマリ文がない記事の多くは，照応や省略といった現象が現れているためにサマリ文となるような1文が存在しない記事である．
このため，照応，省略の処理が十分な精度で実現できなければ，適切なサマリ文を生成できないと考えられる．
投稿者によるサマリ作成は非現実的である．
そのため，サマリの自動抽出は重要である．
サマリを自動生成するのではなく，あらかじめサマリを付けて投稿してもらうという解も存在する．
しかし，現在の記事のサブジェクト(subject)に書かれている情報からみて，我々は，それは非現実的だと考える．
本方法は，他の掲示情報型ニュースグループや質問応答型ニュースグループの質問記事のダイジェストにも応用できると考えられる．
応答記事の要約を含んだ形で，ダイジェスト(あるいは，FAQ(Frequently Asked Questions))を自動生成することも考えられるが，その重要性は低いと考える．
なぜならば，質問記事のリストを，質問の要約とそれへの応答記事へのポインタという形で示すことができれば，十分にダイジェストの役割を果たすと考えられるからである．
テキストの主題による分類は重要である．
テキストには，主題(目的)と分野(内容)という2つの直交する分類が存在し，この2つが，いわば情報の取捨選択の縦糸と横糸となっている．
このうち，分野による分類はいままで多くの研究があるが，主題による分類は，それほど注目されていなかった．
この主題による分類も，分野による分類と同様に，求める情報に到達することを支援するナビゲーション機能の実現において，強力な道具となると考えられる．
ダイジェスト自動生成システムの作成に先立ち，94年9月8日から10月18日の間にfj.wantedに流れた記事231件(フォロー記事は除く)に対する調査を行なった．
特に，その中の59件については，詳細な調査を行なった．
ここでは，その調査結果を示す．
fj.wantedの記事の主題(目的)は，「何かを探している(求めている)ということを伝える」というものである．
これらの記事の主題は，おおよそ，図[REF_fig:category]に示すような2段の階層的カテゴリに分類することが可能である．
この図において，かぎ括弧内は，求めるものの対象が何であるかを示している．
以下では，これらのカテゴリを記事のカテゴリと呼ぶ．
fj.wantedの記事には，以下のような文章上の特徴が見られた．
多くの記事において，その記事の内容を端的に表す1文(以下，サマリ文と呼ぶ)が存在する．
調査した記事59件中，54件(91.5%)にサマリ文が存在した．
fj.wantedの記事で用いられる文章構造のほとんどは，単刀直入型か背景説明型である．
単刀直入型と背景説明型とは，図[REF_fig:structure]に示すような文章構造(文章の流れ)をさす．
この図において，かぎ括弧がつけられたものは，省略可能な要素である．
調査した記事59件中，単刀直入型は47件(79.8%)，背景説明型は10件(16.9%)であった．
なお，これらの型において，「要約」の部分が1文であれば，それがサマリ文となる．
fj.wantedの記事には，以下のような表現上の特徴が見られた．
典型的な「求む」の表現が，多くの記事で用いられる．
これらの表現のほとんどは，典型的な動詞群と文パターン(文末表現)によって構成されている．
使われる典型的な動詞は，記事のカテゴリによって異なる．
図[REF_fig:pattern_example]に例を示す．
機械による言語処理を難しくする，以下のような特徴が見られる．
テキストが低品質である．
(誤りが多い)
会話体が存在する．
(ex.「〜ってあるんでしょうか？」)
品目名として，かなり特殊な固有名詞が多数現れる．
上記の調査結果に基づき，fj.wantedの各記事から
記事のカテゴリ
サマリ文
の2つを記事のサマリとして抽出することとし，それを行なうモジュールを作成した．
その概要を図[REF_fig:summary_extraction]に示す．
この図に示すように，サマリ抽出は，文分割，特徴抽出，カテゴリ判定，サマリ文抽出の4つのステップによって行なうが，最後の2つのカテゴリ判定とサマリ文抽出はそれぞれ独立に行う．
これは，以下のように，サマリ文として抽出すべき文とカテゴリ判定の根拠となる文が異なる場合があるからである．
ＡＴ互換機用のモニタを探しています。
ＶＧＡ以上の解像度を持つカラーモニターを２万円未満で譲っていただけないでしょうか。
この例では，1文目がサマリ文であるのに対し，カテゴリ「譲って下さい」は2文目から求まる．
ニュース記事の本文を文毎に分割し，先頭の10文を取り出す．
記事には，色々な表示上の工夫がされていることがあり，文を切り出すことはそれほど単純ではない．
ここでは，各種のヒューリスティックを組み込んだ専用プログラムによって文を切り出す．
各文に対して，42個の特徴が存在するかどうかを調べ，特徴ベクトル(42bitのビット列)を作成する．
ここでの「特徴」とは，例えば，
「譲って下さい」に類する表現が存在する
といったものであり，これは，表[REF_table:yuzutte]に示すような表現が存在するかどうかを，文字列照合によって調べることによって判定する．
42個の特徴の概要を表[REF_table:features]に示す．
カテゴリ判定では，35個の規則を用いる．
このうち，31個の規則は，特徴1--16, 18-32に直接対応する規則で，これらの特徴の存在がそのままカテゴリの候補に対応する(表[REF_table:features]中の，「以降の処理での利用」欄を参照)．
残りの4つの規則のうちの3つは，特徴33--35に対応する規則で，他の規則によって「探しています」というカテゴリが候補となっている場合にのみ使用する．
残りの1つの規則(特徴17に対応)は，他の規則によってカテゴリの候補が得られない場合にのみ使用する．
具体的には，以下の手順によってカテゴリを決定する．
カテゴリ候補リストを空とする．
先頭の文の特徴ベクトルから順に，文の特徴ベクトルに対して以下を実行する．
規則を適用し，その特徴ベクトルから得られる全てのカテゴリの候補をカテゴリ候補リストに追加する．
そのリストの中に，「譲って下さい／譲ります／貸して下さい／募集します」のいずれかが含まれる場合は，それを最終的なカテゴリとし，処理を終了する．
カテゴリ候補リストに「教えて下さい」が含まれている場合は，それを最終的なカテゴリとし，処理を終了する．
カテゴリ候補リストに「探しています」が含まれている場合は，それを最終的なカテゴリとし，処理を終了する．
カテゴリは不明とする．
サマリ文の抽出では，以下の2つの方法を実装した．
特徴1--32を持った最初の文をサマリ文とする．
但し，その前の文が「疑問文(特徴36)」である場合は，その文をサマリ文とする．
特徴37--42を持たない最初の文をサマリ文とする．
上記のサマリ抽出モジュールを用いて，fj.wantedのダイジェストシステムを試作した．
作成したシステムの概要を図[REF_fig:system]に示す．
サマリ文抽出では，基本的には，表現パタンによる方法を用い，この方法によってサマリ文が抽出できない場合には，文章構造による方法を用いる．
ダイジェスト編集では，得られた記事のサマリをカテゴリ別に整理し，HTML (HyperText Markup Language)形式で出力する．
このとき，元の記事へのポインタを，ハイパーテキストのリンクとして埋め込む．
ダイジェストリーダーとしては，WWW (World-Wide Web)のクライアントプログラム(xmosaic等)を用いる．
本システムは，現在，WWWにおいて試験運用している．
図[REF_fig:digest]にダイジェストの表示例を示す．
本研究により，fj.wantedに関しても実用的なダイジェストの自動生成が可能であることが明らかになった．
当初，我々は，テキストと投稿者がかなり多様であるため，fj.wantedのダイジェスト自動生成は，難しいのではないかと考えていた．
しかし，本研究の結果は，この予想を覆すものであった．
fj.wantedのダイジェスト自動生成が可能であった最大の理由は，「fj.wantedの記事が，自分の求めるものが何であるかを読み手に伝えるという明確な目的を持った文章であり，そのような情報を伝達するために使われる文章構造と文章表現はかなり限定される」ということにあるだろう．
このことが，言わば「斜め読み」的処理によるサマリ抽出を可能にしていると考えられる．
さらなる精度向上を目指すならば，サマリ文がない記事(15%)のサマリ生成が必要となる．
サマリ文がない記事の多くは，照応や省略といった現象が現れているためにサマリ文となるような1文が存在しない記事である．
このため，照応，省略の処理が十分な精度で実現できなければ，適切なサマリ文を生成できないと考えられる．
投稿者によるサマリ作成は非現実的である．
そのため，サマリの自動抽出は重要である．
サマリを自動生成するのではなく，あらかじめサマリを付けて投稿してもらうという解も存在する．
しかし，現在の記事のサブジェクト(subject)に書かれている情報からみて，我々は，それは非現実的だと考える．
本方法は，他の掲示情報型ニュースグループや質問応答型ニュースグループの質問記事のダイジェストにも応用できると考えられる．
応答記事の要約を含んだ形で，ダイジェスト(あるいは，FAQ(Frequently Asked Questions))を自動生成することも考えられるが，その重要性は低いと考える．
なぜならば，質問記事のリストを，質問の要約とそれへの応答記事へのポインタという形で示すことができれば，十分にダイジェストの役割を果たすと考えられるからである．
テキストの主題による分類は重要である．
テキストには，主題(目的)と分野(内容)という2つの直交する分類が存在し，この2つが，いわば情報の取捨選択の縦糸と横糸となっている．
このうち，分野による分類はいままで多くの研究があるが，主題による分類は，それほど注目されていなかった．
この主題による分類も，分野による分類と同様に，求める情報に到達することを支援するナビゲーション機能の実現において，強力な道具となると考えられる．
