日本語形態素解析では，形態素辞書の存在を前提とした手法が一般的に用いられてきた．
以下に一般的な日本語形態素解析の手順を示す．
文中の各位置から始まる可能性のある形態素を事前に準備した辞書から検索
形態素の候補を列挙した形態素ラティスを作成
形態素ラティスから文として最も確からしい形態素の並びを決定
たとえば以下の文が入力された場合，図[REF_Figure::lattice]に示す形態素ラティスが作られ，最終的に太線で記されている組合せに決定される．
\ex{父は日本人。
}
手順1において，文中の各位置から始まる可能性のある形態素を探索する際にはトライ木に基づく高速な探索手法が一般的に用いられる．
また，手順3における最尤パスの選択は各形態素ごとに定義された生起コスト，および，各連接ごとに定義された連接コストに基づいて行われる．
パス全体のコストは，パスに含まれる形態素の生起コスト，および，それらの連接コストを加算することにより計算され，コストが小さいほど確からしい形態素の並びであることを意味する．
コストの設定方法としては人手で行う方法[CITE]や，機械学習に基づく手法[CITE]があるが，最尤パスの探索にはいずれもViterbiアルゴリズムが用いられる．
日本語形態素解析における未知語処理に関する研究は多く行われてきた．
代表的な手法として，事前に未知語をコーパスから自動獲得する手法[CITE]と，未知語を形態素解析時に自動認識する手法[CITE]の2つが挙げられる．
前者の手法は後者の手法と比べ，ある1つの未知語候補に対しコーパス中での複数の用例を考慮することができるため，単独の用例では判別の難しい未知語にも対処できるという特長がある．
一方，後者の手法は字種や前後の形態素候補を手掛かりとして統計や機械学習に基づく未知語モデルを構築する手法であり，コーパス中に出現しなかった未知語についても認識が可能という特長がある．
しかしながら，これらの研究はいずれも基本的に網羅的な未知語処理を目的としており，未知語タイプごとの特徴はあまり考慮されていない．
特定の未知語，特にくだけたテキストに出現する未知語に特化した研究としては，風間ら[CITE]，Kacmarcikら[CITE]，池田ら[CITE]，工藤ら[CITE]，斉藤ら[CITE]の研究がある．
風間ら[CITE]は，Web上のチャットで使用されるようなくだけたテキストの解析を目的とし，品詞bi-gramモデルに基づく確率的形態素解析器をベースとし，文字の挿入や置換が直前の文字や元の文字に依存していると仮定しそれを考慮に入れるように拡張することで，文字の挿入や置換に対して頑健な形態素解析システムの構築を行っている．
しかし，池田ら[CITE]が，風間らの手法を参考に辞書拡張ルールを作成し，200万文のブログ文書に適用して単語区切りに変化が見られた53,488文をサンプリングし評価したところ，37.2%の文はルール適用前と比べて単語区切りが悪化したと報告していることから，風間らの手法はオンラインチャット，および，それに類するテキストにのみ有効な手法であると推察される．
本研究で提案する既知語から派生した未知語処理手法も，基本的に風間らと同じくルールに基づくものであるが，未知語のタイプに応じた効率的な辞書の検索を行うことで，高い精度を保ちつつ高速な解析を実現している点に特長がある．
Kacmarcikら[CITE]は形態素解析の前処理としてテキスト正規化ルールを適用する手法を提案している．
池田ら[CITE]はくだけた表現を多く含むブログなどの文書を入力とし，くだけた表現の少ない新聞などの文書からくだけた表現の修正候補を検索することで修正ルールを自動的に生成し，さらに生成した修正ルールを3つの言語的な指標によりスコアリングすることで文脈に適した修正ルールを選択する手法を提案している．
これらの研究ではいずれも前処理として入力テキストを正規化・修正しているのに対し，本研究では形態素解析と並行して未知語処理のためのルール・パターンを適用する．
このような設計により，従来手法では処理が難しかった連濁化現象により初音が濁音化した語の認識も可能となる．
工藤ら[CITE]は，ひらがな交じり文が生成される過程を生成モデルでモデル化し，そのパラメータを大規模WebコーパスおよびEMアルゴリズムで推定することで，Web上のくだけたテキストに頻出するひらがな交じり文に頑健な形態素解析手法を提案している．
工藤らの手法は必ずしもひらがな交じり文にのみ有効な手法ではなく，本研究で対象とする小書き文字や長音記号を用いた表現に適用することも可能であると考えられるが，本研究ではこれらの表現に対してはコーパスを用いた学習を行わなくても十分に実用的な精度で処理を行うことが可能であることを示す．
斉藤ら[CITE]はソーシャルメディア上のテキストから抽出した崩れ表記に対し正規表記を付与した正解データを用いて文字列レベルの表記の崩れパターンを自動抽出する手法を提案している．
これに対し，本研究では人手でパターンを与える．
正解データを用いてパターンを自動抽出する手法の利点としてはパターンを人手で作成する必要がないことが挙げられるが，人が見た場合に明らかなパターンがあった場合でも一定規模の正解データを作成する必要があり，どちらの手法が優れているかは崩れ表記のタイプにより異なると考えられる．
教師なし単語分割[CITE]や形態素解析[CITE]に関する研究もテキストに出現する未知語処理の1つのアプローチとみなすことができる．
また，くだけたテキストに出現する表記バリエーションに対処する方法として，形態素解析に使用する辞書にこれらの表記バリエーションを追加するという方法も考えられる．
たとえば，連濁による濁音化も含む多くの表記バリエーションに対応した形態素解析用の辞書としてUniDic[CITE]があり，このような辞書を用いることで未知語の数を減らすことが可能であると考えられる．
しかし，長音記号は任意の数を挿入することが可能であることからも明らかなように，表記バリエーションの種類は無数に考えられ，すべてを辞書に含めることは不可能である．
また，連濁により濁音化した形態素を高精度に認識するためには，直前の形態素の品詞等を考慮する必要があることから，連濁の認識を辞書の改良だけで行うことは難しいと考えられる．
本論文では主に形態素ラティスの生成方法の改良により，形態素解析で使用する辞書に含まれる語から派生した未知表記，および，未知オノマトペを対象とした日本語形態素解析における効率的な未知語処理手法を提案する．
具体的には既存の形態素解析システムに，既知語から派生した未知表記に相当する形態素ノードを生成するためのルール，および，未知オノマトペに相当する形態素ノードを生成するためのパターンを導入することで，これらのタイプの未知語の自動認識を行う．
たとえば，下記のような文が入力された場合，図[REF_Figure::oisii]で実線で示したノード・経路に加え，新たに破線で示した未知語に相当するノード，および，それを経由する経路を追加し，新たに生成された形態素ラティスから最適な経路を探索することで，下記の文の正しい形態素解析を実現する．
\ex{ぉぃしかったでーーす。
}
本研究では，比較的単純なルールおよびパターンのみを考慮し，さらに，辞書を用いた形態素検索の方法を工夫することで，解析速度を大きく低下させることなく，高精度に一部の未知語の処理が可能であることを示すことを主な目的とする．
このため，本研究で使用するルールやパターン，および，置換ルールやオノマトペ認識の対象とする文字種の範囲は，現象ごとにコーパスを分析した結果に基づき，解析結果に大きな悪影響が出ない範囲で出来る限り多くの未知語を解析できるよう人手で定めたものを使用する．
同様に，各ルールやパターンを適用するためのコストに関しても，機械学習等により最適な値を求めることは行わず，人手で調整した値を使用し，ベースラインとする形態素解析システムには，各形態素の生起コストや連接コストの調整を人手で行っているJUMANを用いる．
本研究では既知形態素から派生した未知語として以下の5つのタイプの未知語を扱う．
連濁により濁音化した語
長音記号による置換を含む語
小書き文字による置換を含む語
長音記号の挿入を含む語
小書き文字の挿入を含む語
以下では，連濁による濁音化，長音記号および小書き文字による置換，長音記号および小書き文字の挿入の3つに分けて，対象とする未知語の詳細，および，それぞれどのようにノードを追加するかについて詳述する．
連濁とは複合語の後部要素の初頭にある清音が濁音に変化する現象のことを指す．
連濁現象により濁音化した形態素表記の多くは辞書に登録されていないため，形態素解析において未知語として扱われる場合が多い．
たとえば以下のような文が入力された場合，「こたつ」という表記が辞書に含まれていたとしても，「ごたつ」が辞書に登録されていないと「ごたつ」を1形態素として正しく認識することができない．
\ex{掘りごたつ。
}
そこで，初頭が清音である名詞については，初頭の清音が濁音化したものも形態素候補として形態素ラティスに追加する．
この際，1つの元となる形態素に対し濁音化した形態素はたかだか1つであることから，濁音化した形態素をあらかじめ形態素辞書に追加することにより，通常のトライ木に基づく形態素の探索の枠組みで濁音化した形態素候補をラティスに追加する．
ただし，連濁は複合語の後部要素にのみ生じる現象であり，さらに，連濁は複合語の後部要素であれば必ず起こるわけではなく表[REF_Table::Stop_Rendaku]に示すような連濁の発生を抑制する要因が知られていることから以下の制約を課す．
直前の形態素が名詞，動詞の連用形，名詞性接尾辞の場合のみ濁音化したノードを使用
代表的な表記がカタカナを含む形態素は濁音化の対象としない
形態素がもともと濁音を含んでいる場合は濁音化の対象としない
新たに生成された濁音化した形態素の生起コストは，その元となった形態素の生起コストよりも大きく設定した．
具体的なコストの設定方法については付録[REF_APPEND::A]に記載した．
本研究では，濁音化した形態素をはじめとする未知語の生起コストを通常の形態素の生起コストよりも意図的に大きめに設定している．
これは未知語を含む文が新たに正しく解析できるようになることによるユーザの形態素解析システムへの評価の上昇幅よりも，通常解析できることが期待される文が正しく解析できない場合の評価の下落幅の方が大きいと考えたためである．
くだけたテキストでは，「おはよー」，「うらやまし〜」や「ぁなた」などのように形態素辞書中に含まれる語表記の一部が長音記号や小書き文字に置換された表現が出現する．
このうち長音記号に置換される文字の多くは，「おはよう」の「う」や，「うらやましい」の「い」などのように直前の文字を伸ばした音に類似していると考えられる．
そこで長音記号があった場合，入力文字に対し行う通常の形態素の検索に加え，長音記号をその直前の文字に応じて表[REF_Table::ProlongRule]に示す母音文字に置き換えた文字列に対しても形態素の検索を行い，検索された形態素を形態素ラティスに追加する．
本研究では長音記号として「ー」と「〜」の2つを扱う．
小書き文字があった場合も同様に対応する通常の文字に置き換えた文字列を作成し形態素の検索を行う．
本研究では，「ぁ」，「ぃ」，「ぅ」，「ぇ」，「ぉ」，「ヵ」，および「ゎ」を置換対象とし，それぞれ「あ」，「い」，「う」，「え」，「お」，「か」，「わ」に置換する．
たとえば「ぉぃしー。
」という文があった場合，「おいしい。
」という文字列に対しても形態素の検索を行い，新たに検索された形態素を「ぉぃしー」から生成された形態素ラティスに追加する．
この際，長音記号および小書き文字は何らかの文字の置換により出現した場合だけでなく，以下で述べるように挿入された場合もあると考えられる．
しかし，事前の分析の結果，同一形態素内で置換されたものと挿入されたものが混じって出現することは相対的に少ないことが分かったため，解析速度への影響を考慮し，これらの未知語は本研究では扱わない．
また，長音記号・小書き文字の置換により新たに生成された形態素の生起コストの設定方法は，長音記号・小書き文字の挿入により生成された形態素の生起コストとともに付録[REF_APPEND::B]に記載した．
くだけたテキストでは，「冷たーーーい」や「冷たぁぁぁい」などのように形態素辞書中に含まれる語に長音記号や小書き文字が挿入された表現が出現する．
これらの表記において，挿入される文字数は任意であることからこれらの表現をすべて辞書に登録することは難しい．
そこで本研究では，長音記号・小書き文字の置換に対する処理と同様に，入力文字列に対し一定の処理を行った文字列に対し形態素の検索を行い，その結果を形態素ラティスに追加することにより，長音記号および小書き文字の挿入に対応する．
具体的には，「ー」および「〜」が出現した場合，または，「ぁ」，「ぃ」，「ぅ」，「ぇ」，「ぉ」が出現し，かつ，その直前の文字が小書き文字と同一の母音をもつ平仮名であった場合に，それらを削除した文字列を作成する．
たとえば「冷たぁぁーーい。
」という文があった場合，「冷たい。
」という文字列に対しても形態素の検索を行い，新たに検索された形態素を「冷たぁぁーーい。
」から生成された形態素ラティスに追加する．
オノマトペとは「わくわく」，「しっかり」などのような擬音語・擬声語のことである．
日本語では比較的自由にオノマトペを生成できることから特にくだけたテキストでは「ぐじょぐじょ」や「ぐっちょり」などのような辞書に含まれないオノマトペが多く出現する．
本研究では多くの未知オノマトペが一定のパターンに従っていることを利用し，特定のパターンに従う文字列をオノマトペの候補とすることで未知オノマトペの自動認識を行う．
ここで，オノマトペの品詞としては，副詞，サ変名詞，形容詞などが考えられるが，本研究ではオノマトペが必要以上に細かく分割されるのを防ぐことを主な目的とし，すべて副詞として処理する．
以下では「ぐじょぐじょ」などのように反復を含むタイプと，「ぐっちょり」などのように反復を含まないものの2つに分け，それぞれどのようにノードを追加するか詳述する．
オノマトペの代表的なパターンの1つに「ぐじょぐじょ」や「うはうは」などのように，同じ音が2度反復されるパターンがある[CITE]．
そこで本研究では2文字から4文字までの平仮名または片仮名が反復されている場合，それらを未知オノマトペの候補として形態素ラティスに追加する．
これらのオノマトペは入力文の各位置において，そこから始まる平仮名または片仮名[MATH]文字とその直後の[MATH]文字が一致しているかどうかを調べることで効率的に探索することが可能である．
ただし，「むかしむかし」や「ぜひぜひ」などのように同音が反復された場合でもオノマトペではない表現も存在する．
このため，追加された未知オノマトペノードが必要な場合にのみ選択されるように，追加したノードのコストを適切に設定する必要がある．
本研究では，基本的に反復文字数ごとにコストを設定し，さらに濁音・半濁音や開拗音を含む表現はオノマトペである場合が多いこと，また，平仮名よりも片仮名の場合の方がオノマトペである場合が多いことを考慮し，コストを人手で設定した．
実際に使用したコストは付録[REF_APPEND::C]に記載した．
反復を含まない場合もオノマトペは一定のパターンに従うものが多い[CITE]．
そこで本研究ではオノマトペを認識するためのパターンを導入し，導入したパターンに従う文字列を形態素候補として形態素ラティスに追加する．
本研究で使用したパターンを表[REF_Table::OnoPattern]に示す．
パターン中のH，K，{ H}，{ K}はそれぞれ平仮名，片仮名，平仮名の開拗音字（「ゃ」，「ゅ」，「ょ」），および，片仮名の開拗音字（「ャ」，「ュ」，「ョ」）を表す．
これらは事前にコーパスを分析した結果，出現頻度が高く，かつ，悪影響の少ないパターンである．
いずれも2音節の語基を持ち，先頭の4つは2音節の間に促音を持ち「り」語尾が付いたもの，残りの3つは2音節に促音および「と」が付いたものとなっている．
本論文ではパターンを導入することの有効性を確認することを目的とし，実験には表[REF_Table::OnoPattern]に示した7つのパターンのみを使用したが，さらに多くのパターンを導入することで，より多くのオノマトペを認識できると考えられる．
また，コストは本研究で使用する形態素解析システムJUMANにおけるコストであり，一般的な副詞のコストを100とした場合の形態素生起コストを表している．
非反復型オノマトペを含む形態素ラティスの生成にあたり，入力文の各位置から始まる文字列が表[REF_Table::OnoPattern]に示すパターンに一致するかどうか検索すると，形態素ラティスの生成速度が大きく低下する可能性が考えられる．
そこで本研究では，表[REF_Table::OnoPattern]に示す各パターンから生成されうる形態素の数はたかだか4,761ないしは14,283であることに着目し，これらの候補をすべて事前に辞書に追加することで，通常のトライ木に基づく辞書検索により未知オノマトペのノードを形態素ラティスに追加できるようにした．
表[REF_Table::Summary]に本研究で扱う未知語のタイプと，各未知語に相当するノードをどのように形態素ラティスに追加するかをまとめる．
これらの未知語処理をすべて行った場合の形態素ラティスの作成手順は以下のようになる．
形態素解析に先立ち，連濁により濁音化した形態素，および，非反復型オノマトペの候補を形態素解析辞書に追加
入力文に対し，形態素の検索を行い形態素ラティスを作成
入力文中に出現した長音記号・小書き文字を[REF_SUBSEC::PRO]節で述べたルールに基づき置換した文字列に対し形態素の検索を行い，新たに検索された形態素を形態素ラティスに追加
入力文中に出現した長音記号・小書き文字を[REF_SUBSEC::PRO]節で述べたルールに基づき削除した文字列に対し形態素の検索を行い，新たに検索された形態素を形態素ラティスに追加
文字列比較により，入力文に含まれる平仮名または片仮名の2文字から4文字までの反復を探し，存在した場合は形態素ラティスに追加
