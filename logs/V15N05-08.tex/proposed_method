トーナメントモデル


トーナメントモデルは飯田ら \shortcite{Iida:2003} が照応解析のために提案したモデルである．
このモデルでは，与えられた照応表現の先行詞候補集合から二つを提示し，そのどちらが
より先行詞らしいかをSVM などの二値分類器を用いて判断するという勝ち抜き戦を行ってい
くことで，最尤先行詞候補を選択する．
日本語係り受け解析も，ある係り元文節の複数の係り先候補の中から最尤候補を一つ選出する
問題であるから，照応解析における最尤先行詞候補選出と類似した問題である．
このトーナメントモデルを，日本語の係り受け構造の制約を考慮しつつ
日本語係り受け解析に適用することを考える．

図\ref{fig_jpsen}(b)の文の解析において，「彼は」の係り先を同定するトーナメントの例を図\ref{fig_tournament}に示す．
左から右にしか係らない制約に従うと，係り先候補集合は係り元より右側に位置する四文節
（「肉を」，「食べない」，「人と」，「結婚した」）である．
このトーナメントは，候補集合の中からまず「肉を」と「食べない」を戦わせ，次にその勝者と「人と」を戦わせ，
最後に第二試合の勝者と「結婚した」を戦わせる，ステップラダートーナメントである．
このトーナメントの結果，最終的な勝者である「結婚した」が最尤係り先候補として選ばれ，「彼は」の係り先文節として認定される．
図\ref{fig_tournament}では明記していないが，
非交差制約をトーナメントモデルに導入するのは容易である．
係り先候補集合から最尤候補を選択する際に，交差を生じない候補のみを
候補集合として考えればよい．

\begin{figure}[b]
\begin{center}
\includegraphics{15-5ia8f2.eps}
\end{center}
\caption{トーナメントの例}
\label{fig_tournament}
\end{figure}

以下に具体的なアルゴリズムを示す．



\subsection{訓練事例生成アルゴリズム}

\begin{figure}[b]
\begin{center}
\includegraphics{15-5ia8f3.eps}
\end{center}
\caption{訓練事例生成アルゴリズムの疑似コード}
\label{fig_train}
\end{figure}

このアルゴリズムは図\ref{fig_train}に示すように，全ての文節を係り元文節として見ていき，
\pagebreak
各係り元文節について，正解係り先候補とその他の全ての係り先候補との組について訓練事例を生成する．
訓練事例生成の際は非交差制約を考慮せず，係り元の右側に位置するすべての文節を係り先候補として扱う．
トーナメントモデルでは二値分類器で係り先を判定するため，左右いずれかの文節が
正解係り先となる事例のみを生成する．


このアルゴリズムに図\ref{fig_jpsen}に示した文を入力すると，表\ref{tbl_exgen_example}のような
訓練事例が生成される\footnote{
	説明の都合上，訓練事例生成と解析の例に同一の文を使用しているが，
	実験において訓練データとテストデータに重なりはない．}．
決定的手法や相対モデルなど，同時に一つの候補のみを見て（係り元，候補）の形の訓練事例を生成するモデルでは，
「係り元：彼は，候補：食べない，クラスラベル：係る」と「係り元：彼は，候補：食べない，クラスラベル：係らない」という
クラスラベルの異なる二つの矛盾した訓練事例が生成されるが，トーナメントモデルではこれらを区別し
矛盾のない訓練事例を生成できる．


\begin{table}[t]
\caption{生成される訓練事例}
\begin{center}
\input{08table01.txt}
\end{center}
\label{tbl_exgen_example}
\end{table}


\subsection{解析アルゴリズム}
\label{sec:parsing_algorithm}

CCアルゴリズムやSRアルゴリズムには，訓練事例生成と解析のアルゴリズムを同一にしなければならないという制限があるが，
トーナメントモデルにはそのような制限はない．
そのためトーナメントモデルの解析アルゴリズムには主に，文頭に近い文節から係り先を同定していくか文末に近い
文節から係り先を同定していくか，トーナメントをどう組むか，交差を許すか否か，といった自由度がある．

図\ref{fig_test}は，文末に近い文節から係り先を同定し，
トーナメントの組み方としては
図\ref{fig_tournament}のような文頭に近い候補から先に戦わせるステップラダートーナメントとし，
非交差制約を考慮する解析アルゴリズムである．
同定順が文末から文頭であるため，注目している係り元より右側の係り受け関係はすべて決まっている．
{\it head}は各文節の係り先を格納する配列であるとともに，
非交差制約に違反しない候補をつなぐ線形リストの役目も果たしている．


\begin{figure}[t]
\begin{center}
\includegraphics{15-5ia8f4.eps}
\end{center}
\caption{解析アルゴリズムの疑似コード}
\label{fig_test}
\end{figure}


議論

以下でトーナメントモデルの性質について先行研究と比較しながら論じる．

\subsection{文脈の識別性}
\label{sec:context}

CCアルゴリズムとSRアルゴリズムは，二文節つまり一つの係り元文節と一つの係り先文節のみを
参照してアクション（掛けるか掛けないか）を選択する．
だが，たとえば図\ref{fig_jpsen}における「彼は」と「食べない」のように，
ある二文節が係り受け関係にあるか否かが文脈に依存する場合がある．
決定的解析アルゴリズムや相対モデルのような二文節のみを見るモデルでは，
文脈素性によらなければこの二つの場合を識別することができない．

なお，文脈素性とは，係り元文節と係り先候補文節自身以外の文節に関する素性のこととする．
具体的にはたとえば，候補文節に隣接する左右の文節の情報（周辺文節素性）や，
解析済みの係り受け関係に関する素性（動的素性）などである．
動的素性が利用できるのは，ある係り元文節の係り先の同定を終えてから別の係り元文節の係り先の同定を行うようなモデルに限られる．
日本語係り受け解析においては周辺文節素性はあまり使われていない．


同時に参照する文節数に基づく分類によると，
トーナメントモデルは三文節つまり一つの係り元文節と二つの係り先候補文節を同時に見る
三つ組モデルということができる．
三つ組モデルでは二つの候補のどちらがより係り先としてふさわしいかを直接比較し，最適な係り先を決定する
ことができるので，文脈の識別性は二つ組モデルより高い．
再び図\ref{fig_jpsen}の文について考えてみると，(b)では「彼は」は「食べない」に係っていない．
これは，より適切な係り先「結婚した」が「食べない」の右に存在するからである．
二つ組モデルにおいて，二文節の外に「結婚した」が存在することは動的素性によって検出できる可能性があるが，
確実ではないので，
二つ組モデルは「結婚した」が存在することを知らないまま係り先を選ばなければならないかもしれない．

なお，金山ら \cite{Kanayama:2000} も一つの係り元文節と二つの係り先候補文節を同時に見るモデルを
三つ組モデルと呼んでいる．
トーナメントモデルと金山らのモデルは，複数の候補を同時に提示することで
\ref{sec:context}〜\ref{sec:selectional}節の性質を備えているという点で共通している．
両手法の主な相違点は，$k$個の係り先候補集合から一つの係り先を選ぶという問題を
二つ（金山モデルでは二つまたは三つ）の候補から最も係り先として適切なものを選ぶという問題に落とし込む方法として，
金山モデルではHPSGおよびヒューリスティック\footnote{
	HPSGによる絞り込みの結果，候補が四つ以上あるときは，係り元に最も近い候補・係り元に二番目に近い候補・係り元から最も遠い候補 の三候補を提示する．}，
トーナメントモデルではトーナメントを用いている点である．
提案手法は HPSG のような人手による文法規則を用いる必要がない．


\subsection{文中における相対的な位置の表現}
\label{sec:relative}

三つ組モデルにおける二つの候補のうち係り元に近い方を「左候補」，遠い方を「右候補」と区別して
呼ぶことにする．
そうすると，トーナメントモデルの対戦においては係り元，左候補，右候補がこの順で文頭から文末の方向に並んでいることが保証されている．
先行研究では，係り元と候補との間の距離（絶対距離）を1 or 2-5 or 6+ といったバケツ素性で表現しており，
後述のようにトーナメントモデルでもこの素性を使用している．

絶対距離素性は相対位置を表す素性の一種であるとも考えられるが，
ある候補との距離が1であるか否かの情報は重要だとしても，日本語は語順自由なので距離の絶対値はあまり
重要ではない．
たとえば図\ref{fig_jpsen}(b)の文において「彼は」を係り元とするとき，
候補「食べない」と「結婚した」との距離はそれぞれ2と4であるため，どちらも「2-5」のバケツに分類される．
したがって文脈素性を用いない場合，二つ組モデルはこの二つの候補のどちらが係り元により近い位置にあるかという
相対的な位置関係を認識することができない．

決定的解析アルゴリズムは先に相対的に近い対から判定するため，暗に相対位置の情報を用いている．
これに対し提案手法は，相対位置をより直接的に，ラベルとして表現している．

また，相対位置の認識は，ある種の格要素が他の格要素より近くに現れやすいといった
傾向の学習にも有用と考えられる．
たとえば目的語は他の要素より述語の近くに置かれやすい．


決定的解析アルゴリズムは係り元に近い候補を選択しやすいため，
工藤ら\shortcite{Kudo:2005j}が指摘しているように，決定的解析アルゴリズムは長距離の係り関係を
正しく解析するのが苦手である．
その理由としては，\ref{sec:context}節および\ref{sec:relative}節のような文脈識別能力が
低いことが大きいと考えられる．
なお，正解係り先は係り元に近いことが多いので，
近い候補を選択しやすいという傾向のために生じる解析誤りはそれほど多くない．


\subsection{選択選好}
\label{sec:selectional}

相対モデル \shortcite{Kudo:2005j} は係り先候補間の選択選好性の強さを直接学習し，
log-linearモデルの尤度として全順序にエンコードする．
CLEアルゴリズムを用いたMcDonaldら\shortcite{McDonald:2005b}の手法では，選択選好性を
MIRA \shortcite{Crammer:2003}とよばれるパーセプトロンアルゴリズムで学習する．
これに対してトーナメントモデルは候補間の一対一対戦のトーナメントで選択選好性を学習するため，
全順序ではなく半順序の学習を行っている．


相対モデルやMcDonaldらの手法が全候補を識別モデルで独立して見るのに対し，
トーナメントモデルではどの候補がより適切かを前の試合の勝者と新しい候補で評価する．
前の試合の勝者はそれ以前の候補をすべて倒しているので，新しい候補が前の試合の勝者を倒したということは，
半順序の束において先行した全ての候補より係り先としてふさわしいということである\footnote{
	提案手法では一次解しか出力しないため半順序関係の束の部分構造は一次元的なものになる．
	提案手法を $k$-best 解を出力するアルゴリズムに拡張すると，半順序関係の束の部分構造はより複雑なものになる．}．
このことから，トーナメントモデルは全ての候補を独立に見る手法より選択選好性に関してより豊かな情報を
学習することができる可能性がある．



\subsection{文節の挿入に対する頑健性}

日本語においては様々な文節が任意の位置に挿入されることがある．
その要因としては，かき混ぜ構文，ゼロ代名詞，任意格等がある．

CCアルゴリズムは距離の短い係り受け関係から決定していくという戦略をとっている．
ある挿入文節の係り先が，あるcascaded chunkingステップにおいて決定されると，
それ以降のcascaded chunkingステップではその挿入文節は無視される．
たとえば，「肉をあまり食べない」と「肉を食べない」という文について考える．
CCアルゴリズムではまず各文節が隣の文節に係るかどうかをチェックし
係り先が決まった文節を徐々に取り除いていくので，前者の文は最初のステップで
「あまり」が隣の「食べない」に係ると解析され，次のステップでは「あまり」が
取り除かれて「肉を食べない」という後者の文と同じ形になる．
したがって，前者の文が訓練データに出現していれば後者の文も正しく解析できることを期待できるし，逆も然りである．
このように，文節の挿入の影響を受けないようにする仕組みが解析器の文節の挿入に対する頑健性を実現している．

トーナメントモデルにもこれと同様の仕組みがある．
一文あるいは二文の訓練データから
\linebreak
表~\ref{tbl_exgen_example2}の事例が生成されたなら，
「彼は肉をあまり食べない」という文の解析において「彼は」の係り先を同定する際に
まず「あまり」と「食べない」と戦わせて「あまり」を敗退させれば，「彼は肉を食べない」という文の解析と
同様の状況になる．
このようにうまくトーナメントを組むことができれば，挿入文節が最終決定を妨害しないような解析を
することができると考えられる．

\begin{table}[t]
\hangcaption{生成された訓練事例．この二つの事例が訓練データの単一の文から生成される必要はなく，二つの文から生成されることもありうる．}
\begin{center}
\input{08table02.txt}
\end{center}
\label{tbl_exgen_example2}
\end{table}


議論と今後の課題

われわれのエラー分析によると，エラーの多くは並列構造に関係したものであった．
颯々野\shortcite{Sassano:2004}は，各文節が並列構造のキー文節であるか否かを素性として入れることで
解析精度が向上したと報告している．
京大コーパスには係り受け関係のタグとして並列や同格がタグづけされているが，
今回の実験ではこれらのタグは一切使用していないので，何らかの形で使用することで精度向上が期待できる．
単純な導入法としては，各タグごとにone-vs-rest SVMを作成し，
係り先とタグを同時に決めるようにすることが考えられる．
また，新保ら\shortcite{Shimbo:2007}のように，並列構造解析を係り受け解析の前処理として
行う方法も考えられる．
 

共起情報の導入によって精度向上を図ることも考えられる．
一つの使い方としては，動詞--名詞の共起情報を，現在の格助詞素性のような形で入れることである．
阿辺川ら\shortcite{Abekawa:2006}は$k$-best解を出力できる解析器の出力を，共起情報を用いて
リランキングする手法を提案している．
我々はすでにトーナメントモデルにおける$k$-best解出力アルゴリズムを考案しており，
そのようなリランキング法の導入も検討している．


トーナメントモデルを英語などの他の言語に対応させることも，別の課題としてあげられる．
日本語は書き言葉においては左から右にしか係らないが，多くの言語にはこの制約はないため，
係り先候補が係り元の左側にあるか右側にあるかを区別する仕組みが必要となる．
単純な解決法としては，左右どちら側にあるかを識別できるようなモデル（素性名）にすることである．
非交差制約の有無に関しては問題にならない．
現在のアルゴリズムではわざわざ非交差制約を満たさないものを候補から除外しているので，
この処理をなくすことで対応できる．
また，日本語では文節列に対して解析を行っているが，たとえば英語において単語列に対して解析する場合には
時間計算量$O(n^2)$の$n$が大きくなるため計算量の問題が深刻になる．
この問題は，必要に応じて基本句同定を行うことで軽減できると考える．



