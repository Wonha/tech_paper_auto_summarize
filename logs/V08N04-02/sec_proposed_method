本章では，テキストの分割結果の確率を定義し，それを用いて最大確率であるような分割を定義する．
そして，次章で，最大確率であるような分割を選ぶアルゴリズムを示す．
本章では，テキスト[MATH]が与えられたときに，その任意の分割[MATH]に対して，条件付き確率[MATH]を定義する．
[MATH]は，テキスト[MATH]を条件とする分割[MATH]の条件付き確率であるので，この値が最大の分割[MATH]を選ぶことにより，[MATH]が指定された場合の最大確率の分割[MATH]を選ぶことができる．
このような分割[MATH]は，テキスト[MATH]の本来の分割の推定として適当であると考えられる．
まず，[MATH]個の延べ単語からなるテキスト[MATH]が与えられたとき，[MATH]個の区間からなる分割[MATH]の確率[MATH]は，
である．
ここで，[MATH]と[MATH]については，詳しくは，以下で定義するが，[MATH]は，分割[MATH]が与えられたときに，テキスト[MATH]が生起する確率であり，[MATH]は，分割[MATH]の確率である．
また，[MATH]は，テキスト[MATH]の確率であるが，これは，[MATH]が与えられているときには，定数であるから，最大確率の分割を求める際には無視できる．
よって，最大確率の分割[MATH]は，
である．
以下では，[MATH]を最適分割と呼ぶことにする．
次に，[REF_sec:PrWS]節で[MATH]を定義し，[REF_sec:PrS]節で[MATH]を定義する．
区間[MATH]に[MATH]個の延べ単語があるとして，[MATH]中の[MATH]番目の単語を[MATH]とし，[MATH]とする．
つまり，[MATH]と[MATH]とを一対一に対応させる．
このようにすると，[MATH]，[MATH]である．
このとき，ある区間に属する単語列は，その他の区間には独立に生起するとし，更に，同一区間に属する単語も，区間が与えられているという条件下では確率的に独立であるとすると，
である．
この式の，2行目と3行目は，「ある区間に属する単語列は他の区間とは独立に生起する」という仮定から変形でき，最後の行は，「同一区間に属する単語は，その区間が与えられているという条件では，その他の単語と確率的に独立である」という仮定から変形できる．
また，[MATH]は，区間[MATH]で単語列[MATH]が生起する確率であり，[MATH]は，区間[MATH]で単語[MATH]が生起する確率である．
次に，[MATH]中における異なり単語の数を[MATH]，[MATH]において[MATH]と同じ単語の数を[MATH]とし，
と定義する．
ここで，([REF_eq:PrwS])式は，ラプラス推定(Laplace's law)と呼ばれる確率推定式[CITE]である．
なお，[MATH]は，厳密には，次式で定義される．
ただし，[MATH]については，単語[MATH]と単語[MATH]とが同じとき[MATH]，そうでないとき，[MATH]である．
分割[MATH]に対する事前確率[MATH]の定義に関しては，任意性が大きい．
たとえば，同じ区間数からなる分割であっても，各区間の長さが揃っている分割の方を，長さが不揃いの分割よりも優先したい場合には，長さが揃っている分割の事前確率を大きくすべきである．
しかし，ここでの我々の仮定は，そのような優先すべき分割がないというものであるので，そのような優先すべき分割を前提としないような事前確率を設定しなくてはならない．
我々は，事前確率[MATH]の設定において，[CITE]と同様に，記述長にもとづく事前確率を与えることにした．
以下では，分割確率最大化とMDL(Minimum Description Length,最小記述長)原理[CITE]との関係について極く簡単に述べ，その後で，記述長に基づいた[MATH]の設定について述べる．
なお，MDL原理とは，「与えられたデータを，モデル自身の記述も含めて最も短く符号化できるような確率モデルが最良のモデルである」と主張するものである．
我々は，確率最大であるような分割を得るために，([REF_eq:hatS])式の右辺にある
を最大化しようとしているが，これは，
を最小化しようとしていることと等価である．
このことは，MDL原理の観点からは，分割[MATH]が与えられたときのテキスト[MATH]の記述長[MATH]と，分割[MATH]の記述長[MATH]との和を最小化しようとしていることになる．
なぜなら，一般に，ある事象[MATH]の確率が[MATH]のときには，[MATH]を記述(符号化)するために必要な最小記述長は[MATH]であるからである．
ただし，ここで，[MATH]の底は2である．
このように，最小記述長であるような分割を選択することと，最大確率であるような分割を選択することとは同等である．
以上の議論の逆から言えば，分割[MATH]に対して，適当な記述長[MATH]を割当てた場合には，その記述長を利用して，
と定義できる．
なぜなら，[MATH]であるからである．
つまり，分割[MATH]の記述長を求めることにより，その事前確率を求めることができる．
よって，以下では，分割[MATH]の記述長を求めることにより，その事前確率を求めることにする．
ここで，我々に，既に，分割対象のテキストが与えられているとすると，分割[MATH]を指定するために必要な情報は，各区間の長さ，[MATH]のみである．
たとえば，我々に，既に，[MATH]という長さが9のテキストが与えられていると仮定すると，そのテキストの分割を指定するためには，たとえば，2,3,3,1という4つの数字からなる数字列を指定すればよい．
そうすれば，[MATH]を[MATH]のように4分割できる．
つまり，我々は，[MATH]個の区間からなる分割を指定(記述)するためには，[MATH]個の数字を指定すれば良い．
次に，これらの個々の数字は，1以上[MATH]以下の[MATH]個のうちの一つであることに注意すると，これらの個々の数字は，[MATH]の確率で選択されると考えることができるので，[MATH]の記述長で記述できる．
よって，[MATH]個の数字を記述するためには，[MATH]の記述長があれば良い．
以上より，[MATH]と計算できる．
そのため，[MATH]は
と定義できる．
一般的にいって，[MATH]の値は，分割数が小さいほど大きな値を取る．
一方，[MATH]の値は，分割数が大きいほど大きな値を取る．
そのため，もし，分割を推定するのに，[MATH]だけを利用した場合には，推定される分割結果は，分割数が大きい分割，すなわち，細かすぎる区間からなる．
それに対して，[MATH]と[MATH]の両方を利用した場合には，両者のバランスの取れた分割が得られる．
本章では，分割[MATH]のコスト[MATH]を，
と定義し，このコストが最小となる分割[MATH]を選択することにより，最大確率である分割[MATH]を選択する．
ここで，[MATH]は以下のように展開できる．
ただし，
ここで，[MATH]は，その引数である単語列の長さ(延べ単語数)である．
なお，([REF_eq:cS_i])式を，その最終行において，[MATH]や[MATH]を使わないで定義する理由は，次節で述べるアルゴリズムにおいて，([REF_eq:cS_i])式を使うときの便宜を考えてのことである．
次に，最小コスト分割(最大確率分割)である[MATH]を求めるアルゴリズムを示す．
まず，用語を定義する．
延べ語数[MATH]のテキスト[MATH]において，[MATH]番目の分割候補点[MATH]とは，単語[MATH]と[MATH]の間を言う．
ただし，[MATH]は[MATH]の直前，[MATH]は[MATH]の直後である．
このとき，分割候補点は[MATH]の[MATH]個ある．
また，分割候補点の集合をノード集合とするグラフを考えるとき，[MATH]は[MATH]から[MATH]への有向辺である．
このように定義されたグラフの例を，図[REF_fig:graph]に示す．
このとき，[MATH]は，単語列[MATH]をカバーするという．
[MATH]は，テキストの，ある一区間[MATH]を表現している．
そのため，[MATH]のコスト[MATH]を，([REF_eq:cS_i])式を利用することにより，次式で定義する．
ただし，[MATH]は，[MATH]中の異なり単語数である．
以上の準備の下で，最小コストを与える最適分割を求める手順は以下の通りである．
有向辺[MATH]のコスト[MATH]を([REF_eq:costeij])式により計算する．
[MATH]
[MATH]から[MATH]までの最小コストパスを求める．
ここで，Step 2を効率的に解くアルゴリズムは良く知られている．
なお，Step 2は，全ての可能なパスの中での大域的な最小コストパスを求めるものであるが，そうする代りに，パスの長さを指定した最小コストパスを求めることもできる．
そのようにして求められた最小コストパスは，区間数を指定した場合の最適分割に対応している．
このようにして求めた最小コストパスについて，その各辺にカバーされる単語列を，それぞれ一つの区間とすると，それは最適分割である．
たとえば，図[REF_fig:graph]で，[MATH]が最小コストパスであるとすると，最適分割は，[MATH]である．
なお，実際にテキストを分割するときには，全ての分割候補点を考慮するのではなく，たとえば，文と文の間でのみテキストを分割したい場合がある．
その場合には，分割位置として許される分割候補点の間にのみ有向辺を張るようにすれば良い．
そして，そのグラフ上での最小コストパスを探索すれば良い．
次節では，我々は，文間のみでテキストが分割されると仮定して議論している．
前節で述べたように，グラフの最小コストパスを求めることにより，大域的な最小コストパスによる分割だけでなく，区間数を指定した最小コストパスによる分割を求めることもできる．
しかし，予備実験の結果から，指定された区間数が，もし，大域的な最小コストパスにより求められる分割の区間数よりも，ある程度以上に大きいときには，1文や2文からなる小さい区間が生じやすいことが判った．
このことは，大域的な最小コストパスによる分割のみが必要な場合，あるいは，大域的な最小コストパスによる分割よりも大雑把な分割が必要な場合には問題ではない．
しかし，大域的な最小コストパスによる分割よりも細かい分割が必要なときには，問題である．
そこで，我々は，大域的な最小コストパスよりも細かい分割が必要なときには，まず，文章全体を大域的な最小コストパスにより分割し，そのあとで，各々の区間を，その区間を一つの文章として，再帰的に分割することにした．
このとき，各々の区間を分割するときの区間数は，その区間の長さの，全体の長さにおける割合に比例するようにした．
たとえば，1000文からなる文章を20区間に分割したいときに，大域的な最小コストパスにより，200,400,300,100文からなる四つの区間が得られたときには，それぞれの区間を，4,8,6,2だけの区間に分割する．
なお，分割数に余りがでるときには，その他の区間よりも大きい区間を，他よりも一つだけ余分に分割するようにした．
たとえば，上述の文章を22に分割したいときには，それぞれを，4,8+1,6+1,2だけの区間に分割する．
このようにすれば，1文や2文からなる小さい区間が生じにくいようにすることができる．
このプロセスは，必要な分割数が得られるまで再帰的に実行できるが，[REF_sec:exp2]節で必要な，100程度までの分割数に対しては，1回だけの再帰で十分であった．
なお，再帰的な分割の効果については，[REF_sec:exp2]節で確認する．
本章では，テキストの分割結果の確率を定義し，それを用いて最大確率であるような分割を定義する．
そして，次章で，最大確率であるような分割を選ぶアルゴリズムを示す．
本章では，テキスト[MATH]が与えられたときに，その任意の分割[MATH]に対して，条件付き確率[MATH]を定義する．
[MATH]は，テキスト[MATH]を条件とする分割[MATH]の条件付き確率であるので，この値が最大の分割[MATH]を選ぶことにより，[MATH]が指定された場合の最大確率の分割[MATH]を選ぶことができる．
このような分割[MATH]は，テキスト[MATH]の本来の分割の推定として適当であると考えられる．
まず，[MATH]個の延べ単語からなるテキスト[MATH]が与えられたとき，[MATH]個の区間からなる分割[MATH]の確率[MATH]は，
である．
ここで，[MATH]と[MATH]については，詳しくは，以下で定義するが，[MATH]は，分割[MATH]が与えられたときに，テキスト[MATH]が生起する確率であり，[MATH]は，分割[MATH]の確率である．
また，[MATH]は，テキスト[MATH]の確率であるが，これは，[MATH]が与えられているときには，定数であるから，最大確率の分割を求める際には無視できる．
よって，最大確率の分割[MATH]は，
である．
以下では，[MATH]を最適分割と呼ぶことにする．
次に，[REF_sec:PrWS]節で[MATH]を定義し，[REF_sec:PrS]節で[MATH]を定義する．
区間[MATH]に[MATH]個の延べ単語があるとして，[MATH]中の[MATH]番目の単語を[MATH]とし，[MATH]とする．
つまり，[MATH]と[MATH]とを一対一に対応させる．
このようにすると，[MATH]，[MATH]である．
このとき，ある区間に属する単語列は，その他の区間には独立に生起するとし，更に，同一区間に属する単語も，区間が与えられているという条件下では確率的に独立であるとすると，
である．
この式の，2行目と3行目は，「ある区間に属する単語列は他の区間とは独立に生起する」という仮定から変形でき，最後の行は，「同一区間に属する単語は，その区間が与えられているという条件では，その他の単語と確率的に独立である」という仮定から変形できる．
また，[MATH]は，区間[MATH]で単語列[MATH]が生起する確率であり，[MATH]は，区間[MATH]で単語[MATH]が生起する確率である．
次に，[MATH]中における異なり単語の数を[MATH]，[MATH]において[MATH]と同じ単語の数を[MATH]とし，
と定義する．
ここで，([REF_eq:PrwS])式は，ラプラス推定(Laplace's law)と呼ばれる確率推定式[CITE]である．
なお，[MATH]は，厳密には，次式で定義される．
ただし，[MATH]については，単語[MATH]と単語[MATH]とが同じとき[MATH]，そうでないとき，[MATH]である．
分割[MATH]に対する事前確率[MATH]の定義に関しては，任意性が大きい．
たとえば，同じ区間数からなる分割であっても，各区間の長さが揃っている分割の方を，長さが不揃いの分割よりも優先したい場合には，長さが揃っている分割の事前確率を大きくすべきである．
しかし，ここでの我々の仮定は，そのような優先すべき分割がないというものであるので，そのような優先すべき分割を前提としないような事前確率を設定しなくてはならない．
我々は，事前確率[MATH]の設定において，[CITE]と同様に，記述長にもとづく事前確率を与えることにした．
以下では，分割確率最大化とMDL(Minimum Description Length,最小記述長)原理[CITE]との関係について極く簡単に述べ，その後で，記述長に基づいた[MATH]の設定について述べる．
なお，MDL原理とは，「与えられたデータを，モデル自身の記述も含めて最も短く符号化できるような確率モデルが最良のモデルである」と主張するものである．
我々は，確率最大であるような分割を得るために，([REF_eq:hatS])式の右辺にある
を最大化しようとしているが，これは，
を最小化しようとしていることと等価である．
このことは，MDL原理の観点からは，分割[MATH]が与えられたときのテキスト[MATH]の記述長[MATH]と，分割[MATH]の記述長[MATH]との和を最小化しようとしていることになる．
なぜなら，一般に，ある事象[MATH]の確率が[MATH]のときには，[MATH]を記述(符号化)するために必要な最小記述長は[MATH]であるからである．
ただし，ここで，[MATH]の底は2である．
このように，最小記述長であるような分割を選択することと，最大確率であるような分割を選択することとは同等である．
以上の議論の逆から言えば，分割[MATH]に対して，適当な記述長[MATH]を割当てた場合には，その記述長を利用して，
と定義できる．
なぜなら，[MATH]であるからである．
つまり，分割[MATH]の記述長を求めることにより，その事前確率を求めることができる．
よって，以下では，分割[MATH]の記述長を求めることにより，その事前確率を求めることにする．
ここで，我々に，既に，分割対象のテキストが与えられているとすると，分割[MATH]を指定するために必要な情報は，各区間の長さ，[MATH]のみである．
たとえば，我々に，既に，[MATH]という長さが9のテキストが与えられていると仮定すると，そのテキストの分割を指定するためには，たとえば，2,3,3,1という4つの数字からなる数字列を指定すればよい．
そうすれば，[MATH]を[MATH]のように4分割できる．
つまり，我々は，[MATH]個の区間からなる分割を指定(記述)するためには，[MATH]個の数字を指定すれば良い．
次に，これらの個々の数字は，1以上[MATH]以下の[MATH]個のうちの一つであることに注意すると，これらの個々の数字は，[MATH]の確率で選択されると考えることができるので，[MATH]の記述長で記述できる．
よって，[MATH]個の数字を記述するためには，[MATH]の記述長があれば良い．
以上より，[MATH]と計算できる．
そのため，[MATH]は
と定義できる．
一般的にいって，[MATH]の値は，分割数が小さいほど大きな値を取る．
一方，[MATH]の値は，分割数が大きいほど大きな値を取る．
そのため，もし，分割を推定するのに，[MATH]だけを利用した場合には，推定される分割結果は，分割数が大きい分割，すなわち，細かすぎる区間からなる．
それに対して，[MATH]と[MATH]の両方を利用した場合には，両者のバランスの取れた分割が得られる．
本章では，分割[MATH]のコスト[MATH]を，
と定義し，このコストが最小となる分割[MATH]を選択することにより，最大確率である分割[MATH]を選択する．
ここで，[MATH]は以下のように展開できる．
ただし，
ここで，[MATH]は，その引数である単語列の長さ(延べ単語数)である．
なお，([REF_eq:cS_i])式を，その最終行において，[MATH]や[MATH]を使わないで定義する理由は，次節で述べるアルゴリズムにおいて，([REF_eq:cS_i])式を使うときの便宜を考えてのことである．
次に，最小コスト分割(最大確率分割)である[MATH]を求めるアルゴリズムを示す．
まず，用語を定義する．
延べ語数[MATH]のテキスト[MATH]において，[MATH]番目の分割候補点[MATH]とは，単語[MATH]と[MATH]の間を言う．
ただし，[MATH]は[MATH]の直前，[MATH]は[MATH]の直後である．
このとき，分割候補点は[MATH]の[MATH]個ある．
また，分割候補点の集合をノード集合とするグラフを考えるとき，[MATH]は[MATH]から[MATH]への有向辺である．
このように定義されたグラフの例を，図[REF_fig:graph]に示す．
このとき，[MATH]は，単語列[MATH]をカバーするという．
[MATH]は，テキストの，ある一区間[MATH]を表現している．
そのため，[MATH]のコスト[MATH]を，([REF_eq:cS_i])式を利用することにより，次式で定義する．
ただし，[MATH]は，[MATH]中の異なり単語数である．
以上の準備の下で，最小コストを与える最適分割を求める手順は以下の通りである．
有向辺[MATH]のコスト[MATH]を([REF_eq:costeij])式により計算する．
[MATH]
[MATH]から[MATH]までの最小コストパスを求める．
ここで，Step 2を効率的に解くアルゴリズムは良く知られている．
なお，Step 2は，全ての可能なパスの中での大域的な最小コストパスを求めるものであるが，そうする代りに，パスの長さを指定した最小コストパスを求めることもできる．
そのようにして求められた最小コストパスは，区間数を指定した場合の最適分割に対応している．
このようにして求めた最小コストパスについて，その各辺にカバーされる単語列を，それぞれ一つの区間とすると，それは最適分割である．
たとえば，図[REF_fig:graph]で，[MATH]が最小コストパスであるとすると，最適分割は，[MATH]である．
なお，実際にテキストを分割するときには，全ての分割候補点を考慮するのではなく，たとえば，文と文の間でのみテキストを分割したい場合がある．
その場合には，分割位置として許される分割候補点の間にのみ有向辺を張るようにすれば良い．
そして，そのグラフ上での最小コストパスを探索すれば良い．
次節では，我々は，文間のみでテキストが分割されると仮定して議論している．
前節で述べたように，グラフの最小コストパスを求めることにより，大域的な最小コストパスによる分割だけでなく，区間数を指定した最小コストパスによる分割を求めることもできる．
しかし，予備実験の結果から，指定された区間数が，もし，大域的な最小コストパスにより求められる分割の区間数よりも，ある程度以上に大きいときには，1文や2文からなる小さい区間が生じやすいことが判った．
このことは，大域的な最小コストパスによる分割のみが必要な場合，あるいは，大域的な最小コストパスによる分割よりも大雑把な分割が必要な場合には問題ではない．
しかし，大域的な最小コストパスによる分割よりも細かい分割が必要なときには，問題である．
そこで，我々は，大域的な最小コストパスよりも細かい分割が必要なときには，まず，文章全体を大域的な最小コストパスにより分割し，そのあとで，各々の区間を，その区間を一つの文章として，再帰的に分割することにした．
このとき，各々の区間を分割するときの区間数は，その区間の長さの，全体の長さにおける割合に比例するようにした．
たとえば，1000文からなる文章を20区間に分割したいときに，大域的な最小コストパスにより，200,400,300,100文からなる四つの区間が得られたときには，それぞれの区間を，4,8,6,2だけの区間に分割する．
なお，分割数に余りがでるときには，その他の区間よりも大きい区間を，他よりも一つだけ余分に分割するようにした．
たとえば，上述の文章を22に分割したいときには，それぞれを，4,8+1,6+1,2だけの区間に分割する．
このようにすれば，1文や2文からなる小さい区間が生じにくいようにすることができる．
このプロセスは，必要な分割数が得られるまで再帰的に実行できるが，[REF_sec:exp2]節で必要な，100程度までの分割数に対しては，1回だけの再帰で十分であった．
なお，再帰的な分割の効果については，[REF_sec:exp2]節で確認する．
