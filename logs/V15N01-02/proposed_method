手話は手の形，位置，動き，顔の表情など複数の要素を組み合わせて意味を伝達する言語である．
各要素をパラメータのように変化させることによっても様々な意味が表現される．
身体だけでなく，話者の周りの空間も文法的に利用される．
日本手話は日本のろう者の間で使われている手話言語である．
手話通訳に期待される事柄についての調査[CITE]において，「頭の中で日本語を考えなくてもよく，手話として自然に頭に入ってくること」，「（日本語の）口話に頼らなくても十分に内容が伝わってくること」，「日本語の口形は日本語借用部分でのみ用い，それ以外では手話口形を用いること」などがあげられていることからも，日本語とは異なる体系を持つ言語であることがうかがえる．
日本手話のほかに，日本で一般に手話と呼ばれるものに「日本語対応手話」がある．
これにはさまざまな考え方があり，定義は一つではないが，多くの場合，日本手話が日本語とは異なる別の体系を持つ手話言語（手話を第一言語とするろう者同士が日常使う手話）をさすのに対し，日本語対応手話は，手話単語を使用してはいるが，文法や語彙などが日本語的な表現になっているものをさす[CITE]．
日本語の語順に手話単語を並べただけのものから，手話的な表現を部分的に取り入れたものまで幅がある．
両者が入り混じったものは中間型手話とも呼ばれる．
一般に日本語を話しながら表現され，手話独自の口型や表情は省かれる．
本研究では日本手話を目的言語とするが，手話には地域差や，世代・集団（ろう学校／普通学校）・失聴時期・日本語能力などによる個人差が見られ，今のところ標準日本手話というものも存在しない[CITE]．
同じ話者（ろう者）が，聞き手に応じて無意識に手話を切り替える場合もある．
我々は日本手話を対象とした文献や教材・ビデオ映像から翻訳規則を取得した．
手話文はいずれも日本語の口話を伴わないものだが，その中にも日本語的な表現が混ざっている可能性はある．
我々が取り上げた個々の手話文が厳密な意味での日本手話であるか否かという点についてはあるいは議論があるかもしれないが，我々はその点にはあまりこだわらず，本論文ではおおよその分類として日本手話という呼び方を用いている．
与えられた日本語文とその手話訳によって，システムに組み込まれる翻訳規則は変化するが，同じ機械翻訳の枠組みの中で対処できるものと考える．
ここでは機械翻訳結果として出力される日本手話の文を，テキストとして表現するのに用いる手話表記法の概略を述べる．
詳しくは文献[CITE]を参照されたい．
従来の手話表記法[CITE]は，その多くが音声言語における発音記号のように手話の動作を記述するものであり，翻訳の問題と動作合成の問題とを分離するという目的には適していない．
本表記法では個々の手話単語の動作の詳細よりも，動作によって表される語彙内容や文法的な機能の記述に重点を置いた．
それによって，動作の詳細に立ち入らずに手話を言語として処理するのに適した表現方法となった．
機械翻訳のための内部的な中間表現ということではなく，音声言語のテキストと同様，手話文をテキストの形で書き留め，利用することを念頭に置いている．
日本語から手話への機械翻訳の研究には，徳田・奥村(1998)[CITE]や黒川ら[CITE]の研究がある．
いずれも手話表記法を定義して翻訳に利用しているが，日本語の口話を伴い，基本的に日本語と同じ語順で表現される日本語対応手話／中間型手話を対象としているため，これらをそのまま日本手話の記述に用いるには記述能力の点で問題があった[CITE]．
また，後者[CITE]では手話画像生成のために有効な形式として手話表記法が導入されているが，入力日本語文の解析結果を部分的に含んだ中間表現的なものであり，手話言語に対するテキスト表現というものではなかった．
今のところ，日本手話を目的言語とした機械翻訳の研究は見あたらない．
日本手話では顔の表情や頭の動きなどの非手指要素が，文法標識などの言語的に重要な役割を果たしている．
本研究では，非手指要素や単語の語形変化によって表される語彙的・文法的な情報もテキストとして表現できるような表記法を定義することによって，これらの要素を翻訳結果として出力できるようにした．
手話単語は手話単語名と語形変化パラメータにより，次のように記述する．
手話単語名[手形](空間；修飾)
手話単語名は手話単語を識別するための識別子である．
便宜上その単語の意味に近い日本語の語句を単語名として用いるが，日本語と手話の語彙は1対1に対応していないため，単語名と単語の意味とが一致しない場合もある．
語形変化パラメータには，その単語の基本形（辞書形）からの変化によって表される付加的な語彙的・文法的情報を，「手形」「空間」「修飾」の各要素に分けて記述する．
手形パラメータには手の形による数詞等の情報，空間パラメータには単語が表現される空間上の位置や動詞の方向によって表される人称や格関係，修飾パラメータには動作の強弱・大小・緩急・反復などによって表される修飾内容を記述する．
修飾パラメータにも日本語の語句を援用している．
なお，基本形から変化しない要素については記述を省略する．
以下に表記例を示す．
(1) \>人[3] \>；3人（手話単語〈3〉の手形で〈人〉を表現）
(2) \>話す(2→1) \>；あなたが私に言う（動詞の方向（＝格関係）の表示）
(3) \>友達([MATH])もらう([MATH]→1) \=；友達からもらう（名詞の位置と動詞の始点の一致）
(4) \>過去(;とても) \>；ずっと前（〈過去〉の強調）
単語の合成は，単語の逐次的な合成（複合語），左右の手で異なる単語を同時に表現する同時的な合成，1つの単語を表現した後，片手をそのまま残して，他方の手で別の単語を表現する半同時的な合成の3つに分けて，それぞれ以下のように記述する．
(5) \>手話—サークル\>；手話サークル（逐次的合成）
(6) \>電話|仕事\>；電話しながら仕事をする（同時的合成）
(7) \>家([MATH]) /帰る(→[MATH]) \>；家に帰る（半同時的合成）
手話では顔の表情や頭の動きなどの非手指要素が，文法的にも重要な機能を持つことが知られている．
単語の並びが同じでも，平叙文と疑問文では非手指要素が異なるため，実際の会話では区別ができる．
木村・市田(1995) [CITE]は，日本手話における疑問文，話題化，条件節，同意を求める表現などの非手指動作について述べており，例えば話題化では，話題化される語句に眉上げとあご引きの動作が伴うとしている．
このような非手指文法標識についても，その機能をテキストとして明示的に記述する．
次の表記は，単語列に非手指要素NMSが伴うことを表す．
{[MATH]NMS[MATH]単語列}
NMSの部分には，t（話題化），cond（条件節），cleft（分裂文）など，非手指要素による文法標識を表す文字列を指定する．
ただし，疑問文を表す非手指要素は文末の記号「？」で表す．
このほか，通常の文末は「。
」，文法的な区切りは「,」「;」で表す．
これらは動作的には，うなずきや瞬き，時間的な間合いによって表される．
(8) \> {[MATH]t[MATH]私家族}人[4]。
\>；私の家族は4人です．
また，助動詞には「」を前置する．
手話の助動詞のほとんどが内容語としての用法を併せ持っているため，この記号により助動詞的用法であることを明示する．
(9) \>行くいらない\>；行かなくてもいい
翻訳システムの核となる機械翻訳エンジンjawについては謝ら(2004)が既に述べているが，その後の進展もあるためここで改めてその翻訳方式について簡潔に述べる．
jawは日本語から他の任意の言語への翻訳を目的とした，パターン変換に基づく機械翻訳エンジンである．
日本語パターンとそれに対する変換規則を用意することによって，いろいろの目的言語に対応することができる．
これまでにjawを用いて中国語・ベトナム語・ミャンマー語・シンハラ語を目的言語とする機械翻訳について研究が行われている（図[REF_fig:Chinese-Vietnamese]）．
以下では中国語への翻訳を例に用いて述べる．
jawによる機械翻訳の流れを図[REF_fig:jaw]に示す．
入力された日本語文に対して，日本語解析器ibukiCおよびibukiS(山田他2006)[CITE]を用いて形態素・文節構造・係り受け構造の各解析を行なった後，目的言語の表現構造を介して目的言語テキストを生成する．
表現構造は目的言語の文の表現要素（単語など）を表すC++言語のオブジェクトであり，表現要素に対する訳語や，関連する他の表現要素へのリンクなどの情報をその属性として保持する．
日本語文の解析結果に対してパターン翻訳規則と機能語翻訳規則を適用することにより，日本語文を目的言語の表現構造へ変換する．
パターン翻訳規則は，入力日本語文の係り受け構造と関係データベース（RDB）上の日本語パターンを照合し，マッチした箇所を目的言語の表現構造に変換するC++の関数群であり，主として文の骨格となる命題部分の表現構造を組み立てる．
機能語翻訳規則は，モダリティ等を表す機能語の翻訳として，表現要素オブジェクトに情報を設定する．
各表現要素オブジェクトには，それを一次元のテキストに変換するためのメソッド（線状化関数と呼ぶ）が，クラス（品詞等）毎に定義されており，この線状化関数の呼び出しにより表現構造から目的言語テキストが生成される．
日本語の文は基本的に，命題的な内容とモダリティ等で構成される．
命題的な内容は，パターン翻訳規則により目的言語の表現構造へ変換する．
機能語で表されるモダリティ等については，命題部分とは分離して機能語翻訳規則で処理することも，パターンに含めて命題部分と一緒に処理することも可能である．
照合に用いる日本語パターンにはキーワードとなる語が必ず一つだけ存在する．
パターンの種類は，キーワードの種類（内容語／機能語），および，キーワード文節の他の文節との係り受け関係によって，次の3種類に分類される（図[REF_fig:JapanesePatterns]）．
受け側の語句の内容語をキーワードとするパターン．
係り側の語句の内容語をキーワードとするパターン．
係り側の語句の機能語をキーワードとするパターン（文や文節を接続する機能語をキーワードとするパターン）．
基本型は従来の結合価パターンと同様のパターンであるが，次のような特徴がある．
キーワード文節の機能語に対する条件も指定できる（図[REF_fig:baseType]左）
2階層以上の深さを持ったパターンも記述できる（大域パターン．
図[REF_fig:baseType]中央）
名詞や副詞など，動詞以外の語に対しても記述できる（図[REF_fig:baseType]右）
日本語パターンは表[REF_tab:patterns]のような形式でRDBに格納される．
各パターンは1文節1レコードで記述され，そのうち1つがキーワードを含む．
各レコードには，そのパターン内での文節番号，係り先文節番号，内容語条件（意味属性または字面），機能語条件，省略可能文節かどうかのフラグのほか，パターン内文節の語順についての制限の有無，（動詞キーワードの場合）受動態としての使用可能性などの情報が登録されている．
入力日本語文の解析で得られた文節係り受け構造の各部と，これら日本語パターンとの照合は，まず基本型パターンを用いて次のように行う．
根の内容語をキーとして，RDB上の日本語パターンを検索する．
得られたパターンの各子ノードに対して機能語条件をチェックし，候補を絞り込む．
各子ノードに対して日本語パターンとの照合を行い（子ノードを根として，再帰的に照合する），照合できたパターンを内容語条件で絞り込む．
基本型パターンとの照合の後，照合されずに残ったノード（文節）があれば，その部分に対して追加型パターンとの照合を試みる．
このような照合を根から葉に向かって再帰的に行う．
このようにして，入力文の木構造を覆うことのできる日本語パターンの組み合わせをすべて求める．
使用したパターンの種類や数，パターンの持つ条件（内容語条件，機能語条件）の厳しさ，適用された意味属性の距離（意味カテゴリの階層構造における距離）などからコストを算出して最適解を求める．
日本語パターンにはそれぞれ，そのパターンにマッチした入力日本語文の（部分）構造を，目的言語の表現構造に変換するパターン変換規則が定義されている．
この変換規則は，目的言語の表現要素オブジェクトを生成し，そのデータメンバに訳語や他の表現要素へのリンクなどの属性を書き込むプログラムである．
図[REF_fig:ITtoET]に追加型（内容語）の日本語パターンの変換規則によって生成される目的言語の表現構造の例を示す．
パターン変換規則（C++プログラム）は，専用のエディタ(jawEditor)を使って，日本語パターンとともにフォームに必要事項を記入することで自動生成される．
場合によっては人手で書く，あるいは，修正することも可能である．
図[REF_fig:TransferRule]に，「Nのあおりを食ってV」のパターン（表[REF_tab:patterns]下部）に対する変換規則入力フォームを示す．
図のように，jawEditorでは多階層の規則が記述できる．
パターン翻訳規則によって文の骨格となる命題的な内容を目的言語の表現構造へ変換した後，機能語翻訳規則により，用言に後続してモダリティ等を表す助動詞や体言／用言に後続する取り立て詞の翻訳に対応する各種の情報を，表現要素オブジェクトに設定する．
入力された日本語文の各文節は，文節構造解析器ibukiCによって内容語と機能語，係り先情報などに分割される．
機能語はさらにその機能と語順に応じて，複数のグループに分割して出力される（図[REF_fig:ibukiC_fw]）．
これら機能語や係り先の情報は，命題部分のパターン変換時に，一旦そのまま目的言語の表現構造に受け渡される．
パターン変換終了後，それらに対して機能語翻訳規則を適用することによって，目的言語での表現に必要となる情報が表現構造オブジェクトのデータメンバに設定される．
機能語翻訳規則は表[REF_tab:fwTable1]（日本語と目的言語の機能語が1対1に対応する場合）や表[REF_tab:fwTable2]（機能語の訳し分けが必要な場合）のような表形式で，分割された機能語要素ごとに記述する．
例えば，表[REF_tab:fwTable1]の先頭の規則は，用言に後続する機能語要素1が「たい」だけなら，mModeCのデータメンバaux_verbに訳語``想''を設定することを示している．
一方，「ない」「ている」については，訳語が1対1に決まらないため，それぞれ専用の訳語選択テーブルSP_nai，SP_teiruを参照することを示している．
表[REF_tab:fwTable2] (SP_mo)は体言に後続する取り立て詞「も」に対する14番目の規則である．
規則は番号順に実行され，規則1〜13の条件がいずれも満たされなかった場合に限り，14番目の規則が適用される．
この例では，検査対象となる表現構造オブジェクトit（体言）が主語である場合に，データメンバpostSubject（主語の後ろの位置）に，訳語``也''を設定するという規則を表している．
機能語翻訳規則は機能語に対する訳語の選択のほか，語順の決定で必要となる文型（受身文，使役文など）や文のムードの判定なども行う．
RDB上に表形式で記述された機能語翻訳規則は，命題部分の翻訳規則と同様，C++プログラム（動的ライブラリ）に自動変換される．
表現要素オブジェクトが持つ線状化関数の呼び出しにより，表現構造から目的言語テキストが生成される．
始めにjawが，文の述語（複文の場合は主節の述語）を表す表現要素オブジェクトの線状化関数を呼び出すと，そのオブジェクトはそれ自身の訳語を生成するほか，それに係る名詞や副詞，従属節の述語などの線状化関数を，目的言語の語順に従って呼び出していく．
呼び出された表現要素に係る表現要素があった場合も同様に，その表現要素の線状化関数が呼び出され，訳文が生成される．
前節ではjawを用いた機械翻訳システムすべてに共通する事柄について述べた．
ここでは，手話を目的言語とした機械翻訳を実現するために設定した手話の表現構造，翻訳規則，線状化関数について述べる．
手話単語の品詞分類については議論があるが，ここでは音声言語と同様の品詞を想定し，表現要素オブジェクトのクラス階層を図[REF_fig:class]のように設定した．
主なクラスのデータメンバの例を表[REF_tab:member]に示す．
ここで，TObjectクラスはjawの目的言語に共通する基底クラスである．
それを根とする部分表現構造を線状化して得られた目的言語テキストを保持するとともに，対応する日本語の機能語情報を保持する．
Signクラスは手話単語共通の基底クラスで，手話単語名と単語の語形変化パラメータ（手形・空間・修飾）などを持つ．
Propositionクラスは文の大枠を決める述語を表し，格要素となる名詞（句）や，述語を修飾する副詞，従属節へのリンク，テンス・モダリティなどの情報を持つ．
Nounクラスは名詞を表すクラスであり，数量や複合名詞などを表すクラスの基底クラスでもある．
名詞を修飾・限定する表現要素へのポインタを持つ．
日本語では機能語や修飾語などの独立した単語として表現される情報が，手話では主となる単語の語形（手の形・位置・動き）の変化によって表現される場合がある．
例えば，動作の主体／対象といった格関係が動詞の手の動きの向きにより表現される場合や，様態・程度・アスペクトなどが動詞／形容詞の動きの変化により表現される場合がある．
手話では名詞の人称と話者の回りの空間上の位置が対応づけられている[CITE]．
1人称と2人称はそれぞれ話し手と聞き手の位置に固定されており，会話の場にいない人や物，場所などの3人称はその他の位置に割り当てられる（図[REF_fig:personalLocations]）．
主体や対象の人称（位置）に呼応して手の運動の向きが変化する動詞は一致動詞(agreement verb)と呼ばれる[CITE]．
日本語では名詞に後置された格助詞によって表される格関係が，一致動詞を使った文では，名詞の位置と動詞の（手の動きや指先の）方向によって表示されることになる．
例えば，「AがBをしかる」，「AがBに言う」，「AがBへ行く」では，動詞の手の動きは基本的にみな名詞Aの位置から名詞Bの位置へ向かう．
一致動詞への翻訳を行うためのパターン翻訳規則の例を図[REF_fig:shikaru]に示す．
この翻訳規則により，「AがBをしかる」における名詞Aは動作主格(mAgent),名詞Bは目標格(mGoal)に設定される．
また，一致動詞であることを示すフラグ(mIsAgreement)にtrueが設定される．
「AがBに言う」，「AがBへ行く」の場合も同様に，名詞AをmAgent，名詞BをmGloalに設定する．
これら3つの例において名詞Bは，日本語ではそれぞれ異なる格だが，手話の格をこのように捉えることで，一致動詞の方向が通常mAgentからmGoalへ向かうことになり，処理が簡単化できる．
一致動詞に対する線状化関数では，名詞オブジェクトmAgentおよびmGoalの人称情報(mPerson)を元に，その名詞の表現位置(mParam.position)と動詞の始点・終点(mParam.direction)を決定する．
1人称，2人称の場合はそれぞれ`1', `2'（位置定数）を，3人称の場合は`[MATH]'，`[MATH]'等（位置変数）を設定する．
ただし，身体の一部を背景として利用するために表現位置あるいは始点／終点が固定される単語については，固定部分の位置指定は行わない．
位置を決定した後，手話の語順（[REF_sec:linearization]節）に沿って名詞・動詞の訳語を生成する．
一致動詞では1人称と2人称の名詞は動詞の方向によって表示されるため，「私」「あなた」といった単語は省かれることが多い．
例えば，「あなたが私に言う」は``話す(2→1)''という動詞とその向きだけで表現できる．
このような名詞の省略も考慮して線状化を行う．
音声言語では副詞として語彙化される修飾概念が，手話では述語の語形変化として表現される場合が多い．
例えば「だんだん暗くなる」は，手話単語〈暗い〉を徐々に動かすことで表現される[CITE]．
語形変化で表現される修飾内容としては，様態（ゆっくり，激しく），アスペクト（ずっと，しばしば），程度（とても，少し）などがあげられる．
日本語援用手話表記法では，今のところ語形変化によって表される修飾内容は，被修飾語の修飾パラメータにその内容を次のように日本語の語句で指定することにより表現している．
副詞を述語の語形変化へ翻訳するための日本語パターンと翻訳規則の例を図[REF_fig:sugoku]に示す．
この規則により，「すごく」が係る状態述語の語形変化パラメータ（修飾要素）に``とても''が設定される．
なお，述語の語形変化ではなく，独立した手話単語〈とても〉を用いて表現される場合もあるが，その場合にはPropositionのメンバmAdverbialに〈とても〉を設定する．
日本語の1つの単語が，手話では修飾パラメータを含んだ表現となる場合もある．
例えば，「さっき」は〈過去(;少し)〉，「真っ赤」は〈赤い(;とても)〉と表現される．
これらはその翻訳規則において各単語の修飾パラメータに値を直接設定する．
このほか，日本語では動詞・助動詞によって表されるアスペクト等の情報が，語形変化で表現される場合もある．
それらは，動詞・助動詞の翻訳規則で修飾パラメータに値を設定する．
手話にも日本語の助動詞のように，動詞の後ろに置かれ，モダリティやアスペクトなどを表す単語が存在する[CITE]．
その例を表[REF_tab:aux]に示す．
用言に後続する機能語の翻訳規則の例を図[REF_fig:FWTransRule]に示す．
同図左側の表は日本語の機能語を，それに1対1に対応する訳語に置き換える規則の例であり，右側の表は訳し分けが必要な場合の例である．
この例では，日本語の終助詞「か」が文末にあり，かつ，機能語が「ます」等を含むとき，「か」を直接手話単語に置き換えるのではなく，文のムード（Propositionオブジェクトが持つmModeSLオブジェクトのデータメンバmoodの値）をinterrogative（疑問）に設定している．
この値は線状化の段階で，語順や句読点の種類を決定する際に参照される．
最後に，命題部分と機能語部分の変換により得られた手話言語の表現構造から，語順の決定，非手指文法標識の付加，一致動詞における方向や名詞の位置の決定等を行い，手話テキストを生成する．
この処理は先に述べたように各表現要素オブジェクトが持つ線状化関数で行う．
日本手話の基本的な文は，話題（主題）とそれに関する陳述で形成されている（topic-comment構造）．
これは日本語やBSL（イギリス手話），ASL（アメリカ手話）などと同様である[CITE]．
話題は文頭に置かれ，話題化のための非手指要素による文法標識を伴う．
〈昨日〉〈今〉のような語によって，時間的な枠組みが文頭で設定される場合も多い．
また，日本手話の基本語順はS-O-V（主語—目的語—動詞）と言われており，日本語と同様，述語は原則として文末に配置される[CITE]．
述語には助動詞が後続し，さらに，動作主や述語の対象などを示す指差し(pronoun copy)が付加される場合もある．
話題と述語以外の要素はこれらの間に置かれるが，前述のように動作主や対象は動詞の方向によって表わされ，単語として表現されない場合もある．
また，疑問詞を含む疑問文では，疑問詞が文末に置かれる場合が多い[CITE]．
談話の先頭以外の文は，「ところで」，「次に」，「しかし」，「だから」などの接続的な語で始まることも少なくない[CITE]．
jaw/SLでは，Propositionオブジェクトがデータメンバとして持つ表現要素を，基本的に次のような順序でテキスト化している．
接続的な語→話題化された名詞（句）・時間的枠組みを設定する語→その他の格要素となる名詞（句）→（述語に前置される）副詞→述語→（述語に後置される）副詞→助動詞→（疑問文での）疑問詞．
修飾語は被修飾語に前置される場合と後置される場合とが併存している．
修飾語の語順について松本(2001)[CITE]は，原則的には中心的な語が付随的な語に先行するのが手話の自然な語順だが，倒置によって修飾語を強調する効果があること，そして，日本語の影響を受けて修飾語の前置が受け入れられ，単語によっては原則の方が廃れていったという考えを述べている．
しかし，〈とても〉〈最高〉〈最低〉など程度を表す副詞は現在でも前置すると不自然であり，大きさや形状を表す修飾語も後置が一般的としている．
一方，市田(1998)[CITE]は，名詞句内の語順は，形容詞—名詞，関係節—名詞，属格—名詞であり，形容詞や関係節が名詞に後置されているように見える例は，主要部内在型関係節という構造を利用した表現であると説明している．
副詞の語順については言及していない．
jaw/SLでは，修飾語ごとに前置／後置が分かれるものと仮定して，修飾語の表現要素クラスに前置／後置を指定するためのデータメンバを設け，個々に語順を指定することにした．
このほか，数と単位の語順／表現は，（1）単位を数に後置する（金額など），（2）単位を数に前置する（年齢など），（3）数を手形で表し，単位を動きで表す（年数など），（4）片手で数，もう一方の手で単位を表す（人数など）というように対象により異なっている．
手話の表現構造レベルでは，これら語順／表現の違いを，数量表現クラスQuantityの持つ単位格納用メンバ（mPostfixedUnit，mMovementUnitなど）の違いとして表現しており，メンバごとに異なる線状化コードを割り当てている．
話題化や疑問文，条件節などを表す非手指要素による文法標識のテキスト化も線状化関数で行う．
話題化された名詞の検出は，Propositionクラスの線状化関数内で，mAgent, mObject等の格要素に対して表[REF_tab:fwrule_ha]のような機能語翻訳規則を適用することにより行う．
この規則では，助詞「は」を伴う名詞のうち自称の代名詞でないものに話題化の印が付けられる．
表中のitは述語の格要素となる名詞オブジェクトへのポインタである．
このテーブルには2つの規則（id=1およびid=99）が登録されており，idの小さいものから順に適用される．
規則1により，名詞オブジェクトの日本語における意味属性（メンバ変数mSemanticAttr）の値が10007〜10013の範囲（僕，私など自称の代名詞）である場合には話題化フラグ（メンバ変数topic）にfalseが設定され，その他の場合には規則99によりtrueが設定される．
話題化された名詞（句）には，話題化の非手指文法標識を表す記号``{[MATH]t[MATH] [MATH] }''を付加して線状化する．
機能語の翻訳によって文が疑問のムードを持つと判断された場合は，格要素に疑問詞が存在するならその格の線状化を文末まで遅延し，文末記号を標準の「。
」から疑問の非手指文法標識を表す「？」に変更する．
