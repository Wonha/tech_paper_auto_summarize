================================================================
[section type  : abstract]
[section title : abstract]
================================================================
[i:3, score:225] ところが，コーパスから抽出した文法をそのまま用いた構文解析では多数の解析結果(曖昧性)を作り出すことが避けられないことが問題であり，それが解析精度の悪化や解析時間，使用メモリ量の増大の要因ともなる．
[i:4, score:255] 効率的な構文解析を行うためには，曖昧性を増大させる要因を分析し，構文解析の段階では曖昧性を極力抑えるよう文法やコーパスを変更する必要がある．
[i:5, score:194] 本論文では，構文解析で出力される曖昧性を極力抑えた文法を開発するための具体的な方針を提案し，その有効性を実験により明らかにしている．

================================================================
[section type  : intro]
[section title : はじめに]
================================================================
[i:18, score:224] 我々は，構文解析結果(構文木)に沿って意味解析を進める構文主導意味解析(Syntax Directed Semantic Analysis, SDSA) [CITE]を想定し，構文解析の段階で生じる曖昧性を極力抑え，次の意味解析の段階で意味的に妥当な意味構造を抽出するという2段階の解析手法を採用する(図[REF_fig:analysis_flow])．
[i:20, score:227] \fi本論文では，構文解析の段階の曖昧性を極力抑え，その後の意味解析の段階にも有効な構文構造を生成する大規模日本語文法について検討する．
[i:40, score:247] 第[REF_sec:Modification]節では，構文解析結果の曖昧性の削減を考慮した具体的な文法とコーパスの変更方針を述べ，第[REF_sec:Evaluation]節，第[REF_sec:SDDA]節では，変更したコーパスから抽出した文法の有効性を実験により明らかにする．

================================================================
[section type  : related_study]
[section title : 関連研究とその問題点]
================================================================
[i:58, score:258] 白井らは，構文解析結果の曖昧性を増大させる要因を分析し，多数の曖昧性を作り出す文法規則を機械的に変更することで，曖昧性の削減を図っている．
[i:64, score:184] 例えば，「変化/し/まし/た/か」という単語列をカバーするノードのラベルを考えると(スラッシュは単語区切りを示す)，白井らのアルゴリズムでは，右端の「か」が助詞であるため，``後置詞句''となり，次のCFG規則が得られる．
[i:82, score:232] しかし，人間が見て妥当なCFGを作成するためには，機械的に内部ノードのラベルを推定するのではなく，(Penn Treebankコーパスのような)構文構造付きコーパスを用意し，そこから文法を抽出すべきであると考えている．

================================================================
[section type  : proposed_method]
[section title : 大規模日本語文法の作成手順]
================================================================
[i:83, score:179] 我々は，既存の構文構造付きコーパスを出発点とし，以下の手順で文法を作成することを試みている(図[REF_fig:procedure])．
[i:86, score:151] 分析結果をもとに構文構造付きコーパスの変更方針を作成する
[i:91, score:187] 上述の文法作成手順では，変更対象が構文構造付きコーパスであり，文法はコーパスから抽出されるだけであるため，「文法の作成」という表現に違和感を感じるかもしれない．

================================================================
[section type  : proposed_method]
[section title : 構文解析結果の曖昧性を増大させる要因]
================================================================
[i:104, score:214] 一貫性のない構文構造付きコーパスから抽出した文法は冗長な文法規則を持ち，それが無意味な曖昧性の増大につながる．
[i:108, score:229] 例えば，図[REF_fig:lack_of_syn]に示す2つの構文木が存在した場合，構文木(a)からは``[MATH]連体句[MATH]動詞句[MATH]''という規則が，構文木(b)からは``[MATH]連用句[MATH]動詞句[MATH]''という規則が抽出される．
[i:110, score:294] その結果，連用形の動詞句が連体句として体言を修飾したり，終止・連体形の動詞句が連用句として用言を修飾したりする解析木が生成でき，これが曖昧性を不必要に増大させる要因となる．

================================================================
[section type  : proposed_method]
[section title : 文法，コーパスの変更方針]
================================================================
[i:124, score:192] 本研究ではCFGを使用し，解析器に変更を加えるのではなく，文法とコーパスそのものを変更しながら，この曖昧性を抑える．
[i:125, score:215] さらに，我々は，要因4の曖昧性を包含した単一の構造を生成する(意味的情報は利用しないことを前提とした)，構文解析のための大規模日本語文法の構築を目的としている．
[i:131, score:264] 連用修飾句，連体修飾句の係り先の曖昧性(要因4)
-----------------------------------------------------
  [subsection title : 用言の活用形に関する情報の欠落]
-----------------------------------------------------
  [i:lead, 270] 用言の活用形の情報が欠落しているためにそれが連体修飾句になるか連用修飾句になるかで曖昧になることを，第[REF_sec:Problem]節で，要因3の曖昧性の例として挙げた．
.....
  [i:134, score:270] 用言の活用形の情報が欠落しているためにそれが連体修飾句になるか連用修飾句になるかで曖昧になることを，第[REF_sec:Problem]節で，要因3の曖昧性の例として挙げた．
  [i:137, score:208] ただし，未然形，連用形等すべての活用形を付与するのではなく，その語が末尾に現れることで連用修飾句，または連体修飾句になり得る場合にのみ，それぞれ「連用」，「連体」というラベルを追加する．
  [i:138, score:199] これは，活用形の情報を付与する目的が，その用言が連用修飾句になり得るものか，連体修飾句になり得るものかを区別するためであり，それ以外の情報は必要ないからである．
-----------------------------------------------------
  [subsection title : 複合名詞内の構造の曖昧性]
-----------------------------------------------------
  [i:lead, 147] 複合名詞内の構造の曖昧性を構文解析で解消することは困難であり，この曖昧性を構文解析結果の違いとして出力すべきではないと考えている．
.....
  [i:139, score:147] 複合名詞内の構造の曖昧性を構文解析で解消することは困難であり，この曖昧性を構文解析結果の違いとして出力すべきではないと考えている．
  [i:140, score:204] 白井らも，この曖昧性を構文解析結果の違いとして出力しないよう文法を変更している[CITE]．
  [i:141, score:96] 我々もその方針に倣い，複合名詞については，語構成に関係なく右下がりの構造に統一する(図[REF_fig:convert_compound_noun])．
-----------------------------------------------------
  [subsection title : 連用修飾句，連体修飾句の係り先の曖昧性]
-----------------------------------------------------
  [i:lead, 251] 次に，連用修飾句，連体修飾句の係り先の曖昧性の扱いを検討する．
.....
  [i:158, score:326] もう一つの理由は，連用修飾句の係り先の曖昧性の解消は，連体修飾句の係り先の曖昧性の解消に比べて，構文解析での解決が容易であるからである．
  [i:169, score:382] 我々は，連用修飾句の範囲と係り先は従来のまま変更せず，そこから抽出した文法は，その曖昧性を構文解析の段階に出力することにしている．
  [i:170, score:335] その方針に合わせ，連用修飾句の範囲を変えない場合に限り，連体修飾関係を表す構造を同一の構造に統一する(すなわち，「新しい環境への適応能力を調べる」の場合は図[REF_fig:adnominal_phrase](b)の構造に変更し，「百年の歴史を持つ祭り」の場合は図[REF_fig:adnominal_phrase](c)の構造のままにしておく)．
-----------------------------------------------------
  [subsection title : 並列構造の曖昧性]
-----------------------------------------------------
  [i:lead, 173] 並列構造の曖昧性の解消には意味的情報が必要であり，係り受け解析において並列構造を含む文の正解率は，含まない文に比べて低くなる．
.....
  [i:182, score:345] 構文解析の段階では「Ａと」を連体修飾句と同様に扱い，並列構造の曖昧性の解消は，次の意味解析の段階で，連体修飾関係の曖昧性の解消と同時に行うこととする(図[REF_fig:convert_para_noun])．
  [i:193, score:362] 複合名詞内の構造の曖昧性，連用修飾句の範囲を変えない連体修飾句の係り先の曖昧性はタイプ3の曖昧性とし，構文解析の段階では一つの構文構造を出力する．
  [i:194, score:365] 連用修飾句の係り先の曖昧性，連用修飾句の範囲を変える連体修飾句の係り先の曖昧性はタイプ1の曖昧性とし，構文解析の段階で係り受け構造を反映した異なる構造を出力する．

================================================================
[section type  : experiment_result]
[section title : 評価実験]
================================================================
[i:207, score:167] 前節で述べた方針によるコーパスへの構文構造の付与の有用性を確認するため，コーパスから抽出した文法を用いて，以下の2点について評価実験を行った．
[i:208, score:117] 構文解析結果の曖昧性がどの程度抑えられているか
[i:210, score:72] (1)の評価実験は本研究の目的そのものであるが，曖昧性が抑えられていても，解析精度が低ければ問題であるので，(2)の評価実験も必要である．
-----------------------------------------------------
  [subsection title : 文法，コーパスの構文構造の変更]
-----------------------------------------------------
  [i:lead, 195] まず，付録[REF_sec:Corpus]節で述べたコーパス8911文(平均20形態素)に対し，我々の方針に従って構文構造付きコーパス作成支援ツール[CITE]で構文構造を変更した．
.....
  [i:211, score:195] まず，付録[REF_sec:Corpus]節で述べたコーパス8911文(平均20形態素)に対し，我々の方針に従って構文構造付きコーパス作成支援ツール[CITE]で構文構造を変更した．
  [i:216, score:221] 手順(3)で使用するコーパス支援ツールは，解析結果を1つずつ表示させながら正しい構文構造を選択するためのものではなく，非終端記号名や特定の句の係り先を，正しい構文構造が満たすべき制約として，作業者が順々に与え，それを満たさない候補を排除しながら正しい構文構造を残すためのものである．
  [i:217, score:170] 制約は，構文構造が曖昧な箇所(制約の教示を必要とする非終端記号や係り受け)をマウスで選択し，表示される選択肢から正しい候補を選択することで与える．
-----------------------------------------------------
  [subsection title : 構文解析結果の曖昧性の変化]
-----------------------------------------------------
  [i:lead, 184] 変更前，変更後のコーパス全8911文からそれぞれ文法を抽出し (以降，変更前，変更後のコーパスから抽出した文法を，それぞれ「変更前の文法」，「変更後の文法」と呼ぶ)，MSLRパーザで構文解析を行った．
.....
  [i:227, score:314] EDRコーパスでは，「が」，「を」等と「の」を区別せず，すべて「助詞」としているので，白井らの文法ではこれらの助詞が末尾に現れる句はすべて「後置詞句」となり，連体修飾句か連用修飾句かの区別が付かなくなる．
  [i:231, score:293] 我々の文法では，連体修飾句の係り先の曖昧性と2つの句が並列関係にあるか否かの曖昧性を出さないようにしている．
  [i:232, score:319] 1文に含まれる連体修飾句や並列句の数はそれほど多くなく，先に挙げた2つの要因ほど，大きく曖昧性の削減に貢献していないが，構文解析での解決が困難な曖昧性を抑えることは，その後の意味解析においても重要なことである．
-----------------------------------------------------
  [subsection title : 構文解析精度の変化]
-----------------------------------------------------
  [i:lead, 97] 構文解析結果を確率一般化LR(PGLR)モデル[CITE]でランク付けし，解析精度を調べた．
.....
  [i:244, score:154] PGLRモデルによる生成確率の上位100位以内の解析結果について見てみると，変更前，変更後の文法による文の正解率は，文法[MATH]ではそれぞれ88.45%，98.62%となり，文法[MATH]ではそれぞれ86.23%，94.66%となり，変更後の文法の方が8〜10%高くなっている．
  [i:245, score:169] また[MATH]，[MATH]どちらの場合でも，変更後の文法で，変更前の文法による上位100位以内の文の正解率に達するには，上位10位以内の解析結果を考慮するだけで十分であり，我々のコーパスの変更方針が有効であることが分かる．
  [i:251, score:192] \if0さらに，予備実験として，無作為に選んだ100文について，変更後の文法による1位の解析結果を調査したところ，文節区切りが完全に一致するものは96文あり，それらの文節の係り受け正解率は89.23%であった．

================================================================
[section type  : proposed_method]
[section title : PGLRモデルによる解析結果を利用した係り受け解析]
================================================================
[i:254, score:237] 前節で，我々の方針により作成したコーパスから抽出した大規模日本語文法が，構文解析結果の曖昧性を抑え，文の正解率が約10%向上することを示した．
[i:255, score:163] しかし，構文解析結果の曖昧性を抑えるために，一部の曖昧性を同一の構造で表現することとし，その内部構造を厳密に決定していないため，文の正解率が高くなるのは当然であるという疑問が残る．
[i:256, score:92] そこで，PGLRモデルによる解析結果を利用した文節係り受け解析を行い，係り受け精度を調べた．
-----------------------------------------------------
  [subsection title : 構文木からの文節係り受け関係の抽出]
-----------------------------------------------------
  [i:lead, 121] 文節の係り受け関係は，構文木から取り出す．
.....
  [i:264, score:328] 変更後の文法では，連体修飾句の係り受け関係の構造は連用修飾句の範囲を変えない場合に限り，同一の構造(右下がりの構造)に制限している．
  [i:271, score:307] 連用修飾句の係り先の曖昧性は構文解析結果の曖昧性として残しているので，構文解析結果として出力された構造をそのまま利用する．
  [i:273, score:307] 2つの文節が並列関係にあるか否かの曖昧性は，今回の評価実験では無視し，並列名詞句は連体修飾関係として，並列述語句と並列助詞句は連用修飾関係として扱う．
-----------------------------------------------------
  [subsection title : 評価実験]
-----------------------------------------------------
  [i:lead, 54] 評価は，変更後のコーパス8912文で行った．
.....
  [i:277, score:204] PGLRモデルにより評価用データ100文を構文解析し，生成確率が1位の構文木から，第[REF_sec:DepExtraction]節で述べた方法により，半自動的に係り受け構造を抽出し，その精度を以下の3つの尺度で評価した．
  [i:280, score:170] テスト文の正しい係り受け関係は，変更前のコーパスに付与されている構文木から，先に述べた方法で取り出した．
  [i:286, score:111] 現在，本格的な意味解析の代わりに，SDSAの枠組みのみを利用して，単語の共起に関する統計データを用いた小規模な係り受け解析の実験を行っているが，非常に単純なスコア付けであるにも関わらず，93.0%の係り受け正解率(係り受けB型)，68.8%の文正解率が得られることを確認している[CITE]．

================================================================
[section type  : conclusion]
[section title : まとめ]
================================================================
[i:290, score:239] 多様な言語現象を扱える大規模な文法は，構文構造付きコーパスから抽出することで構築可能であるが，そのようにして抽出した文法を用いた構文解析は，構文解析結果の曖昧性を極端に増大させることが多く，実用に供されていないのが現状である．
[i:291, score:250] 本論文では，困難ではあっても曖昧性を増大させる要因を十分分析し，文法やコーパスの変更を繰り返すことによって，構文解析のための実用的な大規模文法を構築できることを示した．
[i:293, score:265] また，本論文では既存のコーパスに付与されている構文構造を変更しながら，抽出した文法による構文解析結果の曖昧性の削減を図っているが，新たに構文構造付きコーパスを作成する際には，この方針がコーパス作成基準となる．

