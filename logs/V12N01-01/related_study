本節では，文法をコーパスから抽出する主な類似研究を紹介する．
英語の大規模な構文構造付きコーパスとしてPenn Treebankコーパスがある[CITE]．
Charniakはこのコーパスから``tree-bank grammar''と呼ばれるCFGを抽出し，人手で作成した文法との比較を行っている[CITE]．
tree-bank grammarは，各中間ノードについて，そのラベルを左辺に，子ノードのラベルを右辺に持つCFG規則を獲得することで抽出できる(図[REF_fig:grammar_extraction_from_penntree])．
これまで，コーパスから抽出した文法では，構文解析はうまくいかないと言われていたが，人手で作成した文法との比較実験の結果，特に単語数の多い長い文では，コーパスから自動抽出した文法の解析精度が良くなることを示し，それまでの一般的な見識が誤りであることを明らかにしている．
一方，日本語では，Penn Treebankコーパスのような大規模な構文構造付きコーパスが存在しない．
大規模なコーパスとしてEDRコーパス[CITE]と京大コーパス[CITE]がある．
しかし，EDRコーパスは括弧付きコーパスであり，付与されている構文木の内部ノードにラベルが付いていない．
京大コーパスは，二つの文節間の依存関係が付与されているだけで，文節内の構造は付与されていないので，tree-bank grammarのようなCFGは抽出できない．
白井らはEDRコーパスからのCFGの自動抽出を試みている[CITE]．
構文木の内部ノードにラベルが付与されていないので，各内部ノードに対して適当なラベル(非終端記号)を付与する方法を提案している．
しかし，日本語，英語いずれの場合にも，構文構造付きコーパスから抽出した大規模なCFGで構文解析を行うと，膨大な数の構文解析結果が出力される．
この問題に対し，Charniakは，コーパス中の出現頻度の低い文法規則を削除し，確率文脈自由文法(PCFG)で得られる生成確率に基づく最良優先解析(best-first parsing)を行い，解析途中で曖昧性を抑えている．
これは，出現頻度の低い文法規則は構文解析における曖昧性を増大させるだけで，解析精度にほとんど影響を与えないという仮定に基づいている．
しかし，詳細は後述するが，出現頻度の低い文法規則だけが構文解析結果の曖昧性を増大させるわけではない．
労力は要するが，構文解析における曖昧性を増大させる要因を人手で分析する必要があると我々は考えている．
白井らは，構文解析結果の曖昧性を増大させる要因を分析し，多数の曖昧性を作り出す文法規則を機械的に変更することで，曖昧性の削減を図っている．
しかし，機械的な変更だけで曖昧性を削減することには限界があり，人手による変更も必要になる．
人手による変更が必要となる例を以下に挙げる．
\if0
白井らは，括弧付きコーパスであるEDRコーパスからCFGを抽出するために，内部ノードに付与するラベルを機械的に推定している．
しかし，抽出される文法規則が人間の直観に合わない場合がある．
例えば，「変化/し/まし/た/か」という単語列をカバーするノードのラベルを考えると(スラッシュは単語区切りを示す)，白井らのアルゴリズムでは，右端の「か」が助詞であるため，``後置詞句''となり，次のCFG規則が得られる．
しかし，直観的には，後置詞句ではなく動詞句の方が適切である．
\fi
白井らは，助詞を形態素ごとに細分化することで曖昧性を抑えている．
しかし，格助詞，終助詞，並列助詞など機能による細分化も曖昧性の削減には必要である．
EDRコーパス中の助詞に付与されている品詞はすべて``助詞''であり，機能による細分化は人手を要する．
白井らは，括弧付きコーパスであるEDRコーパスからCFGを抽出するために，内部ノードに付与するラベルを機械的に推定している．
しかし，機械的な推定では，アルゴリズムで想定していない文法規則を生成することがある．
例えば，「変化/し/まし/た/か」という単語列をカバーするノードのラベルを考えると(スラッシュは単語区切りを示す)，白井らのアルゴリズムでは，右端の「か」が助詞であるため，``後置詞句''となり，次のCFG規則が得られる．
直観的には，後置詞句ではなく動詞句の方が適切であるが，機械的な推定では，意図しない非終端記号の割り当てを細かく除外していくことは困難である．
\if0例えば，白井らは助詞を形態素ごとに細分化することで曖昧性を抑えている．
しかし，格助詞，終助詞，並列助詞など機能による細分化も曖昧性の削減には必要である．
EDRコーパス中の助詞に付与されている品詞はすべて``助詞''であり，機能による細分化は人手を要する．
さらに，括弧付きコーパスであるEDRコーパスからCFGを抽出するために，内部ノードに付与するラベルを機械的に推定している．
しかし，抽出される文法規則が人間の直観に合わない場合がある．
例えば，「変化/し/まし/た/か」という単語列をカバーするノードのラベルを考えると(スラッシュは単語区切りを示す)，白井らのアルゴリズムでは，右端の「か」が助詞であるため，``後置詞句''となり，次のCFG規則が得られる．
しかし，直観的には，後置詞句ではなく動詞句の方が適切である．
\fi
後者は曖昧性の増減と直接は関係のないことである．
しかし，人間が見て妥当なCFGを作成するためには，機械的に内部ノードのラベルを推定するのではなく，(Penn Treebankコーパスのような)構文構造付きコーパスを用意し，そこから文法を抽出すべきであると考えている．
