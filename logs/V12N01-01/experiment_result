前節で述べた方針によるコーパスへの構文構造の付与の有用性を確認するため，コーパスから抽出した文法を用いて，以下の2点について評価実験を行った．
構文解析結果の曖昧性がどの程度抑えられているか
どの程度の構文解析精度が得られるか
(1)の評価実験は本研究の目的そのものであるが，曖昧性が抑えられていても，解析精度が低ければ問題であるので，(2)の評価実験も必要である．
まず，付録[REF_sec:Corpus]節で述べたコーパス8911文(平均20形態素)に対し，我々の方針に従って構文構造付きコーパス作成支援ツール[CITE]で構文構造を変更した．
具体的には，以下の手順で変更を行っている．
我々の変更方針に従って文法を人手で変更．
MSLRパーザ[CITE]でコーパス中の文を構文解析し，構文解析結果の集合(統語圧縮共有森，packed-shared forest[CITE])を獲得．
コーパス作成支援ツールで，構文解析結果の集合を絞り込み，最終的に1つの正しい構文構造を選択．
手順(3)で使用するコーパス支援ツールは，解析結果を1つずつ表示させながら正しい構文構造を選択するためのものではなく，非終端記号名や特定の句の係り先を，正しい構文構造が満たすべき制約として，作業者が順々に与え，それを満たさない候補を排除しながら正しい構文構造を残すためのものである．
制約は，構文構造が曖昧な箇所(制約の教示を必要とする非終端記号や係り受け)をマウスで選択し，表示される選択肢から正しい候補を選択することで与える．
作業は，100文をラベル付けするのに約3時間かかり，4人でこの約9000文をラベル付けするのに約1ヶ月かかった．
変更前，変更後のコーパス全8911文からそれぞれ文法を抽出し (以降，変更前，変更後のコーパスから抽出した文法を，それぞれ「変更前の文法」，「変更後の文法」と呼ぶ)，MSLRパーザで構文解析を行った．
変更前，変更後の文法による構文解析結果の数を表[REF_tab:result_ambiguity]に示す．
我々のコーパスの変更方針により，文法規則数は約250個増加しているが，構文解析結果の数は[MATH]オーダから[MATH]オーダに減少した．
白井らの手法では，EDRコーパス約188,000文から抽出した文法で1文あたり[MATH]オーダの解析木が出力される[CITE]．
文法抽出に使用した文の数に大きな差があるため公平な比較にはならないが，白井らの文法に比べて曖昧性が減少している主な要因として，以下の3つが考えられる．
白井らの文法では，連体修飾句か連用修飾句かを区別するためのラベルが付与されていない．
これは，第[REF_sec:Problem]節で挙げた曖昧性を増大させる要因の3番目にあたる．
この問題は第[REF_sec:Problem]節で挙げた用言の活用形の問題だけでなく，後置詞句でも同様に起こり得る．
EDRコーパスでは，「が」，「を」等と「の」を区別せず，すべて「助詞」としているので，白井らの文法ではこれらの助詞が末尾に現れる句はすべて「後置詞句」となり，連体修飾句か連用修飾句かの区別が付かなくなる．
我々の文法では，「東京へ行く」のように連用修飾句になる場合は「助詞句」，「東京の人口」のように連体修飾句になる場合は「連体句」となるので，このような曖昧性は出ない．
我々が使っているコーパスの品詞体系はEDR日本語単語辞書に基づいて細分化されている．
例えば，白井らは名詞を細分化していないが，「今日，東京へ行く」の「今日」のように助詞を伴わずに連用修飾可能な名詞を他の名詞と区別しておかなければ，すべての名詞が助詞を伴わずに連用修飾することを認める文法規則となり，曖昧性を増大させる要因となる．
我々の文法では，連体修飾句の係り先の曖昧性と2つの句が並列関係にあるか否かの曖昧性を出さないようにしている．
1文に含まれる連体修飾句や並列句の数はそれほど多くなく，先に挙げた2つの要因ほど，大きく曖昧性の削減に貢献していないが，構文解析での解決が困難な曖昧性を抑えることは，その後の意味解析においても重要なことである．
構文解析結果を確率一般化LR(PGLR)モデル[CITE]でランク付けし，解析精度を調べた．
ただし，8911文を10分割し，一つを評価用，残りをPGLRモデルの学習用とし，10分割交差検定で評価を行った．
文法は全8911文から抽出したもの([MATH])と，学習用データのみから抽出したもの([MATH])の2通りを用意した．
図[REF_fig:result_accuracy_close]，図[REF_fig:result_accuracy_open]に，上位1位から100位以内の解析結果についての文の正解率を示す．
ただし，文の正解率は以下のように定義される．
ここで，「正しい木」とは，コーパスの構文構造と完全に一致する解析木を指す．
また，文法[MATH]の被覆率，再現率を表[REF_tab:coverage_recall]に示す．
ただし，被覆率，再現率は以下のように定義する．
従来の研究では，評価尺度として括弧付けの再現率や適合率など部分的な構造の正しさを示すものを使用することが多い．
しかし，我々は，構文解析結果の集合から尤もらしい解析結果をいくつか選択し，それらに対して意味解析を行うことを前提としているので，構文解析の段階では，意図した構文構造と完全に一致していることが望ましい．
構文構造の部分的な正しさを示す括弧付けの再現率や適合率よりも，上述の文の正解率の方が条件が厳しいが，重要な尺度であると考えている．
PGLRモデルによる生成確率の上位100位以内の解析結果について見てみると，変更前，変更後の文法による文の正解率は，文法[MATH]ではそれぞれ88.45%，98.62%となり，文法[MATH]ではそれぞれ86.23%，94.66%となり，変更後の文法の方が8〜10%高くなっている．
また[MATH]，[MATH]どちらの場合でも，変更後の文法で，変更前の文法による上位100位以内の文の正解率に達するには，上位10位以内の解析結果を考慮するだけで十分であり，我々のコーパスの変更方針が有効であることが分かる．
表[REF_tab:coverage_recall]より，我々の文法[MATH]の被覆率は97%以上であり，広範囲の文の解析が可能であることが分かる．
一方，被覆率，再現率ともに，我々の方針による変更によって1%程度低くなり，解析不能なものが変更前に比べて1%程度多く生じる．
これは，構文解析結果の曖昧性を抑えるために非終端記号を細分化したことによるものである．
文法[MATH]による上位100位の文の正解率の差が文法[MATH]によるものの差より小さくなる要因は，この再現率の差にある．
しかし，文の正解率が我々の変更によって10%近く上がることから，被覆率や再現率がこの程度低下することは許容できると考えている．
\if0さらに，予備実験として，無作為に選んだ100文について，変更後の文法による1位の解析結果を調査したところ，文節区切りが完全に一致するものは96文あり，それらの文節の係り受け正解率は89.23%であった．
これは，Support Vector Machineや最大エントロピー法を用いた文節係り受け解析の手法の正解率と同程度であり[CITE]，意味情報を用いることでさらに正解率が向上すると考えている．
\fi
