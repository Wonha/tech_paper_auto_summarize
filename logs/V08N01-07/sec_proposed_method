自然言語処理において発生する解釈の曖昧さの種類はさまざまである．
それを解消するために必要な情報も，文脈情報や常識，世界知識や専門知識などさまざまで，すべての種類の曖昧さを解決できるような情報をあらかじめ網羅的に準備することは困難である．
ここで，従来の自然言語処理を見ると，表現の構造に関する知識は，文法知識として意味から分離し，表現の意味は，文法規則に従って語彙情報から合成する方法が一般的であった．
しかし，実際の自然言語では，表現の構造とその意味を一体化して扱うことの必要な場合も多い．
従来の言語解析で発生する解釈の曖昧さの多くは，むしろ，このような構造と意味に関する知識をあらかじめ準備することによって解決できる可能性がある．
そこで，本論文では，このような知識を「構造規則」として，その形式を定義し，収集する方法を考える．
さて，このような「構造規則」は，一般に，表現構造を定義する部分とその解釈を定義する部分から構成できる．
このうち，言語表現の構造を記述する方法としては，木構造，リスト構造，意味ネットワークなど様々な方法がある．
言語表現の構造的，意味的多義について考えると，文字列や品詞の並びから見た限りでは，類似または同等と思われるような表現が，統語的もしくは意味的に複数の解釈を持つことが問題である．
そこで，対象とする表現構造を，言語表現そのものに近く，理解しやすい表現として，文字もしくは記号の連鎖からなる一次元的なパターンとして表現する．
すなわち，構造規則の対象とする表現は，キーとなる文字列部分(「固定部」と称す)と形式的に他の単語や表現に置き換えられる部分(「変数部」または，単に「変数」とも言う)から構成されるパターンで表現する．
但し，前者は，字面で記述され，後者は，通常，記号で記述される．
ここでは，このような構造規則は，曖昧性が問題となる表現の種類毎に収集されるものとする．
例えば，名詞句「東京の叔父の息子」では，名詞「東京」の係り先の解釈が問題となるが，これは，「[MATH]」([MATH]は，いずれも名詞)の形の名詞句における名詞[MATH]の係り先の問題として構造規則を用意する．
「美しい私の娘」における形容詞「美しい」の係り先の問題では，「形容詞＋[MATH]」の表現構造における形容詞の係り先多義の問題として別の構造規則を作成する．
また，名詞句「[MATH]」の英語への翻訳規則の場合，「山の頂上」(top of the mountain)，「すべての学生」(all of the students)，「私の友人」(my friend)，「嵐の夜」(stormy night)，「京都の寺」(temple in Kyoto)などのように，名詞[MATH]と名詞[MATH]の組み合わせの違いなどによって，訳し方に多義が存在するが，これも表現構造と解釈の関係として定義される．
すなわち，「東京の叔父の息子」と「美しい私の娘」に対する係り受け解析では，異なる規則集合を作成する．
また，名詞句「[MATH]の[MATH]」の翻訳の問題でも別の規則集合を作成する．
このように，構造規則の対象とする表現を，曖昧性の問題となる表現の種類毎にパターン化した場合，表現パターン内の定数部分は省略し，変数部分のみによって表現構造を定義しても問題はないから，パターン化された表現の中から変数部分だけを取り出し，表現の構造を変数の組(tuple)として表現する．
以上から，本論文では，多義解消のための構造規則の基本形を下記の通りとする．
以下では，構造規則のうち，[MATH]の部分を「構造定義部」，[MATH]の部分を「クラス定義部」と呼ぶ．
ところで，ほぼ無数とも言える言語表現をなるべく少ない構造規則でカバーするには，汎用性の高い構造規則を生成することが望まれが，一方，多彩な言語表現をカバーするためには，個別的な表現に対する規則も記述できる必要がある．
そこで，汎用性の程度に応じて柔軟に規則を記述するため，「構造定義部」の変数[MATH]は，下記に示す４種類の言葉もしくは記号のいずれかで記述するものとする．
上記の変数は，「オールマイティ」，「文法属性」，「意味属性」，「字面」の順に適用範囲が広いと考えられる．
すなわち，「オールマイティ」は，制約条件のないことを意味しており，最も汎用性が高い．
「文法属性」，「意味属性」では，使用する文法体系の違いなどによって，種々の分類法が考えられるが，通常，言語解析では「文法属性」は，数10程度に分類されるのに対して，「意味属性」は，数百から数千種類に分類される．
これに対して，字面情報は，単語の数で見ても10万種類以上となり，それで定義された規則は汎用性に乏しい規則となるが，言語表現には，慣用句など字面指定によって解釈の決まるような表現も多数存在する．
本論文では，「文法属性」として，日英機械翻訳システムALT-J/Eで使用されている「文法属性体系」(池原ほか1987;宮崎ほか1995)を使用し，「意味属性」としては，「日本語語彙大系」(池原ほか1997)で定義された「単語意味属性体系」を使用する．
文法属性体系と単語意味属性体系の一部を，それぞれ，図1，図2に示す．
次に，式(1)のクラス定義部のクラス[MATH]は解釈を示す記号であり，構造規則の種類に応じて，統語的，意味的解釈を与える記号として使用される．
例えば，前述の「[MATH]」の形の名詞句では，名詞[MATH]の係り先が名詞[MATH]の場合と名詞[MATH]の場合の2種類の解釈の可能性があるから，これを区別するには，構造規則では，[MATH]とすればよい．
また，「形容詞[MATH]」では，[MATH]となる．
また，「[MATH]」の英訳規則の場合は，[MATH]のようになる．
本章では，コーパスなどから得られた事例を対象に，構造規則を発見し汎化するための考え方について述べる．
その方法は，表現構造が文法属性によって定義された構造規則(簡単のため，「文法属性規則」と言う)と意味属性によって定義された構造規則(同様，「意味属性規則」と言う)のいずれの場合も同様であるが，前者は，従来から検討されており，人手による標本分析で比較的容易に作成できるので，以下では，後者の場合を中心に述べる．
以下では，コーパスなどの原文から抽出した表現の文字列とそれに対する解釈(クラス)からなるペアを「標本」，その集合を「標本集合」と呼び[MATH]で表す．
また，標本を式(1)の形式の書き換えたものを「事例」，その集合を「事例集合」と呼び，[MATH]で表す．
例として，「[MATH]」の形の名詞句に対する係り受け規則の場合の例を以下に示す．
ここで，集合[MATH]の中のすべての変数の値(字面)を対応する意味属性で置き換えて得られた事例集合を[MATH]とする．
上記の名詞句の事例では，[MATH]の要素として，
が得られる．
以下では，簡単のため，これを，[MATH]または，[MATH]のように記す．
前章で示した構造規則の記述方法に従えば，学習用事例[MATH]も構造規則と同じ(1)式の形式で表現されるから，[MATH]の各要素は，それ自体，構造規則と見なすことができる．
事例からのこのような規則生成では，帰納的推論の方法(長尾1988)の適用が考えられる．
そこで，式(1)の構造定義部で指定された[MATH]個の変数に対して，各変数を基底とする[MATH]次のベクトル空間(「特徴空間」とも言う)を考えると，各事例は，特徴空間上の点に対応するから，構造規則の生成は，この特徴空間内で，同一のクラスに属す部分空間を切り出す問題となる．
この種の問題は，特徴空間が線形である場合，クラスタ分析もしくはクラスタリングの問題(安西1989;浅野，江島1996;Witten & Frank 1999)としても良く知られており，多変量解析，情報検索などの分野で研究されている．
しかし，式(1)の構造定義部で与えられる各基底はいずれも非線形であるため，計算は簡単でない．
基底がis-a関係で結ばれた木構造となる場合については，(Haussler 1988)の方法があるが，学習事例が多い場合は，適用困難である．
また，事例数の大きい問題への適用を狙った方法として，意味属性の木構造をエンコーディングした後，既存の計算プログラムC4.5を使用する方法など(アルモアリムほか1997)もあるが，学習事例，基底数，(生成される)規則数が共に大きい場合は，やはり計算困難である．
そこで，本論文では，変数の数に着目して構造規則を次元に分類し，意味属性間の包含関係に着目して規則を生成する方法を考える．
さて，特徴空間上，同一のクラスに属す点の集合に対して構造規則は定義される．
すなわち，構造規則は，一般に，[MATH]次空間上の点，もしくは，特定の領域に対応する．
これに対して，[MATH]個の変数のうち[MATH]個の変数がオールマイティ「[MATH]」で表現された規則は，[MATH]次元だけ縮退された規則となり，[MATH]次元の空間内のベクトルで表現されるが，[MATH]次元空間で見れば，[MATH]次元の立方体に対応する規則であり，この立方体内に属す事例に適用される．
例えば，三次元の構造規則([MATH], [MATH], [MATH]：[MATH])において，[MATH], [MATH], [MATH]の何れかを「[MATH]」で置き換えた規則(例えば，([MATH]，[MATH], [MATH]：[MATH]))は，三次元空間上の線に対応する規則となり，2変数を「[MATH]」で置き換えた規則(例えば，([MATH]，[MATH]，[MATH]：[MATH]))は，三次元空間上の面に対応する規則となる．
以上から，構造規則をそれが定義される特性空間の次元に従って，一次元規則から[MATH]次元規則までの[MATH]種類に分類する．
事例集合[MATH]から構造規則を生成するための基本的な考え方について述べる．
対象とする表現の意味は，その前後の文脈に依存せず，与えられた表現だけで決定できると仮定すると，対象とする表現とそのクラスが1対1の関係を持つ．
すなわち，標本集合[MATH]と事例集合[MATH]において，同一の表現構造が異なるクラスに属す要素はない．
しかし，字面を意味属性に置き換えて得られた集合[MATH]では，構造定義部とクラス定義部が1対1に対応する場合と，1対1には対応せず，同一の構造に対して異なる複数のクラスが対応する場合が存在すると考えられる．
このうち，前者は，構造定義部で定義された表現の解釈は一意に決定できることを意味しているから，このような部分集合から「意味属性規則」が生成できる．
すなわち，
集合[MATH]の要素を構造定義部の等しい要素毎に分類する．
分類されたグループ内の要素が，いずれも同一のクラスを持つとき，そのグループから一つの構造規則が生成できる．
生成された規則は，該当するグループの要素数が多いほど，信頼性が高い．
分類されたグループ内の要素のクラスが一致しないときは，そのグループからは構造規則は生成できない．
その場合，「意味属性規則」は存在しないと判断できるから，もとの[MATH]の要素(字面表記)を構造規則(「字面規則」と呼ぶ)とする．
このうち，(1)で得られる構造規則は，構造定義に使用された意味属性相互の包含関係を使用すれば，さらにグループ化することができて，より汎用的な規則の生成が期待できる．
これに対して，(2)で得られた規則は，一般化の困難な表現，すなわち慣用表現に類する表現の規則であると推定されるから，汎化の対象外となる．
すでに述べた一次元規則から[MATH]次元規則までの規則では，次元の小さい規則ほど制約条件が少なく，汎用性が高い．
また，そのような規則は高速に適用できるから，規則生成においては，一次元規則から順に生成する．
このとき，規則生成で使用された学習事例を後の規則生成で再び使用するか否かが問題となる．
ここで，言語解析では，得られた規則をその生成順に適用することとすると，後に生成された規則が，それ以前に生成された規則の適用範囲に適用されることはないから，後に生成された規則が先に適用される規則の適用範囲を含んでいても何ら問題は発生しない．
そこで，規則生成では，図3の例に示すように，生成に使用した事例は，事例集合から削除し，後の規則生成は，残された事例を対象に進める．
このように，事例の特徴空間から，ある部分的な空間から規則を抽出した後，その空間に含まれる事例を消去すると，その後の規則生成では，より広い範囲での汎化が期待できる．
以下では，この方法を「逐次型生成」と呼ぶ．
以上から，構造規則生成の手順をまとめると，以下の通りとなる．
＜構造規則生成の手順＞
事例集合[MATH]から，事例集合[MATH]を作成する．
[MATH]は，[MATH]の各標本内の変数部分の単語をその単語の属す意味属性番号に置き換えたものである．
事例集合[MATH]から，一次元規則の集合[MATH]を生成し汎化する．
そのとき，規則生成に使用した事例は，[MATH]集合から削除する．
上記で残った事例[MATH]から，二次元規則の集合[MATH]を生成し，汎化する．
そのとき，規則生成に使用した学習事例は，[MATH]集合から削除する．
以下同様にして，[MATH]次元までの規則集合[MATH]を生成する．
以上の結果，残された学習用事例[MATH]の要素に対して，その元となった事例標本の集合を[MATH]とする．
([MATH]は，事例そのものであるが，同時に構造規則でもある．
)
なお，各次元規則の生成と汎化の方法は，次章で述べる．
以上で得られる構造規則の種類は，以下の通りである．
以上の方法で生成された構造規則を対象に，構造定義部の意味属性を文法属性に置き換えてよい規則の組を探して，それらを文法属性による規則に置き換える．
置き換えられた規則では，次元やタイプの異なる複数の構造規則が縮退されるため，適用順序の情報が失われる．
従って，書き換え後の規則は，適用順序に依存しない独立した規則である必要がある．
そこで，ここでは，書き換えの可否は，人手により判断するものとする．
さて，前項までで得られる構造規則は，変数部分がいずれも「オールマイティ」，「意味属性」，「字面」の何れかで記述された規則である．
ここで，「意味属性」で記述された規則の組を「転生名詞」，「時詞」，「形式名詞」など，より汎用な「文法属性」で記述された規則に汎化することを考える．
一つの「文法属性」に複数の「意味属性」が対応することに着目し，各文法属性毎に，それと対応した意味属性を持つ規則を集め，該当する意味属性の部分を文法属性で置き換えた規則を作成する．
新しい規則の作成では，後に述べる意味属性規則の汎化と同様，着目する意味属性以外の要素の同一性に注意する必要がある．
また，書き換え後の規則の独立性を保証するため，木構造上，置き換え対象となる規則の適用領域内に他の規則が存在していないことを確認する必要がある．
このようにして得られた文法規則を，文法属性の上下関係に着目して，さらに汎化する場合も同様である．
なお，一般に，構造規則において，表現構造定義部は，字面，意味属性，文法属性などの混在する形式で記述できるから，上記の置き換えは，可能な変数のみを対象とすればよい．
各次元の「意味属性規則」を生成し，汎化する方法について述べる．
さて，一次元規則を発見する方法について述べる．
まず，表現構造を規定する[MATH]個の変数に対応して，[MATH]個の意味属性体系の木を用意する．
用意した各木のノードに「事例数リスト([MATH])」を対応させる．
但し，[MATH]は，該当するノードの意味属性を持つクラス[MATH]の事例数で，[MATH]はクラスの数である．
例えば，[MATH]番目の変数に対応する意味属性体系の木の[MATH]番目のノードの場合，[MATH]は，事例集合[MATH]の中で，[MATH]番目の変数の値が[MATH]である要素の数を表す．
以下では，このようにして得られた意味属性体系の木を「意味属性数の木」と呼ぶ．
図4に，クラス数[MATH]の場合について，構造定義部の[MATH]番目の変数に対応した「意味属性数の木」の例を示す．
ここで，必要十分の標本データから「意味属性数の木」が求められているとし，[MATH]番目の属性の木の[MATH]番目のノードに付与された「事例数リスト」[MATH]の各数値について考える．
各クラスの事例数を示す[MATH]個の数値のうち，[MATH]番目のクラスの事例数[MATH]を除くすべての事例数が0であるとすると，このノードの表す事例，すなわち，[MATH]番目の変数が[MATH]番目の意味属性であるような事例は，他の変数([MATH]番目の変数以外)の値とは無関係に，すべてクラス[MATH]に属すことになる．
従って，このノードから，一次元の構造規則[MATH]を生成する．
但し，[MATH]は，先頭から[MATH]番目の変数の値である．
このとき，規則生成の対象となったノードの「事例数リスト」の値は，すべてゼロにリセットする．
「意味属性数の木」のノードで，事例数リストが0でない要素を2つ以上を持つノードでは，一次元規則は存在しないから，そのまま残しておき，後に述べるような二次元以上の規則生成を試みる．
なお，すべての要素が0であるようなノードでは，構造規則を生成しない．
構造規則は，精度を失わない限り，汎用性が高く，規則数の少ない方がよい．
意味属性体系上の上位の意味属性の語の性質は，下位の意味属性の語に伝搬することに着目すると，構造規則において，ある意味属性が指定されているとき，その意味属性の配下の意味属性を持つ語はすべて指定条件を満たすものと解釈される．
そこで，「意味属性数の木」のなかで，一次元規則の生成で使用されたノードに着目する．
このノードから生成された一次元規則のクラスが[MATH]であり，かつ，その下位ノードのいずれからも同じクラス[MATH]の構造規則が生成されるとする．
ただし，下位ノードには，対応する事例が存在せず，すべての要素がゼロとなる事例数リストは存在しても良いが，ゼロでないような要素が複数存在する事例数リストはないものとする．
このとき，下位ノードから得られる規則は，着目したノードの規則で代表することができる．
汎化は，このように，「事例数リスト」が上位ノードに畳み込めるようなノードを発見し，そのノードから生成された規則を削除することによって行われる．
具体的には，下位ノードから汎化を開始し，順次，上位ノードに向かって汎化を進める．
一度，汎化の結果得られたノードも，上記の条件を満たす限り，さらに上位ノードに縮退される．
図5に，クラス数[MATH]の場合の例を示す．
図中，(a)では，[MATH]のノードの配下に，[MATH]，[MATH]の2つのノードがあるが，それらに属す事例(それぞれ，14件，21件)は，いずれも，[MATH]ノードの事例(18件)と同じく，クラス1の事例であるので，上位ノードに畳み込まれ，[MATH]ノードの事例数リストは，[MATH]となる．
このとき，2つの下位ノートの事例数リストの値は，0にクリアされる．
図中の(b)は，クラス2の場合の例で，以下同様である．
二次元規則では，表現を規定する[MATH]個の変数のうち，2個の変数の値が与えられるとクラスが決定されるから，得られる規則は，指定される変数の組み合わせによって，[MATH]組に分類される．
以下では，そのうちの任意の一組の規則について考える．
さて，対象とする表現が，[MATH]番目の変数と[MATH]番目の変数で定義されるような二次元の構造規則([MATH]とする)を抽出する．
[MATH]番目と[MATH]番目の「意味属性数の木」の情報から，行番号，列番号をそれぞれの「属性数の木」のノード番号(意味属性番号)とし，要素を「事例数リスト」[MATH]とする二次元配列を作成する．
但し，[MATH]は，変数[MATH]，[MATH]の値が，それぞれ行番号，列番号で示される意味属性であるような事例のうち，クラスが[MATH]である事例の数を表す．
図6に[MATH]の場合の例を示す．
一次元規則の場合とほぼ同様，二次元規則は，この二次元配列から求められる．
その方法は以下の通りである．
二次元配列の要素に示された[MATH]個の事例数のうち，どれか一つを除くすべての数値が0であるような要素を考える．
このような要素は，該当する変数の位置に，配列上の行と列で表される意味属性の語が使用された事例では，例外なくそのクラスが一意に定まっていることを示している．
このことにより二次元規則は容易に抽出できる．
例えば，いま，[MATH]行[MATH]列の位置の要素[MATH]の値が，[MATH]であるとすると，下式の二次元規則が得られる．
なお，一次元規則の場合と同様，規則生成後，当該ノードの事例数リストの値は，すべてゼロにリセットされる．
二次元規則は，前述の二次元配列を使用して汎化する．
ただし，行と列で表される意味属性の上下関係(包含関係)の情報については，意味属性体系を参照する．
この場合，表現を指定する変数が二種類あるため，二方向での汎化が必要な点を除けば，汎化の方法は，一次元規則の場合と同様である．
図7に，クラス数[MATH]の場合の汎化の例を示す．
図では，[MATH]番目の変数の値が意味属性[MATH]配下にあり，[MATH]番目の変数の値が意味属性[MATH]の配下にある二次元規則を汎化している．
初めに，行方向の汎化で，9つの構造規則が3つの構造規則に縮退され，次に，列方向の汎化で，3つ構造規則が1つに縮退されるから，全体では，9つの構造規則が最終的に1つに縮退される．
この例では，行方向と列方向のいずれから汎化しても結果は変わらないが，場合によっては，汎化の順序によって縮退できる規則数に差が生じることが考えられる．
従って，規則数の減少を図るため，双方向の汎化の結果を比べて，縮退できる規則数の大きい方を採用する．
二次元規則が事例数リストの二次元配列から得られたのと同様，[MATH]次元規則は，事例数リストの[MATH]次元配列から求められる．
規則を求める方法とそれを汎化する方法は，次元数の違いを除けば，二次元規則の場合と同様である．
生成される規則の信頼性の観点から見たとき，事例数の少ないノードから生成された規則は信頼性に乏しい．
従って，規則抽出は，ある程度以上の事例数を持つノードからに絞ることが望まれる．
ここで，ある確率分布に従ってランダムに発生する事象を考えると，着目する現象の出現頻度はポアソン分布に従い，その信頼性は，その事象の出現回数の絶対値のみで決まる．
そこで，規則生成のための事例数の閾値として，[MATH]件を設定する．
すなわち，構造規則の生成においては，「事例数リスト」の数値の和([MATH])が[MATH]以上となるノードを対象に，規則生成を試みる．
前節で示した各次元の規則生成では，事例の特徴空間上，例外なく同一のクラスの事例からなる空間からのみ構造規則を抽出し，それを汎化している．
しかしこの方法では，ごくまれに発生する例外のため，規則が生成できないような場合が心配される．
そこで，汎化の範囲をより拡大するため，この条件をゆるめ，規則生成の対象となる事例数に対して閾値[MATH]を設ける．
すなわち，規則生成において，クラス[MATH]に対する構造規則を生成するとき，クラス[MATH]以外のクラスの事例が[MATH]以下であるノードの範囲まで特徴空間を広げて構造規則を生成する．
汎化においても同様の基準を使用するものとする．
閾値の値は，目標とする解析精度に依存して設定する必要がある．
すなわち，閾値[MATH]内の事例から得られた規則の場合，それを使用した解析では，最大[MATH]の誤りが生じることが予想されるから，目標とする解析精度を[MATH]とするときは，閾値は，[MATH]となるように設定する必要がある．
前章で提案した構造規則の生成法を，係り受け関係に多義を持つ名詞句として典型的な「の型名詞句」に適用し，係り受け解析のための「意味属性規則」を生成する．
また，生成された規則を解析に使用して，その精度を評価する．
名詞句の意味については，すでに人手によって詳細な意味分類(島津ほか1986)が行われてきた．
また，本章で対象とする「の型名詞句」についても，人手による標本分析の結果として種々のヒューリスティックスが提案されており，名詞間の接続強度と用例を併用した解析方法の研究(江尻,宮崎1998)では，9割前後の係り受け精度が達成されている．
しかし，計算機による解析では，解析精度の問題など，まだ多くの課題を残している．
係り受け解析としては，コーパスに基づく方法として，単語の共起情報を用いて係り先を決定する方法(佐々木1995)，複合名詞に意味クラスの共起情報を用いて係り先が決定される確率を求める方法(小林1996)などがある．
名詞句翻訳では，生成語彙論の立場から，語彙情報によって英語表現を生成する方法(菊池，白井2000)もあるが，精度は不明である．
また，大量の対訳例の中から意味的に類似した表現を発見し，翻訳結果を得る方法では，収集される用例は，通常，スパースであり，適切な用例がないときは，結果は保証されないことが問題であった．
本論文の方法は，名詞句の持つ意味的な構造に着目した受け規則が生成できるので，比較的少ない事例から相対的にカバー範囲の広い構造規則が生成できると期待される．
さて，2つの助詞「の」と3つの名詞[MATH]から構成された「[MATH]」の形の名詞句を考える．
ただし，記号[MATH]は名詞の出現順序をも表すものとする．
以下，この型の名詞句を単に「の型名詞句」という．
日本語では，一般に，表現要素間に後方修飾の原則があることに注意すると，「の型名詞句」では，名詞[MATH]の係り先は名詞[MATH]に特定されるため，先頭の名詞[MATH]について，以下の2通りの係り受け解釈が存在する．
但し，[MATH]は，[MATH]が[MATH]に係ることを示す．
[MATH]  (&[MATH])の場合
例)「私の母の名前」，「浴室の脱衣場の壁」
[MATH]  (&[MATH])の場合
例)「私の昔の友達」，「東京の数学の教師」
以下では，簡単のため，1)を「[MATH]係り」，2)を「[MATH]係り」と呼ぶ．
名詞句「[MATH]」の構造を[MATH]で表す．
ただし，[MATH]は，それぞれ，名詞[MATH]の属す意味属性の番号とする．
次に，この構造の名詞句に対する係り受け規則を式(1)の記法に従って，[MATH]で表す．
ただし，[MATH]は係り受けのタイプで，[MATH]は前方係り受け，[MATH]は後方係り受けを表すものとする．
この規則を次元によって分類すると図8のようになる．
ここで，オールマイティ記号「*」は，名詞の意味属性のノード番号0に対応する．
すなわち，ノード番号0は，ルートノードで，すべての名詞を表すから，係り受け規則上は，意味的制約のないことを意味する．
以下では，図8の三種類，7タイプの構造規則を生成する．
まず，小説100冊(新潮文庫)を対象に，形態素解析プログラムALT-JAWS (NTT 1996)を使用して「の型名詞句」を抽出する．
そのうちの1万件について，人手によって係り先を決定し，名詞句の事例集合[MATH]を作成する．
次に，「日本語意味属性体系」(池原ほか1997)に定義された「単語意味属性体系」を参照して，各名詞句標本の変数部分に相当する名詞を意味属性番号に置き換え，事例集合[MATH]を作成する．
ただし，名詞は複数の意味的な用法を有する場合が多いが，ここでは，各名詞の名詞句内での意味を考え，単一の意味属性に置き換える．
以下，このようにして得られた事例集合[MATH]から構造規則を生成し，得られた規則を実際の名詞句の係り受け解析に適用する．
解析結果を，あらかじめ人手で決定しておいた正解と比較して解析規則の解析精度を求める．
実験は，10回のcross-validation法で行う．
すなわち，まず，事例標本を規則生成用の9,000件と解析実験用の1,000件に分け，前者から，すでに述べた方法で解析規則を生成する．
得られた規則を後者の標本の解析に適用して解析精度を求める．
この手順を10回繰り返して得られた結果を平均して，生成される規則数とその精度を求める．
図9に実験の手順を示す．
「の型名詞句」の標本1万件で使用されている名詞[MATH]の意味属性を集計した結果を表1に示す．
この表で，「深さ」の欄は，意味属性体系上，該当する意味属性が，トップノードから何番目の深さにあるかを示す．
数値が大きくなるにつれて，該当する名詞の意味の粒度が小さくなる．
これより，以下のことが分かる．
使用された意味属性は，いずれの名詞の場合も意味属性全体の半分以下であり，意味的に見て，名詞の種類全体をカバーする範囲にはない．
使用された意味属性当たりの標本数は，平均7〜10件である．
名詞[MATH]は，名詞[MATH]に比べて，浅い意味属性の名詞，すなわち，粒度の大きい名詞が使用される傾向がある．
ここで，木構造上のノード(意味属性)に対応した構造規則が生成されることを考えると，2)より，ほぼ7〜10件程度の事例から1構造規則が生成されると見込まれる．
その場合，規則生成の対象となるノードが反事例を持たないとすると，得られる規則の精度は，約[MATH]以上となることが期待できる．
また，3)は，名詞句「[MATH]」において，名詞[MATH]の意味は，名詞[MATH]または名詞[MATH]によって限定されることの多いことを物語っている．
構造規則生成実験によって生成された規則数とそれを使用した名詞句の解析実験の結果をまとめて表2に示す．
表中，「デフォールト規則」の欄は，解析実験において，適用できる規則が存在しない事例はすべて，「b係り」と解釈したことを示す．
規則生成に使用する事例数の閾値[MATH]は，一次元規則と二次元規則の生成では2，三次元規則の生成では，1とし，例外事例に関する閾値[MATH]は0とした．
なお，一次元規則，二次元規則の生成において，それぞれの3タイプの構造規則の生成順序を変えても得られた構造規則全体の解析精度は変わらなかった．
＜規則抽出結果＞
表2から，構造規則生成の結果について以下のことが分かる．
得られた意味属性規則数は，全体で1,815件である．
この規則は，9,000件の事例から得られているから，平均してみれば，5事例から1規則得られたことになる．
各次元規則の中で，二次元規則の数が最も多く，[MATH]以上を占めている．
三次元規則は，136件で，他の次元の規則に比べて最小である．
このうち，2)，3)から，この種の名詞句は，三つの名詞のうち二つの意味関係によって係り受け関係が決まることが多く，三つの名詞すべてに依存する場合は少ないことが分かる．
＜解析実験結果＞
次に，上記の解析規則を使用した名詞句解析実験の結果から，以下のことが観察される．
1万件の事例から全体で，カバー率[MATH]の規則が得られる．
また，規則のカバーする範囲の解析正解率は，平均[MATH]である．
一次元規則と二次元規則の精度は，ほぼ，同程度であるのに対して，三次元規則の精度は低い．
適用できる規則の存在しない事例は，すべて，「b係り」と解釈した結果，全体の正解率は，[MATH]である．
このうち1)は，従来の人手で作成された規則(宍倉，宮崎1995;江尻,宮崎1998)の精度([MATH]前後)より若干低いが，本論文と同一の名詞句に対する従来の要素合成法的な解析規則(中井ほか1998)より，かなり優れている．
2)は，一次元規則と二次元規則を生成する段階で，事例の多くが使用済みとなり，三次元規則の生成に使用された事例が少ないためと考えられる．
また，3)の値は，人間でも判断に迷う事例が[MATH]程度存在することを考えると，かなり良い値と解釈される．
前節で使用した名詞句の事例から，「文法属性規則」を作成する場合，また，それを，「意味属性規則」と併用する場合についての例を示す．
「[MATH]」の形の名詞句では，変数部分はすべて名詞であるため，図1の文法属性体系の中の体言(名詞)の部分で示される文法属性を使用した構造規則を考える．
具体的には，使用する文法体系は図10の通りとする．
ここで，図10の構造を見ると，各文法属性間の段数は少ないから，最終段の文法属性のみを使用した構造規則を生成する．
このようなフラットな分類では，決定木を作り，それより式(1)の形式の規則を作成する方法が便利である．
ここでは，決定木生成では，プログラムC4.5(Quinlan 1995)を使用する．
その結果，得られた規則のカバー率は，[MATH]，また，その範囲での正解率は，[MATH]であった．
従って，全体の正解率は，[MATH]である．
得られた構造規則のうち，正解率[MATH]以上を示したものを表3に示す．
これらの結果から，以下のことが分かる．
得られた規則のカバー率は，意味属性を使用した場合に比べて若干高い．
得られた規則の正解率は，意味属性を使用した場合に比べて低い．
このうち，1)は，意味属性に比べて文法属性の方がカバー範囲が大きいためと考えられる．
また，2)は，意味属性に比べて品詞コードの分類が少ないこと，中でも大半の事例を構成する名詞は，「一般名詞」に属すため，分解能が低いことが原因と考えられる．
文法属性による規則として，どのような規則があるかについては，従来から検討されており(穴倉，宮崎1995)，人間による標本分析で比較的容易に推定することができる．
ここでは，「の型名詞句」において同格の「の」が使用された事例の解析に適用するための「文法属性規則」を考える．
ところで，名詞句「[MATH]」において，助詞「の」が同格を意味する場合は，以下の二つの場合が代表的である．
人名を含む同格表現
名詞[MATH]: 意味属性が，「人」で，文法属性が，「固有名詞(姓)(名)」でない名詞
名詞[MATH]: 意味属性は，「人」で，文法属性が，「固有名詞(姓)(名)」である名詞
地名を含む同格表現
名詞[MATH]: 意味属性は，「地域」で，文法属性が，「固有名詞(地名)」でない名詞
名詞[MATH]: 意味属性は，「地域」で，文法属性が，「固有名詞(地名)」である名詞
前節で使用した1万件の名詞句のうち，人名，地名を含む同格表現，それぞれ，102件，13件に対して，上記の規則を適用した結果によれば，カバー率は，それぞれ，[MATH]，[MATH]で，正解率はいずれも[MATH]であった．
今までの実験結果から見ると，「文法属性規則」に比べて，「意味属性規則」の方が総合的な解析精度は高いと言えるが，表現によっては，「文法属性規則」の方が精度の良い場合もある．
そこで，ここでは，両者を組み合わせて使用する場合の効果について評価する．
具体的には，4.1で得られた「意味属性規則」のそれぞれの正解率と4.2.1で得られた「文法属性規則」の正解率に基づき，以下の手順で解析実験を行う．
まず，「文法属性規則」のうち，精度がある一定値[MATH]以上の規則を使用して，係り受け解析を行う．
次に，1)で係り受け関係が決定できなかった標本に対して，「意味属性規則」によって係り受け解析を行う．
[MATH]の値を変えながら，1)，2)の手順を繰り返し，その結果を総合して，最終的な解析精度を評価する．
以上の実験の結果を図11に示す．
図では，左端の点，右端の点が，それぞれ，「意味属性規則」のみの場合と「文法属性規則」の場合を示しており，中間の2点は，[MATH]の場合と[MATH]の場合を示している．
この結果によれば，[MATH]の時，すなわち，2割の名詞句は，「文法属性規則」，残る8割は，「意味属性規則」によって解析されるとき，解析精度は，ほぼ最大で，[MATH]となる．
本論文では，「意味属性規則」を生成するに際して，汎用性が高く，数少ない規則でカバー率をあげることを目標に，次元の低い規則から順に生成する方法を考えた．
また，各次元の規則の生成では，一度，生成に使用した事例は，事例集合から削除し，残された事例から次の規則を生成する方法(「逐次型生成」)を採った．
しかし，この方法は，事例数が少ないときは，解析精度の上で必ずしも良い方法と言えない可能性がある．
すなわち，初めの段階での規則生成では，かなり多くの事例が存在するため，精度の良い規則が生成できるが，規則生成が進むにつれて，残された事例数が減少し，そこから生成される規則の精度が低下することが予想される．
この傾向は，事例数1万件の場合(表2)において，構造規則の精度が，後に生成される規則ほど低下していることからも観察される．
そこで，ここでは，規則の生成に使用した事例を捨てないで，各次元の規則を生成する方法(「同時型生成」と呼ぶ)について実験を行った．
ただし，この方法では，一つの事例が異なる次元や異なるタイプの規則の生成で，クラスの異なった規則の生成に使用される可能性があるので，ここでは，得られた構造規則を使用して係り受け解析を行う場合，同次元内の構造規則で適用可能なものはすべて使用することとした．
従って，解析では，異なった規則の適用によって異なった係り受け結果が得られる場合が生じる．
そこで，係り受け解析においては，以下の方法で係り先を決定した．
＜係り受け解析の手順＞
係り受け解析規則は，一次元規則，二次元規則，三次元規則の順に適用する．
同次元内の複数の規則が適用され異なる係り先が得られた場合は，その次元での判定は保留し，次の次元での結果に従う．
実験の結果を表4と表5に示す．
これらの結果を「逐次型生成」の場合の結果(表1)と比較すると，以下のことが分かる．
「同時型生成法」で生成された規則は，一次元規則，二次元規則に比べて，三次元規則の精度が若干悪いが，「逐次型生成」(表2)の場合と比べるとかなり向上している．
規則のカバー率は，三次元規則が最大[MATH]で，次元が下がるにつれて，低下する．
これらの結果，「逐次型生成」に比べて，「同時型生成」では，規則全体のカバー率が，[MATH]から[MATH]に向上し，解析正解率は，[MATH]から[MATH]に向上している．
しかし，「同時型生成法」で生成された規則数は，「逐次型生成法」の場合(1,815件)に比べてから，約3倍(5,528件)に増大している．
これより，事例数1万件を使用したとき，「同時型生成法」は，「逐次型生成法」に比べて，カバー率が約[MATH]向上し，解析精度は，[MATH]向上することが分かる．
しかし，その代わりに生成される規則規則数は，ほぼ3倍に増加していることを考えると．
事例数の少ないときに使用するのが適切と思われる．
表1で示されるように，実験では，学習事例に含まれる名詞の種類は，異なり意味属性数から見て，半分弱に止まっており，決して，網羅的とは言えないが，得られた構造規則のカバー率は，表2に示されるように89.8%に上っている．
このことから，本方式では，比較的少ない事例から，カバー率の高い構造規則が得られることが分かる．
次に，得られた構造規則の数と精度について見ると，表2の結果では，意味属性を使用した構造規則として，名詞句の事例1万件から1,815件の係り受け構造規則が得られている．
本方式では，意味属性によって表現構造とクラスの関係が規定できる事例から構造規則は生成され，それ以外の事例は，字面のままの規則として残されるから，得られた構造規則において，元の事例の持つ情報量は失われない．
従って，用例翻訳(長尾1984;佐藤1992)など，用例そのものを使用する方法に比べ，精度を落とすことなく，言語知識を[MATH]以下に圧縮する効果が期待できる，また，本方式で得られた構造規則は，意味属性番号や文法属性番号を意味属性名や文法属性名に書き換えると，可読性が高いから，人手によってさらに圧縮できる可能性がある．
ところで，最近の記憶装置の価格を考えると，実用上，規則数が多少多いことはあまり問題にならなくなってきた．
これに対して，すでに述べたように，言語表現はきわめて多彩であり，構造的，意味的な曖昧性を解消するための知識を人手によって集積するのは，依然として，大変困難な課題である．
本論文で提案した方法は，比較的少量の標本から，表現とその解釈に関する精度の良い構造知識を手軽に収集できる方法として，実用性が高いと期待できる．
一般に，精度良い規則を得るには，事例数の多いところから構造規則を生成するのが望ましいが，実験では，一次元規則と二次元規則は，事例数が2以上のところから規則を生成し，三次元規則は，事例が1つしかない意味属性の組からも構造規則を生成した．
これは，三次元規則の生成で，頻度2以上の事例から生成した規則より，頻度1以上の事例から生成した規則の方が全体として解析精度が良かったためである．
しかし，表2では，一次元規則が使用される回数は，1規則あたり10回近くになるのに対して，二次元規則は4〜5回，三次元規則は3回程度と，順に使用回数が減少している．
この点から見ると，低次元の規則は．
より多くの事例のあるところから生成する方が適切と考えられる．
従って，標本数がより多い場合は，事例数の多いところからのみ規則を生成するようにすれば，より精度の良い規則が得られるものと期待される．
自然言語処理において発生する解釈の曖昧さの種類はさまざまである．
それを解消するために必要な情報も，文脈情報や常識，世界知識や専門知識などさまざまで，すべての種類の曖昧さを解決できるような情報をあらかじめ網羅的に準備することは困難である．
ここで，従来の自然言語処理を見ると，表現の構造に関する知識は，文法知識として意味から分離し，表現の意味は，文法規則に従って語彙情報から合成する方法が一般的であった．
しかし，実際の自然言語では，表現の構造とその意味を一体化して扱うことの必要な場合も多い．
従来の言語解析で発生する解釈の曖昧さの多くは，むしろ，このような構造と意味に関する知識をあらかじめ準備することによって解決できる可能性がある．
そこで，本論文では，このような知識を「構造規則」として，その形式を定義し，収集する方法を考える．
さて，このような「構造規則」は，一般に，表現構造を定義する部分とその解釈を定義する部分から構成できる．
このうち，言語表現の構造を記述する方法としては，木構造，リスト構造，意味ネットワークなど様々な方法がある．
言語表現の構造的，意味的多義について考えると，文字列や品詞の並びから見た限りでは，類似または同等と思われるような表現が，統語的もしくは意味的に複数の解釈を持つことが問題である．
そこで，対象とする表現構造を，言語表現そのものに近く，理解しやすい表現として，文字もしくは記号の連鎖からなる一次元的なパターンとして表現する．
すなわち，構造規則の対象とする表現は，キーとなる文字列部分(「固定部」と称す)と形式的に他の単語や表現に置き換えられる部分(「変数部」または，単に「変数」とも言う)から構成されるパターンで表現する．
但し，前者は，字面で記述され，後者は，通常，記号で記述される．
ここでは，このような構造規則は，曖昧性が問題となる表現の種類毎に収集されるものとする．
例えば，名詞句「東京の叔父の息子」では，名詞「東京」の係り先の解釈が問題となるが，これは，「[MATH]」([MATH]は，いずれも名詞)の形の名詞句における名詞[MATH]の係り先の問題として構造規則を用意する．
「美しい私の娘」における形容詞「美しい」の係り先の問題では，「形容詞＋[MATH]」の表現構造における形容詞の係り先多義の問題として別の構造規則を作成する．
また，名詞句「[MATH]」の英語への翻訳規則の場合，「山の頂上」(top of the mountain)，「すべての学生」(all of the students)，「私の友人」(my friend)，「嵐の夜」(stormy night)，「京都の寺」(temple in Kyoto)などのように，名詞[MATH]と名詞[MATH]の組み合わせの違いなどによって，訳し方に多義が存在するが，これも表現構造と解釈の関係として定義される．
すなわち，「東京の叔父の息子」と「美しい私の娘」に対する係り受け解析では，異なる規則集合を作成する．
また，名詞句「[MATH]の[MATH]」の翻訳の問題でも別の規則集合を作成する．
このように，構造規則の対象とする表現を，曖昧性の問題となる表現の種類毎にパターン化した場合，表現パターン内の定数部分は省略し，変数部分のみによって表現構造を定義しても問題はないから，パターン化された表現の中から変数部分だけを取り出し，表現の構造を変数の組(tuple)として表現する．
以上から，本論文では，多義解消のための構造規則の基本形を下記の通りとする．
以下では，構造規則のうち，[MATH]の部分を「構造定義部」，[MATH]の部分を「クラス定義部」と呼ぶ．
ところで，ほぼ無数とも言える言語表現をなるべく少ない構造規則でカバーするには，汎用性の高い構造規則を生成することが望まれが，一方，多彩な言語表現をカバーするためには，個別的な表現に対する規則も記述できる必要がある．
そこで，汎用性の程度に応じて柔軟に規則を記述するため，「構造定義部」の変数[MATH]は，下記に示す４種類の言葉もしくは記号のいずれかで記述するものとする．
上記の変数は，「オールマイティ」，「文法属性」，「意味属性」，「字面」の順に適用範囲が広いと考えられる．
すなわち，「オールマイティ」は，制約条件のないことを意味しており，最も汎用性が高い．
「文法属性」，「意味属性」では，使用する文法体系の違いなどによって，種々の分類法が考えられるが，通常，言語解析では「文法属性」は，数10程度に分類されるのに対して，「意味属性」は，数百から数千種類に分類される．
これに対して，字面情報は，単語の数で見ても10万種類以上となり，それで定義された規則は汎用性に乏しい規則となるが，言語表現には，慣用句など字面指定によって解釈の決まるような表現も多数存在する．
本論文では，「文法属性」として，日英機械翻訳システムALT-J/Eで使用されている「文法属性体系」(池原ほか1987;宮崎ほか1995)を使用し，「意味属性」としては，「日本語語彙大系」(池原ほか1997)で定義された「単語意味属性体系」を使用する．
文法属性体系と単語意味属性体系の一部を，それぞれ，図1，図2に示す．
次に，式(1)のクラス定義部のクラス[MATH]は解釈を示す記号であり，構造規則の種類に応じて，統語的，意味的解釈を与える記号として使用される．
例えば，前述の「[MATH]」の形の名詞句では，名詞[MATH]の係り先が名詞[MATH]の場合と名詞[MATH]の場合の2種類の解釈の可能性があるから，これを区別するには，構造規則では，[MATH]とすればよい．
また，「形容詞[MATH]」では，[MATH]となる．
また，「[MATH]」の英訳規則の場合は，[MATH]のようになる．
本章では，コーパスなどから得られた事例を対象に，構造規則を発見し汎化するための考え方について述べる．
その方法は，表現構造が文法属性によって定義された構造規則(簡単のため，「文法属性規則」と言う)と意味属性によって定義された構造規則(同様，「意味属性規則」と言う)のいずれの場合も同様であるが，前者は，従来から検討されており，人手による標本分析で比較的容易に作成できるので，以下では，後者の場合を中心に述べる．
以下では，コーパスなどの原文から抽出した表現の文字列とそれに対する解釈(クラス)からなるペアを「標本」，その集合を「標本集合」と呼び[MATH]で表す．
また，標本を式(1)の形式の書き換えたものを「事例」，その集合を「事例集合」と呼び，[MATH]で表す．
例として，「[MATH]」の形の名詞句に対する係り受け規則の場合の例を以下に示す．
ここで，集合[MATH]の中のすべての変数の値(字面)を対応する意味属性で置き換えて得られた事例集合を[MATH]とする．
上記の名詞句の事例では，[MATH]の要素として，
が得られる．
以下では，簡単のため，これを，[MATH]または，[MATH]のように記す．
前章で示した構造規則の記述方法に従えば，学習用事例[MATH]も構造規則と同じ(1)式の形式で表現されるから，[MATH]の各要素は，それ自体，構造規則と見なすことができる．
事例からのこのような規則生成では，帰納的推論の方法(長尾1988)の適用が考えられる．
そこで，式(1)の構造定義部で指定された[MATH]個の変数に対して，各変数を基底とする[MATH]次のベクトル空間(「特徴空間」とも言う)を考えると，各事例は，特徴空間上の点に対応するから，構造規則の生成は，この特徴空間内で，同一のクラスに属す部分空間を切り出す問題となる．
この種の問題は，特徴空間が線形である場合，クラスタ分析もしくはクラスタリングの問題(安西1989;浅野，江島1996;Witten & Frank 1999)としても良く知られており，多変量解析，情報検索などの分野で研究されている．
しかし，式(1)の構造定義部で与えられる各基底はいずれも非線形であるため，計算は簡単でない．
基底がis-a関係で結ばれた木構造となる場合については，(Haussler 1988)の方法があるが，学習事例が多い場合は，適用困難である．
また，事例数の大きい問題への適用を狙った方法として，意味属性の木構造をエンコーディングした後，既存の計算プログラムC4.5を使用する方法など(アルモアリムほか1997)もあるが，学習事例，基底数，(生成される)規則数が共に大きい場合は，やはり計算困難である．
そこで，本論文では，変数の数に着目して構造規則を次元に分類し，意味属性間の包含関係に着目して規則を生成する方法を考える．
さて，特徴空間上，同一のクラスに属す点の集合に対して構造規則は定義される．
すなわち，構造規則は，一般に，[MATH]次空間上の点，もしくは，特定の領域に対応する．
これに対して，[MATH]個の変数のうち[MATH]個の変数がオールマイティ「[MATH]」で表現された規則は，[MATH]次元だけ縮退された規則となり，[MATH]次元の空間内のベクトルで表現されるが，[MATH]次元空間で見れば，[MATH]次元の立方体に対応する規則であり，この立方体内に属す事例に適用される．
例えば，三次元の構造規則([MATH], [MATH], [MATH]：[MATH])において，[MATH], [MATH], [MATH]の何れかを「[MATH]」で置き換えた規則(例えば，([MATH]，[MATH], [MATH]：[MATH]))は，三次元空間上の線に対応する規則となり，2変数を「[MATH]」で置き換えた規則(例えば，([MATH]，[MATH]，[MATH]：[MATH]))は，三次元空間上の面に対応する規則となる．
以上から，構造規則をそれが定義される特性空間の次元に従って，一次元規則から[MATH]次元規則までの[MATH]種類に分類する．
事例集合[MATH]から構造規則を生成するための基本的な考え方について述べる．
対象とする表現の意味は，その前後の文脈に依存せず，与えられた表現だけで決定できると仮定すると，対象とする表現とそのクラスが1対1の関係を持つ．
すなわち，標本集合[MATH]と事例集合[MATH]において，同一の表現構造が異なるクラスに属す要素はない．
しかし，字面を意味属性に置き換えて得られた集合[MATH]では，構造定義部とクラス定義部が1対1に対応する場合と，1対1には対応せず，同一の構造に対して異なる複数のクラスが対応する場合が存在すると考えられる．
このうち，前者は，構造定義部で定義された表現の解釈は一意に決定できることを意味しているから，このような部分集合から「意味属性規則」が生成できる．
すなわち，
集合[MATH]の要素を構造定義部の等しい要素毎に分類する．
分類されたグループ内の要素が，いずれも同一のクラスを持つとき，そのグループから一つの構造規則が生成できる．
生成された規則は，該当するグループの要素数が多いほど，信頼性が高い．
分類されたグループ内の要素のクラスが一致しないときは，そのグループからは構造規則は生成できない．
その場合，「意味属性規則」は存在しないと判断できるから，もとの[MATH]の要素(字面表記)を構造規則(「字面規則」と呼ぶ)とする．
このうち，(1)で得られる構造規則は，構造定義に使用された意味属性相互の包含関係を使用すれば，さらにグループ化することができて，より汎用的な規則の生成が期待できる．
これに対して，(2)で得られた規則は，一般化の困難な表現，すなわち慣用表現に類する表現の規則であると推定されるから，汎化の対象外となる．
すでに述べた一次元規則から[MATH]次元規則までの規則では，次元の小さい規則ほど制約条件が少なく，汎用性が高い．
また，そのような規則は高速に適用できるから，規則生成においては，一次元規則から順に生成する．
このとき，規則生成で使用された学習事例を後の規則生成で再び使用するか否かが問題となる．
ここで，言語解析では，得られた規則をその生成順に適用することとすると，後に生成された規則が，それ以前に生成された規則の適用範囲に適用されることはないから，後に生成された規則が先に適用される規則の適用範囲を含んでいても何ら問題は発生しない．
そこで，規則生成では，図3の例に示すように，生成に使用した事例は，事例集合から削除し，後の規則生成は，残された事例を対象に進める．
このように，事例の特徴空間から，ある部分的な空間から規則を抽出した後，その空間に含まれる事例を消去すると，その後の規則生成では，より広い範囲での汎化が期待できる．
以下では，この方法を「逐次型生成」と呼ぶ．
以上から，構造規則生成の手順をまとめると，以下の通りとなる．
＜構造規則生成の手順＞
事例集合[MATH]から，事例集合[MATH]を作成する．
[MATH]は，[MATH]の各標本内の変数部分の単語をその単語の属す意味属性番号に置き換えたものである．
事例集合[MATH]から，一次元規則の集合[MATH]を生成し汎化する．
そのとき，規則生成に使用した事例は，[MATH]集合から削除する．
上記で残った事例[MATH]から，二次元規則の集合[MATH]を生成し，汎化する．
そのとき，規則生成に使用した学習事例は，[MATH]集合から削除する．
以下同様にして，[MATH]次元までの規則集合[MATH]を生成する．
以上の結果，残された学習用事例[MATH]の要素に対して，その元となった事例標本の集合を[MATH]とする．
([MATH]は，事例そのものであるが，同時に構造規則でもある．
)
なお，各次元規則の生成と汎化の方法は，次章で述べる．
以上で得られる構造規則の種類は，以下の通りである．
以上の方法で生成された構造規則を対象に，構造定義部の意味属性を文法属性に置き換えてよい規則の組を探して，それらを文法属性による規則に置き換える．
置き換えられた規則では，次元やタイプの異なる複数の構造規則が縮退されるため，適用順序の情報が失われる．
従って，書き換え後の規則は，適用順序に依存しない独立した規則である必要がある．
そこで，ここでは，書き換えの可否は，人手により判断するものとする．
さて，前項までで得られる構造規則は，変数部分がいずれも「オールマイティ」，「意味属性」，「字面」の何れかで記述された規則である．
ここで，「意味属性」で記述された規則の組を「転生名詞」，「時詞」，「形式名詞」など，より汎用な「文法属性」で記述された規則に汎化することを考える．
一つの「文法属性」に複数の「意味属性」が対応することに着目し，各文法属性毎に，それと対応した意味属性を持つ規則を集め，該当する意味属性の部分を文法属性で置き換えた規則を作成する．
新しい規則の作成では，後に述べる意味属性規則の汎化と同様，着目する意味属性以外の要素の同一性に注意する必要がある．
また，書き換え後の規則の独立性を保証するため，木構造上，置き換え対象となる規則の適用領域内に他の規則が存在していないことを確認する必要がある．
このようにして得られた文法規則を，文法属性の上下関係に着目して，さらに汎化する場合も同様である．
なお，一般に，構造規則において，表現構造定義部は，字面，意味属性，文法属性などの混在する形式で記述できるから，上記の置き換えは，可能な変数のみを対象とすればよい．
各次元の「意味属性規則」を生成し，汎化する方法について述べる．
さて，一次元規則を発見する方法について述べる．
まず，表現構造を規定する[MATH]個の変数に対応して，[MATH]個の意味属性体系の木を用意する．
用意した各木のノードに「事例数リスト([MATH])」を対応させる．
但し，[MATH]は，該当するノードの意味属性を持つクラス[MATH]の事例数で，[MATH]はクラスの数である．
例えば，[MATH]番目の変数に対応する意味属性体系の木の[MATH]番目のノードの場合，[MATH]は，事例集合[MATH]の中で，[MATH]番目の変数の値が[MATH]である要素の数を表す．
以下では，このようにして得られた意味属性体系の木を「意味属性数の木」と呼ぶ．
図4に，クラス数[MATH]の場合について，構造定義部の[MATH]番目の変数に対応した「意味属性数の木」の例を示す．
ここで，必要十分の標本データから「意味属性数の木」が求められているとし，[MATH]番目の属性の木の[MATH]番目のノードに付与された「事例数リスト」[MATH]の各数値について考える．
各クラスの事例数を示す[MATH]個の数値のうち，[MATH]番目のクラスの事例数[MATH]を除くすべての事例数が0であるとすると，このノードの表す事例，すなわち，[MATH]番目の変数が[MATH]番目の意味属性であるような事例は，他の変数([MATH]番目の変数以外)の値とは無関係に，すべてクラス[MATH]に属すことになる．
従って，このノードから，一次元の構造規則[MATH]を生成する．
但し，[MATH]は，先頭から[MATH]番目の変数の値である．
このとき，規則生成の対象となったノードの「事例数リスト」の値は，すべてゼロにリセットする．
「意味属性数の木」のノードで，事例数リストが0でない要素を2つ以上を持つノードでは，一次元規則は存在しないから，そのまま残しておき，後に述べるような二次元以上の規則生成を試みる．
なお，すべての要素が0であるようなノードでは，構造規則を生成しない．
構造規則は，精度を失わない限り，汎用性が高く，規則数の少ない方がよい．
意味属性体系上の上位の意味属性の語の性質は，下位の意味属性の語に伝搬することに着目すると，構造規則において，ある意味属性が指定されているとき，その意味属性の配下の意味属性を持つ語はすべて指定条件を満たすものと解釈される．
そこで，「意味属性数の木」のなかで，一次元規則の生成で使用されたノードに着目する．
このノードから生成された一次元規則のクラスが[MATH]であり，かつ，その下位ノードのいずれからも同じクラス[MATH]の構造規則が生成されるとする．
ただし，下位ノードには，対応する事例が存在せず，すべての要素がゼロとなる事例数リストは存在しても良いが，ゼロでないような要素が複数存在する事例数リストはないものとする．
このとき，下位ノードから得られる規則は，着目したノードの規則で代表することができる．
汎化は，このように，「事例数リスト」が上位ノードに畳み込めるようなノードを発見し，そのノードから生成された規則を削除することによって行われる．
具体的には，下位ノードから汎化を開始し，順次，上位ノードに向かって汎化を進める．
一度，汎化の結果得られたノードも，上記の条件を満たす限り，さらに上位ノードに縮退される．
図5に，クラス数[MATH]の場合の例を示す．
図中，(a)では，[MATH]のノードの配下に，[MATH]，[MATH]の2つのノードがあるが，それらに属す事例(それぞれ，14件，21件)は，いずれも，[MATH]ノードの事例(18件)と同じく，クラス1の事例であるので，上位ノードに畳み込まれ，[MATH]ノードの事例数リストは，[MATH]となる．
このとき，2つの下位ノートの事例数リストの値は，0にクリアされる．
図中の(b)は，クラス2の場合の例で，以下同様である．
二次元規則では，表現を規定する[MATH]個の変数のうち，2個の変数の値が与えられるとクラスが決定されるから，得られる規則は，指定される変数の組み合わせによって，[MATH]組に分類される．
以下では，そのうちの任意の一組の規則について考える．
さて，対象とする表現が，[MATH]番目の変数と[MATH]番目の変数で定義されるような二次元の構造規則([MATH]とする)を抽出する．
[MATH]番目と[MATH]番目の「意味属性数の木」の情報から，行番号，列番号をそれぞれの「属性数の木」のノード番号(意味属性番号)とし，要素を「事例数リスト」[MATH]とする二次元配列を作成する．
但し，[MATH]は，変数[MATH]，[MATH]の値が，それぞれ行番号，列番号で示される意味属性であるような事例のうち，クラスが[MATH]である事例の数を表す．
図6に[MATH]の場合の例を示す．
一次元規則の場合とほぼ同様，二次元規則は，この二次元配列から求められる．
その方法は以下の通りである．
二次元配列の要素に示された[MATH]個の事例数のうち，どれか一つを除くすべての数値が0であるような要素を考える．
このような要素は，該当する変数の位置に，配列上の行と列で表される意味属性の語が使用された事例では，例外なくそのクラスが一意に定まっていることを示している．
このことにより二次元規則は容易に抽出できる．
例えば，いま，[MATH]行[MATH]列の位置の要素[MATH]の値が，[MATH]であるとすると，下式の二次元規則が得られる．
なお，一次元規則の場合と同様，規則生成後，当該ノードの事例数リストの値は，すべてゼロにリセットされる．
二次元規則は，前述の二次元配列を使用して汎化する．
ただし，行と列で表される意味属性の上下関係(包含関係)の情報については，意味属性体系を参照する．
この場合，表現を指定する変数が二種類あるため，二方向での汎化が必要な点を除けば，汎化の方法は，一次元規則の場合と同様である．
図7に，クラス数[MATH]の場合の汎化の例を示す．
図では，[MATH]番目の変数の値が意味属性[MATH]配下にあり，[MATH]番目の変数の値が意味属性[MATH]の配下にある二次元規則を汎化している．
初めに，行方向の汎化で，9つの構造規則が3つの構造規則に縮退され，次に，列方向の汎化で，3つ構造規則が1つに縮退されるから，全体では，9つの構造規則が最終的に1つに縮退される．
この例では，行方向と列方向のいずれから汎化しても結果は変わらないが，場合によっては，汎化の順序によって縮退できる規則数に差が生じることが考えられる．
従って，規則数の減少を図るため，双方向の汎化の結果を比べて，縮退できる規則数の大きい方を採用する．
二次元規則が事例数リストの二次元配列から得られたのと同様，[MATH]次元規則は，事例数リストの[MATH]次元配列から求められる．
規則を求める方法とそれを汎化する方法は，次元数の違いを除けば，二次元規則の場合と同様である．
生成される規則の信頼性の観点から見たとき，事例数の少ないノードから生成された規則は信頼性に乏しい．
従って，規則抽出は，ある程度以上の事例数を持つノードからに絞ることが望まれる．
ここで，ある確率分布に従ってランダムに発生する事象を考えると，着目する現象の出現頻度はポアソン分布に従い，その信頼性は，その事象の出現回数の絶対値のみで決まる．
そこで，規則生成のための事例数の閾値として，[MATH]件を設定する．
すなわち，構造規則の生成においては，「事例数リスト」の数値の和([MATH])が[MATH]以上となるノードを対象に，規則生成を試みる．
前節で示した各次元の規則生成では，事例の特徴空間上，例外なく同一のクラスの事例からなる空間からのみ構造規則を抽出し，それを汎化している．
しかしこの方法では，ごくまれに発生する例外のため，規則が生成できないような場合が心配される．
そこで，汎化の範囲をより拡大するため，この条件をゆるめ，規則生成の対象となる事例数に対して閾値[MATH]を設ける．
すなわち，規則生成において，クラス[MATH]に対する構造規則を生成するとき，クラス[MATH]以外のクラスの事例が[MATH]以下であるノードの範囲まで特徴空間を広げて構造規則を生成する．
汎化においても同様の基準を使用するものとする．
閾値の値は，目標とする解析精度に依存して設定する必要がある．
すなわち，閾値[MATH]内の事例から得られた規則の場合，それを使用した解析では，最大[MATH]の誤りが生じることが予想されるから，目標とする解析精度を[MATH]とするときは，閾値は，[MATH]となるように設定する必要がある．
前章で提案した構造規則の生成法を，係り受け関係に多義を持つ名詞句として典型的な「の型名詞句」に適用し，係り受け解析のための「意味属性規則」を生成する．
また，生成された規則を解析に使用して，その精度を評価する．
名詞句の意味については，すでに人手によって詳細な意味分類(島津ほか1986)が行われてきた．
また，本章で対象とする「の型名詞句」についても，人手による標本分析の結果として種々のヒューリスティックスが提案されており，名詞間の接続強度と用例を併用した解析方法の研究(江尻,宮崎1998)では，9割前後の係り受け精度が達成されている．
しかし，計算機による解析では，解析精度の問題など，まだ多くの課題を残している．
係り受け解析としては，コーパスに基づく方法として，単語の共起情報を用いて係り先を決定する方法(佐々木1995)，複合名詞に意味クラスの共起情報を用いて係り先が決定される確率を求める方法(小林1996)などがある．
名詞句翻訳では，生成語彙論の立場から，語彙情報によって英語表現を生成する方法(菊池，白井2000)もあるが，精度は不明である．
また，大量の対訳例の中から意味的に類似した表現を発見し，翻訳結果を得る方法では，収集される用例は，通常，スパースであり，適切な用例がないときは，結果は保証されないことが問題であった．
本論文の方法は，名詞句の持つ意味的な構造に着目した受け規則が生成できるので，比較的少ない事例から相対的にカバー範囲の広い構造規則が生成できると期待される．
さて，2つの助詞「の」と3つの名詞[MATH]から構成された「[MATH]」の形の名詞句を考える．
ただし，記号[MATH]は名詞の出現順序をも表すものとする．
以下，この型の名詞句を単に「の型名詞句」という．
日本語では，一般に，表現要素間に後方修飾の原則があることに注意すると，「の型名詞句」では，名詞[MATH]の係り先は名詞[MATH]に特定されるため，先頭の名詞[MATH]について，以下の2通りの係り受け解釈が存在する．
但し，[MATH]は，[MATH]が[MATH]に係ることを示す．
[MATH]  (&[MATH])の場合
例)「私の母の名前」，「浴室の脱衣場の壁」
[MATH]  (&[MATH])の場合
例)「私の昔の友達」，「東京の数学の教師」
以下では，簡単のため，1)を「[MATH]係り」，2)を「[MATH]係り」と呼ぶ．
名詞句「[MATH]」の構造を[MATH]で表す．
ただし，[MATH]は，それぞれ，名詞[MATH]の属す意味属性の番号とする．
次に，この構造の名詞句に対する係り受け規則を式(1)の記法に従って，[MATH]で表す．
ただし，[MATH]は係り受けのタイプで，[MATH]は前方係り受け，[MATH]は後方係り受けを表すものとする．
この規則を次元によって分類すると図8のようになる．
ここで，オールマイティ記号「*」は，名詞の意味属性のノード番号0に対応する．
すなわち，ノード番号0は，ルートノードで，すべての名詞を表すから，係り受け規則上は，意味的制約のないことを意味する．
以下では，図8の三種類，7タイプの構造規則を生成する．
まず，小説100冊(新潮文庫)を対象に，形態素解析プログラムALT-JAWS (NTT 1996)を使用して「の型名詞句」を抽出する．
そのうちの1万件について，人手によって係り先を決定し，名詞句の事例集合[MATH]を作成する．
次に，「日本語意味属性体系」(池原ほか1997)に定義された「単語意味属性体系」を参照して，各名詞句標本の変数部分に相当する名詞を意味属性番号に置き換え，事例集合[MATH]を作成する．
ただし，名詞は複数の意味的な用法を有する場合が多いが，ここでは，各名詞の名詞句内での意味を考え，単一の意味属性に置き換える．
以下，このようにして得られた事例集合[MATH]から構造規則を生成し，得られた規則を実際の名詞句の係り受け解析に適用する．
解析結果を，あらかじめ人手で決定しておいた正解と比較して解析規則の解析精度を求める．
実験は，10回のcross-validation法で行う．
すなわち，まず，事例標本を規則生成用の9,000件と解析実験用の1,000件に分け，前者から，すでに述べた方法で解析規則を生成する．
得られた規則を後者の標本の解析に適用して解析精度を求める．
この手順を10回繰り返して得られた結果を平均して，生成される規則数とその精度を求める．
図9に実験の手順を示す．
「の型名詞句」の標本1万件で使用されている名詞[MATH]の意味属性を集計した結果を表1に示す．
この表で，「深さ」の欄は，意味属性体系上，該当する意味属性が，トップノードから何番目の深さにあるかを示す．
数値が大きくなるにつれて，該当する名詞の意味の粒度が小さくなる．
これより，以下のことが分かる．
使用された意味属性は，いずれの名詞の場合も意味属性全体の半分以下であり，意味的に見て，名詞の種類全体をカバーする範囲にはない．
使用された意味属性当たりの標本数は，平均7〜10件である．
名詞[MATH]は，名詞[MATH]に比べて，浅い意味属性の名詞，すなわち，粒度の大きい名詞が使用される傾向がある．
ここで，木構造上のノード(意味属性)に対応した構造規則が生成されることを考えると，2)より，ほぼ7〜10件程度の事例から1構造規則が生成されると見込まれる．
その場合，規則生成の対象となるノードが反事例を持たないとすると，得られる規則の精度は，約[MATH]以上となることが期待できる．
また，3)は，名詞句「[MATH]」において，名詞[MATH]の意味は，名詞[MATH]または名詞[MATH]によって限定されることの多いことを物語っている．
構造規則生成実験によって生成された規則数とそれを使用した名詞句の解析実験の結果をまとめて表2に示す．
表中，「デフォールト規則」の欄は，解析実験において，適用できる規則が存在しない事例はすべて，「b係り」と解釈したことを示す．
規則生成に使用する事例数の閾値[MATH]は，一次元規則と二次元規則の生成では2，三次元規則の生成では，1とし，例外事例に関する閾値[MATH]は0とした．
なお，一次元規則，二次元規則の生成において，それぞれの3タイプの構造規則の生成順序を変えても得られた構造規則全体の解析精度は変わらなかった．
＜規則抽出結果＞
表2から，構造規則生成の結果について以下のことが分かる．
得られた意味属性規則数は，全体で1,815件である．
この規則は，9,000件の事例から得られているから，平均してみれば，5事例から1規則得られたことになる．
各次元規則の中で，二次元規則の数が最も多く，[MATH]以上を占めている．
三次元規則は，136件で，他の次元の規則に比べて最小である．
このうち，2)，3)から，この種の名詞句は，三つの名詞のうち二つの意味関係によって係り受け関係が決まることが多く，三つの名詞すべてに依存する場合は少ないことが分かる．
＜解析実験結果＞
次に，上記の解析規則を使用した名詞句解析実験の結果から，以下のことが観察される．
1万件の事例から全体で，カバー率[MATH]の規則が得られる．
また，規則のカバーする範囲の解析正解率は，平均[MATH]である．
一次元規則と二次元規則の精度は，ほぼ，同程度であるのに対して，三次元規則の精度は低い．
適用できる規則の存在しない事例は，すべて，「b係り」と解釈した結果，全体の正解率は，[MATH]である．
このうち1)は，従来の人手で作成された規則(宍倉，宮崎1995;江尻,宮崎1998)の精度([MATH]前後)より若干低いが，本論文と同一の名詞句に対する従来の要素合成法的な解析規則(中井ほか1998)より，かなり優れている．
2)は，一次元規則と二次元規則を生成する段階で，事例の多くが使用済みとなり，三次元規則の生成に使用された事例が少ないためと考えられる．
また，3)の値は，人間でも判断に迷う事例が[MATH]程度存在することを考えると，かなり良い値と解釈される．
前節で使用した名詞句の事例から，「文法属性規則」を作成する場合，また，それを，「意味属性規則」と併用する場合についての例を示す．
「[MATH]」の形の名詞句では，変数部分はすべて名詞であるため，図1の文法属性体系の中の体言(名詞)の部分で示される文法属性を使用した構造規則を考える．
具体的には，使用する文法体系は図10の通りとする．
ここで，図10の構造を見ると，各文法属性間の段数は少ないから，最終段の文法属性のみを使用した構造規則を生成する．
このようなフラットな分類では，決定木を作り，それより式(1)の形式の規則を作成する方法が便利である．
ここでは，決定木生成では，プログラムC4.5(Quinlan 1995)を使用する．
その結果，得られた規則のカバー率は，[MATH]，また，その範囲での正解率は，[MATH]であった．
従って，全体の正解率は，[MATH]である．
得られた構造規則のうち，正解率[MATH]以上を示したものを表3に示す．
これらの結果から，以下のことが分かる．
得られた規則のカバー率は，意味属性を使用した場合に比べて若干高い．
得られた規則の正解率は，意味属性を使用した場合に比べて低い．
このうち，1)は，意味属性に比べて文法属性の方がカバー範囲が大きいためと考えられる．
また，2)は，意味属性に比べて品詞コードの分類が少ないこと，中でも大半の事例を構成する名詞は，「一般名詞」に属すため，分解能が低いことが原因と考えられる．
文法属性による規則として，どのような規則があるかについては，従来から検討されており(穴倉，宮崎1995)，人間による標本分析で比較的容易に推定することができる．
ここでは，「の型名詞句」において同格の「の」が使用された事例の解析に適用するための「文法属性規則」を考える．
ところで，名詞句「[MATH]」において，助詞「の」が同格を意味する場合は，以下の二つの場合が代表的である．
人名を含む同格表現
名詞[MATH]: 意味属性が，「人」で，文法属性が，「固有名詞(姓)(名)」でない名詞
名詞[MATH]: 意味属性は，「人」で，文法属性が，「固有名詞(姓)(名)」である名詞
地名を含む同格表現
名詞[MATH]: 意味属性は，「地域」で，文法属性が，「固有名詞(地名)」でない名詞
名詞[MATH]: 意味属性は，「地域」で，文法属性が，「固有名詞(地名)」である名詞
前節で使用した1万件の名詞句のうち，人名，地名を含む同格表現，それぞれ，102件，13件に対して，上記の規則を適用した結果によれば，カバー率は，それぞれ，[MATH]，[MATH]で，正解率はいずれも[MATH]であった．
今までの実験結果から見ると，「文法属性規則」に比べて，「意味属性規則」の方が総合的な解析精度は高いと言えるが，表現によっては，「文法属性規則」の方が精度の良い場合もある．
そこで，ここでは，両者を組み合わせて使用する場合の効果について評価する．
具体的には，4.1で得られた「意味属性規則」のそれぞれの正解率と4.2.1で得られた「文法属性規則」の正解率に基づき，以下の手順で解析実験を行う．
まず，「文法属性規則」のうち，精度がある一定値[MATH]以上の規則を使用して，係り受け解析を行う．
次に，1)で係り受け関係が決定できなかった標本に対して，「意味属性規則」によって係り受け解析を行う．
[MATH]の値を変えながら，1)，2)の手順を繰り返し，その結果を総合して，最終的な解析精度を評価する．
以上の実験の結果を図11に示す．
図では，左端の点，右端の点が，それぞれ，「意味属性規則」のみの場合と「文法属性規則」の場合を示しており，中間の2点は，[MATH]の場合と[MATH]の場合を示している．
この結果によれば，[MATH]の時，すなわち，2割の名詞句は，「文法属性規則」，残る8割は，「意味属性規則」によって解析されるとき，解析精度は，ほぼ最大で，[MATH]となる．
本論文では，「意味属性規則」を生成するに際して，汎用性が高く，数少ない規則でカバー率をあげることを目標に，次元の低い規則から順に生成する方法を考えた．
また，各次元の規則の生成では，一度，生成に使用した事例は，事例集合から削除し，残された事例から次の規則を生成する方法(「逐次型生成」)を採った．
しかし，この方法は，事例数が少ないときは，解析精度の上で必ずしも良い方法と言えない可能性がある．
すなわち，初めの段階での規則生成では，かなり多くの事例が存在するため，精度の良い規則が生成できるが，規則生成が進むにつれて，残された事例数が減少し，そこから生成される規則の精度が低下することが予想される．
この傾向は，事例数1万件の場合(表2)において，構造規則の精度が，後に生成される規則ほど低下していることからも観察される．
そこで，ここでは，規則の生成に使用した事例を捨てないで，各次元の規則を生成する方法(「同時型生成」と呼ぶ)について実験を行った．
ただし，この方法では，一つの事例が異なる次元や異なるタイプの規則の生成で，クラスの異なった規則の生成に使用される可能性があるので，ここでは，得られた構造規則を使用して係り受け解析を行う場合，同次元内の構造規則で適用可能なものはすべて使用することとした．
従って，解析では，異なった規則の適用によって異なった係り受け結果が得られる場合が生じる．
そこで，係り受け解析においては，以下の方法で係り先を決定した．
＜係り受け解析の手順＞
係り受け解析規則は，一次元規則，二次元規則，三次元規則の順に適用する．
同次元内の複数の規則が適用され異なる係り先が得られた場合は，その次元での判定は保留し，次の次元での結果に従う．
実験の結果を表4と表5に示す．
これらの結果を「逐次型生成」の場合の結果(表1)と比較すると，以下のことが分かる．
「同時型生成法」で生成された規則は，一次元規則，二次元規則に比べて，三次元規則の精度が若干悪いが，「逐次型生成」(表2)の場合と比べるとかなり向上している．
規則のカバー率は，三次元規則が最大[MATH]で，次元が下がるにつれて，低下する．
これらの結果，「逐次型生成」に比べて，「同時型生成」では，規則全体のカバー率が，[MATH]から[MATH]に向上し，解析正解率は，[MATH]から[MATH]に向上している．
しかし，「同時型生成法」で生成された規則数は，「逐次型生成法」の場合(1,815件)に比べてから，約3倍(5,528件)に増大している．
これより，事例数1万件を使用したとき，「同時型生成法」は，「逐次型生成法」に比べて，カバー率が約[MATH]向上し，解析精度は，[MATH]向上することが分かる．
しかし，その代わりに生成される規則規則数は，ほぼ3倍に増加していることを考えると．
事例数の少ないときに使用するのが適切と思われる．
表1で示されるように，実験では，学習事例に含まれる名詞の種類は，異なり意味属性数から見て，半分弱に止まっており，決して，網羅的とは言えないが，得られた構造規則のカバー率は，表2に示されるように89.8%に上っている．
このことから，本方式では，比較的少ない事例から，カバー率の高い構造規則が得られることが分かる．
次に，得られた構造規則の数と精度について見ると，表2の結果では，意味属性を使用した構造規則として，名詞句の事例1万件から1,815件の係り受け構造規則が得られている．
本方式では，意味属性によって表現構造とクラスの関係が規定できる事例から構造規則は生成され，それ以外の事例は，字面のままの規則として残されるから，得られた構造規則において，元の事例の持つ情報量は失われない．
従って，用例翻訳(長尾1984;佐藤1992)など，用例そのものを使用する方法に比べ，精度を落とすことなく，言語知識を[MATH]以下に圧縮する効果が期待できる，また，本方式で得られた構造規則は，意味属性番号や文法属性番号を意味属性名や文法属性名に書き換えると，可読性が高いから，人手によってさらに圧縮できる可能性がある．
ところで，最近の記憶装置の価格を考えると，実用上，規則数が多少多いことはあまり問題にならなくなってきた．
これに対して，すでに述べたように，言語表現はきわめて多彩であり，構造的，意味的な曖昧性を解消するための知識を人手によって集積するのは，依然として，大変困難な課題である．
本論文で提案した方法は，比較的少量の標本から，表現とその解釈に関する精度の良い構造知識を手軽に収集できる方法として，実用性が高いと期待できる．
一般に，精度良い規則を得るには，事例数の多いところから構造規則を生成するのが望ましいが，実験では，一次元規則と二次元規則は，事例数が2以上のところから規則を生成し，三次元規則は，事例が1つしかない意味属性の組からも構造規則を生成した．
これは，三次元規則の生成で，頻度2以上の事例から生成した規則より，頻度1以上の事例から生成した規則の方が全体として解析精度が良かったためである．
しかし，表2では，一次元規則が使用される回数は，1規則あたり10回近くになるのに対して，二次元規則は4〜5回，三次元規則は3回程度と，順に使用回数が減少している．
この点から見ると，低次元の規則は．
より多くの事例のあるところから生成する方が適切と考えられる．
従って，標本数がより多い場合は，事例数の多いところからのみ規則を生成するようにすれば，より精度の良い規則が得られるものと期待される．
