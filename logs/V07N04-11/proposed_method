従来の研究\label{sec:従来の研究}

文節まとめあげに関する従来の研究は，人手により文節まとめあげの規則を書き下す方法と，大規模コーパスから機械学習により得た統計情報を利用する方法の2種類に大きく分けられる．
これらの手法について以下で説明する．


\subsection{人手規則による文節まとめあげ}

人手により作成した文節まとめあげの規則を利用する最もよく知られているツールに，knpがある．
knpは文節に関する規則を人手で網羅することにより，99\%以上という非常に高精度な文節まとめあげを実現している．
knpの文節まとめあげの規則は906行のファイルに148種類の規則が記述されている
\footnote{
  knpは係り受け解析ツールであるが，係り受け解析の前に文節まとめあげを行っているため，その部分だけの数値を利用した．
  }
．
knpへの入力は形態素解析ツールjuman
\cite{juman3.5}
の出力に限定されており，文節まとめあげの規則もその形式に基づいて作成されている．
そのため，juman以外の形態素解析ツールの出力形式で利用するためには，規則をすべて書き直す必要がある．
人手規則による文節まとめあげは，このように多数の規則を人手で修正・追加を繰り返さなければならず，大きな労力が必要という問題がある．

しかしながら，車載情報機器の形態素解析部の出力形式はそれぞれ機種によって異なり，knpを車載情報機器に実装するためには規則をすべて書き直さなければならず，規則の保守管理も容易ではないため，問題が大きい．


\subsection{機械学習による文節まとめあげ}\label{subsec:機械学習手法}

人手規則による文節まとめあげの持つ問題に対処でき，最近最も盛んに研究されているのが，大規模コーパスから機械学習により得た統計情報を利用して文節まとめあげを行う手法である
\cite{Zhang1998,Asahara1999,Murata2000}
．
機械学習による手法は，大規模コーパスから文節区切りの規則を学習し，それにより文節まとめあげを行う．
そのため人手により規則を保守管理する必要がなく，また形態素解析ツールの出力形式に依存しないという利点がある
．

ただし機械学習の手法でも，学習用のコーパスを準備するという労力は必要である．
しかし，京大コーパス
\cite{KyotoCorpus}
などの大規模コーパスの構文情報を，形態素解析ツールの各出力形式に変換するのは，文節区切りの情報だけに限定するため容易である．
また人手により規則を作成する場合，プログラミングの専門的な知識が必要であるうえ，規則を改良するためには多くの試行錯誤が必要となる．
それに対し，コーパスの作成を行う場合は，コーパスの原文を形態素解析した結果がほぼ100\%に近い精度であり，それを文節に区切るだけでコーパスが得られるので特別に専門的知識は必要ない．
また，単にコーパスの量を増やすだけで精度を向上させることができる．
これらのことから，機械学習の手法は必要な労力が少ないといえる．

機械学習を用いる文節まとめあげには様々な種類があるが，これまでに最も精度の高い結果を得ているのが，村田らによる研究である
\cite{Murata2000}
．
村田らは，決定リストを用いた文節まとめあげの手法に排反な規則を組み合わせた手法を提案している．

決定リストは，規則をある優先順位を決めて1次元に並べたリストのことである．
そしてそのリストを順に探索して一番最初に適用された規則のみを用いて解析を行う手法である．
決定リストの要素としてよく用いられるのは，大規模コーパスから学習した結果であり，それを並べる優先順位としては確率が主に用いられる．

例えば，図\ref{fig:決定リスト}のような決定リストにより，「うまく, 日本語, 文, を, 解析, する, ．」という形態素解析済みの文を処理する方法について考える．
「うまく(形容詞)」と「日本語(名詞)」という情報から，「うまく」＋「日本語」という規則が最初に適用されるため，この部分は「文節に区切る」と決定される．
リストの下位に「形容詞」＋「名詞」は「文節に区切らない」という規則があるが，決定リストはリストの上位の要素から適用するため，この規則は無視される．

\begin{figure}
  \begin{center}
    \begin{tabular}{r@{ }c@{ }l|c|c}
      \multicolumn{3}{c|}{規則} & 確率 & 文節区切り\\
      \hline
      「うまく」 & ＋ & 「日本語」 & 100\% & 区切る\\
      「うまい」 & ＋ & 「日本語」 &  95\% & 区切らない\\
      & $\vdots$ & & $\vdots$ & $\vdots$\\
      「形容詞」 & ＋ & 「名詞」   &  70\% & 区切らない\\
      & $\vdots$ & & $\vdots$ & $\vdots$\\
    \end{tabular}
    \caption{決定リストの例}
    
    
    
    \label{fig:決定リスト}
  \end{center}
\end{figure}

村田らの手法は，文節に区切るあるいは区切らない確率が100\%である規則を排反な規則と呼び，決定リストの手法に排反な規則を組み合わせて文節まとめあげを行う．
確率が100\%でない規則を適用するのは，あらかじめ誤る可能性のあるものを利用するということになるため，高い精度を望むことができない．
そのため排反な規則を重要視しなければならない，と主張している．
図\ref{fig:村田手法}のような前後4つの形態素の4種類の情報を152種類組み合わせて，それにより決定リストを作成する．
決定リストの要素を並べる順序は，まず確率でソートして，同じ確率のものは頻度順にソートする．

\begin{figure}
  \begin{center}
    \begin{tabular}{cccc}
      二つ前 & 一つ前  & 一つ後 & 二つ後\\
      \hline
            & 情報A & 情報A &\\
      情報A & 情報B & 情報B & 情報A\\
      情報B & 情報C & 情報C & 情報B\\
            & 情報D & 情報D &\\
    \end{tabular}

    素性 
    $ \cdots ~~ \left(
      \begin{array}{ll}
        情報A: & 品詞\\
        情報B: & 品詞＋品詞細分類\\
        情報C: & 品詞＋品詞細分類＋意味情報\\
        情報D: & 品詞＋品詞細分類＋意味情報＋単語表記\\
      \end{array}
      \right)
    $
    \caption{村田らの手法で用いる情報}
    
    
    
    \label{fig:村田手法}
  \end{center}
\end{figure}

例えば，ある形態素の隙間の文節区切りを決定する時に図\ref{fig:村田リスト}のような規則のパターンが一致して適用可能である場合，決定リストの手法であれば，最初の規則Aが適用されるため「文節に区切らない」と決定される．
しかし規則B，C，Dを見ると，各規則ごとの頻度は規則Aと比べると小さいが，それぞれの頻度を足しあわせると規則Aの頻度よりも大きい．
そのため，規則B，C，Dに従って「文節に区切る」と決定する方が望ましいと考えられる．
このように，排反な規則，つまり確率が100\%となる規則の頻度を足しあわせ，その頻度により文節区切りの決定を行う．

\begin{figure}
  \begin{center}
    \begin{tabular}{cccrrc}
      \hline
      規則  & パターン  &               & 確率 & 頻度 & 文節区切り\\
      \hline
      A & a & $\Rightarrow$ & 100\%  & 34  & 区切らない\\
      B & b & $\Rightarrow$ & 100\%  & 33  & 区切る\\
      C & c & $\Rightarrow$ & 100\%  & 25  & 区切る\\
      D & d & $\Rightarrow$ & 100\%  & 19  & 区切る\\
      E & e & $\Rightarrow$ & 81.3\% & 123 & 区切る\\
      F & f & $\Rightarrow$ & 76.9\% & 13  & 区切る\\
      G & g & $\Rightarrow$ & 57.4\% & 540 & 区切らない\\
      $\vdots$ & $\vdots$\\
    \end{tabular}
    \caption{村田らの手法の説明}
    
    
    
    \label{fig:村田リスト}
  \end{center}
\end{figure}

この手法による文節まとめあげは，最高で99.17\%という高い精度を得ている．
しかしこの手法は，図\ref{fig:村田手法}のような情報の組み合わせが152種類もある．
京大コーパス中のデータは，1文平均約23の形態素の隙間があるため，1つの形態素の隙間に対して152種類の組み合せを考慮すると，1文あたり$152\times23=約3500回$もの処理をしなければならない．
このようにアルゴリズムが複雑なため，新たに車載情報機器に実装するためには長い開発期間を要し，また規則の学習に長い時間を要するため保守管理にも時間がかかり，さらにデータ量が膨大になるなど様々な問題がある．
そのため，車載情報機器には不向きであるといえる．

\ref{sec:文節まとめあげ}章では，これらの問題を解決するために考案した新しい手法について述べる．



