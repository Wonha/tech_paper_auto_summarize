================================================================
[section type  : abstract]
[section title : abstract]
================================================================
[2168] 前者は，長年の努力により非常に高い精度を得られているが，入力データ形式が固定であるために柔軟性に欠け，人手で規則を作成・保守管理するため多大な労力を要し，車載情報機器へ実装するには問題が大きい．

================================================================
[section type  : intro]
[section title : はじめに]
================================================================
[2436] 本研究ではこれらの問題を解決し，従来手法と比べて遜色ない精度を持ち，保守管理が容易でかつ車載情報機器の求める厳しい条件に適した，複数決定リストの順次適用による文節まとめあげという新しい手法を考案した．

================================================================
[section type  : proposed_method]
[section title : 従来の研究]
================================================================
[2013] 文節まとめあげに関する従来の研究は，人手により文節まとめあげの規則を書き下す方法と，大規模コーパスから機械学習により得た統計情報を利用する方法の2種類に大きく分けられる．
-----------------------------------------------------
  [subsection title : 人手規則による文節まとめあげ]
-----------------------------------------------------
  [1894] しかしながら，車載情報機器の形態素解析部の出力形式はそれぞれ機種によって異なり，knpを車載情報機器に実装するためには規則をすべて書き直さなければならず，規則の保守管理も容易ではないため，問題が大きい．
-----------------------------------------------------
  [subsection title : 機械学習による文節まとめあげ]
-----------------------------------------------------
  [2498] 例えば，ある形態素の隙間の文節区切りを決定する時に図[REF_fig:村田リスト]のような規則のパターンが一致して適用可能である場合，決定リストの手法であれば，最初の規則Aが適用されるため「文節に区切らない」と決定される．

================================================================
[section type  : conclusion]
[section title : 本研究の文節まとめあげの手法]
================================================================
[0] 
-----------------------------------------------------
  [subsection title : 複数決定リストの順次適用による文節まとめあげ]
-----------------------------------------------------
  [2288] 文節まとめあげの処理は，村田らと同様に形態素解析済みのテキストに対して行い，形態素の隙間ごとにその前後の形態素の情報からn-gramリストを調べて文節を区切るか区切らないかを決定する処理とした．
-----------------------------------------------------
  [subsection title : n-gramリストの取得方法]
-----------------------------------------------------
  [2087] 京大コーパスにはあらかじめ詳細な形態素の情報と文節区切りの情報が付与されているので，形態素の隙間ごとに文節に区切る数と区切らない数を数えて，それを確率の高い順に並べて保持する．

================================================================
[section type  : experiment_result]
[section title : 実験と考察]
================================================================
[0] 
-----------------------------------------------------
  [subsection title : 実験方法]
-----------------------------------------------------
  [1748] 1.,3.,4.,5.の実験の学習コーパスには，京大コーパスの最初の10000文を利用し，2.の実験には，京大コーパスを最初から1000文ずつ10000文まで変化させて利用した．
-----------------------------------------------------
  [subsection title : 評価基準]
-----------------------------------------------------
  [1995] ここで，[MATH]を評価システムが文節に区切った数，[MATH]をテストコーパスで文節に区切られている数(正解の区切り)，[MATH]を両者の文節区切りが一致している数とする．
-----------------------------------------------------
  [subsection title : 実験結果]
-----------------------------------------------------
  [2621] 本手法は，複数の決定リストを順次適用するというものであるが，これらの複数の決定リストを大きな一つの決定リストにまとめて考えると，n-gramの種類(素性)によりソートしてから確率でソートしたリストと考えることもできる．
-----------------------------------------------------
  [subsection title : 処理速度]
-----------------------------------------------------
  [2342] また評価システムについても同様にアルゴリズムの最適化を全く行わなかったが，[REF_subsubsec:n-gramの数]節の実験に関して，計算機にSun Ultra1 133MHzを，プログラム言語にPerlを用いたところ，4種類のn-gramリストを用いた処理に要した時間は225秒(1文あたり22.6ms)，6種類のn-gramリストの場合には253秒(1文あたり25.4ms)と非常に高速であった．
-----------------------------------------------------
  [subsection title : 実験のまとめ]
-----------------------------------------------------
  [2383] knp2.0b6の精度が非常に高いのは，京大コーパスがknp2.0b4の出力を人手で修正して作成されたものであり，その修正結果をさらにknpの文節まとめあげ規則に反映したためである．
-----------------------------------------------------
  [subsection title : 考察]
-----------------------------------------------------
  [2630] [REF_sec:文節まとめあげ]章で述べたように，本手法では文節に区切るか区切らないか決定できない場合のデフォルト処理を「文節に区切る」としているが，「文節に区切らない」とすると，それぞれの精度は表[REF_tab:n-gram1つ]のようになる．

================================================================
[section type  : conclusion]
[section title : おわりに]
================================================================
[2204] 本研究で提案した文節まとめあげの手法は，車載情報機器の求める条件を満たすよう考案したものであり，複数の決定リストを順次適用して文節の区切りを行うだけ非常に簡明かつ高速である．

