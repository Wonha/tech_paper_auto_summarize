アライメント実験
\label{result}

提案手法の有効性を示すためにアライメント実験を行った．トレーニングコーパ
スとしてJST\footnote{http://www.jst.go.jp/}日英抄録コーパスを用いた．こ
のコーパスは，科学技術振興機構所有の約200万件の日英抄録から，内山・井佐
原の方法\cite{utiyama07:_japan_englis_paten_paral_corpus}により，情報通
信研究機構\footnote{http://www.nict.go.jp/}が作成したものであり，100万対
訳文からなる．このうち475文に人手で正解のアライメントを付与し，正解デー
タとした．ただし，正解データにはSure($S$)アライメントのみが付与されてお
り，Possible($P$)アライメントはない\cite{Och03}．また評価の単位は日本語，
英語とも単語とし，適合率・再現率・F値により精度を求めた．

日本語文に対しては形態素解析器JUMAN \cite{JUMAN}および依存構造解析器
KNP \cite{kawahara-kurohashi:2006:HLT-NAACL06-Main}を用い，英語文に対して
はTsuruokaとTsujiiのPOSタガー\cite{Tsuruoka2005}でPOSタグを付与し，MSTパー
サ\cite{mstparser}を用いて単語の依存構造木に変換する．

またStep 2のパラメータ推定の際に用いるアライメントの数は$n=10$とした．

実験は2種類行った．一つ目は既存の単語列アライメント手法と比較することに
よって提案手法の有効性を示すための実験であり，二つ目は依存構造を利用する
ことと，単語より大きな単位である句を扱うことの効果を示すための実験である．
全ての実験において，各単語は原形に戻した状態でトレーニングを行った．



\subsection{単語列アライメント手法との比較}
\label{exp1}

\begin{table}[b]
  \caption{アライメント実験結果（提案手法と単語列アライメント手法との比較）}
  \label{tab:result}
\input{06table02.txt}
\end{table}

比較実験として，単語列アライメント手法として広く利用されているIBMモデル
を実装したアライメントツールであるGIZA++ \cite{Och03}を用いてアライメント
を行った．各モデルのイタレーション回数などのオプションはデフォルトの設定
をそのまま利用した．さらに各方向のアライメント結果を三つの対称化手法によ
り統合した\cite{koehn-och-marcu:2003:HLTNAACL}．結果を表\ref{tab:result} 
の下部3行に示す．利用した対称化手法は`intersection'，`grow-final-and'，`grow-diag-final-and'の3つである\cite{Koehn_IWSLT05}．


一方，提案手法によるアライメント精度を表\ref{tab:result}の上部に示す．ま
ず`Step 1'に示されているのは，Step 1のイタレーションを5回行った後に学習
されたパラメータ（単語翻訳確率）を用いたアライメントの精度である．なおこ
こでのアライメントは，両方向のパラメータを用いて，\ref{initial_align}章
の初期アライメント生成手法と同様にアライメントを生成した結果である．`Step 2-X'はStep 2 の各イタレーション終了時点でのアライメント精度である．`Step 2-1'は句翻訳確率は`Step 1'のものと同じだが，それに加えて`Step 1'の
アライメント結果から推定した依存関係確率を用いてアライメントを行っている．
つまり，`Step 1' と`Step 2-1'とを比較することにより，依存関係確率を用い
ることによるアライメント精度の向上が見て取れる．以後Step 2のイタレーショ
ンを行い，その都度アライメント精度を計測した．結果として，提案手法では単
語列アライメント手法よりもF値で4.9ポイントのアライメント精度向上を達成し
た（Step 2-7とgrow-diag-final-andとの比較による）．適合率だけを見ると`intersection'が最もよい値を示しているが再現率が極端に低くなっている．ま
た再現率が最も高いのは`grow-diag-final-and'であるが，同程度の再現率を示
している提案手法の結果を見ると，適合率では大きく上回っており，総合的に見
て提案手法は単語列アライメント手法よりも優れているということができる．な
おF値はStep 2-7が最も高い値を示したが，Step 2-5から2-7までは大差ないこと
と，RecallよりもPrecisionが高い方が翻訳での利用を考えた際には有利であり，
イタレーションが進むに連れPrecisionが低下していくことを考慮して，Step
2-5 の結果に注目することにする．

次に，機能語に関する簡単なルールを人手により作成し，最終的なアライメント
結果の修正を行った．用いたルールは以下の3つである：
\begin{itemize}
 \item 英語の冠詞はその係り先のノード（普通は名詞）に併合する
 \item 日本語の助詞と英語の`be'や`have'との間に対応がある場合，それらは
       棄却する
 \item 日本語の‘する’，‘れる’，英語の`be'，`have'がNULLに対応している場
       合，その係り先の動詞や形容詞のノードに併合する
\end{itemize}
これらのルールをStep 2-5の結果に適用することにより，F値は70.76に向上し，
単語列アライメントよりも8.5ポイント高いF値を達成した（表\ref{tab:result} 
のStep 2-5 + rule）．なお，以後の考察ではルールなしのStep 2-5の結果を検討
する．




\subsection{依存構造と句を扱うことの有効性}
\label{exp2}

依存構造木を用いることと，単語より大きな句という単位を用いることの有効性
を示すための実験を行った．実験の条件として以下の4通りを採用した：
\begin{itemize}
 \item 依存構造木と句のどちらも用いる（結果の‘提案手法’）
 \item 依存構造木のみを利用し，句は用いない
 \item 依存構造木は利用せず，句のみを用いる
 \item 依存構造木と句のどちらも利用しない（結果の‘ベースライン’）
\end{itemize}
なお依存構造木を用いない実験においては，単語の依存関係ではなく相対位置の
情報を用いた．例えば原言語側で連続している一組の対応のそれぞれの対応先が
前，又は後ろに何単語（もしくは句）離れているかをモデル化した．実験結果を表
\ref{tab:effectiveness_result}に示す．全ての実験条件において，示した結果
はStep 2で5回イタレーションを行った後のアライメント結果での評価である．

\begin{table}[t]
  \hangcaption{依存構造木および句を利用することの効果（Step 2での5回のイタレーション後のアライメント精度）}
  \label{tab:effectiveness_result}
\input{06table03.txt}
\end{table}

この結果から，句を扱うことは再現率の向上につながり，依存構造木を利用する
ことは適合率の向上につながることがわかり，両方を用いることにより，適合率・
再現率ともにバランスよく高い精度を達成することができると言える．




