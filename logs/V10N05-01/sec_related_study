生成規則([MATH])に対し右辺記号列([MATH])中のある位置にドット`・'を付けたデータ構造([MATH],ただし[MATH])は，項(Item)と呼ばれ，構文解析中に規則のどこまで解析が進んだかを表すために，本稿で述べたLR項の他，Earley法[CITE]やチャート法[CITE]など，種々の構文解析アルゴリズムで共通に利用されている．
本稿で示した手法は，LR法においてItem以降の解析がドットの左側(右辺記号列のprefix，[MATH])には依存しないことを利用し，ドットの右側の記号列(右辺記号列のsuffix，[MATH])が共通なものをまとめあげることによって，LR表の圧縮を実現したと考えることができる．
同様に，Itemのドット左右の記号列について複数の規則の間で共通する記号列をまとめて処理することによる，解析の効率化手法が知られている．
本稿の提案法のように，ドットの右側の記号列([MATH])が共通なItemをまとめて扱う手法が提案されている．
文献[CITE]では，Earley法においてItem以降の解析がドットの右側の記号列([MATH])のみに依存し，ドットの左側([MATH])や生成規則左辺の記号([MATH])には依存しないことを利用して，これらを重複処理しないことによる効率化手法が示されている．
文献[CITE]では，同様の手法をチャート法に適用している．
逆に，ドットの左側の記号列([MATH])が共通なItemをまとめて処理する手法としては，LR法が挙げられる．
LR法では，共通なprefixを持つ複数のItemをまとめて解析の一状態とするようにLR表を作成することで，解析の効率化を実現している．
文献[CITE]では，この考え方を進めて，共通のprefixをもつ規則をすべてまとめて処理する手法が示されている．
また，共通したprefixを持つ2つ以上の規則を持たないように文法を変形することによって効率化を行なう手法も提案されている[CITE]．
本稿の提案法2では，ドット左側の記号数情報を捨象した可変長LR項の導入のため，reduce動作時にスタックからポップする記号数を動的に求める必要があった．
そのために，GOTO手続きを規則の解析開始か途中かによって別々に計算する手法を示した．
同様の考え方は，規則の右辺に記号の正規表現を許した拡張CFG(正規右辺文法)を扱うLR構文解析法として提案されている[CITE]．
正規右辺文法では，規則の右辺に合致する記号数を予め知ることができないので，解析時に動的に求める必要があるためである．
生成規則([MATH])に対し右辺記号列([MATH])中のある位置にドット`・'を付けたデータ構造([MATH],ただし[MATH])は，項(Item)と呼ばれ，構文解析中に規則のどこまで解析が進んだかを表すために，本稿で述べたLR項の他，Earley法[CITE]やチャート法[CITE]など，種々の構文解析アルゴリズムで共通に利用されている．
本稿で示した手法は，LR法においてItem以降の解析がドットの左側(右辺記号列のprefix，[MATH])には依存しないことを利用し，ドットの右側の記号列(右辺記号列のsuffix，[MATH])が共通なものをまとめあげることによって，LR表の圧縮を実現したと考えることができる．
同様に，Itemのドット左右の記号列について複数の規則の間で共通する記号列をまとめて処理することによる，解析の効率化手法が知られている．
本稿の提案法のように，ドットの右側の記号列([MATH])が共通なItemをまとめて扱う手法が提案されている．
文献[CITE]では，Earley法においてItem以降の解析がドットの右側の記号列([MATH])のみに依存し，ドットの左側([MATH])や生成規則左辺の記号([MATH])には依存しないことを利用して，これらを重複処理しないことによる効率化手法が示されている．
文献[CITE]では，同様の手法をチャート法に適用している．
逆に，ドットの左側の記号列([MATH])が共通なItemをまとめて処理する手法としては，LR法が挙げられる．
LR法では，共通なprefixを持つ複数のItemをまとめて解析の一状態とするようにLR表を作成することで，解析の効率化を実現している．
文献[CITE]では，この考え方を進めて，共通のprefixをもつ規則をすべてまとめて処理する手法が示されている．
また，共通したprefixを持つ2つ以上の規則を持たないように文法を変形することによって効率化を行なう手法も提案されている[CITE]．
本稿の提案法2では，ドット左側の記号数情報を捨象した可変長LR項の導入のため，reduce動作時にスタックからポップする記号数を動的に求める必要があった．
そのために，GOTO手続きを規則の解析開始か途中かによって別々に計算する手法を示した．
同様の考え方は，規則の右辺に記号の正規表現を許した拡張CFG(正規右辺文法)を扱うLR構文解析法として提案されている[CITE]．
正規右辺文法では，規則の右辺に合致する記号数を予め知ることができないので，解析時に動的に求める必要があるためである．
