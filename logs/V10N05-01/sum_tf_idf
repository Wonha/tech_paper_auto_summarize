================================================================
[section type  : abstract]
[section title : abstract]
================================================================
[i:0, score:0.53052] LR構文解析法で利用するLR解析表のサイズを削減する新規の手法を提案する．
[i:1, score:0.55354] 提案法は，(1)従来のLR表縮小方法と同時に適用可能，(2)提案法によって作成されたLR表は従来のLR構文解析アルゴリズムでほぼそのまま利用可能，(3)解析結果や解析効率に影響を与えない，といった特徴を持つ．
[i:2, score:0.56710] 提案法を実際の自然言語処理用文法に適用したところ，元の文法のサイズによって，約60 %程度から，25 %程度まで，LR表が圧縮されることを確認した．

================================================================
[section type  : intro]
[section title : はじめに]
================================================================
[i:17, score:0.55296] 両者のバランスを取るLR表として，サイズを小さく押えつつ扱える文法の範囲をそこそこ広くとれる，LALR(Look Ahead LR)表が提案されている．
[i:24, score:0.57660] 田中らは，文脈自由文法と単語連接の制約を切り放して記述しておき，LRテーブル作成時に2つの制約を導入する手法(MSLR法)[CITE]を用いることで，単独の文脈自由文法を記述するより解析表のサイズを小さくすることができたと報告している[CITE]．
[i:31, score:0.56343] 提案法は従来の手法と異なり，LR表作成アルゴリズムの再検討を行い，解析に不要な情報を捨象することによって，表の圧縮を実現する．

================================================================
[section type  : proposed_method]
[section title : LR解析表の圧縮]
================================================================
[i:43, score:0.51258] 本稿で提案するLR解析表の圧縮方法について，その原理と性質について述べる．
-----------------------------------------------------
  [subsection title : 提案法の基本原理]
-----------------------------------------------------
  [i:lead, score:0.55861] LR構文解析法は，LR表と，スタック，先読み語を参照し，次の動作を決定する．
.....
  [i:48, score:0.69580] LR項とは，ある生成規則(CFG規則)の右辺の記号列中のある位置にドット`・'を付けたデータ構造である．
  [i:63, score:0.65653] そこで，LR項が表す解析状態で，スタックトップからいくつの記号がこの規則で解析中かという情報を保持しなければならない．
  [i:64, score:0.67159] 以上のことから，従来のLR項のドットの左側の記号列を抽象化して，その記号の個数で置き換え，新しいLR項とする．
-----------------------------------------------------
  [subsection title : 圧縮LR表作成アルゴリズム]
-----------------------------------------------------
  [i:lead, score:0.58583] LR表作成アルゴリズムは，従来のLR項の代わりに，上記の左方抽象化LR項を用いても，新たな処理を加えること無く若干の修正だけで適用できる．
.....
  [i:82, score:0.72620] ) [クロージャ]，[GOTO手続き]，[LR項集合の集合]では，LR項のドットの左側を参照する手続きが存在しないので，左方抽象化LR項を用いて，ほぼそのまま，「LR項集合の集合」を作成できる．
  [i:89, score:0.65740] [MATH]中の，ドットのすぐ右が[MATH]である全てのLR項[MATH]に対し，LR項[MATH]を求め，そのクロージャを返す．
  [i:94, score:0.66692] このように，修正手続きで作成されるLR表では，reduce動作の引数には生成規則のうち，左辺の記号列の記号情報を捨象した一部の情報しか記述されない．
-----------------------------------------------------
  [subsection title : 提案法の適用例]
-----------------------------------------------------
  [i:lead, score:0.01771] 日本語において，動詞の格を表す句は，語順が自由であり，任意に省略可能であることが多い．
.....
  [i:102, score:0.32956] この文法から，従来の表作成アルゴリズムと，提案法による表作成アルゴリズムによってつくられたGOTOグラフの一部(記号`S'を左辺に持つ規則の集合に相当する部分)を，それぞれ図[REF_fig:goto]，図[REF_fig:r_goto]に示す．
  [i:103, score:0.22998] 従来法では，規則右辺に現れる記号列の文脈によって異なる状態が作成されるため，木の形に分岐したグラフが作成される．
  [i:104, score:0.16546] 一方提案法では，記号列の文脈によらずに後方部分がマージされたグラフが作成され，状態数が32から12へ大幅に減少することが分かる．
-----------------------------------------------------
  [subsection title : 提案法の効果と解析効率]
-----------------------------------------------------
  [i:lead, score:0.04046] 提案法の効果と効率について，その性質を考察する．
.....
  [i:106, score:0.68138] LR項においてドットより左方の記号列が記号数へと抽象化されることにより，従来異なるLR項として認識された以下のような2つのLR項が，同一のLR項として認識されることになる．
  [i:109, score:0.55709] すなわち，「LR項集合の集合」作成時に，従来異なる状態(LR項集合)となっていたものが，1つの状態にマージされることになる．
  [i:123, score:0.72524] 提案法によって状態の統合が行われた場合，統合後の状態(クロージャ)は以前の状態と同数のLR項を持ち，それぞれのLR項のこれから解析する部分(ドットの右側の記号情報)も等しい．

================================================================
[section type  : experiment_result]
[section title : 実装と実験]
================================================================
[i:125, score:0.00000] 
-----------------------------------------------------
  [subsection title : 実装]
-----------------------------------------------------
  [i:lead, score:0.52337] 提案法を実装するには，LR表作成プログラム，構文解析プログラムの修正が必要となる．
.....
  [i:131, score:0.64540] 一方，圧縮LR表では，生成規則から右辺の記号情報を捨象した情報，すなわち「左辺記号と右辺の記号数」(へのポインタ)である．
  [i:136, score:0.68651] 左方抽象化LR項は，文法に現れない記号[MATH]を[MATH]個ドットの左に書くことでも表現できる．
  [i:140, score:0.71654] GOTO手続きにおいて，LR項のドットを右へ一つ移動する時に，飛び越えた記号を[MATH]で置き換えるように変更するだけで，従来法に組み込むことができる．
-----------------------------------------------------
  [subsection title : 実験]
-----------------------------------------------------
  [i:lead, score:0.53650] 提案法の効果を調べるため，3種類の文法から従来法と提案法1でLR表を作成し，表のサイズを比較した．
.....
  [i:145, score:0.53650] 提案法の効果を調べるため，3種類の文法から従来法と提案法1でLR表を作成し，表のサイズを比較した．
  [i:146, score:0.53171] 比較には，LR表(およびGOTOグラフの)状態数，表中の空欄でないセルの数を表すエントリ数，を用いた．
  [i:156, score:0.54816] LR表のサイズは，「道案内1」「道案内2」に関しては約60 %前後に，「旅行会話」に関しては約1/4まで圧縮することができた．

================================================================
[section type  : proposed_method]
[section title : 更なる圧縮のための改良手法]
================================================================
[i:159, score:0.28796] [REF_ss:quality]節で述べたように，(1)規則左辺の記号が同じ，(2)右辺の接尾部分が共通，(3)右辺の記号数が同じ，の3条件を満たす規則の組が文法中に多く現れるほど，提案法の効果は大きい．
[i:160, score:0.12239] このうち，(3)右辺記号数の条件は，改善の余地がある．
[i:161, score:0.01152] 本節では，この条件を克服するための拡張方法について述べる．
-----------------------------------------------------
  [subsection title : 可変長LR項]
-----------------------------------------------------
  [i:lead, score:0.35498] ドットの左側に記号数が必要なのは，reduce動作時にスタックからポップする要素数を記録するためである．
.....
  [i:175, score:0.73723] 注意すべきなのは，ある状態(クロージャ)に，ドットのすぐ右の記号が同じで，ドットが最左のものと規則途中にあるものの，2つ以上のLR項が含まれている場合があることである．
  [i:180, score:0.69096] このように変更したGOTOグラフでは，もはやLR項にドット左の記号数は必要ない．
  [i:185, score:0.71991] このようなLR項を用いることで，ドット左方の記号列に関する情報がさらに抽象化され，GOTOグラフ作成時の状態数がさらに減少することが期待できる．
-----------------------------------------------------
  [subsection title : 実験]
-----------------------------------------------------
  [i:lead, score:0.50978] [REF_sec:exp1]節で用いた3種類の文法から，提案法2を用いてLR表を作成した．
.....
  [i:202, score:0.50978] [REF_sec:exp1]節で用いた3種類の文法から，提案法2を用いてLR表を作成した．
  [i:204, score:0.49703] LR表のサイズをさらに10 %程度縮小できることを確認した．
  [i:205, score:0.09549] また，音声認識システムniNja[CITE]に提案法2の解析アルゴリズムを実装し，従来法と同じ解析結果が得られることを確認した．

================================================================
[section type  : related_study]
[section title : 関連研究]
================================================================
[i:206, score:0.00000] 
-----------------------------------------------------
  [subsection title : 共通記号列のまとめ処理]
-----------------------------------------------------
  [i:lead, score:0.76403] 生成規則([MATH])に対し右辺記号列([MATH])中のある位置にドット`・'を付けたデータ構造([MATH],ただし[MATH])は，項(Item)と呼ばれ，構文解析中に規則のどこまで解析が進んだかを表すために，本稿で述べたLR項の他，Earley法[CITE]やチャート法[CITE]など，種々の構文解析アルゴリズムで共通に利用されている．
.....
  [i:207, score:0.76403] 生成規則([MATH])に対し右辺記号列([MATH])中のある位置にドット`・'を付けたデータ構造([MATH],ただし[MATH])は，項(Item)と呼ばれ，構文解析中に規則のどこまで解析が進んだかを表すために，本稿で述べたLR項の他，Earley法[CITE]やチャート法[CITE]など，種々の構文解析アルゴリズムで共通に利用されている．
  [i:208, score:0.73128] 本稿で示した手法は，LR法においてItem以降の解析がドットの左側(右辺記号列のprefix，[MATH])には依存しないことを利用し，ドットの右側の記号列(右辺記号列のsuffix，[MATH])が共通なものをまとめあげることによって，LR表の圧縮を実現したと考えることができる．
  [i:213, score:0.65873] 逆に，ドットの左側の記号列([MATH])が共通なItemをまとめて処理する手法としては，LR法が挙げられる．
-----------------------------------------------------
  [subsection title : 可変な規則長の扱い]
-----------------------------------------------------
  [i:lead, score:0.75958] 本稿の提案法2では，ドット左側の記号数情報を捨象した可変長LR項の導入のため，reduce動作時にスタックからポップする記号数を動的に求める必要があった．
.....
  [i:217, score:0.75958] 本稿の提案法2では，ドット左側の記号数情報を捨象した可変長LR項の導入のため，reduce動作時にスタックからポップする記号数を動的に求める必要があった．
  [i:219, score:0.62995] 同様の考え方は，規則の右辺に記号の正規表現を許した拡張CFG(正規右辺文法)を扱うLR構文解析法として提案されている[CITE]．
  [i:220, score:0.21276] 正規右辺文法では，規則の右辺に合致する記号数を予め知ることができないので，解析時に動的に求める必要があるためである．

================================================================
[section type  : conclusion]
[section title : 結論]
================================================================
[i:221, score:0.62372] 解析に使用するLR表の大きさが問題であったLR構文解析法について，表作成に用いられる基本データ構造(LR項)の見直しを行うことにより，LR表の状態数を減少させ，サイズを圧縮する手法について述べた．
[i:223, score:0.53696] 提案法は，従来のLR表作成アルゴリズム，解析アルゴリズムに大きく手を加えることなく実装可能であるとともに，解析効率に影響を与えることもない．
[i:226, score:0.58486] 本研究により，これまで解析表のサイズの問題でLR法の適用が困難であった分野，例えば大規模な文法を用いた自然言語処理や音声認識，また計算資源(記憶容量)に制限がある環境(例えば，モバイル用途)での使用などにおいて，効率の良いLR法を適用する機会が増えると考えられる．

