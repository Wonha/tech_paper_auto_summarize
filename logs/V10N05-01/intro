はじめに

LR構文解析法は，構文解析アルゴリズムとして最も効率の良い手法の一つであ
る．LR構文解析法の中でも，横型探索で非決定的解析を行うことにより文脈自
由言語の扱いを可能にした方法は一般化LR法(GLR法)と呼ばれ，自然言語処理
および，音声認識で利用されている．また，LR法の構文解析過程に確率を割り
当てることで，確率言語モデルを得ることができる．確率一般化LR(PGLR)モデ
ル\cite{inui1998}，およびその一般化であるAPGLRモデル\cite{akiba2001}は，
構文解析結果の構文木の曖昧性解消や，音声認識の確率言語モデル
\cite{nagai1994,imai1999,akiba2001}として利用されている．

LR構文解析法では，文法が与えられた時点であらかじめ計算できる解析過程を
先に求め，LR解析表(以下，LR表)で表しておき，文解析時に利用する．LR法は，
言わば，空間効率を犠牲にする(LR表を作成する)ことによって，解析時間の効
率化を実現する手法である．LR法を実際の問題に適用する場合の問題点の一つ
は，文法の規則数増加に伴うLR表のサイズの増大である．計算機言語の解析
\cite{aho1986}，自然言語の解析\cite{luk2000}，音声認識\cite{nagai1994}，
それぞれの立場からこの問題点が指摘されている．

LR表のサイズを押えるひとつの方法は，解析効率を犠牲にして空間効率をある
程度に押える方法である．本来LR法が利用されていた計算機言語用の構文解析
においては，LR法は決定的解析器として利用されてきた．決定的解析としての
LR法が扱える文法は，文脈自由文法のサブセットである．LR表は，その作り方
から幾つかの種類に分類されるが，それらは決定的解析で扱える言語に違いが
ある．単純LR(Simple LR; SLR)表は，作り方が単純で表サイズを小さく押えら
れるが扱える文法の範囲が狭い．正準LR(Cannonical LR; CLR)表は，サイズは
非常に大きくなるが扱える文法の範囲は最も広い．両者のバランスを取るLR表
として，サイズを小さく押えつつ扱える文法の範囲をそこそこ広くとれる，
LALR(Look Ahead LR)表が提案されている．一方，文脈自由文法を扱う自然言
語処理でLR表を利用する場合は，非決定的解析として利用するのが普通である．
決定的解析で扱える言語の大きさは，非決定的解析での解析効率に相当する．
すなわち，SLR, LALR, CLRの順に効率は良くなるが，それに伴い表のサイズは増
大する．

また，計算機言語に用いるLR表のサイズ圧縮手法には，2次元配列としてのス
パースな表をいかに効率よく圧縮するかという視点のものも多い．これらは，
作成後の表を表現するデータ構造に工夫を行ったもので，表自体が運ぶ情報に
は違いがない．自然言語処理の分野でも，解析表縮小の手法が提案されている．
田中らは，文脈自由文法と単語連接の制約を切り放して記述しておき，LRテー
ブル作成時に2つの制約を導入する手法(MSLR法)\cite{tanaka1995}を用いるこ
とで，単独の文脈自由文法を記述するより解析表のサイズを小さくすることが
できたと報告している\cite{tanaka1997}．Lukらは，文法を小さな部分に分割
して，それぞれを扱うパーザを組み合わせることで，解析表のサイズを押える
方法を提案している\cite{luk2000}．

以上の従来手法をまとめると，次の3つの手法に分類できる．
\begin{enumerate}
\item 処理効率を犠牲にして空間効率を稼ぐ方法．
\item 表のデータ構造を工夫して記憶量を引き下げる方法．
\item 文法の記述方法を工夫してより小さな表を導出する方法．
\end{enumerate}

本稿では，LR表のサイズを圧縮する，上記の3分類には当てはまらない新規の
手法を提案する．提案法は従来の手法と異なり，LR表作成アルゴリズムの再検
討を行い，解析に不要な情報を捨象することによって，表の圧縮を実現する．
本手法は，次のような特徴を持つ．(1)上記の従来の縮小手法とは手法の軸が
異なるため，どの手法とも同時に適用可能である\footnote{ただし，MSLR法
  \cite{tanaka1995}との同時適用には，表作成に若干の修正が必要である．
  MSLR法では，提案法で解析に不要とする情報の一部を利用しているためであ
  る．MSLR法への対応方法ついては，付録.Bで述べる．}．(2)入力文の構
文木を得るという自然言語処理用途において，提案法は解析時の効率に影響を
あたえることはない\footnote{計算機言語の構文解析では，解析時に規則に付
  随するアクション(プログラム)を実行することが要求される．提案法による
  圧縮LR表では適用されるCFG規則は解析時に動的に求まるので，規則から付
  随するアクションを検索する処理の分オーバーヘッドが生じる．入力文から
  構文木を得ることを目的とする自然言語処理用途では，このオーバーヘッド
  は生じない．}．(3)従来の表作成および解析アルゴリズムへの変更個所は小
さく，プログラムの軽微な修正で適用可能である．特に，提案法によって作成
された圧縮LR表は，既存のLR構文解析プログラムでほぼそのまま利用可能であ
る．

本稿の構成は以下の通りである．まず\ref{ss:base}節で，提案法の基本原理
を説明する．また，提案法の性質を考察する．続く\ref{ss:experiment}節で
は，提案法の実装方法と，実際の文法に提案手法を適用した実験結果を示す．
\ref{ss:extension}節では，提案手法の限界を克服するための拡張方法につい
て述べ，実際の文法に適用した結果を報告する．\ref{ss:related}節では，
関連研究について述べる．

