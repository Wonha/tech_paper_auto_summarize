提案法を実装するには，LR表作成プログラム，構文解析プログラムの修正が必要となる．
しかし以下に示す通り，既存の処理系のわずかな個所の修正で実装可能である．
圧縮LR表では，従来のLR表と比べ，唯一reduce動作の引数の意味が変更になる．
従来のLR表では，reduce動作の引数には生成規則を指定する．
実際には，規則へのポインタ(規則番号)が記述される．
一方，圧縮LR表では，生成規則から右辺の記号情報を捨象した情報，すなわち「左辺記号と右辺の記号数」(へのポインタ)である．
あらかじめ存在する生成規則のリストとは異なり，「左辺記号と右辺の記号数」のリストは表作成のために新規に導入する概念である．
厳密に実装するならば，LR表作成プログラムでこのリストを新規に作成し，構文解析プログラムとの間でこのリストを共有しなければならない．
しかし，「左辺記号と右辺の記号数」は生成規則の一部であることを利用して，reduceの引数に「左辺記号と右辺の記号数」の条件を満たす任意の規則番号を記述し代用することで，リストの受け渡しを避けることが可能である．
提案法で用いる左方抽象化LR項は，次のような方法によって，既存のLR表作成プログラムに比較的容易に導入することが可能である．
左方抽象化LR項は，文法に現れない記号[MATH]を[MATH]個ドットの左に書くことでも表現できる．
例えば，[MATH]とすると，次のように書ける．
[MATH]
このようなLR項表現は，従来のLR項と容易に交換可能である．
GOTO手続きにおいて，LR項のドットを右へ一つ移動する時に，飛び越えた記号を[MATH]で置き換えるように変更するだけで，従来法に組み込むことができる．
「左辺記号と右辺の記号数」リストの参照を除けば，圧縮LR表は，従来のLR構文解析アルゴリズムでそのまま利用可能である．
また多くの実装系では，読み込んだ規則集合のうち，実際の解析に利用する「左辺記号と右辺の記号数」だけを保持するものが多いため，提案法の実装は極めて容易である．
実際，MSLRパーザ[CITE]では，LR表読み込み部分の若干の修正で動作可能となった．
また，LR法を利用した音声認識システムniNja[CITE]では，全く修正の必要はなくそのまま動作可能であった．
提案法の効果を調べるため，3種類の文法から従来法と提案法1でLR表を作成し，表のサイズを比較した．
比較には，LR表(およびGOTOグラフの)状態数，表中の空欄でないセルの数を表すエントリ数，を用いた．
文法「道案内1」「道案内2」は，道案内対話[CITE]に現れるユーザの発話をモデル化した文法で，音声認識用に設計された[CITE]．
語彙サイズはどちらも約380，規則数はそれぞれ616，1302である．
「道案内2」は，「道案内1」に比べて，意味的に整合性のある文だけを受理するように，より強い制約を加えた文法である．
文法「旅行会話」は，ATR研究用自然発話音声データベース[CITE]旅行会話タスクの発話を受理するように記述した文法である[CITE]．
語彙サイズは2839，規則数3971と，文法1,2に比べて大規模な文法である．
また，自然言語処理用途に開発されており，入力文に対して構文的に可能な数多くの構文木を割り当てる．
提案法1でLR表を作成し，その性質を調べた．
結果を表[REF_tbl:state]に示す．
すべての文法について，LR表圧縮の効果が得られていることがわかる．
LR表のサイズは，「道案内1」「道案内2」に関しては約60 %前後に，「旅行会話」に関しては約1/4まで圧縮することができた．
文法の規則数が大きいほど圧縮率が大きくなる傾向が見られるが，これは規則数が増えることで，[REF_ss:quality]節で述べた性質を満たす規則対の候補が増えることに起因すると考えられる．
また，作成したLR表を用いてテキスト解析の実験を行ったが，従来のLR表を使った場合と全く同じ結果が得られ，解析時間にも差は認められなかった．
