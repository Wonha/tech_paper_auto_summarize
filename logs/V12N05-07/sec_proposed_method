文縮約のための言い換え規則を機械的に取り出すためには同一内容の長短2文が大量に必要となる。
そこで本研究では、[CITE]の手法を利用してWebから長期にわたって収集したコーパスを用いる。
このコーパスは、インターネット上に配信されていて、パソコンでの閲覧用に作成されている新聞記事(以下、Web記事と呼ぶ)と携帯端末向けに作成されている新聞記事(以下、携帯記事と呼ぶ)の間で同じ内容のものを自動的に対応付けたものである。
さらに言い換え表現抽出のために、その携帯記事中の文(以下、携帯文と呼ぶ)に対しそれに対応付けられた新聞記事中から同一内容を持った文(以下、Web文と呼ぶ)を対応付ける[CITE]。
本節以下の実験では2001年4月26日から2003年11月30日までに収集したWeb記事と携帯記事から得た48075組の記事から抽出した合計72203組の対応文を用いた。
Web記事は通常、数百文字で構成されているのに対して、携帯記事は50文字程度で構成されている。
また携帯記事は体言止めや文末が助詞で終わる文が多いのが特徴として挙げられる。
携帯記事の文末品詞の割合を表[REF_bunsu]に示す。
新聞記事の対応付けの方法は以下のようになる。
収集した記事群で1日単位にWeb記事と携帯記事の対応付けを行う。
まず、両記事群を「茶筅」[CITE]で形態素解析する。
この結果に対して、携帯記事[MATH]中の名詞とWeb記事[MATH]中の名詞を調べ、次式のようにこの両者の記事の類似度[MATH]を計算する。
ここで[MATH]は携帯記事[MATH]中の名詞の集合、[MATH]をWeb記事[MATH]の見出し中の名詞の集合、[MATH]をWeb記事の本文中の名詞集合とする。
なお、携帯記事には見出しは付いていない。
2001年5月10日から同8月10日まで毎月10日と20日に収集した605記事について[MATH]の値と人手でつけた対応付けの正解率の関係を図[REF_art-align]に示した。
この図より、[MATH]の値が35以上の場合を正しく対応が付いたとすることにより、現在までの実験で481記事が正しく対応した。
すなわち、約80%の携帯記事を100%の精度で対応付けができた。
そこで、この方法、すなわち[MATH]の条件を満たす記事対を取り出すことにより、約3年分の記事対応付けコーパスを作成した。
記事単位で対応付けられたコーパスにおいて携帯記事を基準としてWeb記事から対応文の抽出を行う。
これも以下に示すように対応した記事対において共起した名詞の頻度によって行った。
具体的アルゴリズムを以下に示す。
文対応付けアルゴリズム
[MATH]
携帯記事の第[MATH]文を形態素解析し、第[MATH]文に含まれる全名詞を抽出し、この集合を[MATH]とする。
[MATH]
Web記事の第[MATH]文を形態素解析し、第[MATH]文に含まれる全名詞を抽出し、この集合を[MATH]とする。
[MATH] = \textbar[MATH]\textbar
を求める。
[MATH]
Web記事の最後の文になるまでStep:3、Step:4を繰り返す。
[MATH]がもっとも高いWeb記事の文を携帯記事第[MATH]文の対応文とする。
なお、一致した名詞の数が同数の文が複数あった場合は、記事の先頭に近いものを対応文として選ぶ。
[MATH]
携帯記事に残った文があればStep:1に戻る
Step:5で名詞一致数が同数の場合に記事先頭に近いものを選ぶのは、新聞記事の場合は先頭に近い文が重要な情報を担うからである。
つまり、携帯文に対応する文のうち、より重要な情報を含む文を選択しようという指針を採った。
以上の方法で抽出した対応文対のうち、以後、携帯記事から抽出した文を携帯文、Web記事から抽出した文をWeb文と呼ぶ。
ここまでに述べた方法で抽出したデータのうち、2001年の約一年分の対応記事コーパスの43171組の対応文についての詳細を表[REF_kousei]に示す。
携帯記事のほとんどが二文で構成されていることから、使用した対応付けコーパスの記事数の約二倍の対応文が抽出される。
また携帯文は一文が数十文字程度であるのに対して、Web文はそれよりも長い構成になっているので、二文の携帯文に対して、Web文が一文で抽出される場合もある。
これは携帯記事が二文で構成されているときのみ現れる。
[htb]
{|r|r|r|} \hline携帯記事&抽出した時&抽出した
の構成&の状態&対応文
& (携帯文対Web文) &
\hline\hline 1文& 1対1 & 1801
\hline 2文& 2対1 & 9606
\cline{2-3} & 1対1 & 29732
\hline 3文& 1対1 & 2028
\hline
4文& 1対1 & 4
\hline\hline\multicolumn{2}{|c|}{合計} & 43171
\hline
次に今回、抽出した対応文からランダムで500組を抽出し対応付けの精度を求めた。
対応付けの正解・不正解は人手で行っており、対応付けられている場合は正解、対応付けられていない場合は不正解として2人で行った。
2人の判断が異なった場合には3人目が判断して、多数決で正解・不正解を判断する。
この方法により評価を行った精度は92.8%であった。
この精度は対応付けそのものとしては必ずしも十分ではないが、次節で述べる言い換え表現抽出では、さらに頻度などに基づく言い換え表現の重み付けなども行っているため、100%の精度は必須とは言えない。
よって、この方法によって得られた対応文のデータによって、言い換え元表現と言い換え先表現抽出の実験を進めることにした。
本節では、[REF_sub:bun-taiou]節で述べた方法で抽出した携帯文とWeb文を用いて、言い換え先表現と言い換え元表現の対を抽出する方法について述べる。
例えば、
コンピュータウィルス感染防止に有力な方法が判明。
コンピュータウィルス感染防止に有力な方法があることが、研究所の調査で分かった。
という対応文があったとする。
このとき文末に注目すると携帯文では判明で終わっているのに対して、Web文では分かったで文が終わっている。
文の内容から要約の際は判明を言い換え先表現に、分かったを言い換え元表現に使えることが、人間が見れば容易に判断できる。
このような携帯文の文末にある言い換え先表現に対する言い換え元表現をWeb文から自動的に抽出するのは、概略、以下のような方法になる。
[REF_sub:bun-taiou]節で作成された対応文から同じ言い換え先表現を文末に持つ携帯文とWeb文の関連付けする。
この詳細は[REF_sub:kouho]節で述べる。
Step:1で関連付けられたWeb文から言い換え元表現の候補を抽出する。
この詳細は[REF_sub:webbunmatsu]節で述べる。
抽出された言い換え先表現の候補それぞれに対し、語彙の分岐数、出現頻度、文字列長から正しい言い換え元表現が高得点になるような得点付けを行い、順位付けする。
この詳細は[REF_sub:junni]節で述べる。
Step:3の結果に対して、精度の向上を図るため、言い換え元表現として不適切な表現を削除する。
この詳細は[REF_sub:filter]節で述べる。
すなわち、この処理では、言い換え先である携帯文文末の表現をまず決め、それに対応する複数のWeb文の言い換え元表現を推定するという問題を解くことになる。
まず言い換え先表現の抽出方法について説明する。
言い換え先表現の抽出のために携帯文を形態素解析し、文末にある１形態素を取り出す。
これによりサ変接続の名詞であれば「会談」や「表明」といった表現が抽出される。
しかし、これだけでは助詞や助動詞、動詞の場合は「も」や「た」、「示す」といった言い換え表現として使用が難しい表現や、意味の範囲が広すぎるために言い換え表現の抽出が困難な表現が抽出されてしまう。
その問題はさらに文頭方向にある形態素を続けて抽出することにより解消できる。
その結果、「可能性も」や「述べた」、「認識示す」といった言い換え先表現が取り出され、言い換え元表現の抽出も容易になる。
次に図[REF_buntaiou]に抽出した言い換え先表現に対する対応文集合を作成する流れを示す。
まず図の左側の枠内にあるように、抽出した言い換え先表現に対しその言い換え先表現を文末に持つ携帯文を集める。
そして図の右側の枠内にあるように、集めた携帯文に対応するWeb文を集め、それをWeb文集合とする。
そのときのWeb文集合の要素数を以下「対応文数」と呼ぶ。
[REF_sub:webbunmatsu]節以降で説明する言い換え元表現の抽出は、ここで作成されたWeb文集合の文末から抽出することになる。
この方法により、言い換え先表現として4617表現を抽出した。
抽出した言い換え先表現のうち頻度が上位30位までの表現を表[REF_kouho_space]に示す。
動詞終止形、助詞、形容詞語幹(「高」「安」)、など様々だが、一番多いのはサ変接続名詞であり60%を占める18個である。
文末のサ変名詞はいわゆる体言止めであり、この表にも示されるように頻度が高く、結果として適用される頻度も高いと推測される。
ここで頻度が高かった「高」と「安」であるが、これはほぼ全てが経済の記事からであり、「円高」「円安」などが元となっている。
さらに対応するWeb文では「円高・ドル安となった」「円安・ドル高となった」という表現が固定的に用いられている。
その特殊性から正解となる言い換え元表現が少なく、例を挙げての説明が困難となるため、以下の説明の際は頻度が次に多い「発表」を用いる。
[REF_sub:kouho]節で作成されたデータを用い、言い換え先表現に対応する言い換え元表現をWeb文集合の各文の文末から抽出する。
言い換え元表現の抽出にはWeb文を形態素解析し、文末から文頭方向に向かって1形態素ずつ増やしながら表現を抽出する。
言い換え元表現が含まれる長さとして十分な15形態素までを使用する。
ここでは単純に形態素区切りで表現を取り出すため、言い換え元表現に適さない表現も数多く抽出されるが、[REF_sub:junni]節で述べる得点付けや[REF_sub:filter]節で述べるフィルタリングによって排除を試みる。
この時点で抽出された言い換え表現の例を表[REF_iikae-chushutu]に示す。
[htb]
{|r|r|} \hlineた&れた
\hlineした&された
\hline発表した&指定された
\hlineを発表した&が指定された
\hline結果を発表した&公表された
\hline調査結果を発表した&から公表された
\hlineの調査結果を発表した&発表された
\hline費の調査結果を発表した&日発表された
\hline医療費の調査結果を発表した&が発表された
\hline
[REF_sub:webbunmatsu]節で抽出された言い換え元表現には言い換えとして適切な表現と言い換えとして不適切な表現が含まれていることになる。
そこで、抽出された表現に対して正解が上位に集中することを目的とした順位付けを行う。
順位付けを行うにあたってまず、ある言い換え先表現に対応するWeb文集合において、集合全体としてWeb文の文末が持つ特徴を説明する。
図[REF_rev-bunki]にWeb文集合中のWeb文の文末から文頭方向への語の分岐の様子の例を示す。
図から前方に向かって形態素が分岐していることが分かる。
まず、一番右側にWeb文の一番文末の形態素となる「た」や「する」がくる。
さらに1つ前方にある形態素を繋げると「した」や「だった」や「発表する」が抽出できる。
例えば、「を発表した」に続く形態素は「結果」「表明」「コメント」など111種類ある。
ここで、ある表現から１つ前方の形態素の種類数をその形態素の分岐数と呼ぶ。
さらに図[REF_happyo-bunki]に図[REF_rev-bunki]で示した内容の一部分の分岐数と頻度の関係を示した。
このグラフからは「発表した」までは分岐数が小さく、「を発表した」で分岐数が大きく、さらに「結果を発表した」となるとまた小さくなることが分かる。
これは、(a)固定された表現の内部では部分形態素列を長く与えれば与えるほど、直前あるいは直後の形態素が絞り込まれること、(b)ひとたび固定的な表現が終わると、その前後にはいかなる表現も現れることができるようになること、に対応している。
よって分岐数が大きい形態素までの形態素列がよい言い換え元の候補であると考えることができる。
さらに良く使われる表現ほどその表現は固定的な言い回しで、言い換え先表現と深くかかわっている可能性が高いと考えられる。
以上の特徴を踏まえ、言い換えのよさを示す評価関数の構成要素として以下を用いる。
分岐数の大小が言い換え表現句としての切れ目の可能性の大小を表すと考えられるので評価関数の構成要素として用いる。
良く使われる表現は安定していることを示すので、他の要因と組み合わせて用いることは有益である。
ここでいう文字列長は形態素数ではなく文字数である。
言い換え元表現は短過ぎるならば言い回しにならず、長過ぎるならば文脈に依存した表現になってしまう。
長過ぎもせず、短すぎもせず、適度な長さの表現を抽出したい。
そのため評価関数ではlog(文字列長[MATH] 1 )を用いる。
[MATH]により長い文字列に対して得点の抑制を、文字列長[MATH] 1により1〜2文字の表現の排除をする効果がある。
さて、長さに形態素数を使うという選択肢もある。
しかし、もし形態素数を文字列長の代わりに使うと、十分に長くて意味のある形態素(例えば固有表現)が長さ=1で排除されてしまいかねない。
これを避けるために文字数を用いた。
上記の各要素を
[MATH]分岐数
[MATH]頻度
[MATH]文字列長[MATH]
と定義し、評価関数を[MATH]の7種類を用いて比較実験を行った。
対応文数の多かった100位までの言い換え元表現の候補のスコアが1位の表現を人手で評価し、評価関数の違いによる正しい表現の割合を表[REF_score7]に示す。
この結果から、評価関数[MATH]を用いた方法が最も精度が高いことがわかる。
よって、評価関数[MATH]を用いた得点付けのデータを用いる。
さらに言い換え元表現として正しい表現が得点が高くなり、高順位になることを示すために、図[REF_happyo-bunpu]に言い換え先が「発表」の場合に[MATH]の方法で得点付けをした場合の言い換え元の正しい表現の分布グラフを示す。
このグラフから、多くの正しい言い換え元表現が高順位に集中していることがわかる。
低い順位にいくつか正しい言い換え元表現がきているが、これは表現の頻度が少なかったために得点が低くなったことが原因である。
言い換え元表現として抽出した表現の中には文の意味として欠落してはならない語を含んでいることがあるため、その語を言い換えによって削除してしまうと意味が通らない文になってしまう可能性がある。
このような不適切な言い換え元表現は前節の得点付けによって順位が下位になる場合は採用されないが、収集した記事中でよく使われる表現であれば言い換え元表現として不適切な表現も上位になってしまう。
そのような言い換え元表現を削除するためのフィルタリングを行う。
そのアルゴリズムは次のようになる。
フィルタリングアルゴリズム
[MATH]を言い換え元表現の数とし、言い換え元表現の集合を[MATH]…[MATH]，言い換え元表現を[MATH]…[MATH] ([MATH]は形態素)，言い換え先表現を[MATH]，携帯文を[MATH]…[MATH] ([MATH]は形態素,\/ [MATH]は言い換え先表現)，[MATH]を名詞とすると、
for([MATH] = 1 , [MATH]) {
if ( [MATH]…[MATH]…[MATH])
[MATH] [MATH]を言い換え元表現集合から除く
}
なぜなら名詞[MATH]は携帯文に含まれるが、言い換え先表現[MATH]には含まれない。
つまり[MATH]は携帯文にとって必須の意味を担う。
よって[MATH]を含む言い換え元表現[MATH]を[MATH]を含まない言い換え先表現[MATH]に省略することはできない。
具体例を図[REF_filter-img]に示す。
ここで[MATH]は「声明」となり、削除対象となる言い換え元表現[MATH]は「声明を発表した」となる。
なお、[MATH]は「発表」である。
Web文にも携帯文にも「声明」という語が含まれ、文の内容として必須の語であることがわかる。
よって「声明」という意味を削除する「声明を発表した」は「発表」の言い換え元表現として正しくないと考えられるため、言い換え元表現の候補から削除する。
フィルタリングによって[REF_sub:junni]節で得られたデータがどのように変化するかを表[REF_filter-henka]に示す。
表中でアンダーラインが引かれているものがフィルタリングによって削除された表現である。
この表から、言い換え元表現として用いるには不適切な表現が削除できていることが分かる。
文縮約のための言い換え規則を機械的に取り出すためには同一内容の長短2文が大量に必要となる。
そこで本研究では、[CITE]の手法を利用してWebから長期にわたって収集したコーパスを用いる。
このコーパスは、インターネット上に配信されていて、パソコンでの閲覧用に作成されている新聞記事(以下、Web記事と呼ぶ)と携帯端末向けに作成されている新聞記事(以下、携帯記事と呼ぶ)の間で同じ内容のものを自動的に対応付けたものである。
さらに言い換え表現抽出のために、その携帯記事中の文(以下、携帯文と呼ぶ)に対しそれに対応付けられた新聞記事中から同一内容を持った文(以下、Web文と呼ぶ)を対応付ける[CITE]。
本節以下の実験では2001年4月26日から2003年11月30日までに収集したWeb記事と携帯記事から得た48075組の記事から抽出した合計72203組の対応文を用いた。
Web記事は通常、数百文字で構成されているのに対して、携帯記事は50文字程度で構成されている。
また携帯記事は体言止めや文末が助詞で終わる文が多いのが特徴として挙げられる。
携帯記事の文末品詞の割合を表[REF_bunsu]に示す。
新聞記事の対応付けの方法は以下のようになる。
収集した記事群で1日単位にWeb記事と携帯記事の対応付けを行う。
まず、両記事群を「茶筅」[CITE]で形態素解析する。
この結果に対して、携帯記事[MATH]中の名詞とWeb記事[MATH]中の名詞を調べ、次式のようにこの両者の記事の類似度[MATH]を計算する。
ここで[MATH]は携帯記事[MATH]中の名詞の集合、[MATH]をWeb記事[MATH]の見出し中の名詞の集合、[MATH]をWeb記事の本文中の名詞集合とする。
なお、携帯記事には見出しは付いていない。
2001年5月10日から同8月10日まで毎月10日と20日に収集した605記事について[MATH]の値と人手でつけた対応付けの正解率の関係を図[REF_art-align]に示した。
この図より、[MATH]の値が35以上の場合を正しく対応が付いたとすることにより、現在までの実験で481記事が正しく対応した。
すなわち、約80%の携帯記事を100%の精度で対応付けができた。
そこで、この方法、すなわち[MATH]の条件を満たす記事対を取り出すことにより、約3年分の記事対応付けコーパスを作成した。
記事単位で対応付けられたコーパスにおいて携帯記事を基準としてWeb記事から対応文の抽出を行う。
これも以下に示すように対応した記事対において共起した名詞の頻度によって行った。
具体的アルゴリズムを以下に示す。
文対応付けアルゴリズム
[MATH]
携帯記事の第[MATH]文を形態素解析し、第[MATH]文に含まれる全名詞を抽出し、この集合を[MATH]とする。
[MATH]
Web記事の第[MATH]文を形態素解析し、第[MATH]文に含まれる全名詞を抽出し、この集合を[MATH]とする。
[MATH] = \textbar[MATH]\textbar
を求める。
[MATH]
Web記事の最後の文になるまでStep:3、Step:4を繰り返す。
[MATH]がもっとも高いWeb記事の文を携帯記事第[MATH]文の対応文とする。
なお、一致した名詞の数が同数の文が複数あった場合は、記事の先頭に近いものを対応文として選ぶ。
[MATH]
携帯記事に残った文があればStep:1に戻る
Step:5で名詞一致数が同数の場合に記事先頭に近いものを選ぶのは、新聞記事の場合は先頭に近い文が重要な情報を担うからである。
つまり、携帯文に対応する文のうち、より重要な情報を含む文を選択しようという指針を採った。
以上の方法で抽出した対応文対のうち、以後、携帯記事から抽出した文を携帯文、Web記事から抽出した文をWeb文と呼ぶ。
ここまでに述べた方法で抽出したデータのうち、2001年の約一年分の対応記事コーパスの43171組の対応文についての詳細を表[REF_kousei]に示す。
携帯記事のほとんどが二文で構成されていることから、使用した対応付けコーパスの記事数の約二倍の対応文が抽出される。
また携帯文は一文が数十文字程度であるのに対して、Web文はそれよりも長い構成になっているので、二文の携帯文に対して、Web文が一文で抽出される場合もある。
これは携帯記事が二文で構成されているときのみ現れる。
[htb]
{|r|r|r|} \hline携帯記事&抽出した時&抽出した
の構成&の状態&対応文
& (携帯文対Web文) &
\hline\hline 1文& 1対1 & 1801
\hline 2文& 2対1 & 9606
\cline{2-3} & 1対1 & 29732
\hline 3文& 1対1 & 2028
\hline
4文& 1対1 & 4
\hline\hline\multicolumn{2}{|c|}{合計} & 43171
\hline
次に今回、抽出した対応文からランダムで500組を抽出し対応付けの精度を求めた。
対応付けの正解・不正解は人手で行っており、対応付けられている場合は正解、対応付けられていない場合は不正解として2人で行った。
2人の判断が異なった場合には3人目が判断して、多数決で正解・不正解を判断する。
この方法により評価を行った精度は92.8%であった。
この精度は対応付けそのものとしては必ずしも十分ではないが、次節で述べる言い換え表現抽出では、さらに頻度などに基づく言い換え表現の重み付けなども行っているため、100%の精度は必須とは言えない。
よって、この方法によって得られた対応文のデータによって、言い換え元表現と言い換え先表現抽出の実験を進めることにした。
本節では、[REF_sub:bun-taiou]節で述べた方法で抽出した携帯文とWeb文を用いて、言い換え先表現と言い換え元表現の対を抽出する方法について述べる。
例えば、
コンピュータウィルス感染防止に有力な方法が判明。
コンピュータウィルス感染防止に有力な方法があることが、研究所の調査で分かった。
という対応文があったとする。
このとき文末に注目すると携帯文では判明で終わっているのに対して、Web文では分かったで文が終わっている。
文の内容から要約の際は判明を言い換え先表現に、分かったを言い換え元表現に使えることが、人間が見れば容易に判断できる。
このような携帯文の文末にある言い換え先表現に対する言い換え元表現をWeb文から自動的に抽出するのは、概略、以下のような方法になる。
[REF_sub:bun-taiou]節で作成された対応文から同じ言い換え先表現を文末に持つ携帯文とWeb文の関連付けする。
この詳細は[REF_sub:kouho]節で述べる。
Step:1で関連付けられたWeb文から言い換え元表現の候補を抽出する。
この詳細は[REF_sub:webbunmatsu]節で述べる。
抽出された言い換え先表現の候補それぞれに対し、語彙の分岐数、出現頻度、文字列長から正しい言い換え元表現が高得点になるような得点付けを行い、順位付けする。
この詳細は[REF_sub:junni]節で述べる。
Step:3の結果に対して、精度の向上を図るため、言い換え元表現として不適切な表現を削除する。
この詳細は[REF_sub:filter]節で述べる。
すなわち、この処理では、言い換え先である携帯文文末の表現をまず決め、それに対応する複数のWeb文の言い換え元表現を推定するという問題を解くことになる。
まず言い換え先表現の抽出方法について説明する。
言い換え先表現の抽出のために携帯文を形態素解析し、文末にある１形態素を取り出す。
これによりサ変接続の名詞であれば「会談」や「表明」といった表現が抽出される。
しかし、これだけでは助詞や助動詞、動詞の場合は「も」や「た」、「示す」といった言い換え表現として使用が難しい表現や、意味の範囲が広すぎるために言い換え表現の抽出が困難な表現が抽出されてしまう。
その問題はさらに文頭方向にある形態素を続けて抽出することにより解消できる。
その結果、「可能性も」や「述べた」、「認識示す」といった言い換え先表現が取り出され、言い換え元表現の抽出も容易になる。
次に図[REF_buntaiou]に抽出した言い換え先表現に対する対応文集合を作成する流れを示す。
まず図の左側の枠内にあるように、抽出した言い換え先表現に対しその言い換え先表現を文末に持つ携帯文を集める。
そして図の右側の枠内にあるように、集めた携帯文に対応するWeb文を集め、それをWeb文集合とする。
そのときのWeb文集合の要素数を以下「対応文数」と呼ぶ。
[REF_sub:webbunmatsu]節以降で説明する言い換え元表現の抽出は、ここで作成されたWeb文集合の文末から抽出することになる。
この方法により、言い換え先表現として4617表現を抽出した。
抽出した言い換え先表現のうち頻度が上位30位までの表現を表[REF_kouho_space]に示す。
動詞終止形、助詞、形容詞語幹(「高」「安」)、など様々だが、一番多いのはサ変接続名詞であり60%を占める18個である。
文末のサ変名詞はいわゆる体言止めであり、この表にも示されるように頻度が高く、結果として適用される頻度も高いと推測される。
ここで頻度が高かった「高」と「安」であるが、これはほぼ全てが経済の記事からであり、「円高」「円安」などが元となっている。
さらに対応するWeb文では「円高・ドル安となった」「円安・ドル高となった」という表現が固定的に用いられている。
その特殊性から正解となる言い換え元表現が少なく、例を挙げての説明が困難となるため、以下の説明の際は頻度が次に多い「発表」を用いる。
[REF_sub:kouho]節で作成されたデータを用い、言い換え先表現に対応する言い換え元表現をWeb文集合の各文の文末から抽出する。
言い換え元表現の抽出にはWeb文を形態素解析し、文末から文頭方向に向かって1形態素ずつ増やしながら表現を抽出する。
言い換え元表現が含まれる長さとして十分な15形態素までを使用する。
ここでは単純に形態素区切りで表現を取り出すため、言い換え元表現に適さない表現も数多く抽出されるが、[REF_sub:junni]節で述べる得点付けや[REF_sub:filter]節で述べるフィルタリングによって排除を試みる。
この時点で抽出された言い換え表現の例を表[REF_iikae-chushutu]に示す。
[htb]
{|r|r|} \hlineた&れた
\hlineした&された
\hline発表した&指定された
\hlineを発表した&が指定された
\hline結果を発表した&公表された
\hline調査結果を発表した&から公表された
\hlineの調査結果を発表した&発表された
\hline費の調査結果を発表した&日発表された
\hline医療費の調査結果を発表した&が発表された
\hline
[REF_sub:webbunmatsu]節で抽出された言い換え元表現には言い換えとして適切な表現と言い換えとして不適切な表現が含まれていることになる。
そこで、抽出された表現に対して正解が上位に集中することを目的とした順位付けを行う。
順位付けを行うにあたってまず、ある言い換え先表現に対応するWeb文集合において、集合全体としてWeb文の文末が持つ特徴を説明する。
図[REF_rev-bunki]にWeb文集合中のWeb文の文末から文頭方向への語の分岐の様子の例を示す。
図から前方に向かって形態素が分岐していることが分かる。
まず、一番右側にWeb文の一番文末の形態素となる「た」や「する」がくる。
さらに1つ前方にある形態素を繋げると「した」や「だった」や「発表する」が抽出できる。
例えば、「を発表した」に続く形態素は「結果」「表明」「コメント」など111種類ある。
ここで、ある表現から１つ前方の形態素の種類数をその形態素の分岐数と呼ぶ。
さらに図[REF_happyo-bunki]に図[REF_rev-bunki]で示した内容の一部分の分岐数と頻度の関係を示した。
このグラフからは「発表した」までは分岐数が小さく、「を発表した」で分岐数が大きく、さらに「結果を発表した」となるとまた小さくなることが分かる。
これは、(a)固定された表現の内部では部分形態素列を長く与えれば与えるほど、直前あるいは直後の形態素が絞り込まれること、(b)ひとたび固定的な表現が終わると、その前後にはいかなる表現も現れることができるようになること、に対応している。
よって分岐数が大きい形態素までの形態素列がよい言い換え元の候補であると考えることができる。
さらに良く使われる表現ほどその表現は固定的な言い回しで、言い換え先表現と深くかかわっている可能性が高いと考えられる。
以上の特徴を踏まえ、言い換えのよさを示す評価関数の構成要素として以下を用いる。
分岐数の大小が言い換え表現句としての切れ目の可能性の大小を表すと考えられるので評価関数の構成要素として用いる。
良く使われる表現は安定していることを示すので、他の要因と組み合わせて用いることは有益である。
ここでいう文字列長は形態素数ではなく文字数である。
言い換え元表現は短過ぎるならば言い回しにならず、長過ぎるならば文脈に依存した表現になってしまう。
長過ぎもせず、短すぎもせず、適度な長さの表現を抽出したい。
そのため評価関数ではlog(文字列長[MATH] 1 )を用いる。
[MATH]により長い文字列に対して得点の抑制を、文字列長[MATH] 1により1〜2文字の表現の排除をする効果がある。
さて、長さに形態素数を使うという選択肢もある。
しかし、もし形態素数を文字列長の代わりに使うと、十分に長くて意味のある形態素(例えば固有表現)が長さ=1で排除されてしまいかねない。
これを避けるために文字数を用いた。
上記の各要素を
[MATH]分岐数
[MATH]頻度
[MATH]文字列長[MATH]
と定義し、評価関数を[MATH]の7種類を用いて比較実験を行った。
対応文数の多かった100位までの言い換え元表現の候補のスコアが1位の表現を人手で評価し、評価関数の違いによる正しい表現の割合を表[REF_score7]に示す。
この結果から、評価関数[MATH]を用いた方法が最も精度が高いことがわかる。
よって、評価関数[MATH]を用いた得点付けのデータを用いる。
さらに言い換え元表現として正しい表現が得点が高くなり、高順位になることを示すために、図[REF_happyo-bunpu]に言い換え先が「発表」の場合に[MATH]の方法で得点付けをした場合の言い換え元の正しい表現の分布グラフを示す。
このグラフから、多くの正しい言い換え元表現が高順位に集中していることがわかる。
低い順位にいくつか正しい言い換え元表現がきているが、これは表現の頻度が少なかったために得点が低くなったことが原因である。
言い換え元表現として抽出した表現の中には文の意味として欠落してはならない語を含んでいることがあるため、その語を言い換えによって削除してしまうと意味が通らない文になってしまう可能性がある。
このような不適切な言い換え元表現は前節の得点付けによって順位が下位になる場合は採用されないが、収集した記事中でよく使われる表現であれば言い換え元表現として不適切な表現も上位になってしまう。
そのような言い換え元表現を削除するためのフィルタリングを行う。
そのアルゴリズムは次のようになる。
フィルタリングアルゴリズム
[MATH]を言い換え元表現の数とし、言い換え元表現の集合を[MATH]…[MATH]，言い換え元表現を[MATH]…[MATH] ([MATH]は形態素)，言い換え先表現を[MATH]，携帯文を[MATH]…[MATH] ([MATH]は形態素,\/ [MATH]は言い換え先表現)，[MATH]を名詞とすると、
for([MATH] = 1 , [MATH]) {
if ( [MATH]…[MATH]…[MATH])
[MATH] [MATH]を言い換え元表現集合から除く
}
なぜなら名詞[MATH]は携帯文に含まれるが、言い換え先表現[MATH]には含まれない。
つまり[MATH]は携帯文にとって必須の意味を担う。
よって[MATH]を含む言い換え元表現[MATH]を[MATH]を含まない言い換え先表現[MATH]に省略することはできない。
具体例を図[REF_filter-img]に示す。
ここで[MATH]は「声明」となり、削除対象となる言い換え元表現[MATH]は「声明を発表した」となる。
なお、[MATH]は「発表」である。
Web文にも携帯文にも「声明」という語が含まれ、文の内容として必須の語であることがわかる。
よって「声明」という意味を削除する「声明を発表した」は「発表」の言い換え元表現として正しくないと考えられるため、言い換え元表現の候補から削除する。
フィルタリングによって[REF_sub:junni]節で得られたデータがどのように変化するかを表[REF_filter-henka]に示す。
表中でアンダーラインが引かれているものがフィルタリングによって削除された表現である。
この表から、言い換え元表現として用いるには不適切な表現が削除できていることが分かる。
