この章では，係り受け解析の実験を色々な角度から分析する．
実験に用いたコーパスは，京大コーパス(Version 2) [CITE]の一般文の部分で，基本的にトレーニングには1月1日と1月3日から8日までの7日分(7960文)，試験には1月9日の1日分(1246文)を用いた．
試験は頻繁に行なうと，高い成績を追及する結果その試験のデータに自然とチューニングされてしまう危険性があるので，頻繁に行なわないようにした．
まず最初に，我々の結果を示し，他の手法の結果との比較を行なう．
それ以降の節では，我々の実験内で得られた興味深いデータを紹介する．
まずは，我々の解析結果を表[REF_Result]に示す．
京大コーパス1月9日の1246文に対して，形態素解析，文節区切認定まで終った状態から文節間係り受けの解析を決定的に(ビーム幅=1)行なった結果である．
また，文節数と係り受け正解率の関係を図[REF_LengthAndAccuracy]に示す(文節数28以上は，それぞれデータ数が1なので図に載せていない．
)．
図から分るように，文節数の増加に伴なう精度の劣化は比較的に小さいと考えられる．
日本語の係り受けは多くの場合，係り元と係り先以外の大域的な情報を利用せず，局所的な情報のみで決められる事が多いので，文が長くなっても係り受け正解率の劣化があまり見られないのは納得できる．
この節では他の手法との比較を行なう．
他の手法においては同じコーパスを使って評価した物がないため，その精度は参考として載せる．
同じプラットフォームで同じ評価方法を用いた比較が望まれる．
白井およびKNPとの比較
白井[CITE]は構文規則に基いた確率一般化LR法を提案している．
構文および語彙的な統計情報を用い，その学習にはMEを利用している．
実験では京大コーパスの文節数7〜9の文からランダムに選んだ500文の内，KNPによる文節区切がコーパスと一致した388文を対象に，白井の解析結果とKNPの解析結果の正解率を比較している．
(KNPについては[CITE]を参照の事．
)そこで，我々の試験コーパスの中で文節数が7〜9の文，279文における結果を用いて比較した(表[REF_CompShiraiKNP])．
すべて，文末から二つ目の文節は評価から除いており，白井の方法も文節切りができた状態からの解析である．
対象の文が完全に一致しておらず，対象の文の選択の方法も異なるので，参考にしかできないが，この文長の文に対しては，白井の手法に比較して3%程度良い結果を，KNPと比較した場合には3%程度悪い結果を得た．
白井の実験では，EDRコーパス，RWCコーパスを利用し，トレーニングデータとしては我々よりも大きなデータを利用している．
また，白井はランダムに選んだ500文については84.34%という解析結果を示している．
KNPは，この評価で使用したテストコーパスに基づいて改良されており，KNPの評価結果は，トレーニングデータに対するものと言う事ができる．
藤尾，春野との比較
藤尾[CITE]は文節間の属性の共起頻度による統計的解析手法を提案した．
また，春野[CITE]は決定木およびブースティングを利用した係り受け解析を行なっている．
これらの評価はＥＤＲコーパスを利用し，試験対象データの選択手法も我々とは異なっているため，直接的な評価は難しい．
彼等の場合は，形態素解析から解析を行なっているが，評価には文節区切が正しい物のみを利用したり，正解を自分の文節区切の結果に翻訳してから評価を行なっている．
しかし，共に85%程度の正解率が出ており，我々の手法も同様な位置を占めている．
これらの手法は，ほぼ利用している知識の種類が同様であり，計算の手法に違いがあるものの，同様な結果を得ていると考えていいと思う．
手法の違いによる詳しい比較を行なうためにも，同じプラットフォームでの実験とそれを元にした考察が望まれる．
江原との比較
江原の手法[CITE]は，我々の手法と同様にMEを用いており，そういった意味で比較するのは意味があるが，対象文は，NHKのニュース原稿であり，平均文節数も17.8と我々の対象にしている京大コーパスとは全く異なっている(平均文節数は10.0)．
ただし，図[REF_LengthAndAccuracy]に示したように，我々の結果は文節数と係り受け正解率の関係はあまり変化が見られず，長いからといって必ずしも解析が困難だとは限らない．
これらの理由により，単純な比較は意味がないが，正解率において，我々の手法が約10%上回っているのはなんらかの要因が存在すると考えられる．
(江原の手法では正解率は76.4%と報告されている．
)特に江原の方法とは素性の数に大きな差があるようである．
江原が用いた一次的な素性値の数は200個程度であり，我々の一時的な素性値の数の約5000個とは大きく異なっている．
また，我々は組合せの素性も4万個程度利用している．
この点深く掘り下げて検討する事に意味があると考える．
また，MEに利用する素性の選択に関しては，江原の他にも白井[CITE] Berger[CITE]等が興味深い提案をしている．
次に，我々の実験の中での比較結果を報告する．
まずは，解析時に用いたビーム幅と精度の関係である．
解析時のビーム幅が広ければ広い程，全体として確率の高い解析が得られる可能性が高くなるので，ビーム幅は高く設定した方が望ましいと考えられる．
しかし，結果はその直観とは異なっていた．
表[REF_BeamAndAccuracy]にビーム幅を1から20に変化させた時の係り受け正解率と文正解率を示す．
全体的に変化は小さいが，係り受け正解率はビーム幅が3と10の時に，文正解率はビーム幅が2と3の時に最大になっている．
これは，全体の確率が最大の物が正解ではなく，各段階ごとに正解を絞っていった方が正解になるという場合がある事を示している．
これは「はじめに」で書いた，日本語係り受けの特徴(4)にも関係していて面白い．
この結果によると，文末から文頭に係り受け解析をする際に，最良の結果のみを得たい場合には，決定的に行なってもかなり精度の良いものが得られるという事が言える．
実際に，ビーム幅を1とした時に得られた答が，ビーム幅20とした時の解析結果のどこに現われるかを調査した結果を表[REF_OneOnTwenty]に示す．
実際に全体の95%の場合，ビーム幅1の解析結果がビーム幅20の解析において最大の確率を持つ結果と同等であった．
また，ビーム幅が1の解析において文全体が正解であった503文の中では，N=20での結果において1位の場所に同じ解析結果があったものが498文(99.0%)と非常に高い率であった(以下2位の位置が3文，3位と5位の位置がそれぞれ1文づつあった．
)．
これらの文においては，最大の確率を持つ解析は，文末から解析していった場合に，各文節ごとの段階においてつねに最良の結果であったという事を意味している．
これは，「はじめに」で書いた特徴(4)とも関係がある．
「はじめに」の脚注に書いた人間に対する実験は文節に対する割合であるので，上記の文に対しての数字は，人間の実験で得られたよりもかなり高い割合で，前方の文脈の不必要さを実証したという事になる．
文正解率はビーム幅が1の実験では40.60%であったが，最終的に得られる解析の数を広くすればする程，正解率が向上する事が考えられる．
図[REF_NBestAccuracy]にビーム幅を20として解析を行なった場合のN--best文正解率を示す．
N--best文正解率とは，上位N個の解析結果を見た場合に，文中のすべての文節係り受けの解析が正しい解析結果がその中にある割合の事を言う．
N=20，つまり，ビーム幅と同様の最終結果を見た場合に，文全体の係り受けが正解である解析結果が上位20個の解析結果に含まれる割合は78.5%であるという事である．
この中から正解を捜し出せる理想的なシステムを開発できた場合には，文正解率が78.5%という非常に優れた解析システムができる可能性があるという事である．
この結果から二つの考察ができる．
まず，一点はN=1の文正解率は約40%であるのに対して，N=2で向上した割合，つまり，2番目の解析結果が正解であった割合は10%程度と非常に低くなっている．
また，この40%という数字は，N=20の場合の78.5%という数字の半分以上であり，半分以上の場合においてN=1の所に正解が存在したという事を意味する．
これは，我々の確率の計算手法が，まだ改善の余地はあるものの，かなり正確であるという事を示している．
もう一点は，文正解率が80%あたりで飽和しており，80%程度以上の向上はNを多少大きくしても望めなさそうであるという事である(もちろん，Nをすべての組み合わせの数にすれば100%にはなるが現実的に意味はない．
)．
これは，我々が何か大きな要因を見過ごしている可能性がある．
特に，並列構造についての解析能力が低いようである．
この点を改良し，再度検討していきたいと思う．
前章にあるアルゴリズムを分析すると，解析時間は文節長に対して2乗になっていると推測できる．
実際に，ビーム幅1の時の文節長と解析速度の関係を調べた(図[REF_Kaisekisokudo])．
実験はSunのUltra10，周波数(300MHz)を利用した．
係り受け解析のプロセスの大きさは8M程度であった．
図から実際の解析時間も，文長に対してほぼ2乗になっている事が分かる(参考の為に描き入れた二次曲線を参照．
)．
実際は定数部分がある為に曲線の最初の部分は分布よりも下になっていると考えられる．
一文あたりの平均解析時間は0.03秒(平均文節数10.0)，最長文である41文節の文に対しては0.29秒で解析を行なった．
実際，プログラムを最適化する余地は存在し，その係数については改善の余地があると考えている．
また，プロセスサイズについても必要ならば，縮小する余地はあると考えている．
