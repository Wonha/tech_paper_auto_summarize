提案手法の効果を調べるため，従来手法との比較実験を行った．
コーパスは東工大コーパス20,190文（1文あたり約23形態素）[CITE]を利用する．
20,190文すべてから抽出した文法[MATH]を使用し，MSLRパーザで構文解析を行う．
入力は平文とする．
解析結果の順位付けはPGLRモデルにより行う．
比較は，提案手法により生成されるLR表と，Liの手法により生成されるLR表，接続制約を組み込まないLR表の3つで行う．
抽出したCFG規則数は2,722規則（非終端記号294個，終端記号412個）である．
各手法により生成されたLR表中の状態数と動作数を表[REF_tab:action]に示す．
状態数において，「shift後」，「reduce後」とは，それぞれshift/reduceを実行した直後に到達する状態を指す．
PGLRモデルによる確率計算ではこの2種類の状態を区別する必要があるため，参考として内訳を示している．
また，動作数において，丸括弧，角括弧で囲まれた数字は，それぞれ，コンフリクトが生じる動作の数，PGLRモデルによる確率が1ではない動作の数を表す．
前者は解析途中での曖昧性の大小の目安に，後者はPGLRモデルによる確率計算の影響の大小（パラメータ数の大小）の目安になる．
この表より，状態数にはそれほど大きな差は生じないが，総動作数については，接続制約を組み込まない場合と比較して約64%削減できていることが分かる．
コンフリクトが生じる動作数，PGLRモデルによる確率が1にならない動作数は，それぞれ約56%，71%削減できている．
一方，Liの手法と比較すると，総動作数では約1.2%，コンフリクトが生じる動作数とPGLRモデルによる確率が1ではない動作数はどちらも約1.4%削減できている．
次に，全20,190文を構文解析する際の所要時間（ユーザCPU時間）を計測した．
結果を表[REF_tab:time]に示す．
ただし，計測はDual-Core Intel Xeon 3 GHz，メモリ4 GBの環境で行った．
結果より，接続制約を組み込まない場合と比較して約52%，Liの手法と比較して約2.4%短縮された．
接続制約を組み込まない場合，接続制約を満たさない構文木も解析結果として出力される．
速度向上の要因は，接続制約を組み込んだことによる曖昧性の減少にあると考えられる．
一方，Liの手法では，接続制約が組み込まれているため，最終的に出力される解析結果は提案手法の場合と同じである．
しかし，不要な動作が残っているため，解析途中での無駄な曖昧性（最終的にaccに到達できない解析途中状態）が多く存在する．
例えば，第[REF_sec:problem]節で示した動作実行列の場合，提案手法では，状態2，先読み記号[MATH]における動作がLR表中に存在しないことが分かった時点で解析を終了するが，Liの手法では，状態13，先読み記号[MATH]となるまで解析が継続する．
提案手法とLiの手法の解析所要時間の差は，ここで生じる．
最後に，PGLRモデルによる順位付けの評価を10分割交差検定により行った．
すなわち，全体の10分の9にあたる18,171文を利用してモデルの学習を行い，残りの2,019文で評価を行った（文法は[MATH]を使用した）．
解析精度は，文正解率により比較した．
文正解率は以下のように定義する．
ここで「正解」とは，出力された解析木が正解とすべき構文木と完全に一致する場合を指す．
結果を表[REF_tab:accuracy]に示す．
提案手法では，PGLRモデルによる順位が1位の解析木のみを見た場合，接続制約を組み込まない場合と比較して0.74%向上している．
一方，Liの手法と比較すると，1位の解析木のみでは0.16%向上しているが，上位10位までを見るとほとんど差がなく，LR表中の不要動作の削除が解析精度に与える影響は大きくないことが分かる．
解析所要時間の差と同様，解析精度の差についても，提案手法と接続制約を組み込まない場合との間では，最終的に出力される解析木の数の違いが要因と考えられる．
一方，Liの手法によるLR表での最終的な解析結果の曖昧性は提案手法の場合と同じである．
また，提案手法でのみ削除可能な動作は，どのような動作実行列をたどっても，最終的にaccに到達することのないものであるため，学習データ中にも存在しない．
PGLRモデルによるLR表中の各動作の確率は，学習データに付与された構文木を生成する際に実行する動作の使用回数をもとに計算されるが，最終的にaccに到達できない動作に対する確率は0となり，最終的に出力される各解析木の確率は提案手法の場合と同じになるはずである．
しかし，MSLRパーザでは，確率計算の平滑化のため，全ての動作の実行回数に一定数（初期設定では0.5）を加えている．
その結果，学習データ中で使用されない動作についても0ではない確率が与えられ，最終的に出力される各解析木の確率が提案手法の場合とLiの手法の場合との間で異なる場合があり，それが，解析精度に差が生じる要因になる．
平滑化を行わなければ同じ結果になるが，その場合，accに到達可能であり，かつ，妥当な動作であるにもかかわらず学習データに偶然出現しなかった動作に対する確率も0となる．
確率が0である動作が，接続制約を組み込んだことによってaccに到達不可能となった動作であるか，偶然学習データに出現しなかった動作であるかを，学習の段階で区別することは困難である．
LR表を作成する段階でaccに到達不可能な動作を削除しておけば，この問題を回避することが可能であり，その点においても提案手法が有効であることが分かる．
提案手法の効果を調べるため，従来手法との比較実験を行った．
コーパスは東工大コーパス20,190文（1文あたり約23形態素）[CITE]を利用する．
20,190文すべてから抽出した文法[MATH]を使用し，MSLRパーザで構文解析を行う．
入力は平文とする．
解析結果の順位付けはPGLRモデルにより行う．
比較は，提案手法により生成されるLR表と，Liの手法により生成されるLR表，接続制約を組み込まないLR表の3つで行う．
抽出したCFG規則数は2,722規則（非終端記号294個，終端記号412個）である．
各手法により生成されたLR表中の状態数と動作数を表[REF_tab:action]に示す．
状態数において，「shift後」，「reduce後」とは，それぞれshift/reduceを実行した直後に到達する状態を指す．
PGLRモデルによる確率計算ではこの2種類の状態を区別する必要があるため，参考として内訳を示している．
また，動作数において，丸括弧，角括弧で囲まれた数字は，それぞれ，コンフリクトが生じる動作の数，PGLRモデルによる確率が1ではない動作の数を表す．
前者は解析途中での曖昧性の大小の目安に，後者はPGLRモデルによる確率計算の影響の大小（パラメータ数の大小）の目安になる．
この表より，状態数にはそれほど大きな差は生じないが，総動作数については，接続制約を組み込まない場合と比較して約64%削減できていることが分かる．
コンフリクトが生じる動作数，PGLRモデルによる確率が1にならない動作数は，それぞれ約56%，71%削減できている．
一方，Liの手法と比較すると，総動作数では約1.2%，コンフリクトが生じる動作数とPGLRモデルによる確率が1ではない動作数はどちらも約1.4%削減できている．
次に，全20,190文を構文解析する際の所要時間（ユーザCPU時間）を計測した．
結果を表[REF_tab:time]に示す．
ただし，計測はDual-Core Intel Xeon 3 GHz，メモリ4 GBの環境で行った．
結果より，接続制約を組み込まない場合と比較して約52%，Liの手法と比較して約2.4%短縮された．
接続制約を組み込まない場合，接続制約を満たさない構文木も解析結果として出力される．
速度向上の要因は，接続制約を組み込んだことによる曖昧性の減少にあると考えられる．
一方，Liの手法では，接続制約が組み込まれているため，最終的に出力される解析結果は提案手法の場合と同じである．
しかし，不要な動作が残っているため，解析途中での無駄な曖昧性（最終的にaccに到達できない解析途中状態）が多く存在する．
例えば，第[REF_sec:problem]節で示した動作実行列の場合，提案手法では，状態2，先読み記号[MATH]における動作がLR表中に存在しないことが分かった時点で解析を終了するが，Liの手法では，状態13，先読み記号[MATH]となるまで解析が継続する．
提案手法とLiの手法の解析所要時間の差は，ここで生じる．
最後に，PGLRモデルによる順位付けの評価を10分割交差検定により行った．
すなわち，全体の10分の9にあたる18,171文を利用してモデルの学習を行い，残りの2,019文で評価を行った（文法は[MATH]を使用した）．
解析精度は，文正解率により比較した．
文正解率は以下のように定義する．
ここで「正解」とは，出力された解析木が正解とすべき構文木と完全に一致する場合を指す．
結果を表[REF_tab:accuracy]に示す．
提案手法では，PGLRモデルによる順位が1位の解析木のみを見た場合，接続制約を組み込まない場合と比較して0.74%向上している．
一方，Liの手法と比較すると，1位の解析木のみでは0.16%向上しているが，上位10位までを見るとほとんど差がなく，LR表中の不要動作の削除が解析精度に与える影響は大きくないことが分かる．
解析所要時間の差と同様，解析精度の差についても，提案手法と接続制約を組み込まない場合との間では，最終的に出力される解析木の数の違いが要因と考えられる．
一方，Liの手法によるLR表での最終的な解析結果の曖昧性は提案手法の場合と同じである．
また，提案手法でのみ削除可能な動作は，どのような動作実行列をたどっても，最終的にaccに到達することのないものであるため，学習データ中にも存在しない．
PGLRモデルによるLR表中の各動作の確率は，学習データに付与された構文木を生成する際に実行する動作の使用回数をもとに計算されるが，最終的にaccに到達できない動作に対する確率は0となり，最終的に出力される各解析木の確率は提案手法の場合と同じになるはずである．
しかし，MSLRパーザでは，確率計算の平滑化のため，全ての動作の実行回数に一定数（初期設定では0.5）を加えている．
その結果，学習データ中で使用されない動作についても0ではない確率が与えられ，最終的に出力される各解析木の確率が提案手法の場合とLiの手法の場合との間で異なる場合があり，それが，解析精度に差が生じる要因になる．
平滑化を行わなければ同じ結果になるが，その場合，accに到達可能であり，かつ，妥当な動作であるにもかかわらず学習データに偶然出現しなかった動作に対する確率も0となる．
確率が0である動作が，接続制約を組み込んだことによってaccに到達不可能となった動作であるか，偶然学習データに出現しなかった動作であるかを，学習の段階で区別することは困難である．
LR表を作成する段階でaccに到達不可能な動作を削除しておけば，この問題を回避することが可能であり，その点においても提案手法が有効であることが分かる．
