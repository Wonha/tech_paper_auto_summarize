本節では，従来のLR表への接続制約の組み込み手法とその問題点を述べるが，その前に，第[REF_sec:evaluation]節の評価実験で使用するMSLRパーザ[CITE]の原理について概略を説明する．
MSLR (Morpho-Syntactic LR)パーザは，GLR構文解析アルゴリズムを拡張し，日本語などの分かち書きされていない文の形態素解析と構文解析を同時に行うことのできるパーザである．
図[REF_fig:mslr]に示すように，MSLRパーザは，文法(CFG)からLR表を生成し，それを参照しながら入力文の解析を行う．
LR表を生成する段階では，文法のほかに品詞間接続制約を組み込むことも可能である．
品詞間接続制約を組み込むことにより，LR表のサイズを小さくし，解析効率を向上させることができる．
また，MSLRパーザは，平文を入力とすることで形態素解析と構文解析を同時に行うことができるが，形態素区切りや品詞，係り受けなどの部分的な制約を入力に加えて解析を行うこともできる．
さらに，確率一般化LR (Probabilistic Generalized LR; PGLR)モデル[CITE]により，GLRアルゴリズムの枠組みにおいて構文木の生成確率を求めることもできる．
MSLRパーザでは，[MATH]規則（右辺の記号列長が0の規則）を含む文法は扱えない．
文法が大規模化するにつれ，文法作成者が予期しない[MATH]規則の適用や，それによる解析結果の曖昧性の増大が起きるため，MSLRパーザの仕様として，文法に[MATH]規則は含まれないことを前提としている．
本論文でも，[MATH]規則を含まない文法を前提とする．
終端記号と文末記号[MATH]の集合[MATH]の接続制約は，[MATH]行[MATH]列の表（接続表）で表現できる．
ただし，[MATH]，[MATH]である．
また，終端記号または非終端記号[MATH]の直後に接続可能な終端記号の集合を返す関数Connectを以下のように定義する．
ただし，[MATH]と[MATH]は，それぞれCFGの開始記号から展開した場合に非終端記号[MATH]の直後に出現し得る終端記号の集合，[MATH]を展開した場合に末尾に出現し得る終端記号の集合を表す．
さらに，終端記号または非終端記号列[MATH]の場合や，終端記号または非終端記号の集合[MATH]の場合は，関数Connectを以下のように定義する（[MATH]は終端記号または非終端記号）．
\mathrm{Connect}(\alpha)&=\mathrm{Connect}(Y)
\mathrm{Connect}(\Sigma)&=\bigcup_{X\in\Sigma}\mathrm{Connect}(X)
LR表への品詞間接続制約の組み込み手法には，まず接続制約を考慮しないLR表を作成してから不要な動作を削除する手法[CITE]，LR表作成前と作成後の両方で不要動作を削除する手法[CITE]などがある．
ここでは，MSLRパーザのLR表生成器で採用されている2つ目のLR表作成前と作成後の両方で不要動作を削除する手法（Liの手法）について述べる．
LR構文解析では，LRアイテムを利用してCFGから状態遷移図（gotoグラフ）を作成する．
Liらは，gotoグラフを作成する段階で，接続制約を利用してアイテムの生成を抑制することにより，接続制約を組み込んだgotoグラフを作成する．
さらに，接続制約を組み込んだgotoグラフからLR表を作成した後，接続制約を伝播させることにより，LR表作成前に削除できなかった動作を削除する．
接続制約を利用したLR(0)アイテムの生成の抑制は，核アイテム[MATH]をclosure展開する際，以下の2つの条件を満たすLR(0)アイテムのみを生成することにより行う．
\mathrm{Connect}(Z)\cap\mathrm{First}(\beta)&\neq\emptyset
\mathrm{Follow}(X)\cap\mathrm{Connect}(\beta)&\neq\emptyset
ただし，[MATH]は，gotoグラフにおいて状態[MATH]から終端記号または非終端記号[MATH]で遷移した先の状態を表す．
また，[MATH]は，[MATH]を展開した場合に先頭に出現し得る終端記号の集合を表す．
接続制約を組み込んだgotoグラフを作成したら，それをもとにLR表を作成する．
この時点で既にいくらかの不要な動作は削除されているが，削除できずに残っている動作もあるため，LR表作成後に接続制約を伝播させることにより，さらに不要な動作を削除する．
具体的には，LR表中の各動作について，その直前に実行すべき動作が存在しない場合，または直後に実行すべき動作が存在しない場合，その動作を削除する．
図[REF_fig:ex_cfg3]に示すような文法[MATH] と接続制約[MATH]（と文法[MATH]から作成されるgotoグラフ）を例に，従来手法（Liの手法）の問題点を述べる．
Liの手法により作成されるLR表を表[REF_tab:lr_table_hashimoto]に示す．
ただし，括弧で囲まれた動作は，接続制約により削除されたものである．
ここで，状態2，先読み[MATH]における移動(shift)動作[MATH]に注目する．
この動作は，Liの手法では削除されない．
このshift動作に関連する動作実行列として，以下のような場合が想定される（[MATH]は，状態2，先読み[MATH]におけるshift動作[MATH]を表す）．
一方，以下のような動作実行列も存在する．
接続制約より，終端記号[MATH]は終端記号[MATH]と接続するが，終端記号[MATH]とは接続しないため，前者の実行列は制約に違反する．
その結果，[MATH]は削除される．
しかし，[MATH]は，もう一方の接続制約を満たす動作実行列に含まれるため，残される．
[MATH]は，接続制約を満たすどのような動作実行列にも含まれず，削除すべき動作であるが，次の[MATH]が残されるため，Liの手法では削除できない．
従来手法では，1つ先または1つ前の動作が存在しないことが判明した場合に，その動作を削除する．
この例では，2つ先の動作が存在するか否かを調べなければ，削除可能かどうかを判断できない．
これを一般化すると，1つ先や2つ先だけでなく，[MATH]個先の動作が存在するか否かを調べる必要があり，連続する動作の存在を局所的に調べるだけでは，接続制約に違反する動作を完全に削除することはできない．
このような例でも動作を削除できるようにするためには，その動作実行列が最終的にacc動作に到達可能であるか否かを調べる必要がある．
初期状態から実行すべき動作を順番に決めていくと，動作の実行列（アクションチェイン）ができる．
このアクションチェインがacc動作に到達すれば，解析が成功することになる．
一方，実行すべき動作がLR表から決まらないときには，解析が失敗することになる．
このアクションチェインは有向グラフ（アクションチェイングラフ）として表現できる．
初期状態からacc動作に至るアクションチェインを成功パスと呼ぶ．
成功パス上の動作は，必要な動作としてLR表に残す．
提案アルゴリズムでは，アクションチェインを最終状態（acc動作）から逆向きに横型探索によりたどることにより，成功パスを探索する．
すなわち開始記号を左辺に持つCFG規則について，その右辺の末尾の記号から順番に展開しながら（最右導出を行いながら）接続制約を満たすか否かをチェックする．
開始記号[MATH]を左辺に持つ[MATH]というCFG規則（規則番号を[MATH]とする）があったとする．
gotoグラフには図[REF_fig:proposed](a)に示すような状態とリンクが存在する（開始状態を0とする）．
このCFG規則の展開に対応するLR表中の動作は，状態[MATH]，先読み[MATH]におけるreduce動作[MATH]とその後の状態0，非終端記号[MATH]における状態[MATH]への遷移であり，この動作をアクションチェインに追加する．
そして，右辺の各終端記号または非終端記号について，[MATH]，[MATH]，…[MATH]の順に接続制約を満たすか否かをチェックする．
[MATH]が終端記号の場合，[MATH]と[MATH]の間の接続制約をチェックする．
接続制約を満たすならば，状態[MATH]，先読み[MATH]におけるshift動作[MATH]をアクションチェインに追加し，[MATH]のチェックに移る（先読みは[MATH]となる）．
[MATH]が非終端記号の場合は，[MATH]を左辺とするCFG規則で展開する．
このCFG規則が[MATH]（規則番号[MATH]）であるとすると，gotoグラフ中では図[REF_fig:proposed](b)に示すような状態とリンクが存在する．
このCFG規則の展開に対応する，状態[MATH]，先読み[MATH]におけるreduce動作[MATH]と状態[MATH]，記号[MATH]における状態[MATH]への遷移をアクションチェインに追加し，[MATH]，[MATH]，…[MATH]の順に接続制約を満たすか否かを同様にチェックする．
すべてのチェックが完了したら，[MATH]のチェックに移る（先読みは[MATH]のチェックで最後にアクションチェインに追加したshift動作の先読みとなる）．
以下，同様に続け，最終的に状態0におけるshift動作がアクションチェインに追加されたら，それが成功パスとなる．
提案アルゴリズムの概要を図[REF_fig:algorithm]に示す．
図中の記法については，以下のとおりである．
状態[MATH]，先読み[MATH]で実行される[MATH]番目のCFG規則によるreduce動作を表すアクションチェインの要素．
reduce後，状態[MATH]，非終端記号[MATH]で状態[MATH]へ遷移する．
ただし，[MATH]の場合は，reduce動作ではなくacc動作を表す要素となる．
[MATH]は要素の処理状態を表す．
要素の処理状態には，init（初期状態），wait（待機状態），check（調査中），pass（調査済），end（最終状態）があり，この順番で遷移する（initは飛ばされることもある）．
要素を作成しただけの状態
次にアクションチェインに追加可能であることを表す状態
アクションチェインに追加され，その後，解析開始状態（gotoグラフにおける状態0）に到達可能かどうか（最終的に接続制約を満たすかどうか）を調査中であることを表す状態
解析開始状態に到達可能であることが判明したことを表す状態
成功パスの要素であることを表す状態
状態[MATH]，先読み[MATH]で実行されるshift動作を表すアクションチェインの要素．
[MATH]番目のCFG規則の右辺の長さ．
[MATH]番目のCFG規則の左辺の非終端記号．
[MATH]番目のCFG規則の右辺の[MATH]番目の終端記号または非終端記号．
[MATH]
非終端記号[MATH]を左辺に持つ規則番号の集合．
[MATH]
reduce動作またはshift動作[MATH]に続く動作の集合．
[MATH]番目のCFG規則について，状態[MATH]から[MATH]，…[MATH]を遷移した後の状態．
状態[MATH]から[MATH]番目のCFG規則の右辺の終端記号または非終端記号列すべてを遷移した後の状態．
状態[MATH]における[MATH]番目のCFG規則によるreduce動作の先読みの集合．
状態[MATH]への遷移記号の集合．
[MATH]
記号[MATH]によって状態[MATH]に遷移する状態の集合．
[MATH]
図[REF_fig:algorithm]の（2）では，wait状態のreduce動作要素について，その状態をcheckとして，対象となる動作の実行後に解析開始状態まで接続制約に違反することなく到達可能かどうかのチェックを行う．
wait状態のshift動作要素ならば，その状態をcheckとして，それに先行するinit状態の要素について，その状態をwaitとする．
ただし，先行する要素がshift動作要素の場合は，両者の先読み記号の間の接続制約をチェックする．
また，gotoグラフにおける状態0でのshift動作要素の場合は，解析開始状態まで到達可能であることが判明したので，要素の状態をpassとする．
図[REF_fig:algorithm]の（4）では，pass状態の要素について，その状態をendとし，そこから（2）のときとは逆に要素をたどり，check状態の要素が解析開始状態まで到達可能であることを伝えていく（状態をcheckからpassにする）．
最終的に状態がendとなった要素の列が成功パスとなる．
図[REF_fig:ex_cfg3]に示す文法[MATH]と接続制約[MATH]に対し，上述のアルゴリズムを適用すると，以下のような手順で処理が進行する．
[MATH]を作成．
[MATH]について，処理状態をcheckに変更し，
[MATH]，[MATH]を作成．
[MATH]について，処理状態をcheckに変更し，
[MATH]，[MATH]，[MATH]を作成．
[MATH]について，処理状態をcheckに変更し，
[MATH]，[MATH]を作成（図[REF_fig:chain]（1））．
[MATH]について，処理状態をcheckに変更し，
[MATH]の処理状態をwaitに変更．
[MATH]について，処理状態をcheckに変更し，
[MATH]，[MATH]，[MATH]を作成．
[MATH]について，処理状態をcheckに変更し，
[MATH]，[MATH]，[MATH]を作成（図[REF_fig:chain]（2））．
[MATH]について，処理状態をcheckに変更し，
[MATH]，[MATH]の処理状態をwaitに変更．
[MATH]について，処理状態をcheckに変更し，
[MATH]，[MATH]の処理状態をwaitに変更．
[MATH]について，処理状態をcheckに変更し，[MATH]，[MATH]を作成．
[MATH]について，処理状態をcheckに変更し，[MATH]を作成
（[MATH]は，[MATH]より作成しない）．
[MATH]について，処理状態をcheckに変更し，[MATH]を作成
（[MATH]は，[MATH]より作成しない）．
[MATH]について，処理状態をcheckに変更し，[MATH]，[MATH]を作成．
[MATH]について，処理状態をcheckに変更し，
[MATH]の処理状態をwaitに変更．
[MATH]について，処理状態をcheckに変更し，
[MATH]の処理状態をwaitに変更．
[MATH]について，処理状態をcheckに変更し，
[MATH]の処理状態をwaitに変更．
[MATH]について，処理状態をcheckに変更し，
[MATH]の処理状態をwaitに変更．
[MATH]について，処理状態をpassに変更．
[MATH]について，処理状態をpassに変更（図[REF_fig:chain]（3））．
[MATH]について，処理状態をendに変更し，
[MATH]の処理状態をpassに変更．
[MATH]について，処理状態をendに変更し，
[MATH]の処理状態をpassに変更．
[MATH]について，処理状態をendに変更し，
[MATH]の処理状態をpassに変更．
[MATH]について，処理状態をendに変更し，
[MATH]の処理状態をpassに変更．
以下，同様に処理を続け，処理状態がpassの要素がなくなったら終了（図[REF_fig:chain]（4））．
アルゴリズムを適用後，処理状態がendである動作要素をたどることにより，成功パスを抽出できる（図[REF_fig:chain]（4）の実線のリンクが成功パスである）．
作成されるLR表を表[REF_tab:lr_table]に示す．
また，表[REF_tab:lr_table]において，括弧で囲まれた動作は，Liの手法で削除できず，提案手法により削除されたものを表す．
本節では，提案アルゴリズムの完全性について考察する．
ここで，完全性とは，作成されるLR表に不要なアクションが存在しないことである．
これを示すためには，LR表が以下の2つの性質を満たすことを示せばよい．
妥当性
任意の構文木[MATH]に対し，以下が成り立つ．
ただし，
CFG，接続制約，LR表
文法[MATH]，接続制約[MATH]から構文木[MATH]を生成可能ならば1，不可能ならば0
LR表[MATH]から構文木[MATH]を生成可能ならば1，不可能ならば0
最小性
妥当性を満たすLR表中の任意の要素（動作）[MATH]に対し，以下が成り立つような構文木[MATH]が存在する．
ただし，
LR表[MATH]から要素[MATH]を除いたLR表
文法[MATH]は，第[REF_sec:principle]節で述べた，[MATH]規則を含まないという条件のほかに，以下の条件を満たすことを前提とする．
文法規則は重複しない．
すなわち，文法[MATH]中の任意の2つの文法規則[MATH]，[MATH]について，[MATH]
循環する導出は存在しない．
すなわち，文法[MATH]中の任意の非終端記号[MATH]について，[MATH]となるような導出は存在しない
提案アルゴリズムによって作成されるLR表が妥当性を満たすことを示すためには，以下の2つを示せばよい．
[MATH]ならば[MATH]
[MATH]ならば[MATH]
ただし，
提案アルゴリズムによって生成されるアクションチェイングラフ
[MATH]から生成されるLR表
提案アルゴリズムでは，開始記号から最右導出を行いながらアクションチェイングラフを生成し，その中に含まれる成功パスからLR表を生成する．
ここで，[MATH]を満たす構文木[MATH]に相当する最右導出の際に，提案アルゴリズムによって生成されるアクションチェインは，成功パスである．
この成功パス中の要素に対応する動作は，このアクションチェイングラフから生成されるLR表に含まれるので，[MATH]は[MATH]から生成可能である．
すなわち，（1）が成り立つ．
一方，ある構文木[MATH]が[MATH]を満たすと仮定する．
このとき，[MATH]から[MATH]を生成する際の実行動作列について，先頭の実行動作から順に，以下の法則に従って[MATH]中のアクションチェイン要素をたどることにより，成功パスを得ることができる．
注目する実行動作がacc動作の場合，[MATH]をたどる．
注目する実行動作が状態[MATH]，先読み[MATH]におけるshift動作の場合，[MATH]をたどる．
注目する実行動作が状態[MATH]，先読み[MATH]における規則番号[MATH]によるreduce動作，さらにその次の動作が状態[MATH]，非終端記号[MATH]における状態[MATH]へのgoto動作の場合，[MATH]をたどる．
[MATH]中の成功パスに対応する構文木は文法[MATH]，接続制約[MATH]を満たすので，（2）が成り立つ．
以上より，提案アルゴリズムによって作成されるLR表は妥当性を満たす．
[MATH]が最小性を満たさないと仮定すると，次を満たす要素[MATH]が[MATH]中に少なくとも1つ存在する．
任意の[MATH]に対して，[MATH]
このとき，[MATH]となり，[MATH]に対応する[MATH]中の要素を[MATH]とすると，[MATH]中の任意の構文木を生成する際の実行動作列に対応する[MATH]中の成功パスは，[MATH]を含まない．
一方，[MATH]中に[MATH]が存在することから，[MATH]中には[MATH]を含む成功パスが存在する．
その成功パスに対応する実行動作列は[MATH]を含み，その実行動作列で生成される構文木を[MATH]とすると，以下が成り立つ．
これは[MATH]が最小性を満たさないという仮定に矛盾する．
以上より，提案アルゴリズムによって作成されるLR表は最小性を満たす．
本節では，従来のLR表への接続制約の組み込み手法とその問題点を述べるが，その前に，第[REF_sec:evaluation]節の評価実験で使用するMSLRパーザ[CITE]の原理について概略を説明する．
MSLR (Morpho-Syntactic LR)パーザは，GLR構文解析アルゴリズムを拡張し，日本語などの分かち書きされていない文の形態素解析と構文解析を同時に行うことのできるパーザである．
図[REF_fig:mslr]に示すように，MSLRパーザは，文法(CFG)からLR表を生成し，それを参照しながら入力文の解析を行う．
LR表を生成する段階では，文法のほかに品詞間接続制約を組み込むことも可能である．
品詞間接続制約を組み込むことにより，LR表のサイズを小さくし，解析効率を向上させることができる．
また，MSLRパーザは，平文を入力とすることで形態素解析と構文解析を同時に行うことができるが，形態素区切りや品詞，係り受けなどの部分的な制約を入力に加えて解析を行うこともできる．
さらに，確率一般化LR (Probabilistic Generalized LR; PGLR)モデル[CITE]により，GLRアルゴリズムの枠組みにおいて構文木の生成確率を求めることもできる．
MSLRパーザでは，[MATH]規則（右辺の記号列長が0の規則）を含む文法は扱えない．
文法が大規模化するにつれ，文法作成者が予期しない[MATH]規則の適用や，それによる解析結果の曖昧性の増大が起きるため，MSLRパーザの仕様として，文法に[MATH]規則は含まれないことを前提としている．
本論文でも，[MATH]規則を含まない文法を前提とする．
終端記号と文末記号[MATH]の集合[MATH]の接続制約は，[MATH]行[MATH]列の表（接続表）で表現できる．
ただし，[MATH]，[MATH]である．
また，終端記号または非終端記号[MATH]の直後に接続可能な終端記号の集合を返す関数Connectを以下のように定義する．
ただし，[MATH]と[MATH]は，それぞれCFGの開始記号から展開した場合に非終端記号[MATH]の直後に出現し得る終端記号の集合，[MATH]を展開した場合に末尾に出現し得る終端記号の集合を表す．
さらに，終端記号または非終端記号列[MATH]の場合や，終端記号または非終端記号の集合[MATH]の場合は，関数Connectを以下のように定義する（[MATH]は終端記号または非終端記号）．
\mathrm{Connect}(\alpha)&=\mathrm{Connect}(Y)
\mathrm{Connect}(\Sigma)&=\bigcup_{X\in\Sigma}\mathrm{Connect}(X)
LR表への品詞間接続制約の組み込み手法には，まず接続制約を考慮しないLR表を作成してから不要な動作を削除する手法[CITE]，LR表作成前と作成後の両方で不要動作を削除する手法[CITE]などがある．
ここでは，MSLRパーザのLR表生成器で採用されている2つ目のLR表作成前と作成後の両方で不要動作を削除する手法（Liの手法）について述べる．
LR構文解析では，LRアイテムを利用してCFGから状態遷移図（gotoグラフ）を作成する．
Liらは，gotoグラフを作成する段階で，接続制約を利用してアイテムの生成を抑制することにより，接続制約を組み込んだgotoグラフを作成する．
さらに，接続制約を組み込んだgotoグラフからLR表を作成した後，接続制約を伝播させることにより，LR表作成前に削除できなかった動作を削除する．
接続制約を利用したLR(0)アイテムの生成の抑制は，核アイテム[MATH]をclosure展開する際，以下の2つの条件を満たすLR(0)アイテムのみを生成することにより行う．
\mathrm{Connect}(Z)\cap\mathrm{First}(\beta)&\neq\emptyset
\mathrm{Follow}(X)\cap\mathrm{Connect}(\beta)&\neq\emptyset
ただし，[MATH]は，gotoグラフにおいて状態[MATH]から終端記号または非終端記号[MATH]で遷移した先の状態を表す．
また，[MATH]は，[MATH]を展開した場合に先頭に出現し得る終端記号の集合を表す．
接続制約を組み込んだgotoグラフを作成したら，それをもとにLR表を作成する．
この時点で既にいくらかの不要な動作は削除されているが，削除できずに残っている動作もあるため，LR表作成後に接続制約を伝播させることにより，さらに不要な動作を削除する．
具体的には，LR表中の各動作について，その直前に実行すべき動作が存在しない場合，または直後に実行すべき動作が存在しない場合，その動作を削除する．
図[REF_fig:ex_cfg3]に示すような文法[MATH] と接続制約[MATH]（と文法[MATH]から作成されるgotoグラフ）を例に，従来手法（Liの手法）の問題点を述べる．
Liの手法により作成されるLR表を表[REF_tab:lr_table_hashimoto]に示す．
ただし，括弧で囲まれた動作は，接続制約により削除されたものである．
ここで，状態2，先読み[MATH]における移動(shift)動作[MATH]に注目する．
この動作は，Liの手法では削除されない．
このshift動作に関連する動作実行列として，以下のような場合が想定される（[MATH]は，状態2，先読み[MATH]におけるshift動作[MATH]を表す）．
一方，以下のような動作実行列も存在する．
接続制約より，終端記号[MATH]は終端記号[MATH]と接続するが，終端記号[MATH]とは接続しないため，前者の実行列は制約に違反する．
その結果，[MATH]は削除される．
しかし，[MATH]は，もう一方の接続制約を満たす動作実行列に含まれるため，残される．
[MATH]は，接続制約を満たすどのような動作実行列にも含まれず，削除すべき動作であるが，次の[MATH]が残されるため，Liの手法では削除できない．
従来手法では，1つ先または1つ前の動作が存在しないことが判明した場合に，その動作を削除する．
この例では，2つ先の動作が存在するか否かを調べなければ，削除可能かどうかを判断できない．
これを一般化すると，1つ先や2つ先だけでなく，[MATH]個先の動作が存在するか否かを調べる必要があり，連続する動作の存在を局所的に調べるだけでは，接続制約に違反する動作を完全に削除することはできない．
このような例でも動作を削除できるようにするためには，その動作実行列が最終的にacc動作に到達可能であるか否かを調べる必要がある．
初期状態から実行すべき動作を順番に決めていくと，動作の実行列（アクションチェイン）ができる．
このアクションチェインがacc動作に到達すれば，解析が成功することになる．
一方，実行すべき動作がLR表から決まらないときには，解析が失敗することになる．
このアクションチェインは有向グラフ（アクションチェイングラフ）として表現できる．
初期状態からacc動作に至るアクションチェインを成功パスと呼ぶ．
成功パス上の動作は，必要な動作としてLR表に残す．
提案アルゴリズムでは，アクションチェインを最終状態（acc動作）から逆向きに横型探索によりたどることにより，成功パスを探索する．
すなわち開始記号を左辺に持つCFG規則について，その右辺の末尾の記号から順番に展開しながら（最右導出を行いながら）接続制約を満たすか否かをチェックする．
開始記号[MATH]を左辺に持つ[MATH]というCFG規則（規則番号を[MATH]とする）があったとする．
gotoグラフには図[REF_fig:proposed](a)に示すような状態とリンクが存在する（開始状態を0とする）．
このCFG規則の展開に対応するLR表中の動作は，状態[MATH]，先読み[MATH]におけるreduce動作[MATH]とその後の状態0，非終端記号[MATH]における状態[MATH]への遷移であり，この動作をアクションチェインに追加する．
そして，右辺の各終端記号または非終端記号について，[MATH]，[MATH]，…[MATH]の順に接続制約を満たすか否かをチェックする．
[MATH]が終端記号の場合，[MATH]と[MATH]の間の接続制約をチェックする．
接続制約を満たすならば，状態[MATH]，先読み[MATH]におけるshift動作[MATH]をアクションチェインに追加し，[MATH]のチェックに移る（先読みは[MATH]となる）．
[MATH]が非終端記号の場合は，[MATH]を左辺とするCFG規則で展開する．
このCFG規則が[MATH]（規則番号[MATH]）であるとすると，gotoグラフ中では図[REF_fig:proposed](b)に示すような状態とリンクが存在する．
このCFG規則の展開に対応する，状態[MATH]，先読み[MATH]におけるreduce動作[MATH]と状態[MATH]，記号[MATH]における状態[MATH]への遷移をアクションチェインに追加し，[MATH]，[MATH]，…[MATH]の順に接続制約を満たすか否かを同様にチェックする．
すべてのチェックが完了したら，[MATH]のチェックに移る（先読みは[MATH]のチェックで最後にアクションチェインに追加したshift動作の先読みとなる）．
以下，同様に続け，最終的に状態0におけるshift動作がアクションチェインに追加されたら，それが成功パスとなる．
提案アルゴリズムの概要を図[REF_fig:algorithm]に示す．
図中の記法については，以下のとおりである．
状態[MATH]，先読み[MATH]で実行される[MATH]番目のCFG規則によるreduce動作を表すアクションチェインの要素．
reduce後，状態[MATH]，非終端記号[MATH]で状態[MATH]へ遷移する．
ただし，[MATH]の場合は，reduce動作ではなくacc動作を表す要素となる．
[MATH]は要素の処理状態を表す．
要素の処理状態には，init（初期状態），wait（待機状態），check（調査中），pass（調査済），end（最終状態）があり，この順番で遷移する（initは飛ばされることもある）．
要素を作成しただけの状態
次にアクションチェインに追加可能であることを表す状態
アクションチェインに追加され，その後，解析開始状態（gotoグラフにおける状態0）に到達可能かどうか（最終的に接続制約を満たすかどうか）を調査中であることを表す状態
解析開始状態に到達可能であることが判明したことを表す状態
成功パスの要素であることを表す状態
状態[MATH]，先読み[MATH]で実行されるshift動作を表すアクションチェインの要素．
[MATH]番目のCFG規則の右辺の長さ．
[MATH]番目のCFG規則の左辺の非終端記号．
[MATH]番目のCFG規則の右辺の[MATH]番目の終端記号または非終端記号．
[MATH]
非終端記号[MATH]を左辺に持つ規則番号の集合．
[MATH]
reduce動作またはshift動作[MATH]に続く動作の集合．
[MATH]番目のCFG規則について，状態[MATH]から[MATH]，…[MATH]を遷移した後の状態．
状態[MATH]から[MATH]番目のCFG規則の右辺の終端記号または非終端記号列すべてを遷移した後の状態．
状態[MATH]における[MATH]番目のCFG規則によるreduce動作の先読みの集合．
状態[MATH]への遷移記号の集合．
[MATH]
記号[MATH]によって状態[MATH]に遷移する状態の集合．
[MATH]
図[REF_fig:algorithm]の（2）では，wait状態のreduce動作要素について，その状態をcheckとして，対象となる動作の実行後に解析開始状態まで接続制約に違反することなく到達可能かどうかのチェックを行う．
wait状態のshift動作要素ならば，その状態をcheckとして，それに先行するinit状態の要素について，その状態をwaitとする．
ただし，先行する要素がshift動作要素の場合は，両者の先読み記号の間の接続制約をチェックする．
また，gotoグラフにおける状態0でのshift動作要素の場合は，解析開始状態まで到達可能であることが判明したので，要素の状態をpassとする．
図[REF_fig:algorithm]の（4）では，pass状態の要素について，その状態をendとし，そこから（2）のときとは逆に要素をたどり，check状態の要素が解析開始状態まで到達可能であることを伝えていく（状態をcheckからpassにする）．
最終的に状態がendとなった要素の列が成功パスとなる．
図[REF_fig:ex_cfg3]に示す文法[MATH]と接続制約[MATH]に対し，上述のアルゴリズムを適用すると，以下のような手順で処理が進行する．
[MATH]を作成．
[MATH]について，処理状態をcheckに変更し，
[MATH]，[MATH]を作成．
[MATH]について，処理状態をcheckに変更し，
[MATH]，[MATH]，[MATH]を作成．
[MATH]について，処理状態をcheckに変更し，
[MATH]，[MATH]を作成（図[REF_fig:chain]（1））．
[MATH]について，処理状態をcheckに変更し，
[MATH]の処理状態をwaitに変更．
[MATH]について，処理状態をcheckに変更し，
[MATH]，[MATH]，[MATH]を作成．
[MATH]について，処理状態をcheckに変更し，
[MATH]，[MATH]，[MATH]を作成（図[REF_fig:chain]（2））．
[MATH]について，処理状態をcheckに変更し，
[MATH]，[MATH]の処理状態をwaitに変更．
[MATH]について，処理状態をcheckに変更し，
[MATH]，[MATH]の処理状態をwaitに変更．
[MATH]について，処理状態をcheckに変更し，[MATH]，[MATH]を作成．
[MATH]について，処理状態をcheckに変更し，[MATH]を作成
（[MATH]は，[MATH]より作成しない）．
[MATH]について，処理状態をcheckに変更し，[MATH]を作成
（[MATH]は，[MATH]より作成しない）．
[MATH]について，処理状態をcheckに変更し，[MATH]，[MATH]を作成．
[MATH]について，処理状態をcheckに変更し，
[MATH]の処理状態をwaitに変更．
[MATH]について，処理状態をcheckに変更し，
[MATH]の処理状態をwaitに変更．
[MATH]について，処理状態をcheckに変更し，
[MATH]の処理状態をwaitに変更．
[MATH]について，処理状態をcheckに変更し，
[MATH]の処理状態をwaitに変更．
[MATH]について，処理状態をpassに変更．
[MATH]について，処理状態をpassに変更（図[REF_fig:chain]（3））．
[MATH]について，処理状態をendに変更し，
[MATH]の処理状態をpassに変更．
[MATH]について，処理状態をendに変更し，
[MATH]の処理状態をpassに変更．
[MATH]について，処理状態をendに変更し，
[MATH]の処理状態をpassに変更．
[MATH]について，処理状態をendに変更し，
[MATH]の処理状態をpassに変更．
以下，同様に処理を続け，処理状態がpassの要素がなくなったら終了（図[REF_fig:chain]（4））．
アルゴリズムを適用後，処理状態がendである動作要素をたどることにより，成功パスを抽出できる（図[REF_fig:chain]（4）の実線のリンクが成功パスである）．
作成されるLR表を表[REF_tab:lr_table]に示す．
また，表[REF_tab:lr_table]において，括弧で囲まれた動作は，Liの手法で削除できず，提案手法により削除されたものを表す．
本節では，提案アルゴリズムの完全性について考察する．
ここで，完全性とは，作成されるLR表に不要なアクションが存在しないことである．
これを示すためには，LR表が以下の2つの性質を満たすことを示せばよい．
妥当性
任意の構文木[MATH]に対し，以下が成り立つ．
ただし，
CFG，接続制約，LR表
文法[MATH]，接続制約[MATH]から構文木[MATH]を生成可能ならば1，不可能ならば0
LR表[MATH]から構文木[MATH]を生成可能ならば1，不可能ならば0
最小性
妥当性を満たすLR表中の任意の要素（動作）[MATH]に対し，以下が成り立つような構文木[MATH]が存在する．
ただし，
LR表[MATH]から要素[MATH]を除いたLR表
文法[MATH]は，第[REF_sec:principle]節で述べた，[MATH]規則を含まないという条件のほかに，以下の条件を満たすことを前提とする．
文法規則は重複しない．
すなわち，文法[MATH]中の任意の2つの文法規則[MATH]，[MATH]について，[MATH]
循環する導出は存在しない．
すなわち，文法[MATH]中の任意の非終端記号[MATH]について，[MATH]となるような導出は存在しない
提案アルゴリズムによって作成されるLR表が妥当性を満たすことを示すためには，以下の2つを示せばよい．
[MATH]ならば[MATH]
[MATH]ならば[MATH]
ただし，
提案アルゴリズムによって生成されるアクションチェイングラフ
[MATH]から生成されるLR表
提案アルゴリズムでは，開始記号から最右導出を行いながらアクションチェイングラフを生成し，その中に含まれる成功パスからLR表を生成する．
ここで，[MATH]を満たす構文木[MATH]に相当する最右導出の際に，提案アルゴリズムによって生成されるアクションチェインは，成功パスである．
この成功パス中の要素に対応する動作は，このアクションチェイングラフから生成されるLR表に含まれるので，[MATH]は[MATH]から生成可能である．
すなわち，（1）が成り立つ．
一方，ある構文木[MATH]が[MATH]を満たすと仮定する．
このとき，[MATH]から[MATH]を生成する際の実行動作列について，先頭の実行動作から順に，以下の法則に従って[MATH]中のアクションチェイン要素をたどることにより，成功パスを得ることができる．
注目する実行動作がacc動作の場合，[MATH]をたどる．
注目する実行動作が状態[MATH]，先読み[MATH]におけるshift動作の場合，[MATH]をたどる．
注目する実行動作が状態[MATH]，先読み[MATH]における規則番号[MATH]によるreduce動作，さらにその次の動作が状態[MATH]，非終端記号[MATH]における状態[MATH]へのgoto動作の場合，[MATH]をたどる．
[MATH]中の成功パスに対応する構文木は文法[MATH]，接続制約[MATH]を満たすので，（2）が成り立つ．
以上より，提案アルゴリズムによって作成されるLR表は妥当性を満たす．
[MATH]が最小性を満たさないと仮定すると，次を満たす要素[MATH]が[MATH]中に少なくとも1つ存在する．
任意の[MATH]に対して，[MATH]
このとき，[MATH]となり，[MATH]に対応する[MATH]中の要素を[MATH]とすると，[MATH]中の任意の構文木を生成する際の実行動作列に対応する[MATH]中の成功パスは，[MATH]を含まない．
一方，[MATH]中に[MATH]が存在することから，[MATH]中には[MATH]を含む成功パスが存在する．
その成功パスに対応する実行動作列は[MATH]を含み，その実行動作列で生成される構文木を[MATH]とすると，以下が成り立つ．
これは[MATH]が最小性を満たさないという仮定に矛盾する．
以上より，提案アルゴリズムによって作成されるLR表は最小性を満たす．
