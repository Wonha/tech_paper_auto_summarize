================================================================
[section type  : abstract]
[section title : abstract]
================================================================
[i:0, score:0.50784] LR構文解析表（LR表）を作成する際，CFG規則による制約だけでなく品詞（終端記号）間の接続制約も同時に組み込むことによって，LR表中の不要な動作（アクション）を削除することができる．
[i:1, score:0.29019] それにより，接続制約に違反する解析結果を受理しないLR表を作成できるだけでなく，LR表のサイズを縮小することも可能であり，構文解析の効率の向上が期待できる．
[i:4, score:0.34011] 提案手法では，初期状態から最終状態までの全体の実行すべき動作列（アクションチェイン）を考慮し，接続制約を組み込む．

================================================================
[section type  : intro]
[section title : はじめに]
================================================================
[i:30, score:0.39288] このLR表には，CFG規則のほかに品詞（終端記号）間の接続制約(adjacent symbol connection constraints; ASCCs)を反映させることもできる．
[i:31, score:0.47397] 品詞間の接続制約を反映させることにより，接続制約に違反する解析結果を受理しないLR表を作成できるだけでなく，LR表のサイズ（状態数や動作（アクション）数）を縮小することもでき，その結果，構文解析の使用メモリ量や解析所要時間の削減，統計データを取り入れた場合の解析精度向上の効果の増大が期待できる．
[i:32, score:0.39407] 品詞間接続制約をCFG規則に直接反映させることも可能であるが，非終端記号の細分化によって規則数が組み合わせ的に増大し，CFG作成者への負担やLR表のサイズの増大を招く．

================================================================
[section type  : proposed_method]
[section title : MSLRパーザと従来の組み込み手法]
================================================================
[i:40, score:0.34039] 本節では，従来のLR表への接続制約の組み込み手法とその問題点を述べるが，その前に，第[REF_sec:evaluation]節の評価実験で使用するMSLRパーザ[CITE]の原理について概略を説明する．
-----------------------------------------------------
  [subsection title : MSLRパーザの原理]
-----------------------------------------------------
  [i:lead, score:0.26132] MSLR (Morpho-Syntactic LR)パーザは，GLR構文解析アルゴリズムを拡張し，日本語などの分かち書きされていない文の形態素解析と構文解析を同時に行うことのできるパーザである．
.....
  [i:42, score:0.31985] 図[REF_fig:mslr]に示すように，MSLRパーザは，文法(CFG)からLR表を生成し，それを参照しながら入力文の解析を行う．
  [i:43, score:0.27559] LR表を生成する段階では，文法のほかに品詞間接続制約を組み込むことも可能である．
  [i:44, score:0.26536] 品詞間接続制約を組み込むことにより，LR表のサイズを小さくし，解析効率を向上させることができる．
-----------------------------------------------------
  [subsection title : 接続制約と接続表]
-----------------------------------------------------
  [i:lead, score:0.16862] 終端記号と文末記号[MATH]の集合[MATH]の接続制約は，[MATH]行[MATH]列の表（接続表）で表現できる．
.....
  [i:50, score:0.16862] 終端記号と文末記号[MATH]の集合[MATH]の接続制約は，[MATH]行[MATH]列の表（接続表）で表現できる．
  [i:52, score:0.20371] また，終端記号または非終端記号[MATH]の直後に接続可能な終端記号の集合を返す関数Connectを以下のように定義する．
  [i:53, score:0.20089] ただし，[MATH]と[MATH]は，それぞれCFGの開始記号から展開した場合に非終端記号[MATH]の直後に出現し得る終端記号の集合，[MATH]を展開した場合に末尾に出現し得る終端記号の集合を表す．
-----------------------------------------------------
  [subsection title : 従来の接続制約組み込み手法]
-----------------------------------------------------
  [i:lead, score:0.38807] LR表への品詞間接続制約の組み込み手法には，まず接続制約を考慮しないLR表を作成してから不要な動作を削除する手法[CITE]，LR表作成前と作成後の両方で不要動作を削除する手法[CITE]などがある．
.....
  [i:57, score:0.38807] LR表への品詞間接続制約の組み込み手法には，まず接続制約を考慮しないLR表を作成してから不要な動作を削除する手法[CITE]，LR表作成前と作成後の両方で不要動作を削除する手法[CITE]などがある．
  [i:58, score:0.39598] ここでは，MSLRパーザのLR表生成器で採用されている2つ目のLR表作成前と作成後の両方で不要動作を削除する手法（Liの手法）について述べる．
  [i:61, score:0.40052] さらに，接続制約を組み込んだgotoグラフからLR表を作成した後，接続制約を伝播させることにより，LR表作成前に削除できなかった動作を削除する．
-----------------------------------------------------
  [subsection title : 従来手法の問題点]
-----------------------------------------------------
  [i:lead, score:0.23613] 図[REF_fig:ex_cfg3]に示すような文法[MATH] と接続制約[MATH]（と文法[MATH]から作成されるgotoグラフ）を例に，従来手法（Liの手法）の問題点を述べる．
.....
  [i:73, score:0.24887] ここで，状態2，先読み[MATH]における移動(shift)動作[MATH]に注目する．
  [i:75, score:0.26672] このshift動作に関連する動作実行列として，以下のような場合が想定される（[MATH]は，状態2，先読み[MATH]におけるshift動作[MATH]を表す）．
  [i:80, score:0.28917] [MATH]は，接続制約を満たすどのような動作実行列にも含まれず，削除すべき動作であるが，次の[MATH]が残されるため，Liの手法では削除できない．

================================================================
[section type  : proposed_method]
[section title : 提案アルゴリズム]
================================================================
[i:95, score:0.56574] このCFG規則の展開に対応するLR表中の動作は，状態[MATH]，先読み[MATH]におけるreduce動作[MATH]とその後の状態0，非終端記号[MATH]における状態[MATH]への遷移であり，この動作をアクションチェインに追加する．
[i:101, score:0.50200] このCFG規則の展開に対応する，状態[MATH]，先読み[MATH]におけるreduce動作[MATH]と状態[MATH]，記号[MATH]における状態[MATH]への遷移をアクションチェインに追加し，[MATH]，[MATH]，…[MATH]の順に接続制約を満たすか否かを同様にチェックする．
[i:131, score:0.43726] 図[REF_fig:algorithm]の（2）では，wait状態のreduce動作要素について，その状態をcheckとして，対象となる動作の実行後に解析開始状態まで接続制約に違反することなく到達可能かどうかのチェックを行う．

================================================================
[section type  : experiment_result]
[section title : 実験と評価]
================================================================
[i:206, score:0.47029] 例えば，第[REF_sec:problem]節で示した動作実行列の場合，提案手法では，状態2，先読み記号[MATH]における動作がLR表中に存在しないことが分かった時点で解析を終了するが，Liの手法では，状態13，先読み記号[MATH]となるまで解析が継続する．
[i:215, score:0.36395] 一方，Liの手法と比較すると，1位の解析木のみでは0.16%向上しているが，上位10位までを見るとほとんど差がなく，LR表中の不要動作の削除が解析精度に与える影響は大きくないことが分かる．
[i:219, score:0.41462] PGLRモデルによるLR表中の各動作の確率は，学習データに付与された構文木を生成する際に実行する動作の使用回数をもとに計算されるが，最終的にaccに到達できない動作に対する確率は0となり，最終的に出力される各解析木の確率は提案手法の場合と同じになるはずである．

================================================================
[section type  : proposed_method]
[section title : 提案アルゴリズムの完全性の証明]
================================================================
[i:231, score:0.28982] CFG，接続制約，LR表
[i:233, score:0.21104] LR表[MATH]から構文木[MATH]を生成可能ならば1，不可能ならば0
[i:235, score:0.31529] 妥当性を満たすLR表中の任意の要素（動作）[MATH]に対し，以下が成り立つような構文木[MATH]が存在する．
-----------------------------------------------------
  [subsection title : 妥当性の証明]
-----------------------------------------------------
  [i:lead, score:0.19700] 提案アルゴリズムによって作成されるLR表が妥当性を満たすことを示すためには，以下の2つを示せばよい．
.....
  [i:249, score:0.28179] 提案アルゴリズムでは，開始記号から最右導出を行いながらアクションチェイングラフを生成し，その中に含まれる成功パスからLR表を生成する．
  [i:251, score:0.32441] この成功パス中の要素に対応する動作は，このアクションチェイングラフから生成されるLR表に含まれるので，[MATH]は[MATH]から生成可能である．
  [i:257, score:0.38045] 注目する実行動作が状態[MATH]，先読み[MATH]における規則番号[MATH]によるreduce動作，さらにその次の動作が状態[MATH]，非終端記号[MATH]における状態[MATH]へのgoto動作の場合，[MATH]をたどる．
-----------------------------------------------------
  [subsection title : 最小性の証明]
-----------------------------------------------------
  [i:lead, score:0.04337] [MATH]が最小性を満たさないと仮定すると，次を満たす要素[MATH]が[MATH]中に少なくとも1つ存在する．
.....
  [i:262, score:0.20815] このとき，[MATH]となり，[MATH]に対応する[MATH]中の要素を[MATH]とすると，[MATH]中の任意の構文木を生成する際の実行動作列に対応する[MATH]中の成功パスは，[MATH]を含まない．
  [i:264, score:0.20439] その成功パスに対応する実行動作列は[MATH]を含み，その実行動作列で生成される構文木を[MATH]とすると，以下が成り立つ．
  [i:266, score:0.18888] 以上より，提案アルゴリズムによって作成されるLR表は最小性を満たす．

================================================================
[section type  : conclusion]
[section title : 結論と今後の課題]
================================================================
[i:270, score:0.41629] 本論文では，ルールベースの構文解析の1つである一般化LR構文解析に注目し，品詞間接続制約をLR表に組み込み，不要な動作を削除する手法を提案した．
[i:271, score:0.23338] 提案手法により，接続制約による削除を行わない場合と比較して約64%の不要動作を削除でき，従来手法と比較するとさらに約1.2%の不要動作を削減できた．
[i:272, score:0.31785] 提案手法により作成したLR表で構文解析を行った場合，解析所要時間は，接続制約を組み込まないLR表で構文解析を行った場合と比較して約52%，従来手法と比較して約2.4%短縮された．

