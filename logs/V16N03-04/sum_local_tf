================================================================
[section type  : abstract]
[section title : abstract]
================================================================
[2362] これまでにも接続制約の組み込み手法はいくつか提案されているが，従来手法では，注目する動作の前後に実行され得る動作を局所的に考慮するため，削除しきれない動作が存在する．

================================================================
[section type  : intro]
[section title : はじめに]
================================================================
[2633] 品詞間の接続制約を反映させることにより，接続制約に違反する解析結果を受理しないLR表を作成できるだけでなく，LR表のサイズ（状態数や動作（アクション）数）を縮小することもでき，その結果，構文解析の使用メモリ量や解析所要時間の削減，統計データを取り入れた場合の解析精度向上の効果の増大が期待できる．

================================================================
[section type  : proposed_method]
[section title : MSLRパーザと従来の組み込み手法]
================================================================
[2174] 本節では，従来のLR表への接続制約の組み込み手法とその問題点を述べるが，その前に，第[REF_sec:evaluation]節の評価実験で使用するMSLRパーザ[CITE]の原理について概略を説明する．
-----------------------------------------------------
  [subsection title : MSLRパーザの原理]
-----------------------------------------------------
  [2354] 文法が大規模化するにつれ，文法作成者が予期しない[MATH]規則の適用や，それによる解析結果の曖昧性の増大が起きるため，MSLRパーザの仕様として，文法に[MATH]規則は含まれないことを前提としている．
-----------------------------------------------------
  [subsection title : 接続制約と接続表]
-----------------------------------------------------
  [1827] ただし，[MATH]と[MATH]は，それぞれCFGの開始記号から展開した場合に非終端記号[MATH]の直後に出現し得る終端記号の集合，[MATH]を展開した場合に末尾に出現し得る終端記号の集合を表す．
-----------------------------------------------------
  [subsection title : 従来の接続制約組み込み手法]
-----------------------------------------------------
  [2533] LR表への品詞間接続制約の組み込み手法には，まず接続制約を考慮しないLR表を作成してから不要な動作を削除する手法[CITE]，LR表作成前と作成後の両方で不要動作を削除する手法[CITE]などがある．
-----------------------------------------------------
  [subsection title : 従来手法の問題点]
-----------------------------------------------------
  [2459] これを一般化すると，1つ先や2つ先だけでなく，[MATH]個先の動作が存在するか否かを調べる必要があり，連続する動作の存在を局所的に調べるだけでは，接続制約に違反する動作を完全に削除することはできない．

================================================================
[section type  : proposed_method]
[section title : 提案アルゴリズム]
================================================================
[2391] 図[REF_fig:algorithm]の（4）では，pass状態の要素について，その状態をendとし，そこから（2）のときとは逆に要素をたどり，check状態の要素が解析開始状態まで到達可能であることを伝えていく（状態をcheckからpassにする）．

================================================================
[section type  : experiment_result]
[section title : 実験と評価]
================================================================
[2987] 例えば，第[REF_sec:problem]節で示した動作実行列の場合，提案手法では，状態2，先読み記号[MATH]における動作がLR表中に存在しないことが分かった時点で解析を終了するが，Liの手法では，状態13，先読み記号[MATH]となるまで解析が継続する．

================================================================
[section type  : proposed_method]
[section title : 提案アルゴリズムの完全性の証明]
================================================================
[2092] 文法[MATH]は，第[REF_sec:principle]節で述べた，[MATH]規則を含まないという条件のほかに，以下の条件を満たすことを前提とする．
-----------------------------------------------------
  [subsection title : 妥当性の証明]
-----------------------------------------------------
  [1940] ここで，[MATH]を満たす構文木[MATH]に相当する最右導出の際に，提案アルゴリズムによって生成されるアクションチェインは，成功パスである．
-----------------------------------------------------
  [subsection title : 最小性の証明]
-----------------------------------------------------
  [1961] このとき，[MATH]となり，[MATH]に対応する[MATH]中の要素を[MATH]とすると，[MATH]中の任意の構文木を生成する際の実行動作列に対応する[MATH]中の成功パスは，[MATH]を含まない．

================================================================
[section type  : conclusion]
[section title : 結論と今後の課題]
================================================================
[2366] しかし，PGLRモデルによる確率計算の平滑化における問題を回避するためにも，不要な動作を削除することは有効であり，今後，コーパスベースの手法を取り入れた場合の精度向上の効果が大きくなると考えている．

