以上のような考えに従ったシステムを実験的に試作し,その性能評価を行った.
試作システムは, CとKCL(Kyoto Common Lisp)を用いて, Sun4(SPARCstation 2)の上に開発した.
評価のための実験では,完全情報辞書を,システムの最低要件である助詞・助動詞と,約100語の活用をもたない,かながき形態素だけに初期設定した.
用いたテストデータは,朝日新聞の社説6ヶ月分であり,その形態素総数は約240,000であり,異なる15,532の形態素が完全情報辞書に新たに得られた.
その結果を詳細に評価するため,さらにつぎのことを行った.
システムに手を加えて辞書再構成処理を取り除き,形態素の切出しとその形態素属性の推定だけを行い,その結果それぞれ(形態素に対する確定マーク,活用に関する除外マークも含む)をファイルに書き出すように改めた.
この改造システムに先に獲得した完全情報辞書を与えて,同じ入力テキストのもとで走らせた.
その出力ファイルの内容を,入力テキストと逐一照合して,形態素とその形態素情報が一意的に決定または推定され,しかもそれが正しいものを推定成功として数えた.
このとき,活用する品詞については,その活用形が一意的に推定できていれば(活用種類が一意的になっていなくても),推定成功とした.
結果を表[REF_tab:exp_result]に示す.
システムは, 241,573形態素中228,450形態素について正しくその形態素属性を推定した(成功率94.6%).
とくに活用品詞類に対しての成功率は90.5%であり,その他の品詞に対する成功率は95.2%であった.
日本語全般の各種確率表を算出するのに用いたのと同じデータを用いて評価を行ったのは,大量のテキストを対象としようとすると,その評価を行うのに目視によるのでは手間がかかりすぎることを恐れたためである.
朝日新聞社説については,連接確率を求める際に,目視によって確認した形態素の切出しとその形態素情報がすでにファイルの形で用意できている.
それを利用したのである.
しかし,このために,用いた各種確率表が,よく日本語全般を代表しているかどうかの評価があいまいになってしまった.
現在, UNIXのオンラインマニュアル(日本語版)を材料として比較実験を進めている.
この結果については改めて報告したい.
本システムの方式では,一般に形態素が長単位となり,複合語についての扱いが難しくなる.
そこで,漢字が連接してできる複合語は,それ自体, 1個の独立した形態素として扱った.
このため,たとえば{市街}がすでに辞書に登録されているときに出現した{長野市街}が2個の形態素に切り分けられてしまうことが起きる(上の実験では,推定に失敗したとして評価した).
{長野}が形態素として獲得できるものの, {長野市街}はついに形態素として獲得されることがない,という問題を抱え込んでしまった.
(逆に{長野市街}が先に出現し,後から{市街}が出現した場合には, {長野市街}, {長野}, {市街}のすべてが形態素として獲得できる.
)本システムでは, (切り出された)形態素をそれぞれ個別に扱い,その相互関係については属性推定に利用するだけである.
このために,複合語についての問題が生じるし,活用種類の推定が十分にできないという問題も生じる.
これらに対処するためには,獲得した形態素どうしについて先頭部分が共通であるものの相互の関連を調べる機能を追加する必要がある.
そうすることで, {動く}が獲得された時点で{動き}の活用種類を「か行五段活用」と限定することも可能になるであろう.
今回の実験システムでは,入力テキストを1回だけ走査することに終始した.
これは,上の問題を解決する対策をとってからでなければ, 2回3回と走査してみても大きな成果が見込めなかったからである.
同じ複数回の走査を行うのであれば,まず入力テキストについての各種統計をとった上で,その結果も加味した推定を行うことでテキストの分野依存性に対処することも試みてみたい.
これらは,いずれも今後の課題である.
しかしながら,実験の結果は,ほとんど辞書が整備されていない環境でも形態素とその属性を自動獲得できるシステムを提供する,という目的からすると,十分に満足のいくものであった.
とくに,これだけ簡易なシステム構成であっても,助詞・助動詞に着目することで多くの情報が自動的に獲得できることが示せた点に満足している.
