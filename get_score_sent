#!/usr/bin/perl -w
use strict;
use MeCab;
use utf8;
binmode(STDOUT, ":utf8"); 

#	1. by_score subroutine apply
# 2. calculate score from entire document.
# 3. stop word.

# open directory  './logs'
my $path_logs = './logs';
opendir my $dh, $path_logs || die "Cannot open $path_logs: $!";

# traverse inside of './logs'
for my $dir_ent (sort readdir $dh) {
	next if (-d $dir_ent) or $dir_ent eq '.' or $dir_ent eq '..';
	
	# put current directory entry into path
	my $path_src_dir = $path_logs."/".$dir_ent;
	
	# set name of input and output file.
	my $name_input = "/intro";
	my $name_output = "/sum_intro";
	
	{	
		# set	path of input file and read from input file
		my $path_src = $path_src_dir.$name_input;
		open my $fh, "<:encoding(UTF-8)", $path_src || die "Cannot open $path_src: $!";
		my $contents_src = join '',<$fh>;
		close $fh;

		#	train term frequency from '$intro_contents' and save score in '%term_score'.
		my $model = new MeCab::Model( '' );
		my $c = $model->createTagger();
		my %term_score;
		for (my $m = $c->parseToNode($contents_src); $m; $m = $m->{next}) {
			$term_score{$m->{surface}}++;
		}

		# calculate sentence score.
		my @sents_src = split /\.|\ï¼Ž/u, $contents_src;
		my %sent_score;
		for my $sent (@sents_src) {
			my $score = 0;
			for (my $m = $c->parseToNode($sent); $m; $m = $m->{next}) {
				$score += $term_score{$m->{surface}};
			}
			$sent_score{$sent} = $score;
		}

#sort by_score keys %sent_score
		# get top score sentence.
		my @sent_keys = keys %sent_score;
		my $top_sent = $sent_keys[0];
		for my $idx (1..$#sent_keys) {
			if ( $sent_score{$top_sent} < $sent_score{$sent_keys[$idx]}) {
				$top_sent = $sent_keys[$idx];
			}
		}

		
		# set output file and open output file
#		my $path_out = $path_src_dir.$name_output;
#		open my $fh_sum, ">", $path_out || die "Cannot open $path_out: $!";
#		print $fh_sum "$top_sent";
#		close $fh_sum;
		print "///////////////////////////////////////////////////////////////////////$path_src\n";
		print "$top_sent\n\n";
		print "score is : $sent_score{$top_sent}\n";
	}

}

closedir $dh;


sub by_score {
	$sent_score{$b} <=> $sent_score{$a};
}
