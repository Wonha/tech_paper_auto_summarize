#!/usr/bin/perl
#####
# usage : 
# ```
# $ ./Cab [summarization rate] [list_of_source]
# ```
#
# 1. Latex2Text
# 1. classify_section
#
#####
use strict;
use warnings;
use utf8;
use v5.10; # using state
use open IO=> ':encoding(utf8)';
binmode STDIN, ':encoding(utf8)';
binmode STDOUT, ':encoding(utf8)';
binmode STDERR, ':encoding(utf8)';

use lib qw(lib);
use Latex2Text;
use CabCommon ':all';
use Storable qw(freeze nstore);

$#ARGV >= 0 || die "Usage: ./Cab [NAME OF LATEX SOURCE FILES]\n";

##### Cab process start
my @latex_files = <@ARGV>;
print "number of input latex files: ".scalar @latex_files."\n";

my $num_done = 0;
### init log directory
### make the structure of latex file, and local tf table and score
for my $path_latex (@latex_files) {

	my $log_dir = make_log_dir($path_latex);
	my $struct = latex_to_section_structure($path_latex);

	dump_sec_file($struct, $log_dir);
	check_classified_rate($log_dir);
# &get_rel_scored_paragraph();
# &check_classified_rate();

	analysis_morpheme($struct->[0]);

### local term frequency score
	my %local_tf;
	make_local_tf_table($struct->[0], \%local_tf);
	dump_local_tf_table(\%local_tf, $log_dir);
	calc_local_tf_score($struct->[0], \%local_tf);
	dump_high_local_tf_sent($struct, $log_dir);

	dump_struct($struct, $log_dir);
#	print "$path_latex local tf process success\n";
	print $log_dir."\n";

### DEBUG
=begin DEBUG_STRUCT
	use Data::Dumper;
#	print Dumper($struct);
	for my $n (1..$#$struct) {
		print "####################################################################\n";
		print "  type: $struct->[$n]{type}\n";
		print "  section title: $struct->[$n]{title}\n";
		print "####################################################################\n";
		print $struct->[0][$_]{sent}."\n" for ($struct->[$n]{start}..$struct->[$n]{end});
		if ( defined $struct->[$n]{subsec} ) {
			for my $i (0..$#{$struct->[$n]{subsec}}) {
				print "-------------------------------------------------------\n";
				print "  subsection title : $struct->[$n]{subsec}[$i]{title}\n";
				print "-------------------------------------------------------\n";
				for my $j ($struct->[$n]{subsec}[$i]{start}..$struct->[$n]{subsec}[$i]{end}) {
					print $struct->[0][$j]{sent}."\n";
				}
			}
		}
	}
=end DEBUB_STRUCT
=cut

=begin DEBUG_LOCAL_TF_SCORE
	for my $i (0..$#{$struct->[0]}) {
		print "local tf score for sent [$i] = $struct->[0][$i]{local_tf_score}\n";
	}
=end DEBUG_LOCAL_TF_SCORE
=cut
}

### make the global tf table, tf idf table for each file, calculate tf idf score
{
	my %global_tf;
	my %doc_freq;
	my $doc_total = scalar @latex_files;
	make_global_tf_table(\%global_tf, \%doc_freq, get_log_dir($_)) for (@latex_files);
	dump_global_tf_table(\%global_tf, './logs');

	for my $path_latex (@latex_files) {
		my $log_dir = get_log_dir($path_latex);

		my %tf_idf;
		make_tf_idf_table(\%tf_idf, \%global_tf, \%doc_freq, $doc_total, $log_dir);
		dump_tf_idf_table(\%tf_idf, $log_dir);
		calc_tf_idf_score(\%tf_idf, $log_dir);
		dump_high_tf_idf_sent($log_dir);

		$num_done++;
	}
}

#	&summarize_section();
#	&combine_section();
print "number of processed files: $num_done\n";

