#!/usr/bin/perl -w
use strict;
use 5.010;
use utf8;
binmode(STDOUT, ":utf8");
binmode(STDERR, ":utf8");

# set $log_switch 1 to make log file and section files
my $log_switch = 1;

$#ARGV >= 0 || die "Usage: ./section_classify [NAME OF DOCS]\n";

# define section's heads and contents 
my ($head_intro, $body_intro, $head_relstudy, $body_relstudy ,$head_conclusion, $body_conclusion, $head_experiment, $body_experiment, $head_proposedtech, $body_proposedtech);
# define variables used in logs 
my ($log_file_name, $intro_file_name, $relstudy_file_name, $experiment_file_name, $conclusion_file_name, $proposedtech_file_name);

# set list of section devider
my (@list_intro, @list_conclusion, @list_experiment, @list_relstudy);
my ($re_intro, $re_relstudy, $re_conclusion, $re_experiment);
@list_intro = qw/はじめに/;
@list_relstudy = qw/関連研究/;
@list_experiment = qw/実験/;
@list_conclusion = qw/結論 おわりに 終わりに/;
## make regular expression form. sample: $re_* = "intro|introduction|introduce";
$re_intro = join '|', @list_intro;
$re_relstudy = join '|', @list_relstudy;
$re_experiment = join '|', @list_experiment;
$re_conclusion = join '|', @list_conclusion;


# get list of source files.
my @src_path_list = <@ARGV>;
print "input files : ".scalar @src_path_list."\n";

# start section classifing process for each source file.
for my $src_path (@src_path_list) {

	my @path_token = split /\//, $src_path;
	my $src_file_name = pop @path_token;
	
	&init_head_body;
	&init_log($src_file_name) if ($log_switch);

## open read contents from input file, then close
	my ($fh_src, $src_file_lines_origin, $src_file_lines);
	open $fh_src, '<:encoding(UTF-8)', $src_path || die "Can't open '$src_path': $!";
	$src_file_lines_origin = join '', <$fh_src>;
	$src_file_lines = $src_file_lines_origin;
	close $fh_src;

## classify section (another implementation method : split operator | use m// in list context | use s/// as condition for for loop : for(initailization; s///;): see p.177 learning perl )
### classify proposed technique
	$body_proposedtech = $src_file_lines;

### classify intro
	if( $body_proposedtech =~ s/
																^(\\section\{(?:$re_intro)[^\n]*?\})
																(.*?)
																((?:\\section\{(?:[^\n])+\})|(?:\\end\{document\}))
																/$3/sumx ) {
		$head_intro = $1;
		$body_intro = $2;
	}

### classify relative study
	if( $body_proposedtech =~ s/
																^(\\section\{(?:$re_relstudy)[^\n]*?\})
																(.*?)
																((?:\\section\{(?:[^\n])+\})|(?:\\end\{document\}))
																/$3/sumx ) {
		$head_relstudy = $1;
		$body_relstudy = $2;
	}

	
### classify experiment
	if( $body_proposedtech =~ s/
																^(\\section\{(?:$re_experiment)[^\n]*?\})
																(.*?)
																((?:\\section\{(?:[^\n])+\})|(?:\\end\{document\}))
																/$3/sumx ) {
		$head_experiment = $1;
		$body_experiment = $2;
	}

### classify conclusion
	if( $body_proposedtech =~ s/
																^(\\section\{(?:$re_conclusion)[^\n]*?\})
																(.*?)
																((?:\\section\{(?:[^\n])+\})|(?:\\end\{document\}))
																/$3/sumx ) {
		$head_conclusion = $1;
		$body_conclusion = $2;
}


### make log file and section file
	&print_log($src_file_name) if ($log_switch);
	&print_section if ($log_switch);
}




# subroutines
sub init_head_body {
	$head_intro = ""; $body_intro = ""; 
	$head_relstudy = ""; $body_relstudy = "";
	$head_conclusion = ""; $body_conclusion = "";
	$head_experiment = ""; $body_experiment = "";
	$head_proposedtech = ""; $body_proposedtech = "";
}

# subroutines for test 
sub init_log{
	my $src_file_name = $_[0];
	
## make directory by current file name
	my $cur_log_path = './logs/'.$src_file_name.'/';
	if (-e $cur_log_path) {
		unlink glob "${cur_log_path}* ${cur_log_path}.*";
		rmdir $cur_log_path;
	}
	mkdir $cur_log_path, 0755 || warn "Cannot make log directory: $!";

	$log_file_name = $cur_log_path."log_section_classify";
	$intro_file_name = $cur_log_path."intro";
	$relstudy_file_name = $cur_log_path."relstudy";
	$experiment_file_name = $cur_log_path."experiment";
	$conclusion_file_name = $cur_log_path."conclusion";
	$proposedtech_file_name = $cur_log_path."proposedtech";
	
	open STDERR, '>:encoding(UTF-8)', $log_file_name || die "can not reopen STDERR: $!";
}

sub print_log{
	my $src_file_name = $_[0];
	
	printf STDERR "intro%16s%5s\n", 'found : ', $head_intro if ($log_switch);# change conditional ex as $head_intro nq ""
	printf STDERR "relstudy%13s%2s\n", 'found : ', $head_relstudy if ($log_switch);
	printf STDERR "experiment%11s%s\n", 'found : ', $head_experiment if ($log_switch);
	printf STDERR "conclusion%11s%s\n", 'found : ', $head_conclusion if ($log_switch);
	## print proposed technique section title to log file
	for ( $body_proposedtech =~ /^\\section\{[^\n]*?\}/umg ) {
		printf STDERR "proposedtech%9s%s\n", 'found : ', $_;
	}
	## print fgrep result to log file
	print STDERR "\nfgrep searched\n"; 
	system "fgrep \\\\section $src_file_name >> $log_file_name";

}

sub print_section {
	my ($fh_intro, $fh_relstudy, $fh_experiment, $fh_conclusion, $fh_proposedtech);
	
	open $fh_intro, '>:encoding(UTF-8)', $intro_file_name || die "can not open ; $!"; # add if statement $head_intro nq ""
	open $fh_relstudy, '>:encoding(UTF-8)', $relstudy_file_name || die "can not open ; $!";
	open $fh_experiment, '>:encoding(UTF-8)', $experiment_file_name || die "can not open : $!";
	open $fh_conclusion, '>:encoding(UTF-8)', $conclusion_file_name || die "can not open : $!";
	open $fh_proposedtech, '>:encoding(UTF-8)', $proposedtech_file_name || die "can not open : $!";

	print $fh_intro $head_intro.$body_intro;
	print $fh_relstudy $head_relstudy.$body_relstudy;
	print $fh_experiment $head_experiment.$body_experiment;
	print $fh_conclusion $head_conclusion.$body_conclusion;
	print $fh_proposedtech $body_proposedtech;

	close $fh_intro;
	close $fh_relstudy;
	close $fh_experiment;
	close $fh_conclusion;
	close $fh_proposedtech;
	

}	
